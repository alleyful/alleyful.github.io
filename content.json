{"pages":[{"title":"About me","text":"Ju Young Kim‘Alley’라고 불리는게 더 익숙한 Front-End Developer 입니다. Experience스냅스 Front-End Developer 스냅스 및 오프린트미의 서비스에 관련된 Front-End 개발에 참여하고 있습니다. 스냅스 - PC, MOBILE, APP, GLOBAL(JPN) 오프린트미 - PC, MOBILE, APP React, Redux, Sass, Gulp, Webpack, GitLap","link":"/about/index.html"}],"posts":[{"title":"프로그래머스 - 완주하지 못한 선수","text":"문제 설명수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요. 제한사항 마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다. completion의 길이는 participant의 길이보다 1 작습니다. 참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다. 참가자 중에는 동명이인이 있을 수 있습니다. 입출력 예 participant completion return [leo, kiki, eden] [eden, kiki] leo [marina, josipa, nikola, vinko, filipa] [josipa, filipa, marina, nikola] vinko [stanko, ana, mislav] [mislav, stanko, mislav, ana] mislav 입출력 예 설명 예제 #1 leo는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다. 예제 #2 vinko는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다. 예제 #3 mislav는 참여자 명단에는 두 명이 있지만, 완주자 명단에는 한 명밖에 없기 때문에 한명은 완주하지 못했습니다. Solution12345678910function solution(participant, completion) { participant.sort(); completion.sort(); return participant.reduce((target, name, index) =&gt; { name !== completion[index] &amp;&amp; target.push(name); return target; }, [])[0];}","link":"/2019/06/10/algorithm/programmers/level1-01/"},{"title":"프로그래머스 - 모의고사","text":"문제 설명수포자는 수학을 포기한 사람의 준말입니다. 수포자 삼인방은 모의고사에 수학 문제를 전부 찍으려 합니다.수포자는 1번 문제부터 마지막 문제까지 다음과 같이 찍습니다. 1번 수포자가 찍는 방식: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, …2번 수포자가 찍는 방식: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, 3, 2, 4, 2, 5, …3번 수포자가 찍는 방식: 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, … 1번 문제부터 마지막 문제까지의 정답이 순서대로 들은 배열 answers가 주어졌을 때, 가장 많은 문제를 맞힌 사람이 누구인지 배열에 담아 return 하도록 solution 함수를 작성해주세요. 제한 조건시험은 최대 10,000 문제로 구성되어있습니다.문제의 정답은 1, 2, 3, 4, 5중 하나입니다.가장 높은 점수를 받은 사람이 여럿일 경우, return하는 값을 오름차순 정렬해주세요. 입출력 예 answers return [1,2,3,4,5] [1] [1,3,2,4,2] [1,2,3] 입출력 예 설명 입출력 예 #1 수포자 1은 모든 문제를 맞혔습니다. 수포자 2는 모든 문제를 틀렸습니다. 수포자 3은 모든 문제를 틀렸습니다. 따라서 가장 문제를 많이 맞힌 사람은 수포자 1입니다. 입출력 예 #2 모든 사람이 2문제씩을 맞췄습니다. Solution123456789101112131415161718192021222324function solution(answers) { const pattens = [ [1, 2, 3, 4, 5], [2, 1, 2, 3, 2, 4, 2, 5], [3, 3, 1, 1, 2, 2, 4, 4, 5, 5] ]; const results = answers.reduce((target, answer, index) =&gt; { pattens.map((patten, i) =&gt; { (patten[0] === answer) &amp;&amp; target[i]++; patten.push(patten.shift()); }); return target; }, new Array(pattens.length).fill(0)); let topClass = Math.max(...results); return results.reduce((target, result, index) =&gt; { (result === topClass) &amp;&amp; target.push(index + 1); return target; }, [])}","link":"/2019/06/11/algorithm/programmers/level1-02/"},{"title":"프로그래머스 - K번째수","text":"문제 설명배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다. 예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면 array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다. 1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다. 2에서 나온 배열의 3번째 숫자는 5입니다.배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요. 제한사항 array의 길이는 1 이상 100 이하입니다. array의 각 원소는 1 이상 100 이하입니다. commands의 길이는 1 이상 50 이하입니다. commands의 각 원소는 길이가 3입니다. 입출력 예 array commands return [1, 5, 2, 6, 3, 7, 4] [[2, 5, 3], [4, 4, 1], [1, 7, 3]] [5, 6, 3] 입출력 예 설명 [1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다. [1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다. [1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다. Solution1234567function solution(array, commands) { return commands.reduce((target, commans) =&gt; { target.push((array.slice(commans[0]-1, commans[1]).sort((a, b) =&gt; a - b))[commans[2]-1]); return target; }, [])}","link":"/2019/06/12/algorithm/programmers/level1-03/"},{"title":"프로그래머스 - 체육복","text":"문제 설명점심시간에 도둑이 들어, 일부 학생이 체육복을 도난당했습니다.다행히 여벌 체육복이 있는 학생이 이들에게 체육복을 빌려주려 합니다.학생들의 번호는 체격 순으로 매겨져 있어, 바로 앞번호의 학생이나 바로 뒷번호의 학생에게만 체육복을 빌려줄 수 있습니다.예를 들어, 4번 학생은 3번 학생이나 5번 학생에게만 체육복을 빌려줄 수 있습니다.체육복이 없으면 수업을 들을 수 없기 때문에 체육복을 적절히 빌려 최대한 많은 학생이 체육수업을 들어야 합니다. 전체 학생의 수 n, 체육복을 도난당한 학생들의 번호가 담긴 배열 lost, 여벌의 체육복을 가져온 학생들의 번호가 담긴 배열 reserve가 매개변수로 주어질 때, 체육수업을 들을 수 있는 학생의 최댓값을 return 하도록 solution 함수를 작성해주세요. 제한사항 전체 학생의 수는 2명 이상 30명 이하입니다. 체육복을 도난당한 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다. 여벌의 체육복을 가져온 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다. 여벌 체육복이 있는 학생만 다른 학생에게 체육복을 빌려줄 수 있습니다. 여벌 체육복을 가져온 학생이 체육복을 도난당했을 수 있습니다. 이때 이 학생은 체육복을 하나만 도난당했다고 가정하며, 남은 체육복이 하나이기에 다른 학생에게는 체육복을 빌려줄 수 없습니다. 입출력 예 n lost reserve return 5 [2, 4] [1, 3, 5] 5 5 [2, 4] [3] 4 3 [3] [1] 2 입출력 예 설명 예제 #1 1번 학생이 2번 학생에게 체육복을 빌려주고, 3번 학생이나 5번 학생이 4번 학생에게 체육복을 빌려주면 학생 5명이 체육수업을 들을 수 있습니다. 예제 #2 3번 학생이 2번 학생이나 4번 학생에게 체육복을 빌려주면 학생 4명이 체육수업을 들을 수 있습니다. Solution123456789101112131415161718192021function solution(n, lost, reserve) { let reserveList = reserve; let reserveLostIndex = -1; let lostList = lost.reduce((target, item) =&gt; { reserveLostIndex = reserveList.findIndex(reser =&gt; item === reser); reserveLostIndex &gt;= 0 ? reserveList.splice(reserveLostIndex, 1) : target.push(item); return target; }, []); return n - lostList.reduce((target, item) =&gt; { let index = reserveList.findIndex(reser =&gt; reser === item - 1 || reser === item + 1); index &gt;= 0 &amp;&amp; ( reserveList.splice(index, 1), target-- ); return target; }, lostList.length);}","link":"/2019/06/13/algorithm/programmers/level1-04/"},{"title":"프로그래머스 - 2016년","text":"문제 설명2016년 1월 1일은 금요일입니다. 2016년 a월 b일은 무슨 요일일까요?두 수 a ,b를 입력받아 2016년 a월 b일이 무슨 요일인지 리턴하는 함수, solution을 완성하세요.요일의 이름은 일요일부터 토요일까지 각각 1SUN,MON,TUE,WED,THU,FRI,SAT 입니다. 예를 들어 a=5, b=24라면 5월 24일은 화요일이므로 문자열 TUE를 반환하세요. 제한 조건 2016년은 윤년입니다. 2016년 a월 b일은 실제로 있는 날입니다. (13월 26일이나 2월 45일같은 날짜는 주어지지 않습니다) 입출력 예 a b result 5 24 TUE Solution 1123456function solution(a, b) { const date = `2016/${a}/${b}`; const weekName = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"]; const week = new Date(date); return weekName[week.getDay()];} Solution 2123function solution(a, b) { return ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'][new Date(2016, a - 1, b).getDay()];}","link":"/2019/06/13/algorithm/programmers/level1-05/"},{"title":"프로그래머스 - 가운데 글자 가져오기","text":"문제 설명단어 s의 가운데 글자를 반환하는 함수, solution을 만들어 보세요.단어의 길이가 짝수라면 가운데 두글자를 반환하면 됩니다. 제한사항s는 길이가 1 이상, 100이하인 스트링입니다. 입출력 예 s return “abcde” “c” “qwer” “we” Solution 112345function solution(s) { let string = [...s]; const leng = string.length; return (leng % 2 === 0 ? string.splice(leng/2 - 1, 2) : string.splice(leng/2, 1)).join('');} Solution 2123function solution(s) { return s.substr(Math.ceil(s.length / 2) - 1, s.length % 2 === 0 ? 2 : 1);}","link":"/2019/06/13/algorithm/programmers/level1-06/"},{"title":"프로그래머스 - 같은 숫자는 싫어","text":"문제 설명배열 arr가 주어집니다. 배열 arr의 각 원소는 숫자 0부터 9까지로 이루어져 있습니다.이때, 배열 arr에서 연속적으로 나타나는 숫자는 하나만 남기고 전부 제거하려고 합니다.배열 arr에서 제거 되고 남은 수들을 return 하는 solution 함수를 완성해 주세요.단, 제거된 후 남은 수들을 반환할 때는 배열 arr의 원소들의 순서를 유지해야 합니다.예를들면 arr = [1, 1, 3, 3, 0, 1, 1] 이면 [1, 3, 0, 1] 을 return 합니다. arr = [4, 4, 4, 3, 3] 이면 [4, 3] 을 return 합니다. 배열 arr에서 연속적으로 나타나는 숫자는 제거하고 남은 수들을 return 하는 solution 함수를 완성해 주세요. 제한사항 배열 arr의 크기 : 1,000,000 이하의 자연수 배열 arr의 원소의 크기 : 0보다 크거나 같고 9보다 작거나 같은 정수 입출력 예 arr answer [1,1,3,3,0,1,1] [1,3,0,1] [4,4,4,3,3] [4,3] 입출력 예 설명입출력 예 #1,2문제의 예시와 같습니다. Solution 11234567function solution(arr){ return arr.reduce((target, item, index) =&gt; { (index === 0 || target[target.length-1] !== item) &amp;&amp; target.push(item); return target; }, []);} Solution 2123function solution(arr){ return arr.filter((v, i) =&gt; v !== arr[i + 1]);}","link":"/2019/06/13/algorithm/programmers/level1-07/"},{"title":"프로그래머스 - 나누어 떨어지는 숫자 배열","text":"문제 설명array의 각 element 중 divisor로 나누어 떨어지는 값을 오름차순으로 정렬한 배열을 반환하는 함수, solution을 작성해주세요.divisor로 나누어 떨어지는 element가 하나도 없다면 배열에 -1을 담아 반환하세요. 제한사항arr은 자연수를 담은 배열입니다.정수 i, j에 대해 i ≠ j 이면 arr[i] ≠ arr[j] 입니다.divisor는 자연수입니다.array는 길이 1 이상인 배열입니다. 입출력 예 arr divisor return [5, 9, 7, 10] 5 [5, 10] [2, 36, 1, 3] 1 [1, 2, 3, 36] [3,2,6] 10 [-1] 입출력 예 설명 입출력 예#1 arr의 원소 중 5로 나누어 떨어지는 원소는 5와 10입니다. 따라서 [5, 10]을 리턴합니다. 입출력 예#2 arr의 모든 원소는 1으로 나누어 떨어집니다. 원소를 오름차순으로 정렬해 [1, 2, 3, 36]을 리턴합니다. 입출력 예#3 3, 2, 6은 10으로 나누어 떨어지지 않습니다. 나누어 떨어지는 원소가 없으므로 [-1]을 리턴합니다. Solution123456789function solution(arr, divisor) { const result = arr.reduce((target, item) =&gt; { (item % divisor === 0) &amp;&amp; target.push(item); return target; }, []); return result.length &gt; 0 ? result.sort((a, b) =&gt; a - b) : [-1];}","link":"/2019/06/14/algorithm/programmers/level1-08/"},{"title":"프로그래머스 - 두 정수 사이의 합","text":"문제 설명두 정수 a, b가 주어졌을 때 a와 b 사이에 속한 모든 정수의 합을 리턴하는 함수, solution을 완성하세요.예를 들어 a = 3, b = 5인 경우, 3 + 4 + 5 = 12이므로 12를 리턴합니다. 제한 조건a와 b가 같은 경우는 둘 중 아무 수나 리턴하세요.a와 b는 -10,000,000 이상 10,000,000 이하인 정수입니다.a와 b의 대소관계는 정해져있지 않습니다. 입출력 예 a b return 3 5 12 3 3 3 5 3 12 Solution 112345678function solution(a, b) { const array = [a, b].sort((a, b) =&gt; a - b); const bigNum = array[1]; const smallNum = array[0]; const baseNum = smallNum - 1; const length = bigNum - smallNum + 1; return bigNum === smallNum ? bigNum : (baseNum * length) + ((1 + length) * length / 2);} Solution 2123function solution(a, b) { return (a + b) * ((a &gt; b ? a - b : b - a) + 1) / 2;}","link":"/2019/06/14/algorithm/programmers/level1-09/"},{"title":"프로그래머스 - 문자열 내 마음대로 정렬하기","text":"문제 설명문자열로 구성된 리스트 strings와, 정수 n이 주어졌을 때, 각 문자열의 인덱스 n번째 글자를 기준으로 오름차순 정렬하려 합니다.예를 들어 strings가 [sun, bed, car]이고 n이 1이면 각 단어의 인덱스 1의 문자 u, e, a로 strings를 정렬합니다. 제한 조건strings는 길이 1 이상, 50이하인 배열입니다.strings의 원소는 소문자 알파벳으로 이루어져 있습니다.strings의 원소는 길이 1 이상, 100이하인 문자열입니다.모든 strings의 원소의 길이는 n보다 큽니다.인덱스 1의 문자가 같은 문자열이 여럿 일 경우, 사전순으로 앞선 문자열이 앞쪽에 위치합니다. 입출력 예 strings n return [sun, bed, car] 1 [car, bed, sun] [abce, abcd, cdx] 2 [abcd, abce, cdx] 입출력 예 설명 입출력 예 1 sun, bed, car의 1번째 인덱스 값은 각각 u, e, a 입니다. 이를 기준으로 strings를 정렬하면 [car, bed, sun] 입니다. 입출력 예 2 abce와 abcd, cdx의 2번째 인덱스 값은 c, c, x입니다. 따라서 정렬 후에는 cdx가 가장 뒤에 위치합니다.abce와 abcd는 사전순으로 정렬하면 abcd가 우선하므로, 답은 [abcd, abce, cdx] 입니다. Solution 1123function solution(strings, n) { return strings.sort((p, c) =&gt; p[n] === c[n] ? p.localeCompare(c) : p[n].localeCompare(c[n]))} Solution 21234function solution(strings, n) { return strings.sort((p, c) =&gt; p[n] === c[n] ? (p &lt; c ? -1 : (p &gt; c ? 1 : 0)) : (p[n] &lt; c[n] ? -1 : (p[n] &gt; c[n] ? 1 : 0)))}","link":"/2019/06/14/algorithm/programmers/level1-10/"},{"title":"프로그래머스 - 문자열 내 p와 y의 개수","text":"문제 설명대문자와 소문자가 섞여있는 문자열 s가 주어집니다.s에 ‘p’의 개수와 ‘y’의 개수를 비교해 같으면 True, 다르면 False를 return 하는 solution를 완성하세요.‘p’, ‘y’ 모두 하나도 없는 경우는 항상 True를 리턴합니다. 단, 개수를 비교할 때 대문자와 소문자는 구별하지 않습니다.예를들어 s가 pPoooyY면 true를 return하고 Pyy라면 false를 return합니다. 제한사항 문자열 s의 길이 : 50 이하의 자연수 문자열 s는 알파벳으로만 이루어져 있습니다. 입출력 예 s answer pPoooyY true Pyy false 입출력 예 설명 입출력 예 #1 ‘p’의 개수 2개, ‘y’의 개수 2개로 같으므로 true를 return 합니다. 입출력 예 #2 ‘p’의 개수 1개, ‘y’의 개수 2개로 다르므로 false를 return 합니다. Solution 1123456function solution(s){ let pList = [...s].filter(v =&gt; v === 'p' || v === 'P'); let yList = [...s].filter(v =&gt; v === 'y' || v === 'Y'); return pList.length === yList.length;} Solution 2123function solution(s){ return (s.match(/p/gi) || []).length === (s.match(/y/gi) || []).length;}","link":"/2019/06/17/algorithm/programmers/level1-11/"},{"title":"프로그래머스 - 문자열 내림차순으로 배치하기","text":"문제 설명문자열 s에 나타나는 문자를 큰것부터 작은 순으로 정렬해 새로운 문자열을 리턴하는 함수, solution을 완성해주세요.s는 영문 대소문자로만 구성되어 있으며, 대문자는 소문자보다 작은 것으로 간주합니다. 제한 사항str은 길이 1 이상인 문자열입니다. 입출력 예 s return “Zbcdefg” “gfedcbZ” Solution123function solution(s) { return [...s].sort().reverse().join('')}","link":"/2019/06/17/algorithm/programmers/level1-12/"},{"title":"프로그래머스 - 문자열 다루기 기본","text":"문제 설명문자열 s의 길이가 4 혹은 6이고, 숫자로만 구성돼있는지 확인해주는 함수, solution을 완성하세요. 예를 들어 s가 a234이면 False를 리턴하고 1234라면 True를 리턴하면 됩니다. 제한 사항s는 길이 1 이상, 길이 8 이하인 문자열입니다. 입출력 예 s return “a234” false “1234” true Solution 1123function solution(s) { return !(s.match(/\\D/g)) &amp;&amp; (s.length === 4 || s.length === 6)} Solution 2123function solution(s) { return /^\\d{6}$|^\\d{4}$/.test(s);}","link":"/2019/06/17/algorithm/programmers/level1-13/"},{"title":"프로그래머스 - 문자열을 정수로 바꾸기","text":"문제 설명문자열 s를 숫자로 변환한 결과를 반환하는 함수, solution을 완성하세요. 제한 조건 s의 길이는 1 이상 5이하입니다. s의 맨앞에는 부호(+, -)가 올 수 있습니다. s는 부호와 숫자로만 이루어져있습니다. s는 0으로 시작하지 않습니다. 입출력 예예를들어 str이 1234이면 1234를 반환하고, -1234이면 -1234를 반환하면 됩니다.str은 부호(+,-)와 숫자로만 구성되어 있고, 잘못된 값이 입력되는 경우는 없습니다. Solution 1123function solution(s) { return Number(s);} Solution 2123function solution(s) { return +s;}","link":"/2019/06/18/algorithm/programmers/level1-14/"},{"title":"프로그래머스 - 시저 암호","text":"문제 설명어떤 문장의 각 알파벳을 일정한 거리만큼 밀어서 다른 알파벳으로 바꾸는 암호화 방식을 시저 암호라고 합니다.예를 들어 AB는 1만큼 밀면 BC가 되고, 3만큼 밀면 DE가 됩니다.z는 1만큼 밀면 a가 됩니다.문자열 s와 거리 n을 입력받아 s를 n만큼 민 암호문을 만드는 함수, solution을 완성해 보세요. 제한 조건 공백은 아무리 밀어도 공백입니다. s는 알파벳 소문자, 대문자, 공백으로만 이루어져 있습니다. s의 길이는 8000이하입니다. n은 1 이상, 25이하인 자연수입니다. 입출력 예 s n result “AB” 1 “BC” “z” 1 “a” “a B z” 4 “e F d” Solution 1123456789101112131415function solution(s, n) { //ASCII : A~Z(65~90) , a~z(97~122) return [...s].reduce((target, string, index) =&gt; { let asciiCode = s.charCodeAt(index) let changedCode = asciiCode + n let sCode = asciiCode &lt; 65 ? asciiCode : ( (asciiCode &gt;= 65 &amp;&amp; asciiCode &lt;= 90) ? (changedCode &gt; 90 ? changedCode - 26 : changedCode) : (changedCode &gt; 122 ? changedCode - 26 : changedCode) ) target.push(String.fromCharCode(sCode)) return target; }, []).join('')} Solution 212345678910111213function solution(s, n) { return (s || '').split('').reduce((target,item,index) =&gt; { target += ( item == ' ' ? ' ' : String.fromCharCode((s.charCodeAt(index)&gt;90) ? (s.charCodeAt(index)+n-97)%26+97 : (s.charCodeAt(index)+n-65)%26+65 ) ); return target; }, '')}","link":"/2019/06/18/algorithm/programmers/level1-15/"},{"title":"프로그래머스 - 약수의 합","text":"문제 설명자연수 n을 입력받아 n의 약수를 모두 더한 값을 리턴하는 함수, solution을 완성해주세요. 제한 사항n은 0 이상 3000이하인 자연수입니다. 입출력 예 n return 12 28 5 6 입출력 예 설명 입출력 예 #1 12의 약수는 1, 2, 3, 4, 6, 12입니다. 이를 모두 더하면 28입니다. 입출력 예 #2 5의 약수는 1, 5입니다. 이를 모두 더하면 6입니다. Solution12345678function solution(n) { return new Array(Math.floor(Math.sqrt(n))).fill(0).reduce((target, arr, index) =&gt; { let number = index + 1; let numberLast = n / number; n % number === 0 &amp;&amp; (target = target + (numberLast === number ? number : number + numberLast)) return target; }, 0)}","link":"/2019/06/19/algorithm/programmers/level1-16/"},{"title":"프로그래머스 - 이상한 문자 만들기","text":"문제 설명문자열 s는 한 개 이상의 단어로 구성되어 있습니다.각 단어는 하나 이상의 공백문자로 구분되어 있습니다.각 단어의 짝수번째 알파벳은 대문자로, 홀수번째 알파벳은 소문자로 바꾼 문자열을 리턴하는 함수, solution을 완성하세요. 제한 사항문자열 전체의 짝/홀수 인덱스가 아니라, 단어(공백을 기준)별로 짝/홀수 인덱스를 판단해야합니다.첫 번째 글자는 0번째 인덱스로 보아 짝수번째 알파벳으로 처리해야 합니다. 입출력 예 s return “try hello world” “TrY HeLlO WoRlD” 입출력 예 설명 “try hello world”는 세 단어 “try”, “hello”, “world”로 구성되어 있습니다. 각 단어의 짝수번째 문자를 대문자로, 홀수번째 문자를 소문자로 바꾸면 “TrY”, “HeLlO”, “WoRlD”입니다. 따라서 “TrY HeLlO WoRlD” 를 리턴합니다. Solution12345678910111213function solution(s) { return s.split(' ').reduce((target, string) =&gt; { target.push( [...string].reduce((target, item, index) =&gt; { target.push(index % 2 === 0 ? item.toUpperCase() : item.toLowerCase()) return target; }, []).join('') ); return target; }, []).join(' ')}","link":"/2019/06/20/algorithm/programmers/level1-17/"},{"title":"프로그래머스 - 자릿수 더하기","text":"문제 설명자연수 N이 주어지면, N의 각 자릿수의 합을 구해서 return 하는 solution 함수를 만들어 주세요.예를들어 N = 123이면 1 + 2 + 3 = 6을 return 하면 됩니다. 제한 사항N의 범위 : 100,000,000 이하의 자연수 입출력 예 N answer 123 6 987 24 입출력 예 설명 입출력 예 #1 문제의 예시와 같습니다. 입출력 예 #2 9 + 8 + 7 = 24이므로 24를 return 하면 됩니다. Solution123456function solution(n){ return [...n.toString()].reduce((target, item) =&gt; { return target += Number(item); }, 0);}","link":"/2019/06/21/algorithm/programmers/level1-18/"},{"title":"프로그래머스 - 자연수 뒤집어 배열로 만들기","text":"문제 설명자연수 n을 뒤집어 각 자리 숫자를 원소로 가지는 배열 형태로 리턴해주세요.예를들어 n이 12345이면 [5,4,3,2,1]을 리턴합니다. 제한 조건n은 10,000,000,000이하인 자연수입니다. 입출력 예 n return 12345 [5,4,3,2,1] 123function solution(n) { return [...n.toString()].reverse().map(v =&gt; Number(v))}","link":"/2019/06/21/algorithm/programmers/level1-19/"},{"title":"프로그래머스 - 정수 내림차순으로 배치하기","text":"문제 설명함수 solution은 정수 n을 매개변수로 입력받습니다.n의 각 자릿수를 큰것부터 작은 순으로 정렬한 새로운 정수를 리턴해주세요.예를들어 n이 118372면 873211을 리턴하면 됩니다. 제한 조건n은 1이상 8000000000 이하인 자연수입니다. 입출력 예 n return 118372 873211 Solution123function solution(n) { return Number([...String(n)].sort((a, b) =&gt; b - a).join(''))}","link":"/2019/06/22/algorithm/programmers/level1-20/"},{"title":"프로그래머스 - 정수 제곱근 판별","text":"문제 설명임의의 정수 n에 대해, n이 어떤 정수 x의 제곱인지 아닌지 판단하려 합니다.n이 정수 x의 제곱이라면 x+1의 제곱을 리턴하고, n이 정수 x의 제곱이 아니라면 -1을 리턴하는 함수를 완성하세요. 제한 사항n은 1이상, 50000000000000 이하인 정수입니다. 입출력 예 n return 121 144 3 -1 입출력 예 설명 입출력 예#1 121은 정수 11의 제곱이므로, (11+1)를 제곱한 144를 리턴합니다. 입출력 예#2 3은 정수의 제곱이 아니므로, -1을 리턴합니다. Solution 1123function solution(n) { return Number.isInteger(Math.sqrt(n)) ? Math.pow((Math.sqrt(n) + 1), 2) : -1;} Solution 2123function solution(n) { return Number.isInteger(Math.sqrt(n)) ? (Math.sqrt(n) + 1) ** 2 : -1;}","link":"/2019/06/22/algorithm/programmers/level1-21/"},{"title":"프로그래머스 - 제일 작은 수 제거하기","text":"문제 설명정수를 저장한 배열, arr 에서 가장 작은 수를 제거한 배열을 리턴하는 함수, solution을 완성해주세요.단, 리턴하려는 배열이 빈 배열인 경우엔 배열에 -1을 채워 리턴하세요. 예를들어 arr이 [4,3,2,1]인 경우는 [4,3,2]를 리턴 하고, [10]면 [-1]을 리턴 합니다. 제한 조건arr은 길이 1 이상인 배열입니다.인덱스 i, j에 대해 i ≠ j이면 arr[i] ≠ arr[j] 입니다. 입출력 예 arr return [4,3,2,1] [4,3,2] [10] [-1] Solution 112345function solution(arr) { arr.splice(arr.findIndex(v =&gt; v === Math.min(...arr)), 1); arr.length &lt; 1 &amp;&amp; arr.push(-1); return arr} Solution 2123456789function solution(arr) { let min = Math.min(...arr); return arr.reduce((target, number, index) =&gt; { !(min === number) &amp;&amp; target.push(number); target.length &lt;= 0 &amp;&amp; target.push(-1); return target }, [])}","link":"/2019/06/22/algorithm/programmers/level1-22/"},{"title":"프로그래머스 - 짝수와 홀수","text":"문제 설명정수 num이 짝수일 경우 Even을 반환하고 홀수인 경우 Odd를 반환하는 함수, solution을 완성해주세요. 제한 조건num은 int 범위의 정수입니다.0은 짝수입니다. 입출력 예 num return 3 Odd 4 Even Solution123function solution(num) { return num % 2 === 0 ? \"Even\" : \"Odd\";}","link":"/2019/06/22/algorithm/programmers/level1-23/"},{"title":"프로그래머스 - 최대공약수와 최소공배수","text":"문제 설명두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수, solution을 완성해 보세요.배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다.예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다. 제한 사항두 수는 1이상 1000000이하의 자연수입니다. 입출력 예 n m return 3 12 [3, 12] 2 5 [1, 10] 입출력 예 설명 입출력 예 #1 위의 설명과 같습니다. 입출력 예 #2 자연수 2와 5의 최대공약수는 1, 최소공배수는 10이므로 [1, 10]을 리턴해야 합니다. Solution 112345function solution(n, m) { const gcd = (a, b) =&gt; a % b === 0 ? b : gcd(b, a % b) ; const gcdValue = n &gt; m ? gcd(n, m) : gcd(m , n); return [ gcdValue, ( n * m ) / gcdValue ];} Solution 212345678910function solution(n, m) { let t = 0, first = n, second = m; while(second){ t = first % second; first = second; second = t; } return [first, (n * m) / first];}","link":"/2019/06/22/algorithm/programmers/level1-24/"},{"title":"프로그래머스 - 콜라츠 추측","text":"문제 설명1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다.작업은 다음과 같습니다. 12341-1. 입력된 수가 짝수라면 2로 나눕니다. 1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다.2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다.예를 들어, 입력된 수가 6이라면 6→3→10→5→16→8→4→2→1 이 되어 총 8번 만에 1이 됩니다. 위 작업을 몇 번이나 반복해야하는지 반환하는 함수, solution을 완성해 주세요. 단, 작업을 500번을 반복해도 1이 되지 않는다면 –1을 반환해 주세요. 제한 사항입력된 수, num은 1 이상 8000000 미만인 정수입니다. 입출력 예 n result 6 8 16 4 626331 -1 입출력 예 설명 입출력 예 #1 문제의 설명과 같습니다. 입출력 예 #2 16 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1 이되어 총 4번만에 1이 됩니다. 입출력 예 #3 626331은 500번을 시도해도 1이 되지 못하므로 -1을 리턴해야합니다. Solution123function solution(num, count=0) { return count &lt; 500 ? (num === 1 ? count : solution((num % 2 === 0 ? num / 2 : num * 3 + 1), ++count)) : -1}","link":"/2019/06/22/algorithm/programmers/level1-25/"},{"title":"프로그래머스 - 평균 구하기","text":"문제 설명정수를 담고 있는 배열 arr의 평균값을 return하는 함수, solution을 완성해보세요. 제한사항arr은 길이 1 이상, 100 이하인 배열입니다.arr의 원소는 -10,000 이상 10,000 이하인 정수입니다. 입출력 예 arr return [1,2,3,4] 2.5 [5,5] 5 Solution12345function solution(arr) { return arr.reduce((target, number) =&gt; { return target + number }, 0) / arr.length}","link":"/2019/06/22/algorithm/programmers/level1-26/"},{"title":"프로그래머스 - 하샤드 수","text":"문제 설명양의 정수 x가 하샤드 수이려면 x의 자릿수의 합으로 x가 나누어져야 합니다.예를 들어 18의 자릿수 합은 1+8=9이고, 18은 9로 나누어 떨어지므로 18은 하샤드 수입니다.자연수 x를 입력받아 x가 하샤드 수인지 아닌지 검사하는 함수, solution을 완성해주세요. 제한 조건x는 1 이상, 10000 이하인 정수입니다. 입출력 예 arr return 10 true 12 true 11 false 13 false 입출력 예 설명 입출력 예 #1 10의 모든 자릿수의 합은 1입니다. 10은 1로 나누어 떨어지므로 10은 하샤드 수입니다. 입출력 예 #2 12의 모든 자릿수의 합은 3입니다. 12는 3으로 나누어 떨어지므로 12는 하샤드 수입니다. 입출력 예 #3 11의 모든 자릿수의 합은 2입니다. 11은 2로 나누어 떨어지지 않으므로 11는 하샤드 수가 아닙니다. 입출력 예 #4 13의 모든 자릿수의 합은 4입니다. 13은 4로 나누어 떨어지지 않으므로 13은 하샤드 수가 아닙니다. Solution12345function solution(x) { return x % ([...String(x)].reduce((target, number) =&gt; { return target + Number(number) }, 0)) === 0;}","link":"/2019/06/22/algorithm/programmers/level1-27/"},{"title":"프로그래머스 - 핸드폰 번호 가리기","text":"문제 설명프로그래머스 모바일은 개인정보 보호를 위해 고지서를 보낼 때 고객들의 전화번호의 일부를 가립니다.전화번호가 문자열 phone_number로 주어졌을 때, 전화번호의 뒷 4자리를 제외한 나머지 숫자를 전부 *으로 가린 문자열을 리턴하는 함수, solution을 완성해주세요. 제한 조건s는 길이 4 이상, 20이하인 문자열입니다. 입출력 예 phone_number return “01033334444” “***4444” “027778888” “*****8888” 123function solution(phone_number) { return phone_number.replace(/\\d(?=\\d{4})/g, \"*\");}","link":"/2019/06/22/algorithm/programmers/level1-28/"},{"title":"프로그래머스 - 행렬의 덧셈","text":"문제 설명행렬의 덧셈은 행과 열의 크기가 같은 두 행렬의 같은 행, 같은 열의 값을 서로 더한 결과가 됩니다.2개의 행렬 arr1과 arr2를 입력받아, 행렬 덧셈의 결과를 반환하는 함수, solution을 완성해주세요. 제한 조건행렬 arr1, arr2의 행과 열의 길이는 500을 넘지 않습니다. 입출력 예 arr1 arr2 return [[1,2],[2,3]] [[3,4],[5,6]] [[4,6],[7,9]] [[1],[2]] [[3],[4]] [[4],[6]] Solution 1123function solution(arr1, arr2) { return arr1.map((a,i) =&gt; a.map((b, j) =&gt; b + arr2[i][j]));} Solution 21234567891011121314function solution(arr1, arr2) { return arr1.reduce((target, arr, index) =&gt; { target.push( arr.reduce((target, inner_arr, inner_index) =&gt; { target.push( inner_arr + arr2[index][inner_index] ); return target; }, [])); return target; }, [])}","link":"/2019/06/22/algorithm/programmers/level1-29/"},{"title":"프로그래머스 - x만큼 간격이 있는 n개의 숫자","text":"문제 설명함수 solution은 정수 x와 자연수 n을 입력 받아, x부터 시작해 x씩 증가하는 숫자를 n개 지니는 리스트를 리턴해야 합니다.다음 제한 조건을 보고, 조건을 만족하는 함수, solution을 완성해주세요. 제한 조건x는 -10000000 이상, 10000000 이하인 정수입니다.n은 1000 이하인 자연수입니다. 입출력 예 x n answer 2 5 [2,4,6,8,10] 4 3 [4,8,12] -4 2 [-4, -8] Solution 1123function solution(x, n) { return Array(n).fill(x).map((v, i) =&gt; (i + 1) * v);} Solution 21234567function solution(x, n) { return Array(n).fill(0).reduce((target, number, index) =&gt; { target.push( x * (index + 1) ); return target; }, [])}","link":"/2019/06/22/algorithm/programmers/level1-30/"},{"title":"프로그래머스 - 직사각형 별찍기","text":"문제 설명이 문제에는 표준 입력으로 두 개의 정수 n과 m이 주어집니다.별(*) 문자를 이용해 가로의 길이가 n, 세로의 길이가 m인 직사각형 형태를 출력해보세요. 제한 조건n과 m은 각각 1000 이하인 자연수입니다. 예시입력 15 3 출력 123*************** Solution 11234567process.stdin.setEncoding('utf8');process.stdin.on('data', data =&gt; { const n = data.split(\" \"); const a = Number(n[0]), b = Number(n[1]); const row = '*'.repeat(a); Array(b).fill('').map((v, i) =&gt; console.log(row));}); Solution 21234567891011121314process.stdin.setEncoding('utf8');process.stdin.on('data', data =&gt; { const n = data.split(\" \"); const a = Number(n[0]), b = Number(n[1]); const row = '*'.repeat(a); const result = Array(b).fill('*').reduce((target, item) =&gt; { target.push(row); return target; }, []).join('\\n'); console.log(result)});","link":"/2019/06/22/algorithm/programmers/level1-31/"},{"title":"프로그래머스 - 예산","text":"문제 설명S사에서는 각 부서에 필요한 물품을 지원해 주기 위해 부서별로 물품을 구매하는데 필요한 금액을 조사했습니다.그러나, 전체 예산이 정해져 있기 때문에 모든 부서의 물품을 구매해 줄 수는 없습니다.그래서 최대한 많은 부서의 물품을 구매해 줄 수 있도록 하려고 합니다. 물품을 구매해 줄 때는 각 부서가 신청한 금액만큼을 모두 지원해 줘야 합니다.예를 들어 1,000원을 신청한 부서에는 정확히 1,000원을 지원해야 하며, 1,000원보다 적은 금액을 지원해 줄 수는 없습니다. 부서별로 신청한 금액이 들어있는 배열 d와 예산 budget이 매개변수로 주어질 때, 최대 몇 개의 부서에 물품을 지원할 수 있는지 return 하도록 solution 함수를 완성해주세요. 제한사항d는 부서별로 신청한 금액이 들어있는 배열이며, 길이(전체 부서의 개수)는 1 이상 100 이하입니다.d의 각 원소는 부서별로 신청한 금액을 나타내며, 부서별 신청 금액은 1 이상 100,000 이하의 자연수입니다.budget은 예산을 나타내며, 1 이상 10,000,000 이하의 자연수입니다. 입출력 예 d budget result [1,3,2,5,4] 9 3 [2,2,3,3] 10 4 입출력 예 설명입출력 예 #1각 부서에서 [1원, 3원, 2원, 5원, 4원]만큼의 금액을 신청했습니다.만약에, 1원, 2원, 4원을 신청한 부서의 물품을 구매해주면 예산 9원에서 7원이 소비되어 2원이 남습니다.항상 정확히 신청한 금액만큼 지원해 줘야 하므로 남은 2원으로 나머지 부서를 지원해 주지 않습니다.위 방법 외에 3개 부서를 지원해 줄 방법들은 다음과 같습니다. 1원, 2원, 3원을 신청한 부서의 물품을 구매해주려면 6원이 필요합니다.1원, 2원, 5원을 신청한 부서의 물품을 구매해주려면 8원이 필요합니다.1원, 3원, 4원을 신청한 부서의 물품을 구매해주려면 8원이 필요합니다.1원, 3원, 5원을 신청한 부서의 물품을 구매해주려면 9원이 필요합니다.3개 부서보다 더 많은 부서의 물품을 구매해 줄 수는 없으므로 최대 3개 부서의 물품을 구매해 줄 수 있습니다. 입출력 예 #2모든 부서의 물품을 구매해주면 10원이 됩니다. 따라서 최대 4개 부서의 물품을 구매해 줄 수 있습니다. Solution12345678function solution(d, budget) { let lestBudget = budget; return d.sort((a, b) =&gt; a - b).reduce((target, item) =&gt; { lestBudget -= item; lestBudget &gt;= 0 &amp;&amp; target.push(item); return target; }, []).length}","link":"/2019/06/22/algorithm/programmers/level1-32/"},{"title":"프로그래머스 - 프린터","text":"일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다.그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다.이런 문제를 보완하기 위해 중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다.이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다. 인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다. 나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다. 그렇지 않으면 J를 인쇄합니다.예를 들어, 4개의 문서(A, B, C, D)가 순서대로 인쇄 대기목록에 있고 중요도가 2 1 3 2 라면 C D A B 순으로 인쇄하게 됩니다. 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 알고 싶습니다. 위의 예에서 C는 1번째로, A는 3번째로 인쇄됩니다. 현재 대기목록에 있는 문서의 중요도가 순서대로 담긴 배열 priorities와 내가 인쇄를 요청한 문서가 현재 대기목록의 어떤 위치에 있는지를 알려주는 location이 매개변수로 주어질 때, 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 return 하도록 solution 함수를 작성해주세요. 제한사항현재 대기목록에는 1개 이상 100개 이하의 문서가 있습니다.인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻입니다.location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현합니다. 입출력 예 priorities location return [2, 1, 3, 2] 2 1 [1, 1, 9, 1, 1, 1] 0 5 입출력 예 설명 예제 #1 문제에 나온 예와 같습니다. 예제 #2 6개의 문서(A, B, C, D, E, F)가 인쇄 대기목록에 있고 중요도가 1 1 9 1 1 1 이므로 C D E F A B 순으로 인쇄합니다. Solution123456789101112function solution(priorities, location) { let array = priorities; let result = location; let count = 0; while(result &gt;= 0) { Math.max(...array) === array[0] ? (array.shift(), count++, result--) : (array.push(array.shift()), result = result &gt; 0 ? result - 1 : result + array.length - 1 ) } return count;}","link":"/2019/06/23/algorithm/programmers/level2-01/"},{"title":"프로그래머스 - 쇠막대기","text":"여러 개의 쇠막대기를 레이저로 절단하려고 합니다.효율적인 작업을 위해서 쇠막대기를 아래에서 위로 겹쳐 놓고, 레이저를 위에서 수직으로 발사하여 쇠막대기들을 자릅니다.쇠막대기와 레이저의 배치는 다음 조건을 만족합니다. 1234- 쇠막대기는 자신보다 긴 쇠막대기 위에만 놓일 수 있습니다.- 쇠막대기를 다른 쇠막대기 위에 놓는 경우 완전히 포함되도록 놓되, 끝점은 겹치지 않도록 놓습니다.- 각 쇠막대기를 자르는 레이저는 적어도 하나 존재합니다.- 레이저는 어떤 쇠막대기의 양 끝점과도 겹치지 않습니다. 아래 그림은 위 조건을 만족하는 예를 보여줍니다.수평으로 그려진 굵은 실선은 쇠막대기이고, 점은 레이저의 위치, 수직으로 그려진 점선 화살표는 레이저의 발사 방향입니다. 이러한 레이저와 쇠막대기의 배치는 다음과 같이 괄호를 이용하여 왼쪽부터 순서대로 표현할 수 있습니다. 12(a) 레이저는 여는 괄호와 닫는 괄호의 인접한 쌍 &apos;()&apos;으로 표현합니다. 또한 모든 &apos;()&apos;는 반드시 레이저를 표현합니다.(b) 쇠막대기의 왼쪽 끝은 여는 괄호 &apos;(&apos;로, 오른쪽 끝은 닫힌 괄호 &apos;)&apos;로 표현됩니다. 위 예의 괄호 표현은 그림 위에 주어져 있습니다.쇠막대기는 레이저에 의해 몇 개의 조각으로 잘리는데, 위 예에서 가장 위에 있는 두 개의 쇠막대기는 각각 3개와 2개의 조각으로 잘리고, 이와 같은 방식으로 주어진 쇠막대기들은 총 17개의 조각으로 잘립니다. 쇠막대기와 레이저의 배치를 표현한 문자열 arrangement가 매개변수로 주어질 때, 잘린 쇠막대기 조각의 총 개수를 return 하도록 solution 함수를 작성해주세요. 제한사항arrangement의 길이는 최대 100,000입니다.arrangement의 여는 괄호와 닫는 괄호는 항상 쌍을 이룹니다. 입출력 예 arrangement return “()(((()())(())()))(())” 17 입출력 예 설명문제에 나온 예와 같습니다. Solution1234567891011function solution(arrangement) { const stack = []; return [...arrangement].reduce((target, item) =&gt; { item === '(' ? stack.push(item) : (stack.pop(),target[ 'num' ] += (target[ 'char' ] === ')') ? 1 : stack.length); target[ 'char' ] = item; return target; }, { char:'', num: 0 })[ 'num' ]}","link":"/2019/06/24/algorithm/programmers/level2-02/"},{"title":"프로그래머스 - 스킬트리","text":"선행 스킬이란 어떤 스킬을 배우기 전에 먼저 배워야 하는 스킬을 뜻합니다. 예를 들어 선행 스킬 순서가 스파크 → 라이트닝 볼트 → 썬더일때, 썬더를 배우려면 먼저 라이트닝 볼트를 배워야 하고, 라이트닝 볼트를 배우려면 먼저 스파크를 배워야 합니다. 위 순서에 없는 다른 스킬(힐링 등)은 순서에 상관없이 배울 수 있습니다. 따라서 스파크 → 힐링 → 라이트닝 볼트 → 썬더와 같은 스킬트리는 가능하지만, 썬더 → 스파크나 라이트닝 볼트 → 스파크 → 힐링 → 썬더와 같은 스킬트리는 불가능합니다. 선행 스킬 순서 skill과 유저들이 만든 스킬트리1를 담은 배열 skill_trees가 매개변수로 주어질 때, 가능한 스킬트리 개수를 return 하는 solution 함수를 작성해주세요. 제한 조건 스킬은 알파벳 대문자로 표기하며, 모든 문자열은 알파벳 대문자로만 이루어져 있습니다. 스킬 순서와 스킬트리는 문자열로 표기합니다. 예를 들어, C → B → D 라면 CBD로 표기합니다 선행 스킬 순서 skill의 길이는 2 이상 26 이하이며, 스킬은 중복해 주어지지 않습니다. skill_trees는 길이 1 이상 20 이하인 배열입니다. skill_trees의 원소는 스킬을 나타내는 문자열입니다. skill_trees의 원소는 길이가 2 이상 26 이하인 문자열이며, 스킬이 중복해 주어지지 않습니다. 입출력 예 skill skill_trees return “CBD” [“BACDE”, “CBADF”, “AECB”, “BDA”] 2 입출력 예 설명 BACDE: B 스킬을 배우기 전에 C 스킬을 먼저 배워야 합니다. 불가능한 스킬트립니다. CBADF: 가능한 스킬트리입니다. AECB: 가능한 스킬트리입니다. BDA: B 스킬을 배우기 전에 C 스킬을 먼저 배워야 합니다. 불가능한 스킬트리입니다. Solution 112345678910111213141516function solution(skill, skill_trees) { return skill_trees.reduce((target, tree) =&gt; { let filter = [...tree].reduce((target, item) =&gt; { let count = 0; skill.includes(item) &amp;&amp; (target.push(item)); return target; }, []); (filter.reduce((target, item, index) =&gt; { target = target &amp;&amp; item === skill[index]; return target; }, true)) &amp;&amp; target.push(tree); return target; }, []).length} Solution 21234567891011function solution(skill, skill_trees) { var answer = 0; var regex = new RegExp(`[^${skill}]`, 'g'); return skill_trees .map((x) =&gt; x.replace(regex, '')) .filter((x) =&gt; { return skill.indexOf(x) === 0 || x === \"\"; }) .length}","link":"/2019/06/26/algorithm/programmers/level2-03/"},{"title":"프로그래머스 - 탑","text":"수평 직선에 탑 N대를 세웠습니다.모든 탑의 꼭대기에는 신호를 송/수신하는 장치를 설치했습니다.발사한 신호는 신호를 보낸 탑보다 높은 탑에서만 수신합니다.또한, 한 번 수신된 신호는 다른 탑으로 송신되지 않습니다. 예를 들어 높이가 6, 9, 5, 7, 4인 다섯 탑이 왼쪽으로 동시에 레이저 신호를 발사합니다.그러면, 탑은 다음과 같이 신호를 주고받습니다.높이가 4인 다섯 번째 탑에서 발사한 신호는 높이가 7인 네 번째 탑이 수신하고, 높이가 7인 네 번째 탑의 신호는 높이가 9인 두 번째 탑이, 높이가 5인 세 번째 탑의 신호도 높이가 9인 두 번째 탑이 수신합니다. 높이가 9인 두 번째 탑과 높이가 6인 첫 번째 탑이 보낸 레이저 신호는 어떤 탑에서도 수신할 수 없습니다. 송신탑(높이) 수신 탑(높이) 5(4) 4(7) 4(7) 2(9) 3(5) 2(9) 2(9) - 1(6) - 맨 왼쪽부터 순서대로 탑의 높이를 담은 배열 heights가 매개변수로 주어질 때 각 탑이 쏜 신호를 어느 탑에서 받았는지 기록한 배열을 return 하도록 solution 함수를 작성해주세요. 제한 사항heights는 길이 2 이상 100 이하인 정수 배열입니다.모든 탑의 높이는 1 이상 100 이하입니다.신호를 수신하는 탑이 없으면 0으로 표시합니다. 입출력 예 heights return [6,9,5,7,4] [0,0,2,2,4] [3,9,9,3,5,7,2] [0,0,0,3,3,3,6] [1,5,3,6,7,6,5] [0,0,2,0,0,5,6] 입출력 예 설명 입출력 예 #1 앞서 설명한 예와 같습니다. 입출력 예 #2 [1,2,3] 번째 탑이 쏜 신호는 아무도 수신하지 않습니다. [4,5,6] 번째 탑이 쏜 신호는 3번째 탑이 수신합니다. [7] 번째 탑이 쏜 신호는 6번째 탑이 수신합니다. 입출력 예 #3 [1,2,4,5] 번째 탑이 쏜 신호는 아무도 수신하지 않습니다. [3] 번째 탑이 쏜 신호는 2번째 탑이 수신합니다. [6] 번째 탑이 쏜 신호는 5번째 탑이 수신합니다. [7] 번째 탑이 쏜 신호는 6번째 탑이 수신합니다. Solution1234567891011function solution(heights) { let stack = [...heights]; return heights.reduceRight((target, height) =&gt; { stack.pop(); target.push(stack.reduceRight((target, item, index) =&gt; { item &gt; height &amp;&amp; target.push(index + 1); return target; }, [])[0] || 0); return target; }, []).reverse();}","link":"/2019/06/28/algorithm/programmers/level2-04/"},{"title":"프로그래머스 - 124 나라의 숫자","text":"124 나라가 있습니다. 124 나라에서는 10진법이 아닌 다음과 같은 자신들만의 규칙으로 수를 표현합니다. 124 나라에는 자연수만 존재합니다. 124 나라에는 모든 수를 표현할 때 1, 2, 4만 사용합니다. 예를 들어서 124 나라에서 사용하는 숫자는 다음과 같이 변환됩니다. 10진법 124 나라 10진법 124 나라 1 1 6 14 2 2 7 21 3 4 8 22 4 11 9 24 5 12 10 41 자연수 n이 매개변수로 주어질 때, n을 124 나라에서 사용하는 숫자로 바꾼 값을 return 하도록 solution 함수를 완성해 주세요. 제한사항 n은 500,000,000이하의 자연수 입니다. 입출력 예 n result 1 1 2 2 3 4 4 11 Solution12345function solution(n) { return n ? solution((n - (n % 3 || 3)) / 3) + (n % 3 || 4) : '';}","link":"/2019/07/02/algorithm/programmers/level2-05/"},{"title":"프로그래머스 - 기능개발","text":"프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다. 또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다. 먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요. 제한 사항작업의 개수(progresses, speeds배열의 길이)는 100개 이하입니다.작업 진도는 100 미만의 자연수입니다.작업 속도는 100 이하의 자연수입니다.배포는 하루에 한 번만 할 수 있으며, 하루의 끝에 이루어진다고 가정합니다. 예를 들어 진도율이 95%인 작업의 개발 속도가 하루에 4%라면 배포는 2일 뒤에 이루어집니다. 입출력 예 progresses speeds return [93,30,55] [1,30,5] [2,1] 입출력 예 설명 첫 번째 기능은 93% 완료되어 있고 하루에 1%씩 작업이 가능하므로 7일간 작업 후 배포가 가능합니다. 두 번째 기능은 30%가 완료되어 있고 하루에 30%씩 작업이 가능하므로 3일간 작업 후 배포가 가능합니다.하지만 이전 첫 번째 기능이 아직 완성된 상태가 아니기 때문에 첫 번째 기능이 배포되는 7일째 배포됩니다. 세 번째 기능은 55%가 완료되어 있고 하루에 5%씩 작업이 가능하므로 9일간 작업 후 배포가 가능합니다. 따라서 7일째에 2개의 기능, 9일째에 1개의 기능이 배포됩니다. Solution12345function solution(n) { return n ? solution((n - (n % 3 || 3)) / 3) + (n % 3 || 4) : '';}","link":"/2019/07/05/algorithm/programmers/level2-06/"},{"title":"프로그래머스 - 다리를 지나는 트럭","text":"문제 설명트럭 여러 대가 강을 가로지르는 일 차선 다리를 정해진 순으로 건너려 합니다. 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다. 트럭은 1초에 1만큼 움직이며, 다리 길이는 bridge_length이고 다리는 무게 weight까지 견딥니다. ※ 트럭이 다리에 완전히 오르지 않은 경우, 이 트럭의 무게는 고려하지 않습니다. 예를 들어, 길이가 2이고 10kg 무게를 견디는 다리가 있습니다. 무게가 [7, 4, 5, 6]kg인 트럭이 순서대로 최단 시간 안에 다리를 건너려면 다음과 같이 건너야 합니다. 경과 시간 다리를 지난 트럭 다리를 건너는 트럭 대기 트럭 0 [] [] [7,4,5,6] 1~2 [] [7] [4,5,6] 3 [7] [4] [5,6] 4 [7] [4,5] [6] 5 [7,4] [5] [6] 6~7 [7,4,5] [6] [] 8 [7,4,5,6] [] [] 따라서, 모든 트럭이 다리를 지나려면 최소 8초가 걸립니다. solution 함수의 매개변수로 다리 길이 bridgelength, 다리가 견딜 수 있는 무게 weight, 트럭별 무게 truckweights가 주어집니다. 이때 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 return 하도록 solution 함수를 완성하세요. 제한 조건 bridge_length는 1 이상 10,000 이하입니다. weight는 1 이상 10,000 이하입니다. truck_weights의 길이는 1 이상 10,000 이하입니다. 모든 트럭의 무게는 1 이상 weight 이하입니다. 입출력 예 bridge_length weight truck_weights return 2 10 [7,4,5,6] 8 100 100 [10] 101 100 100 [10,10,10,10,10,10,10,10,10,10] 110 Solution123456789101112131415161718192021function solution(bridge_length, weight, truck_weights) { let on_bridge = []; let time = 0; while(on_bridge.length &gt; 0 || truck_weights.length &gt; 0){ on_bridge = on_bridge.reduce((target, truck) =&gt; { truck['delay'] = truck['delay'] - 1; truck['delay'] &gt; 0 &amp;&amp; target.push(truck); return target; }, []); let sum = on_bridge.reduce((target, truck) =&gt; target + truck['weight'], 0); ((sum + truck_weights[0] &lt;= weight) &amp;&amp; (on_bridge.length &lt; bridge_length)) &amp;&amp; on_bridge.push({'weight':truck_weights.shift(), 'delay': bridge_length}); ++time; } return time;}","link":"/2019/07/08/algorithm/programmers/level2-07/"},{"title":"Solve Me First","text":"Complete the function solveMeFirst to compute the sum of two integers. Function prototype:int solveMeFirst(int a, int b); where, a is the first integer input. b is the second integer input Return values sum of the above two integers Sample Input12a = 2b = 3 Sample Output15 ExplanationThe sum of the two integers a and b is computed as: 2 + 3 = 5. Solution1234function solveMeFirst(a, b) { // Hint: Type return a+b below return a + b; }","link":"/2019/06/27/algorithm/hackerrank/00_SolveMeFirst/"},{"title":"Compare the Triplets","text":"Alice and Bob each created one problem for HackerRank. A reviewer rates the two challenges, awarding points on a scale from 1 to 100 for three categories: problem clarity, originality, and difficulty. We define the rating for Alice’s challenge to be the triplet a = (a[0], a[1], a[2]), and the rating for Bob’s challenge to be the triplet b = (b[0], b[1], b[2]). Your task is to find their comparison points by comparing a[0] with b[0], a[1] with b[1], and a[2] with b[2]. If a[i] &gt; b[i], then Alice is awarded 1 point. If a[i] &lt; b[i], then Bob is awarded 1 point. If a[i] = b[i], then neither person receives a point.Comparison points is the total points a person earned. Given a and b, determine their respective comparison points. For example, a = [1, 2, 3] and b = [3, 2, 1]. For elements 0, Bob is awarded a point because a[0] &lt; b[0]. For the equal elements a[1] and b[1], no points are earned. Finally, for elements 2, a[2] &gt; b[2] so Alice receives a point. Your return array would be [1, 1] with Alice’s score first and Bob’s second. Function DescriptionComplete the function compareTriplets in the editor below. It must return an array of two integers, the first being Alice’s score and the second being Bob’s. compareTriplets has the following parameter(s): a: an array of integers representing Alice’s challenge rating b: an array of integers representing Bob’s challenge rating Input FormatThe first line contains 3 space-separated integers, a[0], a[1], and a[2], describing the respective values in triplet a. The second line contains 3 space-separated integers, b[0], b[1], and b[2], describing the respective values in triplet b. Constraints Output FormatReturn an array of two integers denoting the respective comparison points earned by Alice and Bob. Sample Input 0125 6 73 6 10 Sample Output 011 1 Explanation 0In this example: a = (a[0], a[1], a[2]) = (5, 6, 7) b = (b[0], b[1], b[2]) = (3, 6, 10) Now, let’s compare each individual score: a[0] &gt; b[0], so Alice receives 1 point. a[1] = b[1], so nobody receives a point. a[2] &lt; b[2], so Bob receives 1 point.Alice’s comparison score is 1, and Bob’s comparison score is 1. Thus, we return the array [1, 1]. Sample Input 11217 28 3099 16 8 Sample Output 112 1 Explanation 1Comparing the elements, 17 &lt; 99 so Bob receives a point.Comparing the and elements, 28 &gt; 16 and 30 &gt; 8 so Alice receives two points.The return array is [2, 1]. Solution12345678function compareTriplets(a, b) { let result = a.reduce((target, item, index) =&gt; { !(item === b[index]) &amp;&amp; (item &gt; b[index] ? ++target[0] : ++target[1]) return target; }, [0, 0]); return result;}","link":"/2019/06/27/algorithm/hackerrank/02_CompareTheTriplets/"},{"title":"Simple Array Sum","text":"Given an array of integers, find the sum of its elements. For example, if the array ar = [1, 2 ,3], 1 + 2 + 3 = 6, so return 6. Function DescriptionComplete the simpleArraySum function in the editor below. It must return the sum of the array elements as an integer. simpleArraySum has the following parameter(s): ar: an array of integers Input FormatThe first line contains an integer, , denoting the size of the array.The second line contains space-separated integers representing the array’s elements. Constraints Output FormatPrint the sum of the array’s elements as a single integer. Sample Input1261 2 3 4 10 11 Sample Output131 ExplanationWe print the sum of the array’s elements: 1 + 2 + 3 + 4 + 10 + 11 = 31. Solution12345678function simpleArraySum(ar) { /* * Write your code here. */ return ar.reduce((target, number) =&gt; { return target + number; }, 0)}","link":"/2019/06/27/algorithm/hackerrank/01_SimpleArraySum/"},{"title":"A Very Big Sum","text":"Calculate and print the sum of the elements in an array, keeping in mind that some of those integers may be quite large. Function DescriptionComplete the aVeryBigSum function in the editor below. It must return the sum of all array elements. aVeryBigSum has the following parameter(s): ar: an array of integers. Input FormatThe first line of the input consists of an integer n. The next line contains n space-separated integers contained in the array. Output FormatPrint the integer sum of the elements in the array. Constraints Sample Input1251000000001 1000000002 1000000003 1000000004 1000000005 Output15000000015 Note:The range of the 32-bit integer is . When we add several integer values, the resulting sum might exceed the above range. You might need to use long long int in C/C++ or long data type in Java to store such sums. Solution12345function aVeryBigSum(ar) { return ar.reduce((target, number) =&gt; { return target + number; }, 0)}","link":"/2019/06/30/algorithm/hackerrank/03_AVeryBigSum/"},{"title":"Diagonal Difference","text":"Given a square matrix, calculate the absolute difference between the sums of its diagonals. For example, the square matrix is shown below: 1231 2 34 5 69 8 9 The left-to-right diagonal = 1 + 5 + 9 = 15. The right to left diagonal = 3 + 5 + 9 = 17. Their absolute difference is |15 - 17| = 2. Function descriptionComplete the diagonalDifference function in the editor below. It must return an integer representing the absolute diagonal difference. diagonalDifference takes the following parameter: arr: an array of integers . Input FormatThe first line contains a single integer, n, the number of rows and columns in the matrix arr. Each of the next n lines describes a row, arr[i], and consists of n space-separated integers arr[i][j]. Constraints Output FormatPrint the absolute difference between the sums of the matrix’s two diagonals as a single integer. Sample Input1234311 2 44 5 610 8 -12 Sample Output115 ExplanationThe primary diagonal is: 12311 5 -12 Sum across the primary diagonal: 11 + 5 - 12 = 4 The secondary diagonal is: 123 4 510 Sum across the secondary diagonal: 4 + 5 + 10 = 19Difference: |4 - 19| = 15 Note: |x| is the absolute value of x Solution1234567function diagonalDifference(arr) { // Write your code here return Math.abs(arr.reduce((target, item, index) =&gt; { let length = item.length - 1; return target + item[index] - item[length - index] }, 0));}","link":"/2019/06/30/algorithm/hackerrank/04_DiagonalDifference/"},{"title":"Plus Minus","text":"Given an array of integers, calculate the fractions of its elements that are positive, negative, and are zeros. Print the decimal value of each fraction on a new line. Note: This challenge introduces precision problems. The test cases are scaled to six decimal places, though answers with absolute error of up to are acceptable. For example, given the array arr = [1, 1, 0, -1, -1] there are 5 elements, two positive, two negative and one zero. Their ratios would be , and . It should be printed as 1230.4000000.4000000.200000 Function DescriptionComplete the plusMinus function in the editor below. It should print out the ratio of positive, negative and zero items in the array, each on a separate line rounded to six decimals. plusMinus has the following parameter(s): arr: an array of integers Input FormatThe first line contains an integer, n, denoting the size of the array.The second line contains n space-separated integers describing an array of numbers arr=(arr[0], arr[1], arr[2], …, a[n-1]). Constraints Output FormatYou must print the following 3 lines: A decimal representing of the fraction of positive numbers in the array compared to its size. A decimal representing of the fraction of negative numbers in the array compared to its size. A decimal representing of the fraction of zeros in the array compared to its size. Sample Input126-4 3 -9 0 4 1 Sample Output1230.5000000.3333330.166667 ExplanationThere are 3 positive numbers, 2 negative numbers, and 1 zero in the array.The proportions of occurrence are positive: , negative: and zeros: . Solution1234567function diagonalDifference(arr) { // Write your code here return Math.abs(arr.reduce((target, item, index) =&gt; { let length = item.length - 1; return target + item[index] - item[length - index] }, 0));}","link":"/2019/07/01/algorithm/hackerrank/05_PlusMinus/"},{"title":"Staircase","text":"Consider a staircase of size n = 4: 1234 # ## ####### Observe that its base and height are both equal to n, and the image is drawn using # symbols and spaces. The last line is not preceded by any spaces. Write a program that prints a staircase of size n. Function DescriptionComplete the staircase function in the editor below. It should print a staircase as described above. staircase has the following parameter(s): n: an integer Input FormatA single integer, n, denoting the size of the staircase. Constraints Output FormatPrint a staircase of size using # symbols and spaces. Note: The last line must have spaces in it. Sample Input16 Sample Output123456 # ## ### #### ########### ExplanationThe staircase is right-aligned, composed of # symbols and spaces, and has a height and width of n = 6. Solution123456789function staircase(n) { let strings = Array(n).fill('#'); return strings.reduceRight((target, string, index) =&gt; { target.push([...strings].join('').replace('#'.repeat(index), ' '.repeat(index))); return target }, []).join('\\n');}","link":"/2019/07/03/algorithm/hackerrank/06_Staircase/"},{"title":"Mini-Max Sum","text":"Given five positive integers, find the minimum and maximum values that can be calculated by summing exactly four of the five integers.Then print the respective minimum and maximum values as a single line of two space-separated long integers. For example, arr = [ 1, 3, 5, 7, 9 ]. Our minimum sum is 1 + 3 + 5 + 7 = 16 and our maximum sum is 3 + 5 + 7 + 9 = 24. We would print 116 24 Function DescriptionComplete the miniMaxSum function in the editor below.It should print two space-separated integers on one line: the minimum sum and the maximum sum of of elements. miniMaxSum has the following parameter(s): arr: an array of integers Input FormatA single line of five space-separated integers. Constraints Output FormatPrint two space-separated long integers denoting the respective minimum and maximum values that can be calculated by summing exactly four of the five integers. (The output can be greater than a 32 bit integer.) Sample Input11 2 3 4 5 Sample Output110 14 ExplanationOur initial numbers are 1, 2, 3, 4, and 5. We can calculate the following sums using four of the five integers: If we sum everything except 1, our sum is 2 + 3 + 4 + 5 = 14. If we sum everything except 2, our sum is 1 + 3 + 4 + 5 = 13. If we sum everything except 3, our sum is 1 + 2 + 4 + 5 = 12. If we sum everything except 4, our sum is 1 + 2 + 3 + 5 = 11. If we sum everything except 5, our sum is 1 + 2 + 3 + 4 = 10. Hints: Beware of integer overflow! Use 64-bit Integer. Solution123456789function miniMaxSum(arr) { let length = arr.length - 1; return arr.sort((a, b) =&gt; a &gt; b).reduce((target, item, index) =&gt; { !(index === length) &amp;&amp; (target[0] += item); !(index === 0) &amp;&amp; (target[1] += item); return target }, [0, 0]).join(' ');}","link":"/2019/07/04/algorithm/hackerrank/07_Mini-MaxSum/"},{"title":"Day0 Data Types","text":"ObjectiveToday, we’re discussing data types. Check out the attached tutorial for more details. TaskVariables named firstInteger, firstDecimal, and firstString are declared for you in the editor below. You must use the + operator to perform the following sequence of operations: Convert secondInteger to an integer (Number type), then sum it with firstInteger and print the result on a new line using console.log. Convert secondDecimal to a floating-point number (Number type), then sum it with firstDecimal and print the result on a new line using console.log. Print the concatenation of firstString and secondString on a new line using console.log. Note that must be printed first. Input Format Data Type Parameter Description string secondInteger The string representation of an integer you must sum with firstInteger. string secondDecimal The string representation of a floating-point number you must sum with firstDecimal. string secondString A string of one or more space-separated words you must append to secondString. Output FormatPrint the following three lines of output: On the first line, print the sum of firstInteger and the integer representation of secondInteger. On the second line, print the sum of firstDecimal and the floating-point representation of secondDecimal. On the third line, print firstString concatenated with secondString. You must print firstString before secondString. Sample Input 0123124.32is the best place to learn and practice coding! Sample Output 0123168.32HackerRank is the best place to learn and practice coding! ExplanationWhen we sum the integers 4 and 12, we get the integer 16.When we sum the floating-point numbers 4.0 and 4.32, we get 8.32. When we concatenate HackerRank with is the best place to learn and practice coding!, we get HackerRank is the best place to learn and practice coding!. You will not pass this challenge if you attempt to assign the Sample Case values to your variables instead of following the instructions above. Solution123456789101112131415161718192021222324252627282930313233/*** The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.* Print three lines:* 1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.* 2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.* 3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).** Parameter(s):* secondInteger - The string representation of an integer.* secondDecimal - The string representation of a floating-point number.* secondString - A string consisting of one or more space-separated words.**/function performOperation(secondInteger, secondDecimal, secondString) { // Declare a variable named 'firstInteger' and initialize with integer value 4. const firstInteger = 4; // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0. const firstDecimal = 4.0; // Declare a variable named 'firstString' and initialize with the string \"HackerRank\". const firstString = 'HackerRank '; // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number type) on a new line. console.log(firstInteger + Number(secondInteger)); // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number type) on a new line. console.log(firstDecimal + Number(secondDecimal)); // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The variable 'firstString' must be printed first. console.log((firstString || '').concat(secondString));}","link":"/2019/05/30/algorithm/hackerrank/10Days_Day0_DataTypes/"},{"title":"Birthday Cake Candles","text":"You are in charge of the cake for your niece’s birthday and have decided the cake will have one candle for each year of her total age. When she blows out the candles, she’ll only be able to blow out the tallest ones. Your task is to find out how many candles she can successfully blow out. For example, if your niece is turning 4 years old, and the cake will have 4 candles of height 4, 4, 1, 3, she will be able to blow out 2 candles successfully, since the tallest candles are of height 4 and there are 2 such candles. Function DescriptionComplete the function birthdayCakeCandles in the editor below. It must return an integer representing the number of candles she can blow out. birthdayCakeCandles has the following parameter(s): ar: an array of integers representing candle heights Input FormatThe first line contains a single integer, n, denoting the number of candles on the cake.The second line contains n space-separated integers, where each integer i describes the height of candle i. Constraints Output FormatPrint the number of candles that can be blown out on a new line. Sample Input 01243 2 1 3 Sample Output 012 Explanation 0We have one candle of height 1, one candle of height 2, and two candles of height 3. Your niece only blows out the tallest candles, meaning the candles where heoght = 3. Because there are 2 such candles, we print 2 on a new line. Solution12345678function birthdayCakeCandles(ar) { let max = Math.max(...ar); return ar.sort((a, b) =&gt; b - a).reduce((target, number) =&gt; { number === max &amp;&amp; ++target; return target; }, 0)}","link":"/2019/07/06/algorithm/hackerrank/08_BirthdayCakeCandles/"},{"title":"Day1 Arithmetic Operators","text":"ObjectiveIn this challenge, we practice using arithmetic operators. Check out the attached tutorial for resources. TaskComplete the following functions in the editor below: getArea(length, width): Calculate and return the area of a rectangle having sides length and width. getPerimeter(length, width): Calculate and return the perimeter of a rectangle having sides length and width. The values returned by these functions are printed to stdout by locked stub code in the editor. Input FormatgetArea Data Type Parameter Description Number length A number denoting the length of a rectangle. Number height A number denoting the height of a rectangle. getPerimeter(length, height) Data Type Parameter Description Number length A number denoting the length of a rectangle. Number height A number denoting the height of a rectangle. Constraints 1 &lt;= length,width &lt;= 100 length and height are scaled to at most three decimal places. Output Format Function Return Type Description getArea Number The area of a rectangle having sides length and width. getPerimeter Number The perimeter of a rectangle having sides length and width. Sample Input 01234.5 Sample Output 01213.515 ExplanationThe area of the rectangle is length X width = 3 X 4.5 = 13.5.The perimeter of the rectangle is 2 X (length + height) = 2 X (3 + 4.5) = 15. Solution12345678910111213function getArea(length, width) { let area; area = length * width; return area;}function getPerimeter(length, width) { let perimeter; perimeter = 2 * (length + width); return perimeter;}","link":"/2019/05/31/algorithm/hackerrank/10Days_Day1_ArithmeticOperators/"},{"title":"Day1 Functions","text":"ObjectiveToday, we’re discussing JavaScript functions. Check out the attached tutorial for more details. TaskImplement a function named factorial that has one parameter: an integer, n. It must return the value of n! (i.e., n factorial). Input FormatLocked stub code in the editor reads a single integer, n, from stdin and passes it to a function named factorial. Constraints 1 &lt;= n &lt;= 10 Output FormatThe function must return the value of n!. Sample Input 014 Sample Output 0124 ExplanationWe return the value of 4! = 4 X 3 X 2 X 1 = 24. Solution 112const factorial = (n) =&gt; (n - 1) &gt; 0 ? n * factorial(n - 1) : 1; Solution 212345678910let memoization = [0, 1];const factorial = (n) =&gt; { (typeof memoization[n] !== 'number') &amp;&amp; ( memoization[n] = (n - 1) &gt; 0 ? n * factorial(n - 1) : 1 ); return memoization[n];}","link":"/2019/05/31/algorithm/hackerrank/10Days_Day1_Functions/"},{"title":"Day1 Let and Const","text":"ObjectiveIn this challenge, we practice declaring variables using the let and const keywords. Check out the attached tutorial for more details. Task Declare a constant variable, PI, and assign it the value Math.PI. You will not pass this challenge unless the variable is declared as a constant and named PI (uppercase). Read a number, r, denoting the radius of a circle from stdin. Use PI and r to calculate the area and perimeter of a circle having radius r. Print area as the first line of output and print perimeter as the second line of output. Input FormatA single integer, r, denoting the radius of a circle. Constraints 0 &lt;= r &lt;= 100 r is a floating-point number scaled to at most 3 decimal places. Output FormatPrint the following two lines: On the first line, print the area of the circle having radius r. On the second line, print the perimeter of the circle having radius r. Sample Input 012.6 Sample Output 01221.23716633826700216.336281798666924 ExplanationGiven the radius r = 2.6, we calculate the following: We then print area as our first line of output and perimeter as our second line of output. Solution1234567891011121314function main() { let r = parseFloat(readLine()); let PI = Math.PI; console.log(PI * r * r); console.log(PI * 2 * r); try { PI = 0; console.log(PI); } catch(error) { console.error(\"You correctly declared 'PI' as a constant.\"); }}","link":"/2019/05/31/algorithm/hackerrank/10Days_Day1_LetAndConst/"},{"title":"Day2 Conditional Statements (If-Else)","text":"ObjectiveIn this challenge, we learn about if-else statements. Check out the attached tutorial for more details. TaskComplete the getGrade(score) function in the editor. It has one parameter: an integer, score, denoting the number of points Julia earned on an exam. It must return the letter corresponding to her grade according to the following rules: If (25 &lt; score &lt;= 30), then grade = A. If (20 &lt; score &lt;= 25), then grade = B. If (15 &lt; score &lt;= 20), then grade = C. If (10 &lt; score &lt;= 15), then grade = D. If (5 &lt; score &lt;= 10), then grade = E. If (0 &lt; score &lt;= 5), then grade = F. Input FormatStub code in the editor reads a single integer denoting score from stdin and passes it to the function. Constraints 0 &lt;= score &lt;= 30 Output FormatThe function must return the value of grade (i.e., the letter grade) that Julia earned on the exam. Sample Input 0111 Sample Output 01D ExplanationBecause score = 11, it satisfies the condition (10 &lt; score &lt;= 15) (which corresponds to D). Thus, we return D as our answer. Solution112345678910111213141516171819function getGrade(score) { let grade; if (score &lt;= 5) { return 'F'; } else if (score &lt;= 10) { return 'E'; } else if (score &lt;= 15) { return 'D'; } else if (score &lt;= 20) { return 'C'; } else if (score &lt;= 25) { return 'B'; } else { return 'A'; } return grade;} Solution2123456789101112function getGrade(score) { let grade; // Write your code here grade = score &lt;= 5 ? 'F' : score &lt;= 10 ? 'E' : score &lt;= 15 ? 'D' : score &lt;= 20 ? 'C' : score &lt;= 25 ? 'B' : score &lt;= 30 ? 'A' : ''; return grade;}","link":"/2019/06/01/algorithm/hackerrank/10Days_Day2_ConditionalStatements_IfElse/"},{"title":"Day2 Conditional Statements (Switch)","text":"ObjectiveIn this challenge, we learn about switch statements. Check out the attached tutorial for more details. TaskComplete the getLetter(s) function in the editor. It has one parameter: a string, s, consisting of lowercase English alphabetic letters (i.e., a through z). It must return A, B, C, or D depending on the following criteria: If the first character in string s is in the set {a, e, i, o, u}, then return A. If the first character in string s is in the set {b, c, d, f, g}, then return B. If the first character in string s is in the set {h, j, k, l, m}, then return C. If the first character in string s is in the set {n, p ,q,r, s, t, v, w, x, y, z}, then return D. Hint: You can get the letter at some index i in s using the syntax s[i] or s.charAt(i). Input FormatStub code in the editor reads a single string denoting s from stdin. Constraints 1 &lt;= |s| &lt;= 100, where |s| is the length of s. String s contains lowercase English alphabetic letters (i.e., a through z) only. Output FormatReturn either A, B, C, or D according to the criteria given above. Sample Input 01adfgt Sample Output 01AA ExplanationThe first character of string s = adfgt is a. Because the given criteria stipulate that we print A any time the first character is in {a, e, i, o, u}, we return A as our answer. Solution11234567891011121314151617181920212223242526272829303132333435function getLetter(s) { const firstCharacter = s.slice(0, 1); let letter; // Write your code here switch (firstCharacter) { case 'a': case 'e': case 'i': case 'o': case 'u': letter = 'A'; break; case 'b': case 'c': case 'd': case 'f': case 'g': letter = 'B'; break; case 'h': case 'j': case 'k': case 'l': case 'm': letter = 'C'; break; default: letter = 'D'; break; } return letter;} Solution2123456789101112131415161718192021222324function getLetter(s) { let letter; // Write your code here switch (s[0]) { case ('a' || 'e' || 'o' || 'i' || 'u'): letter = 'A'; break; case ('b' || 'c' || 'd' || 'f' || 'g'): letter = 'B'; break; case ('h' || 'j' || 'k' || 'l' || 'm'): letter = 'C'; break; case ('z' || 'n' || 'p' || 'q' || 'r' || 's' || 't' || 'v' || 'w' || 'x' || 'y'): letter = 'D'; } return letter;}","link":"/2019/06/01/algorithm/hackerrank/10Days_Day2_ConditionalStatements_Switch/"},{"title":"Day2 Loops","text":"ObjectiveIn this challenge, we practice looping over the characters of string. Check out the attached tutorial for more details. TaskComplete the vowelsAndConsonants function in the editor below. It has one parameter, a string, s, consisting of lowercase English alphabetic letters (i.e., a through z). The function must do the following: First, print each vowel in s on a new line. The English vowels are a, e, i, o, and u, and each vowel must be printed in the same order as it appeared in s. Second, print each consonant (i.e., non-vowel) in s on a new line in the same order as it appeared in s. Input FormatLocked stub code in the editor reads string s from stdin and passes it to the function. Output FormatFirst, print each vowel in s on a new line (in the same order as they appeared in s). Second, print each consonant (i.e., non-vowel) in s on a new line (in the same order as they appeared in s). Sample Input 01javascriptloops Sample Output 0123456789101112131415aaioojvscrptlps Explanation 0Observe the following: Each letter is printed on a new line. Then the vowels are printed in the same order as they appeared in s. Then the consonants are printed in the same order as they appeared in s. Solution11234567891011121314151617/* * Complete the vowelsAndConsonants function. * Print your output using 'console.log()'. */const vowel = [ 'a', 'e', 'i', 'o', 'u' ];function vowelsAndConsonants(s) { let { vowels, consonants } = (s.split('') || []).reduce((target, item) =&gt; { target[vowel.includes(item) ? 'vowels' : 'consonants'].push(item) return target; }, { vowels: [], consonants: [] }); vowels.concat(consonants).forEach((item) =&gt; { console.log(item); });} Solution2123456789101112131415161718192021222324function vowelsAndConsonants(s) { const vowelArray = [...s]; let result = []; const newArray = vowelArray.reduce((target, item) =&gt; { switch (item) { case 'a': case 'e': case 'i': case 'o': case 'u': target['first'].push(item); break; default: target['second'].push(item); break; } return target; }, {first: [], second: []}); result = [...newArray['first'], ...newArray['second']].map(item =&gt; console.log(item))} Solution3123456789101112131415161718192021222324252627282930313233343536function vowelsAndConsonants(s) { const vowelArray = [...s]; const result = []; const newArray = vowelArray.reduce((target, item) =&gt; { switch (item) { case 'a': case 'e': case 'i': case 'o': case 'u': target[0].push(item); break; default: target[1].push(item); break; } return target; }, [[], []]); newArray.reduce((target, items) =&gt; { target.push( items.reduce((target, item) =&gt; { result.push(item); return target; }, []) ); return target; }, []); result.map(item =&gt; console.log(item))}","link":"/2019/06/01/algorithm/hackerrank/10Days_Day2_Loops/"},{"title":"Day3 Arrays","text":"ObjectiveIn this challenge, we learn about Arrays. Check out the attached tutorial for more details. TaskComplete the getSecondLargest function in the editor below. It has one parameter: an array, nums, of n numbers. The function must find and return the second largest number in nums. Input FormatLocked stub code in the editor reads the following input from stdin and passes it to the function:The first line contains an integer, n, denoting the size of the nums array.The second line contains n space-separated numbers describing the elements in nums. Constraints 1 &lt;= n &lt;= 10 0 &lt;= nums &lt;= 100, where nums is the number at index i. The numbers in are not distinct. Output FormatReturn the value of the second largest number in the nums array. Sample Input 01252 3 6 6 5 Sample Output 015 ExplanationGiven the array nums = [2,3,6,6,5], we see that the largest value in the array is 6 and the second largest value is 5. Thus, we return 5 as our answer. Solution 112345678function getSecondLargest(nums) { // Complete the function const max = Math.max(...nums); nums = nums.filter(num =&gt; num !== max); return Math.max(...nums);} Solution 21234567function getSecondLargest(nums) { // Complete the function let results = nums.sort((a, b) =&gt; a - b) .filter((el, index, array) =&gt; index === array.indexOf(el)); return results[results.length - 2];} Solution 3123456789101112131415function getSecondLargest(nums) { const result = nums.reduce((target, num) =&gt; { num &gt; target[1] &amp;&amp; ( num &gt; target[0] ? ( target[1] = target[0], target[0] = num ) : !(num === target[0]) &amp;&amp; (target[1] = num) ); return target; }, [0, 0]); return result[1];}","link":"/2019/06/02/algorithm/hackerrank/10Days_Day3_Arrays/"},{"title":"Day3 Throw","text":"ObjectiveIn this challenge, we practice using throw and catch statements to work with custom error messages. TaskComplete the isPositive function below. It has one integer parameter, a. If the value of a is positive, it must return the string YES. Otherwise, it must throw an Error according to the following rules: If a is 0, throw an Error with message = Zero Error. If a is negative, throw an Error with message = Negative Error. Input FormatLocked stub code in the editor reads the following input from stdin and passes each value of a to the function as an argument:The first line is an integer, n, denoting the number of times the function will be called with some a. Each line i of the n subsequent lines contains an integer denoting some a. Constraints 1 &lt;= n &lt;= 5 -100 &lt;= a &lt;= 100 Output FormatIf the value of a is positive, the function must return the string YES. Otherwise, it must throw an Error according to the following rules: If a is 0, throw an Error with message = Zero Error. If a is negative, throw an Error with message = Negative Error. Sample Input 012343123 Sample Output 0123YESYESYES Explanation 0Each of the given values is positive, so we return YES each time. The value returned during each function call is printed on a new line by locked stub code in the editor. Sample Input 112343206 Sample Output 1123YESZero ErrorYES Explanation 1Locked stub code in the editor makes the following three calls to the isPositive function: isPositive(2): This returns YES because 2 is positive. isPositive(0): Because a = 0, we throw an Error with message = Zero Error. This is caught by the locked stub code and the value of its message is printed. isPositive(6): This returns YES because 6 is positive. Sample Input 21232-120 Sample Output 212Negative ErrorYES Explanation 2Locked stub code in the editor makes the following two calls to the isPositive function: isPositive(-1): Because a = -1, we throw an Error with message = Negative Error. This is caught by the locked stub code and the value of its message is printed. isPositive(20): This returns YES because 20 is positive. Solution 11234567891011121314151617/* * Complete the isPositive function. * If 'a' is positive, return \"YES\". * If 'a' is 0, throw an Error with the message \"Zero Error\" * If 'a' is negative, throw an Error with the message \"Negative Error\" */function isPositive(a) { let result = 'YES'; if (a &lt; 0) { throw ({ message: 'Negative Error' }); } else if (a === 0) { throw ({ message: 'Zero Error' }); } return result;} Solution 2123456function isPositive(a) { let message = 'YES'; if (a &lt;= 0) throw { message: `${a &lt; 0 ? 'Negative' : 'Zero'} Error` }; return message;}","link":"/2019/06/02/algorithm/hackerrank/10Days_Day3_Throw/"},{"title":"Day3 Try, Catch, and Finally","text":"ObjectiveIn this challenge, we learn about strings and exceptions. Check out the attached tutorials for more details. TaskComplete the reverseString function; it has one parameter, s. You must perform the following actions: Try to reverse string s using the split, reverse, and join methods. If an exception is thrown, catch it and print the contents of the exception’s message on a new line. Print s on a new line. If no exception was thrown, then this should be the reversed string; if an exception was thrown, this should be the original string. Input FormatLocked stub code in the editor reads variable s from stdin and passes it to the function. Output FormatYou must write two print statements using console.log(): Print the contents of a caught exception’s message on a new line. If no exception was thrown, this line should not be printed. Print s on a new line. If no exception was thrown, then this should be the reversed string; if an exception was thrown, this should be the original string. Sample Input 01&quot;1234&quot; ample Output 014321 Explanation 0 s = “1234” is a string type, so it can be reversed without throwing an exception. Thus, we print the reversed value, 4321, as our answer. Sample Input 11Number(1234) Sample Output 112s.split is not a function1234 Explanation 1 s = Number(1234) is not a string type, so it can’t be reversed using string functions. When we try to reverse it anyway, it throws an exception. We then catch the exception and print its message, which is s.split is not a function. Next, we finally print s which, because it wasn’t able to be reversed, is Number(1234). Solution 112345678910111213141516171819/* * Complete the isPositive function. * If 'a' is positive, return \"YES\". * If 'a' is 0, throw an Error with the message \"Zero Error\" * If 'a' is negative, throw an Error with the message \"Negative Error\" *//* * Complete the reverseString function * Use console.log() to print to stdout. */function reverseString(s) { try { s = [...s].reverse().join(''); } catch (e) { console.log('s.split is not a function'); } console.log(s);} Solution 21234567891011/* * Complete the reverseString function * Use console.log() to print to stdout. */function reverseString(s) { (typeof s !== 'string') ? console.log(\"s.split is not a function\") : (s = s.split('').reverse().join('')); console.log(s);}","link":"/2019/06/02/algorithm/hackerrank/10Days_Day3_TryCatchAndFinally/"},{"title":"Day4 Classes","text":"ObjectiveIn this challenge, we practice using JavaScript classes. Check the attached tutorial for more details. TaskCreate a Polygon class that has the following properties: A constructor that takes an array of integer values describing the lengths of the polygon’s sides. A perimeter() method that returns the polygon’s perimeter.Locked code in the editor tests the Polygon constructor and the perimeter method. Note: The perimeter method must be lowercase and spelled correctly. Input FormatThere is no input for this challenge. Output FormatThe perimeter method must return the polygon’s perimeter using the side length array passed to the constructor. ExplanationConsider the following code: 12345// Create a polygon with side lengths 3, 4, and 5let triangle = new Polygon([3, 4, 5]); // Print the perimeterconsole.log(triangle.perimeter()); When executed with a properly implemented Polygon class, this code should print the result of 3 + 4 + 5 = 12. Solution12345678910111213141516/* * Implement a Polygon class with the following properties: * 1. A constructor that takes an array of integer side lengths. * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths. */class Polygon { constructor(array) { this.array = array } perimeter(){ return this.array.reduce((target, arr) =&gt; { return target + arr; }, 0) }}","link":"/2019/06/03/algorithm/hackerrank/10Days_Day4_Classes/"},{"title":"Day4 Count Objects","text":"ObjectiveIn this challenge, we learn about iterating over objects. Check the attached tutorial for more details. TaskComplete the function in the editor. It has one parameter: an array, a, of objects. Each object in the array has two integer properties denoted by x and y. The function must return a count of all such objects o in array a that satisfy o.x = o.y. Constraints 5 &lt;= n &lt;= 10 1 &lt;= x,y &lt;= 100 Output FormatReturn a count of the total number of objects o such that o.x = o.y. Locked stub code in the editor prints the returned value to STDOUT. Sample Input 012345651 12 33 33 44 5 Sample Output 012 Explanation 0There are n = 5 objects in the objects array: Objects[0] = {x: 1, y: 1} Objects[1] = {x: 2, y: 3} Objects[2] = {x: 3, y: 3} Objects[3] = {x: 4, y: 4} Objects[4] = {x: 5, y: 5} Because we have two objects o that satisfy o.x = o.y (i.e., Objects[0] and Objects[2]), we return 2 as our answer. Solution12345678910111213/* * Return a count of the total number of objects 'o' satisfying o.x == o.y. * * Parameter(s): * objects: an array of objects with integer properties 'x' and 'y' */function getCount(objects) { return objects.reduce((target, item) =&gt; { (item.x === item.y) &amp;&amp; (target += 1); return target; }, 0);}","link":"/2019/06/03/algorithm/hackerrank/10Days_Day4_CountObjects/"},{"title":"Day4 Create a Rectangle Object","text":"ObjectiveIn this challenge, we practice creating objects. Check out the attached tutorial for more details. TaskComplete the function in the editor. It has two parameters: and . It must return an object modeling a rectangle that has the following properties: length : This value is equal to a. width : This value is equal to b. perimeter : This value is equal to 2 X (a + b) area : This value is equal to a X b Note: The names of the object’s properties must be spelled correctly to pass this challenge. Input FormatThe first line contains an integer denoting a.The second line contains an integer denoting b. Constraints 1 &lt;= x,y &lt;= 100 Output FormatReturn a object that has the properties specified above. Locked code in the editor prints the returned object’s length, width, perimeter, and area to STDOUT. Sample Input 01245 Sample Output 01234451820 Explanation 0Given a length of a = 3 and a width of b = 5, the Rectangle object’s perimeter is 4 + 4 + 5 + 5 = 18 and its area is 4 X 5 = 20. Solution 1123456789/* * Complete the Rectangle function */function Rectangle(a, b) { this.length = a; this.width = b; this.perimeter = (a + b) * 2; this.area = a * b;} Solution 212345678function Rectangle(a, b) { return { length: a, width: b, perimeter: 2 * (a + b), area: a*b }}","link":"/2019/06/03/algorithm/hackerrank/10Days_Day4_CreateARectangleObject/"},{"title":"Day5 Arrow Functions","text":"ObjectiveIn this challenge, we practice using arrow functions. Check the attached tutorial for more details. TaskComplete the function in the editor. It has one parameter: an array, nums. It must iterate through the array performing one of the following actions on each element: If the element is even, multiply the element by 2. If the element is odd, multiply the element by 3. The function must then return the modified array. Input FormatThe first line contains an integer, n, denoting the size of nums. The second line contains n space-separated integers describing the respective elements of nums. Constraints 1 &lt;= n &lt;= 10 1 &lt;= nums[i] &lt;= 100, where nums[i] is the ith element of nums. Output FormatReturn the modified array where every even element is doubled and every odd element is tripled. Sample Input 01251 2 3 4 5 Sample Output 013 4 9 8 15 Explanation 0Given nums = [1,2,3,4,5], we modify each element so that all even elements are multiplied by 2 and all odd elements are multipled by 3. In other words, [1,2,3,4,5] =&gt; [13,22,33,42,5*3] -&gt; [3,4,9,8,15]. We then return the modified array as our answer. Solution 1123456789/* * Modify and return the array so that all even elements are doubled and all odd elements are tripled. * * Parameter(s): * nums: An array of numbers. */function modifyArray(nums) { return (nums || []).map(num =&gt; num * (num % 2 === 0 ? 2 : 3));} Solution 212345678910function modifyArray(nums) { return nums.reduce((target, num) =&gt; { target.push( num % 2 === 0 ? num * 2 : num * 3 ); return target; },[])}","link":"/2019/06/04/algorithm/hackerrank/10Days_Day5_ArrowFunctions/"},{"title":"Day5 Inheritance","text":"ObjectiveIn this challenge, we practice implementing inheritance and use JavaScript prototypes to add a new method to an existing prototype. Check out the attached Classes tutorial to refresh what we’ve learned about these topics. TaskWe provide the implementation for a Rectangle class in the editor. Perform the following tasks: Add an area method to Rectangle’s prototype. Create a Square class that satisfies the following: It is a subclass of Rectangle. It contains a constructor and no other methods. It can use the Rectangle class’ area method to print the area of a Square object. Locked code in the editor tests the class and method implementations and prints the area values to STDOUT. Solution 1123456789101112131415/* * Write code that adds an 'area' method to the Rectangle class' prototype */Rectangle.prototype.area = function () { return (this.w * this.h);}/* * Create a Square class that inherits from Rectangle and implement its class constructor */class Square extends Rectangle { constructor(s) { super(s, s); }} Solution 21234567891011Rectangle.prototype.area = function () { return this.w * this.h;}class Square extends Rectangle { constructor(w) { super(w); this.h = w; }}","link":"/2019/06/04/algorithm/hackerrank/10Days_Day5_Inheritance/"},{"title":"Day5 Template Literals","text":"ObjectiveIn this challenge, we practice using JavaScript Template Literals. Check the attached tutorial for more details. TaskThe code in the editor has a tagged template literal that passes the area and perimeter of a rectangle to a tag function named sides. Recall that the first argument of a tag function is an array of string literals from the template, and the subsequent values are the template’s respective expression values. Complete the function in the editor so that it does the following: Finds the initial values of s1 and s2 by plugging the area and perimeter values into the formula: where A is the rectangle’s area and P is its perimeter. Creates an array consisting of s1 and s2 and sorts it in ascending order. Returns the sorted array. Input FormatThe first line contains an integer denoting s1. The second line contains an integer denoting s2. Constraints 1 &lt;= s1, s2 &lt;= 100 Output FormatReturn an array consisting of s1 and s2, sorted in ascending order. Sample Input 0121014 Sample Output 0121014 Explanation 0The locked code in the editor passes the following arrays to the tag function: The value of literals is [ ‘The area is: ‘, ‘.\\nThe perimeter is: ‘, ‘.’ ]. The value of expressions is [ 140, 48 ], where the first value denotes the rectangle’s area, A, and the second value denotes its perimeter, P. When we plug those values into our formula, we get the following: 12s1=s2= We then store these values in an array, [14, 10], sort the array, and return the sorted array, [10, 14], as our answer. Solution 1123456789101112131415/* * Determine the original side lengths and return an array: * - The first element is the length of the shorter side * - The second element is the length of the longer side * * Parameter(s): * literals: The tagged template literal's array of strings. * expressions: The tagged template literal's array of expression values (i.e., [area, perimeter]). */function sides(literals, ...expressions) { const [a, p] = expressions; const value = Math.sqrt((p ** 2 - (16 * a))); return [((p - value) / 4), ((p + value) / 4)];} Solution 212345678910111213141516function sides(literals, ...expressions) { const value = [...expressions] const p = value[1]; const a = value[0]; let calSqrt = (p, a) =&gt; Math.sqrt(Math.pow(p, 2) - (16 * a)); return value.reduce((target, item, index) =&gt; { target.push( (index % 2 === 0 ? p - calSqrt(p, a) : p + calSqrt(p, a))/4 ); return target; },[]) }","link":"/2019/06/04/algorithm/hackerrank/10Days_Day5_TemplateLiterals/"},{"title":"Day6 Bitwise Operators","text":"ObjectiveToday, we’re practicing bitwise operations. Check the attached tutorial for more details. TaskWe define S to be a sequence of distinct sequential integers from 1 to n; in other words, S = {1,2,3,…,n}. We want to know the maximum bitwise AND value of any two integers, a and b (where (a &lt; b)), in sequence S that is also less than a given integer, k. Complete the function in the editor so that given n and k, it returns the maximum a &amp; b &lt; k. Note: The &amp; symbol represents the bitwise AND operator. Input FormatThe first line contains an integer, q, denoting the number of function calls.Each of the q subsequent lines defines a dataset for a function call in the form of two space-separated integers describing the respective values of n and k. Constraints 1 &lt;= q &lt;= 10^3 2 &lt;= n &lt;= 10^3 2 &lt;= k &lt;= n Output FormatReturn the maximum possible value of a &amp; b &lt; k for any a &lt; b in sequence S. Sample Input 0123435 28 52 2 Sample Output 0123140 Explanation 0We perform the following q = 3 function calls: When n = 5 and k = 2, we have the following possible a and b values in set S = {1,2,3,4,5}: a b a &amp; b 1 2 001 &amp; 010 = (000)^2 =&gt; (0) 1 3 001 &amp; 011 = (001)^2 =&gt; (1) 1 4 001 &amp; 100 = (000)^2 =&gt; (0) 1 5 001 &amp; 101 = (001)^2 =&gt; (1) 2 3 010 &amp; 011 = (010)^2 =&gt; (2) 2 4 010 &amp; 100 = (000)^2 =&gt; (0) 2 5 010 &amp; 101 = (000)^2 =&gt; (0) 3 4 011 &amp; 100 = (000)^2 =&gt; (0) 3 5 011 &amp; 101 = (001)^2 =&gt; (1) 4 5 100 &amp; 101 = (100)^2 =&gt; (4) The maximum of any a &amp; b that is also &lt; k is 1, so we return 1. When n = 8 and k = 5, the maximum of any a &amp; b &lt; k in set S = {1,2,3,4,5,6,7,8} is 4 (see table above), so we return 4. When n = 2 and k = 2, the maximum of any a &amp; b &lt; k in set S = {1,2} is 0 (see table above), so we return 0. Sample Input 112329 28 3 Sample Output 11212 Explanation 1We perform the following q = 2 function calls: When n = 9 and k = 2, we have the following possible a and b values in set S = {1,2,3,4,5,6,7,8,9}** is 1 (see table above), so we return 1. When n = 8 and k = 3, the maximum of any a &amp; b &lt; k in set S = {1,2,3,4,5,6,7,8} is 2 (see table above), so we return 2. Solution123456789101112function getMaxLessThanK(n, k) { let max = 0; for (let a = 1; a &lt; n; a++) { for (let b = a + 1; b &lt;= n; b++) { let bitwiseAnd = a &amp; b; (bitwiseAnd &lt; k &amp;&amp; max &lt; bitwiseAnd) &amp;&amp; (max = bitwiseAnd) } } return max;}","link":"/2019/06/05/algorithm/hackerrank/10Days_Day6_BitwiseOperators/"},{"title":"Day6 JavaScript Dates","text":"ObjectiveIn this challenge, we learn about JavaScript Dates. Check out the attached tutorial for more details. TaskGiven a date string, dateString, in the format MM/DD/YYYY, find and return the day name for that date. Each day name must be one of the following strings: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, or Saturday. For example, the day name for the date 12/07/2016 is Wednesday. Input FormatLocked stub code in the editor reads the following input from stdin:The first line contains an integer, d, denoting the number of dates to check.Each line i of the d subsequent lines contains a date in MM/DD/YYYY format; each date denotes some dateString that is passed to the function. Constraints It is guaranteed that the input only consists of valid dates. Output FormatThe function must return a string denoting the day of the week corresponding to the date denoted by dateString. Sample Input 0123210/11/200911/10/2010 Sample Output 012SundayWednesday Explanation 0The function is called for the following d = 2 dates: The date 10/11/2009 was a Sunday, so we return Sunday. The date 11/10/2010 was a Wednesday, so we return Wednesday. Solution12345// The days of the week are: \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"function getDayName(dateString) { return [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday' ][(new Date(dateString)).getDay()];}","link":"/2019/06/05/algorithm/hackerrank/10Days_Day6_JavaScriptDates/"},{"title":"Day7 Regular Expressions I","text":"ObjectiveIn this challenge, we use a Regular Expression to evaluate a string. Check out the attached tutorial for more details. TaskComplete the function in the editor below by returning a RegExp object, re, that matches any string s that begins and ends with the same vowel. Recall that the English vowels are a, e, i, o, and u. Constraints The length of string s is &gt;= 3. String s consists of lowercase letters only (i.e., [a-z]). Output FormatThe function must return a RegExp object that matches any string s beginning with and ending in the same vowel. Sample Input 01bcd Sample Output 01false Explanation 0This string starts with (and ends in) a consonant, so it cannot start and end with the same vowel. Sample Input 11abcd Sample Output 11false Explanation 1This string ends in a consonant, so it cannot start and end with the same vowel. Sample Input 21abcda Sample Output 21true Explanation 2This string starts and ends with the same vowel (a). Sample Input 31abcdo Sample Output 31false Explanation 3This string starts with the vowel a but ends in the vowel o. Solution123456789101112function regexVar() { /* * Declare a RegExp object variable named 're' * It must match a string that starts and ends with the same vowel (i.e., {a, e, i, o, u}) */ return new RegExp(/^([aeiou]).*\\1$/); /* * Do not remove the return statement */ return re;}","link":"/2019/06/07/algorithm/hackerrank/10Days_Day7_RegularExpressions1/"},{"title":"Day7 Regular Expressions II","text":"TaskComplete the function in the editor below by returning a RegExp object, re, that matches any string s satisfying both of the following conditions: String s starts with the prefix Mr., Mrs., Ms., Dr., or Er. The remainder of string s (i.e., the rest of the string after the prefix) consists of one or more upper and/or lowercase English alphabetic letters (i.e., [a-z] and [A-Z]). Constraints The length of string s is &gt;= 3. Output FormatThe function must return a RegExp object that matches any string s satisfying both of the given conditions. Sample Input 01Mr.X Sample Output 01true Explanation 0This string starts with Mr., followed by an English alphabetic letter (X). Sample Input 11Mrs.Y Sample Output 11true Explanation 1This string starts with Mrs., followed by an English alphabetic letter (Y). Sample Input 21Dr#Joseph Sample Output 21false Explanation 2This string starts with Dr# instead of Dr., so it’s invalid. Sample Input 31Er .Abc Sample Output 31false Explanation 3This string starts with Er but there is a space before the period (.), making the string invalid. Solution123456789101112function regexVar() { /* * Declare a RegExp object variable named 're' * It must match a string that starts with 'Mr.', 'Mrs.', 'Ms.', 'Dr.', or 'Er.', * followed by one or more letters. */ const re = new RegExp(/^(Mr\\.|Dr\\.|Er\\.|Ms\\.|Mrs\\.)\\s?[a-z|A-Z]+$/); /* * Do not remove the return statement */ return re;}","link":"/2019/06/07/algorithm/hackerrank/10Days_Day7_RegularExpressions2/"},{"title":"Day7 Regular Expressions III","text":"TaskComplete the function in the editor below by returning a RegExp object, re, that matches every integer in some string s. Constraints The length of string s is &gt;= 3. It’s guaranteed that string s contains at least one integer. Output FormatThe function must return a RegExp object that matches every integer in some string s. Sample Input 01102, 1948948 and 1.3 and 4.5 Sample Output 012345610219489481345 Explanation 0When we call match on string s and pass the correct RegExp as our argument, it returns the following array of results: [ ‘102’, ‘1948948’, ‘1’, ‘3’, ‘4’, ‘5’ ]. Sample Input 111 2 3 Sample Output 1123123 Explanation 1When we call match on string s and pass the correct RegExp as our argument, it returns the following array of results: [ ‘1’, ‘2’, ‘3’ ]. Solution123456789101112function regexVar() { /* * Declare a RegExp object variable named 're' * It must match ALL occurrences of numbers in a string. */ const re = new RegExp(/[0-9]+/gm); /* * Do not remove the return statement */ return re;}","link":"/2019/06/07/algorithm/hackerrank/10Days_Day7_RegularExpressions3/"},{"title":"Day8 Create a Button","text":"ObjectiveIn this challenge, we practice creating buttons in JavaScript. Check out the attached tutorial for learning materials. TaskComplete the code in the editor so that it creates a clickable button satisfying the following properties: The button’s id is btn. The button’s initial text label is . After each click, the button must increment by . Recall that the button’s text label is the JS object’s innerHTML property. The button has the following style properties: A width of 96px. A height of 48px. The font-size attribute is 24px. The .js and .css files are in different directories, so use the link tag to provide the CSS file path and the script tag to provide the JS file path: 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;link rel=\"stylesheet\" href=\"css/button.css\" type=\"text/css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;script src=\"js/button.js\" type=\"text/javascript\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; SubmissionsThis is a new style of challenge involving Front-End rendering. It may take up to seconds to see the result of your code, so please be patient after clicking Submit. The Submissions page contains screenshots to help you gauge how well you did. Ask questions in the Discussions forum and submit any bug reports to support@hackerrank.com. Enjoy! ExplanationInitially, the button looks like this: After the first 4 clicks, it looks like this: After 5 more clicks, it looks like this: Solutionjs123456789document.addEventListener('DOMContentLoaded', () =&gt; { const button = document.getElementById('btn'); button.addEventListener('click', (e) =&gt; { const count = Number(e.currentTarget.innerText) + 1; e.currentTarget.innerText = count; });}); html12345678910111213&lt;!-- Enter your HTML code here --&gt;&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;Button&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"css/button.css\" type=\"text/css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;button id=\"btn\" type=\"button\"&gt;0&lt;/button&gt; &lt;script src=\"js/button.js\" type=\"text/javascript\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; css12345#btn { width: 96px; height: 48px; font-size: 24px;}","link":"/2019/06/08/algorithm/hackerrank/10Days_Day8_CreateAButton/"},{"title":"Day0 Hello World","text":"ObjectiveIn this challenge, we review some basic concepts that will get you started with this series. You will need to use the same (or similar) syntax to read input and write output in challenges throughout HackerRank. Check out the Tutorial tab for learning materials and an instructional video! TaskTo complete this challenge, you must save a line of input from stdin to a variable, print Hello, World. on a single line, and finally print the value of your variable on a second line. You’ve got this! Note: The instructions are Java-based, but we support submissions in many popular languages. You can switch languages using the drop-down menu above your editor, and the InputString variable may be written differently depending on the best-practice conventions of your submission language. Input FormatA single line of text denoting inputString (the variable whose contents must be printed). Output FormatPrint Hello, World. on the first line, and the contents of inputString on the second line. Sample Input 01Welcome to 30 Days of Code! ##Sample Output 0 12Hello, World. Welcome to 30 Days of Code! ExplanationOn the first line, we print the string literal Hello, World.. On the second line, we print the contents of the inputString variable which, for this sample case, happens to be Welcome to 30 Days of Code!. If you do not print the variable’s contents to stdout, you will not pass the hidden test case. Solution1234567function processData(inputString) { // This line of code prints the first line of output console.log(\"Hello, World.\"); // Write the second line of output that prints the contents of 'inputString' here.}","link":"/2019/06/15/algorithm/hackerrank/Day0_HelloWorld/"},{"title":"Day10 Binary Numbers","text":"ObjectiveToday, we’re working with binary numbers. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven a base-10 integer, n, convert it to binary (base-2). Then find and print the base-10 integer denoting the maximum number of consecutive 1‘s in n‘s binary representation. Input FormatA single integer, n. Constraints 1 &lt;= n &lt;= 106 Output FormatPrint a single base-10 integer denoting the maximum number of consecutive 1‘s in the binary representation of n. Sample Input 115 Sample Output 111 Sample Input 2113 Sample Output 212 ExplanationSample Case 1:The binary representation of 5 is 101, so the maximum number of consecutive 1‘s is 1. Sample Case 2:The binary representation of 13 is 1101, so the maximum number of consecutive 1‘s is 2. Solution 112345678910111213141516171819202122function main() { let n = parseInt(readLine(), 10); let values = []; while (+n != 0) { values.push(n % 2); n = Math.floor(n / 2); } let { result } = values.reduce((target, item, index) =&gt; { item ? target['accumulator']++ : (target['accumulator'] = 0); target['accumulator'] &gt; target['result'] &amp;&amp; (target['result'] = target['accumulator']); return target; }, { accumulator: 0, result: 0 }); console.log(result);} Solution 212345678910111213141516function main() { const n = parseInt(readLine(), 10); let result = 0; const temp = n.toString(2).split('').reduce((target, num) =&gt; { let value = Number(num) &gt; 0 ? Number(target) + Number(num) : ( result = target &gt; result ? target : result, 0 ); return value; }, 0); console.log(result - temp &gt; 0 ? result : temp)} Solution 31234567891011121314151617181920212223function main() { const n = parseInt(readLine(), 10); const array = n.toString(2).split(''); let max = 0; let cur = 0; for (let i = 0, itotal = array.length; i &lt; itotal; i++) { if (array[i] == 1) { cur++; } else if (array[i] == 0) { if (cur &gt; max) { max = cur; } cur = 0; } } if (cur &gt; max) { max = cur; } console.log(max);}","link":"/2019/06/16/algorithm/hackerrank/Day10_BinaryNumbers/"},{"title":"Day12 Inheritance","text":"ObjectiveToday, we’re delving into Inheritance. Check out the attached tutorial for learning materials and an instructional video! TaskYou are given two classes, Person and Student, where Person is the base class and Student is the derived class. Completed code for Person and a declaration for Student are provided for you in the editor. Observe that Student inherits all the properties of Person. Complete the Student class by writing the following: A Student class constructor, which has 4 parameters: A string, firstName. A string, lastName. An integer, id. An integer array (or vector) of test scores, scores. A char calculate() method that calculates a Student object’s average and returns the grade character representative of their calculated average: Input FormatThe locked stub code in your editor calls your Student class constructor and passes it the necessary arguments. It also calls the calculate method (which takes no arguments). You are not responsible for reading the following input from stdin:The first line contains firstName, lastName, and id, respectively. The second line contains the number of test scores. The third line of space-separated integers describes scores. Constraints 1 &lt;= |firstName|,|lastName| &lt;= 10 |id| = 7 0 &lt;= score,average &lt;= 100 Output FormatThis is handled by the locked stub code in your editor. Your output will be correct if your Student class constructor and calculate() method are properly implemented. Sample Input123Heraldo Memelli 81356272100 80 Sample Output123Name: Memelli, HeraldoID: 8135627Grade: O ExplanationThis student had 2 scores to average: 100 and 80. The student’s average grade is https://latex.codecogs.com/svg.latex?\\frac{(100&space;&plus;&space;80)}{2} = 90. An average grade of 90 corresponds to the letter grade O, so our calculate() method should return the character’O’. Solution 1123456789101112131415161718192021222324252627282930313233343536373839404142434445class Student extends Person { constructor(firstName, lastName, id, scores) { super(firstName, lastName, id, scores); this.scores = scores; } calculate() { const average = this.scores.reduce((target, score) =&gt; { return target + score }) / this.scores.length; const range = (average &lt; 70) ? Math.ceil((100 - average) / 15) : Math.floor((100 - average - 1) / 10); let letter = ''; switch (range) { case -1: case 0: letter = 'O'; break; case 1: letter = 'E'; break; case 2: letter = 'A'; break; case 3: letter = 'P'; break; case 4: letter = 'D'; break; default: letter = 'T'; break; } return letter; }} Solution 21234567891011121314151617181920212223242526272829class Student extends Person { constructor(firstName, lastName, idNumber, testScores) { super(firstName, lastName, idNumber); this.testScores = testScores; } calculate() { let average = 0; let sum = 0; let grade = ''; for (let i = 0, length = this.testScores.length; i &lt; length; i++) { sum += this.testScores[i]; } average = sum / this.testScores.length; if (90 &lt;= average &amp;&amp; average &lt;= 100) { grade = 'O'; } else if (80 &lt;= average &amp;&amp; average &lt; 90) { grade = 'E'; } else if (70 &lt;= average &amp;&amp; average &lt; 80) { grade = 'A'; } else if (55 &lt;= average &amp;&amp; average &lt; 70) { grade = 'P'; } else if (40 &lt;= average &amp;&amp; average &lt; 55) { grade = 'D'; } else { grade = 'T'; } return grade; }}","link":"/2019/06/16/algorithm/hackerrank/Day12_Inheritance/"},{"title":"Day11 2D Arrays","text":"ObjectiveToday, we’re building on our knowledge of Arrays by adding another dimension. Check out the Tutorial tab for learning materials and an instructional video! ContextGiven a 6 X 6 2D Array, A: 1234561 1 1 0 0 00 1 0 0 0 01 1 1 0 0 00 0 0 0 0 00 0 0 0 0 00 0 0 0 0 0 We define an hourglass in A to be a subset of values with indices falling in this pattern in A‘s graphical representation: 123a b c de f g There are 16 hourglasses in A, and an hourglass sum is the sum of an hourglass’ values. TaskCalculate the hourglass sum for every hourglass in A, then print the maximum hourglass sum. Input FormatThere are 6 lines of input, where each line contains 6 space-separated integers describing 2D Array A; every value in A will be in the inclusive range of -9 to 9. Constraints -9 &lt;= A[i][j] &lt;= 9 0 &lt;= i,j &lt;= 5 Output FormatPrint the largest (maximum) hourglass sum found in A. Sample Input1234561 1 1 0 0 00 1 0 0 0 01 1 1 0 0 00 0 2 4 4 00 0 0 2 0 00 0 1 2 4 0 Sample Output119 ExplanationA contains the following hourglasses: 1234567891011121314151 1 1 1 1 0 1 0 0 0 0 0 1 0 0 01 1 1 1 1 0 1 0 0 0 0 00 1 0 1 0 0 0 0 0 0 0 0 1 1 0 00 0 2 0 2 4 2 4 4 4 4 01 1 1 1 1 0 1 0 0 0 0 0 0 2 4 40 0 0 0 0 2 0 2 0 2 0 00 0 2 0 2 4 2 4 4 4 4 0 0 0 2 00 0 1 0 1 2 1 2 4 2 4 0 The hourglass with the maximum sum (19) is: 1232 4 4 21 2 4 Solution 112345678910111213141516171819202122function main() { let arr = Array(6); for (let i = 0; i &lt; 6; i++) { arr[i] = readLine().split(' ').map(arrTemp =&gt; parseInt(arrTemp, 10)); } let result = arr.reduce((target, rows, index) =&gt; { rows.reduce((subTarget, item, subIndex) =&gt; { ( index &lt; arr.length - 2 &amp;&amp; subIndex &lt; arr.length - 2 ) &amp;&amp; target.push( arr[index][subIndex] + arr[index][subIndex + 1] + arr[index][subIndex + 2] + arr[index + 1][subIndex + 1] + arr[index + 2][subIndex] + arr[index + 2][subIndex + 1] + arr[index + 2][subIndex + 2] ); }, []); return target; }, []); console.log(Math.max.apply(null, result));} Solution 21234567891011121314151617181920212223242526272829303132function main() { let arr = Array(6); let maxSum; for (let i = 0; i &lt; 6; i++) { arr[i] = readLine().split(' ').map(arrTemp =&gt; parseInt(arrTemp, 10)); } const findMaxSum = (n, m) =&gt; { let sum = 0; for (let i = 0; i &lt; 3; i++) { for (let j = 0; j &lt; 3; j++) { sum += !(i === 1 &amp;&amp; (j === 0 || j === 2)) &amp;&amp; arr[n + i][m + j]; } } return sum; } const search = () =&gt; { let sum; for (let i = 0; i &lt; 4; i++) { for (let j = 0; j &lt; 4; j++) { sum = findMaxSum(i, j); (i === 0 &amp;&amp; j === 0) &amp;&amp; (maxSum = sum); maxSum &lt; sum &amp;&amp; (maxSum = sum); } } } search(); console.log(maxSum); } Solution 31234567891011121314151617181920function main() { let arr = Array(6); for (let i = 0; i &lt; 6; i++) { arr[i] = readLine().split(' ').map(arrTemp =&gt; parseInt(arrTemp, 10)); } const temp = [] for (let i = 0; i &lt; 4; i++) { for (let j = 0; j &lt; 4; j++) { temp.push(arr[i][j] + arr[i][j + 1] + arr[i][j + 2] + arr[i + 1][j + 1] + arr[i + 2][j] + arr[i + 2][j + 1] + arr[i + 2][j + 2]) } } let max = temp.reduce(function (previous, current) { return previous &gt; current ? previous : current; }); console.log(max);}","link":"/2019/06/16/algorithm/hackerrank/Day11_2DArrays/"},{"title":"Day13 Abstract Classes","text":"ObjectiveToday, we’re taking what we learned yesterday about Inheritance and extending it to Abstract Classes. Because this is a very specific Object-Oriented concept, submissions are limited to the few languages that use this construct. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven a Book class and a Solution class, write a MyBook class that does the following: Inherits from Book Has a parameterized constructor taking these 3 parameters: string title string author int price Implements the Book class’ abstract display() method so it prints these 3 lines: title, a space, and then the current instance’s title. author, a space, and then the current instance’s author. price, a space, and then the current instance’s price. Note: Because these classes are being written in the same file, you must not use an access modifier (e.g.: public) when declaring MyBook or your code will not execute. Input FormatYou are not responsible for reading any input from stdin. The Solution class creates a Book object and calls the MyBook class constructor (passing it the necessary arguments). It then calls the display method on the Book object. Output FormatThe void display() method should print and label the respective title, author, and price of the MyBook object’s instance (with each value on its own line) like so: 123Title: $titleAuthor: $authorPrice: $price Note: The $ is prepended to variable names to indicate they are placeholders for variables. Sample InputThe following input from stdin is handled by the locked stub code in your editor: 123The AlchemistPaulo Coelho248 Sample OutputThe following output is printed by your display() method: 123Title: The AlchemistAuthor: Paulo CoelhoPrice: 248 Solution123456789101112131415161718192021222324252627282930313233class MyBook extends Book { /** * Class Constructor * * @param title The book's title. * @param author The book's author. * @param price The book's price. **/ // Write your constructor here constructor(title, author, price) { super(); this.title = title; this.author = author; this.price = price; } /** * Method Name: display * * Print the title, author, and price in the specified format. **/ // Write your method here display() { console.log(`Title: ${this.title}`); console.log(`Author: ${this.author}`); console.log(`Price: ${this.price}`); } // End class}","link":"/2019/06/16/algorithm/hackerrank/Day13_AbstractClasses/"},{"title":"Day14 Scope","text":"ObjectiveToday we’re discussing scope. Check out the Tutorial tab for learning materials and an instructional video! The absolute difference between two integers, a and b, is written as |a - b|. The maximum absolute difference between two integers in a set of positive integers, elements, is the largest absolute difference between any two integers in elements. The Difference class is started for you in the editor. It has a private integer array (elements) for storing N non-negative integers, and a public integer (maximumDifference) for storing the maximum absolute difference. TaskComplete the Difference class by writing the following: A class constructor that takes an array of integers as a parameter and saves it to the elements instance variable. A computeDifference method that finds the maximum absolute difference between any 2 numbers in N and stores it in the maximumDifference instance variable. Input FormatYou are not responsible for reading any input from stdin. The locked Solution class in your editor reads in 2 lines of input; the first line contains N, and the second line describes the elements array. Constraints 1 &lt;= N &lt;= 10 1 &lt;= elements[i] &lt;= 100, where 0 &lt;= i &lt;= N - 1 Output FormatYou are not responsible for printing any output; the Solution class will print the value of the maximumDifference instance variable. Sample Input1231 2 5 Sample Output14 ExplanationThe scope of the elements array and maximumDifference integer is the entire class instance. The class constructor saves the argument passed to the constructor as the elements instance variable (where the computeDifference method can access it). To find the maximum difference, computeDifference checks each element in the array and finds the maximum difference between any 2 elements: |1 - 2| = 1 |1 - 5| = 4|2 - 5| = 3 The maximum of these differences is 4, so it saves the value 4 as the maximumDifference instance variable. The locked stub code in the editor then prints the value stored as maximumDifference, which is 4. Solution 1123456789101112131415161718let input = \"3\\n1 2 5\";const difference = () =&gt; { const result = input.split('\\n')[1].split(' ').reduce( (target, el) =&gt; { let { min, max } = target; target[\"min\"] = el &gt; min ? el : min; target[\"max\"] = el &lt; max ? el : max; return target; }, { min: -999, max: 999 } ); console.log(Math.abs(result[\"max\"] - result[\"min\"]));};difference(); Solution 2123456789101112131415161718192021222324let input = \"3\\n1 2 5\";function difference(input) { const split = input.split(\"\\n\"); const length = +split[0]; const array = split[1].split(\" \"); console.log(array, length); let maximum = 0; let result = 0; array.forEach(value1 =&gt; { array.forEach(value2 =&gt;{ result = Math.abs(value1-value2); if(result &gt; maximum) { maximum = result; } }) }); console.log(maximum);}console.log(input);difference(input);","link":"/2019/06/16/algorithm/hackerrank/Day14_Scope/"},{"title":"Day15 Linked List","text":"ObjectiveToday we’re working with Linked Lists. Check out the Tutorial tab for learning materials and an instructional video! A Node class is provided for you in the editor. A Node object has an integer data field, data, and a Node instance pointer, next, pointing to another node (i.e.: the next node in a list). A Node insert function is also declared in your editor. It has two parameters: a pointer, head, pointing to the first node of a linked list, and an integer data value that must be added to the end of the list as a new Node object. TaskComplete the insert function in your editor so that it creates a new Node (pass data as the Node constructor argument) and inserts it at the tail of the linked list referenced by the head parameter. Once the new node is added, return the reference to the head node. Note: If the head argument passed to the insert function is null, then the initial list is empty. Input FormatThe insert function has 2 parameters: a pointer to a Node named head, and an integer value, data. The constructor for Node has 1 parameter: an integer value for the data field. You do not need to read anything from stdin. Output FormatYour insert function should return a reference to the head node of the linked list. Sample InputThe following input is handled for you by the locked code in the editor: The first line contains T, the number of test cases. The T subsequent lines of test cases each contain an integer to be inserted at the list’s tail. 1234542341 Sample OutputThe locked code in your editor prints the ordered data values for each element in your list as a single line of space-separated integers: 12 3 4 1 ExplanationT = 4, so the locked code in the editor will be inserting 4 nodes. The list is initially empty, so head is null; accounting for this, our code returns a new node containing the data value 2 as the head of our list. We then create and insert nodes 3, 4, and 1 at the tail of our list. The resulting list returned by the last call to insert is [2, 3, 4, 1], so the printed output is 2 3 4 1. Solution12345678910111213141516171819this.insert=function(head,data){ //complete this method let node = new Node(data); if (!head) { head = node; } else { let current = head; while (current.next != null) { current = current.next; } current.next = node; } return head;};","link":"/2019/06/16/algorithm/hackerrank/Day15_LinkedList/"},{"title":"Day16 Exceptions - String to Integer","text":"ObjectiveToday, we’re getting started with Exceptions by learning how to parse an integer from a string and print a custom error message. Check out the Tutorial tab for learning materials and an instructional video! TaskRead a string, S, and print its integer value; if S cannot be converted to an integer, print Bad String. Note: You must use the String-to-Integer and exception handling constructs built into your submission language. If you attempt to use loops/conditional statements, you will get a 0 score. Input FormatA single string, S. Constraints 1 &lt;= |S| &lt;= 6, where |S| is the length of string S. S is composed of either lowercase letters (a - z) or decimal digits (0 - 9). Output FormatPrint the parsed integer value of S, or Bad String if S cannot be converted to an integer. Sample Input 013 Sample Output 013 Sample Input 11za Sample Output 11Bad String ExplanationSample Case 0 contains an integer, so it should not raise an exception when we attempt to convert it to an integer. Thus, we print the 3.Sample Case 1 does not contain any integers, so an attempt to convert it to an integer will raise an exception. Thus, our exception handler prints Bad String. Solution1234567891011121314151617181920212223242526/* * You can use the following pseudocode: * * `S` = read string from stdin. * try { * `N` = numeric value of `S`. * * If `N` is `NaN` or `undefined`, then some exception must be thrown, * you can write the following withtout using conditional statement: * &lt;condition to return true when `N` is `NaN` or `undefined`&gt; &amp;&amp; an_undefined_function_call() * * print `N` * } catch (err) { * print `Bad String`. * } */function main() { const S = readLine(); try { console.log(parseInt(S).toString().replace('NaN', 'Bad String')); } catch (e) { console.log(\"Bad String\"); }}","link":"/2019/06/16/algorithm/hackerrank/Day16_ExceptionsStringToInteger/"},{"title":"Day17 More Exceptions","text":"ObjectiveYesterday’s challenge taught you to manage exceptional situations by using try and catch blocks. In today’s challenge, you’re going to practice throwing and propagating an exception. Check out the Tutorial tab for learning materials and an instructional video! TaskWrite a Calculator class with a single method: int power(int,int). The power method takes two integers, n and p, as parameters and returns the integer result of np. If either or is negative, then the method must throw an exception with the message: n and p should be non-negative. Note: Do not use an access modifier (e.g.: public) in the declaration for your Calculator class. Input FormatInput from stdin is handled for you by the locked stub code in your editor. The first line contains an integer, T, the number of test cases. Each of the T subsequent lines describes a test case in 2 space-separated integers denoting n and p, respectively. Constraints No Test Case will result in overflow for correctly written code. Output FormatOutput to stdout is handled for you by the locked stub code in your editor. There are T lines of output, where each line contains the result of np as calculated by your Calculator class’ power method. Sample Input1234543 52 4-1 -2-1 3 Sample Output123424316n and p should be non-negativen and p should be non-negative ExplanationT = 4T0: 3 and 5 are positive, so power returns the result of 35, which is 243. T1: 2 and 4 are positive, so power returns the result of 24=, which is 16. T2: Both inputs (-1 and -2) are negative, so power throws an exception and n and p should be non-negative is printed. T3: One of the inputs (-1) is negative, so power throws an exception and n and p should be non-negative is printed. Solution12345678910111213141516171819202122232425262728293031/* * You can use the following pseudocode: * * `S` = read string from stdin. * try { * `N` = numeric value of `S`. * * If `N` is `NaN` or `undefined`, then some exception must be thrown, * you can write the following withtout using conditional statement: * &lt;condition to return true when `N` is `NaN` or `undefined`&gt; &amp;&amp; an_undefined_function_call() * * print `N` * } catch (err) { * print `Bad String`. * } *///Write your code herelet Calculator = function () { this.power = function (n, p) { try { if (n &gt;= 0 &amp;&amp; p &gt;= 0) { return n ** p; } else { throw 'n and p should be non-negative'; } } catch (error) { return error; } }}","link":"/2019/06/16/algorithm/hackerrank/Day17_MoreExceptions/"},{"title":"Day18 Queues and Stacks","text":"ObjectiveWelcome to Day 18! Today we’re learning about Stacks and Queues. Check out the Tutorial tab for learning materials and an instructional video! A palindrome is a word, phrase, number, or other sequence of characters which reads the same backwards and forwards. Can you determine if a given string, s, is a palindrome? To solve this challenge, we must first take each character in s, enqueue it in a queue, and also push that same character onto a stack. Once that’s done, we must dequeue the first character from the queue and pop the top character off the stack, then compare the two characters to see if they are the same; as long as the characters match, we continue dequeueing, popping, and comparing each character until our containers are empty (a non-match means s isn’t a palindrome). Write the following declarations and implementations: Two instance variables: one for your stack, and one for your queue. A void pushCharacter(char ch) method that pushes a character onto a stack. A void enqueueCharacter(char ch) method that enqueues a character in the queue instance variable. A char popCharacter() method that pops and returns the character at the top of the stack instance variable. A char dequeueCharacter() method that dequeues and returns the first character in the queue instance variable. Input FormatYou do not need to read anything from stdin. The locked stub code in your editor reads a single line containing string s. It then calls the methods specified above to pass each character to your instance variables. Constraints s is composed of lowercase English letters. Output FormatYou are not responsible for printing any output to stdout.If your code is correctly written and s is a palindrome, the locked stub code will print The word, s, is not a palindrome; otherwise, it will print The word, s, is not a palindrome Sample Input1racecar Sample Output1The word, racecar, is a palindrome. Solution1234567891011function Solution(){ //Write your code here this.stack = []; this.queue = []; this.pushCharacter = (value) =&gt; this.stack.push(value); this.enqueueCharacter = (value) =&gt; this.queue.push(value); this.popCharacter = () =&gt; this.stack.pop(); this.dequeueCharacter = () =&gt; this.queue.shift();}","link":"/2019/06/16/algorithm/hackerrank/Day18_QueuesAndStack/"},{"title":"Day19 Interfaces","text":"ObjectiveToday, we’re learning about Interfaces. Check out the Tutorial tab for learning materials and an instructional video! TaskThe AdvancedArithmetic interface and the method declaration for the abstract divisorSum(n) method are provided for you in the editor below. Complete the implementation of Calculator class, which implements the AdvancedArithmetic interface. The implementation for the divisorSum(n) method must return the sum of all divisors of n. Input FormatA single line containing an integer, n. Constraints 1 &lt;= n &lt;= 1000 Output FormatYou are not responsible for printing anything to stdout. The locked template code in the editor below will call your code and print the necessary output. Sample Input16 Sample Output12I implemented: AdvancedArithmetic12 ExplanationThe integer 6 is evenly divisible by 1, 2, 3, and 6. Our divisorSum method should return the sum of these numbers, which is 1 + 2 + 3 + 6 = 12. The Solution class then prints I implemented: AdvancedArithmetic on the first line, followed by the sum returned by divisorSum (which is 12) on the second line. Solution1234567891011121314151617181920212223242526272829303132333435/** It's not supported JavaScript so it create similar code **/class AdvancedArithmetic { divisor(n) { return n || 0; };}class Calculator extends AdvancedArithmetic { constructor(props) { super(props); this.divisor = this.divisorSum.bind(this); } divisorSum(n) { return Array(n).fill(0).reduce((target, item, index) =&gt; { !(n % (index + 1)) &amp;&amp; (target += (index + 1)) ; return target; }, 0); }}function Solution () { const n = 6; const myCalculator = new Calculator(); let sum = myCalculator.divisor(n); console.log(\"I implemented: AdvancedArithmetic\\n\" + sum); }Solution();","link":"/2019/06/16/algorithm/hackerrank/Day19_Interfaces/"},{"title":"Day1 Data Types","text":"ObjectiveToday, we’re discussing data types. Check out the Tutorial tab for learning materials and an instructional video! TaskComplete the code in the editor below. The variables i, d, and s are already declared and initialized for you. You must: Declare 3 variables: one of type int, one of type double, and one of type String. Read 3 lines of input from stdin (according to the sequence given in the Input Format section below) and initialize your 3 variables. Use the + operator to perform the following operations: Print the sum of i plus your int variable on a new line. Print the sum of d plus your double variable to a scale of one decimal place on a new line. Concatenate s with the string you read as input and print the result on a new line. Note: If you are using a language that doesn’t support using + for string concatenation (e.g.: C), you can just print one variable immediately following the other on the same line. The string provided in your editor must be printed first, immediately followed by the string you read as input. Input FormatThe first line contains an integer that you must sum with i. The second line contains a double that you must sum with d. The third line contains a string that you must concatenate with s. Output FormatPrint the sum of both integers on the first line, the sum of both doubles (scaled to 1 decimal place) on the second line, and then the two concatenated strings on the third line. Sample Input 0123124.0is the best place to learn and practice coding! Sample Output 0123168.0HackerRank is the best place to learn and practice coding! ExplanationWhen we sum the integers 4 and 12, we get the integer 16.When we sum the floating-point numbers 4.0 and 4.0, we get 8.0. When we concatenate HackerRank with is the best place to learn and practice coding!, we get HackerRank is the best place to learn and practice coding!. You will not pass this challenge if you attempt to assign the Sample Case values to your variables instead of following the instructions above and reading input from stdin. Solution 1123456789101112131415161718// Declare second integer, double, and String variables.var first = +input_stdin_array[0];var second = +input_stdin_array[1];var third = input_stdin_array[2];// Read and save an integer, double, and String to your variables.// Print the sum of both integer variables on a new line.console.log(i + first);// Print the sum of the double variables on a new line.console.log((d + second).toFixed(1));// Concatenate and print the String variables on a new line// The 's' variable above should be printed first.console.log(s+third); Solution 2123456789101112131415161718// Declare second integer, double, and String variables.let first, second, third;// Read and save an integer, double, and String to your variables.first = parseInt(readLine());second = parseFloat(readLine());third = readLine();// Print the sum of both integer variables on a new line.console.log(i + first);// Print the sum of the double variables on a new line.console.log((d + second).toFixed(1));// Concatenate and print the String variables on a new line// The 's' variable above should be printed first.console.log(s + third);","link":"/2019/06/15/algorithm/hackerrank/Day1_DataTypes/"},{"title":"Day20 Sorting","text":"ObjectiveToday, we’re discussing a simple sorting algorithm called Bubble Sort. Check out the Tutorial tab for learning materials and an instructional video! Consider the following version of Bubble Sort:1234567891011121314151617for (int i = 0; i &lt; n; i++) { // Track number of elements swapped during a single array traversal int numberOfSwaps = 0; for (int j = 0; j &lt; n - 1; j++) { // Swap adjacent elements if they are in decreasing order if (a[j] &gt; a[j + 1]) { swap(a[j], a[j + 1]); numberOfSwaps++; } } // If no elements were swapped during a traversal, array is sorted if (numberOfSwaps == 0) { break; }} TaskGiven an array, a, of size n distinct elements, sort the array in ascending order using the Bubble Sort algorithm above. Once sorted, print the following 3 lines: Array is sorted in numSwaps swaps.where numSwaps is the number of swaps that took place. First Element: firstElementwhere firstElement is the first element in the sorted array. Last Element: lastElementwhere lastElement is the last element in the sorted array. Hint: To complete this challenge, you will need to add a variable that keeps a running tally of all swaps that occur during execution. Input FormatThe first line contains an integer, n, denoting the number of elements in array a. The second line contains n space-separated integers describing the respective values of a0, a1, …, an-1. Constraints 2 &lt;= n &lt;= 600 1 &lt;= ai &lt;= 2 X 106, where 0 &lt;= i &lt; n Output FormatPrint the following three lines of output: Array is sorted in numSwaps swaps.where numSwaps is the number of swaps that took place. First Element: firstElementwhere firstElement is the first element in the sorted array. Last Element: lastElementwhere lastElements is the last element in the sorted array. Sample Input 01231 2 3 Sample Output 0123Array is sorted in 0 swaps.First Element: 1Last Element: 3 Explanation 0The array is already sorted, so 0 swaps take place and we print the necessary 3 lines of output shown above. Sample Input 11233 2 1 Sample Output 1123Array is sorted in 3 swaps.First Element: 1Last Element: 3 Explanation 1The array a = [3, 2, 1] is not sorted, so we perform the following swaps: [3, 2, 1] -&gt; [2, 3, 1] [2, 3, 1] -&gt; [2, 1, 3] [2, 1, 3] -&gt; [1, 2, 3] At this point the array is sorted and we print the necessary 3 lines of output shown above. Solution 1123456789101112131415161718192021222324252627282930313233function main() { var n = parseInt(readLine()); a = readLine().split(' '); a = a.map(Number); // Write Your Code Here let numberOfSwaps = 0; const bubbleSort = (array) =&gt; { let arr = array; let length = arr.length; let i, j, temp; for (i = 0; i &lt; length - 1; i++) { for (j = 0; j &lt; length - 1 - i; j++) { if (arr[j] &gt; arr[j + 1]) { temp = arr[j + 1]; arr[j + 1] = arr[j]; arr[j] = temp; numberOfSwaps++; } } } return arr; } let sortArray = bubbleSort(a); console.log(`Array is sorted in ${numberOfSwaps} swaps.`) console.log(`First Element: ${sortArray[0]}`) console.log(`Last Element: ${sortArray[sortArray.length-1]}`)} Solution 2123456789101112131415161718192021222324252627282930313233function main() { var n = parseInt(readLine()); a = readLine().split(' '); a = a.map(Number); // Write Your Code Here let numberOfSwaps = 0; const bubbleSort = (values) =&gt; { let swapped; do { swapped = false; for (let i = 0, { length } = values; i &lt; length; i++) { if (values[i] &gt; values[i + 1]) { let tmp = values[i]; values[i] = values[i + 1]; values[i + 1] = tmp; swapped = true; numberOfSwaps++; } } } while (swapped); return values; }; let result = bubbleSort(a); console.log(`Array is sorted in ${numberOfSwaps} swaps.\\nFirst Element: ${result[0]}\\nLast Element: ${result[n - 1]}`);}","link":"/2019/06/16/algorithm/hackerrank/Day20_Sorting/"},{"title":"Day21 Generics","text":"ObjectiveToday we’re discussing Generics; be aware that not all languages support this construct, so fewer languages are enabled for this challenge. Check out the Tutorial tab for learning materials and an instructional video! TaskWrite a single generic function named printArray; this function must take an array of generic elements as a parameter (the exception to this is C++, which takes a vector). The locked Solution class in your editor tests your function. Note: You must use generics to solve this challenge. Do not write overloaded functions. Input FormatThe locked Solution class in your editor will pass different types of arrays to your printArray function. Constraints You must have exactly function named printArray. 1 Output FormatYour printArray function should print each element of its generic array parameter on a new line. Solution1234567891011121314/**** What is the Generic?* That is being able to create a component that can work over a variety of types rather than a single one.* JavaScript is a dynamically typed language and it doesn't have any generics. So we can write a normal function or method.* Also, you can write in languages like TypeScript, Java, C#.* It's a creation code in C#***/static void PrintArray&lt;T&gt;(T[] array){ foreach(T i in array) Console.WriteLine(i);}","link":"/2019/06/16/algorithm/hackerrank/Day21_Generics/"},{"title":"Day22 Binary Search Trees","text":"ObjectiveToday, we’re working with Binary Search Trees (BSTs). Check out the Tutorial tab for learning materials and an instructional video! TaskThe height of a binary search tree is the number of edges between the tree’s root and its furthest leaf. You are given a pointer, root, pointing to the root of a binary search tree. Complete the getHeight function provided in your editor so that it returns the height of the binary search tree. Input FormatThe locked stub code in your editor reads the following inputs and assembles them into a binary search tree: The first line contains an integer, n, denoting the number of nodes in the tree. Each of the n subsequent lines contains an integer, data, denoting the value of an element that must be added to the BST. Output FormatThe locked stub code in your editor will print the integer returned by your getHeight function denoting the height of the BST. Sample Input1234567873521467 Sample Output13 ExplanationThe input forms the following BST: The longest root-to-leaf path is shown below: There are 4 nodes in this path that are connected by 3 edges, meaning our BST’s height = 3. Thus, we print 3 as our answer. Solution123if (root === null) return -1;return Math.max(this.getHeight(root.left), this.getHeight(root.right)) + 1;","link":"/2019/06/16/algorithm/hackerrank/Day22_BinarySearchTrees/"},{"title":"Day24 More Linked Lists","text":"ObjectiveCheck out the Tutorial tab for learning materials and an instructional video! TaskA Node class is provided for you in the editor. A Node object has an integer data field, data, and a Node instance pointer, next, pointing to another node (i.e.: the next node in a list). A removeDuplicates function is declared in your editor, which takes a pointer to the head node of a linked list as a parameter. Complete removeDuplicates so that it deletes any duplicate nodes from the list and returns the head of the updated list. Note: The head pointer may be null, indicating that the list is empty. Be sure to reset your next pointer when performing deletions to avoid breaking the list. Input FormatYou do not need to read any input from stdin. The following input is handled by the locked stub code and passed to the removeDuplicates function:The first line contains an integer, N, the number of nodes to be inserted.The N subsequent lines each contain an integer describing the data value of a node being inserted at the list’s tail. Constraints The data elements of the linked list argument will always be in non-decreasing order. Output FormatYour removeDuplicates function should return the head of the updated linked list. The locked stub code in your editor will print the returned list to stdout. Sample Input12345676122334 Sample Output11 2 3 4 ExplanationN = 6, and our non-decreasing list is {1, 2, 2, 3, 3, 4}. The values 2 and 3 both occur twice in the list, so we remove the two duplicate nodes. We then return our updated (ascending) list, which is {1, 2, 3, 4}. Solution1234567891011121314this.removeDuplicates=function(head){ //Write your code here let prev = head; while (prev) { let next = prev.next; (next &amp;&amp; prev.data == next.data) ? (prev.next = next.next) : (prev = prev.next); } return head;}","link":"/2019/06/16/algorithm/hackerrank/Day24_MoreLinkedLists/"},{"title":"Day23 BST Level-Order Traversal","text":"ObjectiveToday, we’re going further with Binary Search Trees. Check out the Tutorial tab for learning materials and an instructional video! TaskA level-order traversal, also known as a breadth-first search, visits each level of a tree’s nodes from left to right, top to bottom. You are given a pointer, root, pointing to the root of a binary search tree. Complete the levelOrder function provided in your editor so that it prints the level-order traversal of the binary search tree. Hint: You’ll find a queue helpful in completing this challenge. Input FormatThe locked stub code in your editor reads the following inputs and assembles them into a BST:The first line contains an integer, T (the number of test cases).The T subsequent lines each contain an integer, data, denoting the value of an element that must be added to the BST. Output FormatPrint the data value of each node in the tree’s level-order traversal as a single line of N space-separated integers. Sample Input12345676354721 Sample Output13 2 5 1 4 7 ExplanationThe input forms the following binary search tree: We traverse each level of the tree from the root downward, and we process the nodes at each level from left to right. The resulting level-order traversal is 3 -&gt; 2 -&gt; 5 -&gt; 1 -&gt; 4 -&gt; 7, and we print these data values as a single line of space-separated integers. Solution 1123456789101112131415// Add your code here// To print values separated by spaces use process.stdout.write(someValue + ' ')const queue = [root];const result = [];while (queue.length) { let treeNode = queue.shift(); result.push(treeNode.data); treeNode.left &amp;&amp; queue.push(treeNode.left); treeNode.right &amp;&amp; queue.push(treeNode.right);}console.log(result.join(' ')); Solution 21234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859// Start of function Nodefunction Node(data) { this.data = data; this.left = null; this.right = null;}; // End of function Node// Start of function BinarySearchTreefunction BinarySearchTree() { this.insert = function(root, data) { if (root === null) { this.root = new Node(data); return this.root; } if (data &lt;= root.data) { if (root.left) { this.insert(root.left, data); } else { root.left = new Node(data); } } else { if (root.right) { this.insert(root.right, data); } else { root.right = new Node(data); } } return this.root; }; // Start of function levelOrder this.levelOrder = function(root) { // Add your code here // To print values separated by spaces use process.stdout.write(someValue + ' ') let temp; const queue = []; const result = []; queue.push(root); while (queue.length) { // Deque the Queue temp = queue.splice(0, 1)[0]; result.push(temp.data); // Enqueue the Queue if (temp.left) queue.push(temp.left); if (temp.right) queue.push(temp.right) } console.log(result.join(' ')); }; // End of function levelOrder}; // End of function BinarySearchTree","link":"/2019/06/16/algorithm/hackerrank/Day23_BSTLevelOrderTraversal/"},{"title":"Day25 Running Time and Complexity","text":"ObjectiveToday we’re learning about running time! Check out the Tutorial tab for learning materials and an instructional video! TaskA prime is a natural number greater than 1 that has no positive divisors other than 1 and itself. Given a number, n, determine and print whether it’s Prime or Not Prime. Note: If possible, try to come up with a primality algorithm, or see what sort of optimizations you come up with for an algorithm. Be sure to check out the Editorial after submitting your code! Input FormatThe first line contains an integer, T, the number of test cases.Each of the T subsequent lines contains an integer, n, to be tested for primality. Constraints 1 &lt;= T &lt;= 30 1 &lt;= n &lt;= 2 X 109 Output FormatFor each test case, print whether n is Prime or Not prime on a new line. Sample Input123431257 Sample Output123Not primePrimePrime ExplanationTest Case 0: n = 12. 12 is divisible by numbers other than 1 and itself (i.e.: 2, 3, 6), so we print Not prime on a new line. Test Case 1: n = 5. 5 is only divisible 1 and itself, so we print Prime on a new line. Test Case 2: n = 7. 7 is only divisible 1 and itself, so we print Prime on a new line. Solution 11234567891011121314151617181920212223242526272829/** Consider to write code by using the Sieve of Eratosthenes, then you can make a optimization code **/function processData(input) { //Enter your code here let result = input.split('\\n').slice(1).map(isPrime); function isPrime(input, i) { let messages = ['Not prime', 'Prime']; if (input == 1) { return messages[0]; } if (input == 2) { return messages[1]; } if (input % 2 == 0) { return messages[0]; } for (i = 3; i &lt;= Math.sqrt(input); i += 2) { if (input % i == 0) { return messages[0]; } } return messages[1]; } console.log(result.join(\"\\n\"));} Solution 212345678910111213141516function processData(input) { //Enter your code here input.split('\\n').slice(1).map((n, i) =&gt; { console.log(isPrime(n) ? 'Prime' : 'Not prime'); }); function isPrime(n) { if (n == 1) return false; for (let i = 2; i * i &lt;= n; i++) { if (n % i == 0) return false; } return true; }}","link":"/2019/06/17/algorithm/hackerrank/Day25_RunningTimeAndComplexity/"},{"title":"Day26 Nested Logic","text":"ObjectiveToday’s challenge puts your understanding of nested conditional statements to the test. You already have the knowledge to complete this challenge, but check out the Tutorial tab for a video on testing! TaskYour local library needs your help! Given the expected and actual return dates for a library book, create a program that calculates the fine (if any). The fee structure is as follows: If the book is returned on or before the expected return date, no fine will be charged (i.e.: fine = 0). If the book is returned after the expected return day but still within the same calendar month and year as the expected return date, fine = 15 Hackos x (the number of days late). If the book is returned after the expected return month but still within the same calendar year as the expected return date, the fine = 500 Hackos x (the number of months late). If the book is returned after the calendar year in which it was expected, there is a fixed fine of 10000 Hackos. Input FormatThe first line contains 3 space-separated integers denoting the respective day, month, and year on which the book was actually returned.The second line contains 3 space-separated integers denoting the respective day, month, and year on which the book was expected to be returned (due date). Constraints 1 &lt;= D &lt;= 31 1 &lt;= M &lt;= 12 1 &lt;= Y &lt;= 3000 It is guanranteed that the dates will be valid Gregorian calendar dates. Output FormatPrint a single integer denoting the library fine for the book received as input. Sample Input129 6 20156 6 2015 Sample Output145 ExplanationGiven the following return dates: Actual: Da = 9, Ma = 6, Ya = 2015Expected: De = 6, Me = 6, Ye = 2015 Because Ye = Ya, we know it is less than a year late. Because Me = Ma, we know it’s less than a month late. Because De = Da, we know that it was returned late (but still within the same month and year). Per the library’s fee structure, we know that our fine will be 15 Hackos X (# days late). We then print the result of 15 X (Da - De) = 15 X (9 - 6) = 45 as our output. Solution 1123456789101112131415161718192021222324function processData(input) { //Enter your code here let fine = 0; const [actual, expected] = input.split('\\n').map(item =&gt; { const [day, month, year] = item.split(' ').map(Number); return { day, month, year }; }); ( actual.year === expected.year &amp;&amp; actual.month === expected.month &amp;&amp; actual.day &gt; expected.day ) &amp;&amp; (fine = (actual.day - expected.day) * 15); ( actual.year === expected.year &amp;&amp; actual.month &gt; expected.month ) &amp;&amp; (fine = (actual.month - expected.month) * 500); (actual.year &gt; expected.year) &amp;&amp; (fine = 10000); console.log(fine);} Solution 21234567891011121314151617181920212223function processData(input) { const data = input.split(\"\\n\"); const [actual, expected] = data.map(line =&gt; { const [day, month, year] = line.split(\" \").map(Number); return { day, month, year }; }); console.log(calculatePrice(actual, expected));}const calculatePrice = (actual, expected) =&gt; { return actual.year &gt; expected.year ? 10000 : ( actual.year &lt; expected.year ? 0 : ( actual.month &gt; expected.month ? (actual.month - expected.month) * 500 : ( actual.month &lt; expected.month ? 0 : (actual.day - expected.day) * 15 ) ) )}","link":"/2019/06/17/algorithm/hackerrank/Day26_NestedLogic/"},{"title":"Day28 RegEx, Patterns, and Intro to Databases","text":"ObjectiveToday, we’re working with regular expressions. Check out the Tutorial tab for learning materials and an instructional video! TaskConsider a database table, Emails, which has the attributes First Name and Email ID. Given rows of data simulating the Emails table, print an alphabetically-ordered list of people whose email address ends in . Input FormatThe first line contains an integer, , total number of rows in the table.Each of the subsequent lines contains space-separated strings denoting a person’s first name and email ID, respectively. ConstraintsEach of the first names consists of lower case letters only.Each of the email IDs consists of lower case letters , and only.The length of the first name is no longer than 20.The length of the email ID is no longer than 50. Output FormatPrint an alphabetically-ordered list of first names for every user with a gmail account. Each name must be printed on a new line. Sample Input123456786riya riya@gmail.comjulia julia@julia.mejulia sjulia@gmail.comjulia julia@gmail.comsamantha samantha@gmail.comtanya tanya@gmail.comSample Output Sample Output12345juliajuliariyasamanthatanya Solution1234567891011121314151617function main() { const N = parseInt(readLine(), 10); const patten = new RegExp(\"@gmail.com\"); const names = []; for (let NItr = 0; NItr &lt; N; NItr++) { const firstNameEmailID = readLine().split(' '); const firstName = firstNameEmailID[0]; const emailID = firstNameEmailID[1]; patten.test(emailID) &amp;&amp; names.push(firstName); } names.sort().forEach(name =&gt; console.log(name));}","link":"/2019/06/17/algorithm/hackerrank/Day28_RegExPatternsAndIntroToDatabases/"},{"title":"Day29 Bitwise AND","text":"ObjectiveWelcome to the last day! Today, we’re discussing bitwise operations. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven set . Find two integers, A and B (where A &lt; B ), from set S such that the value of A &amp; B is the maximum possible and also less than a given integer, K.In this case, &amp; represents the bitwise AND operator. Input FormatThe first line contains an integer, T, the number of test cases.Each of the T subsequent lines defines a test case as 2 space-separated integers, N and K, respectively. Constraints Output FormatFor each test case, print the maximum possible value of on a new line. Sample Input123435 28 52 2 Sample Output123140 Explanation All possible values of and are: The maximum possible value of A&amp;B that is also &lt; (K = 2) is 1, so we print 1 on a new line. Solution123456789101112131415161718192021222324252627function findMax(n, k) { var max = 0; for (let i = 0; i &lt;= n; i++) { for (let j = 0; j &lt; i; j++) { let value = j &amp; i; if (value &lt; k &amp;&amp; value &gt; max) { max = value; } } } return max;}function main() { const t = parseInt(readLine(), 10); for (let tItr = 0; tItr &lt; t; tItr++) { const nk = readLine().split(' '); const n = parseInt(nk[0], 10); const k = parseInt(nk[1], 10); console.log(findMax(n, k)); }}","link":"/2019/06/17/algorithm/hackerrank/Day29_BitwiseAND/"},{"title":"Day2 Operators","text":"ObjectiveIn this challenge, you’ll work with arithmetic operators. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven the meal price (base cost of a meal), tip percent (the percentage of the meal price being added as tip), and tax percent (the percentage of the meal price being added as tax) for a meal, find and print the meal’s total cost. Note: Be sure to use precise values for your calculations, or you may end up with an incorrectly rounded result! Input FormatThere are 3 lines of numeric input:The first line has a double, mealCost (the cost of the meal before tax and tip).The second line has an integer, tipPercent (the percentage of mealCost being added as tip).The third line has an integer, taxPercent (the percentage of mealCost being added as tax). Output FormatPrint the total meal cost, where totalCost is the rounded integer result of the entire bill (mealCost with added tax and tip). Sample Input 012312.00208 ##Sample Output 0 115 ExplanationGiven:mealCost = 12, tipPercent = 20, taxPercent = 8 Calculations: tip = 12 x = 2.4 tax = 12 x = 0.96 totalCost = mealCost + tip + tax = 12 + 2.4 + 0.96 = 15.36 round(totalCost) = 15 We round totalCost to the nearest dollar (integer) and then print our result, 15. Solution1234567891011121314151617function main() { var cost = +input_stdin_array[0]; var tip = cost * input_stdin_array[1] / 100; var tax = cost * input_stdin_array[2] / 100; var total = cost + tip + tax; var round = Math.round(total); console.log('The total meal cost is ' + round + ' dollars.');}// Complete the solve function below.function solve(meal_cost, tip_percent, tax_percent) { let totalCost = meal_cost * (1 + (tip_percent / 100) + (tax_percent / 100)); console.log(Math.round(totalCost));}","link":"/2019/06/15/algorithm/hackerrank/Day2_Operator/"},{"title":"Day3 Intro to Conditional Statements","text":"ObjectiveIn this challenge, we’re getting started with conditional statements. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven an integer, n, perform the following conditional actions: If n is odd, print Weird If n is even and in the inclusive range of 2 to 5, print Not Weird If n is even and in the inclusive range of 6 to 20, print Weird If n is even and greater than 20, print Not Weird Complete the stub code provided in your editor to print whether or not is weird. Input FormatA single line containing a positive integer, n. Constraints 1 &lt;= n &lt;= 100 Output FormatPrint Weird if the number is weird; otherwise, print Not Weird. Sample Input 013 Sample Output 01Weird Sample Input 1124 Sample Output 11Not Weird ExplanationSample Case 0: n = 3n is odd and odd numbers are weird, so we print Weird. Sample Case 1: n = 24n &gt; 20 and n is even, so it isn’t weird. Thus, we print Not Weird. Solution 11234567891011121314151617// Complete the solve function below.function main() { var N = parseInt(readLine()); if(N % 2 == 0) { if(N &gt;= 2 &amp;&amp; N &lt; 6) { console.log('Not Weird'); } else if(N &gt;= 6 &amp;&amp; N &lt;= 20) { console.log('Weird'); } else if(N &gt; 20) { console.log('Not Weird'); } } else { console.log('Weird'); }} Solution 212345678// Complete the solve function below.function main() { const N = parseInt(readLine(), 10); let result = (N % 2 === 1 || (N % 2 === 0 &amp;&amp; N &gt;= 6 &amp;&amp; N &lt;= 20)) ? 'Weird' : 'Not Weird'; console.log(result);}","link":"/2019/06/15/algorithm/hackerrank/Day3_IntroToConditionalStatements/"},{"title":"Day4 Class vs. Instance","text":"ObjectiveIn this challenge, we’re going to learn about the difference between a class and an instance; because this is an Object Oriented concept, it’s only enabled in certain languages. Check out the Tutorial tab for learning materials and an instructional video! TaskWrite a Person class with an instance variable, , and a constructor that takes an integer, , as a parameter. The constructor must assign to after confirming the argument passed as is not negative; if a negative argument is passed as , the constructor should set to and print Age is not valid, setting age to 0.. In addition, you must write the following instance methods: yearPasses() should increase the instance variable by .amIOld() should perform the following conditional actions:If , print You are young..If and , print You are a teenager..Otherwise, print You are old..To help you learn by example and complete this challenge, much of the code is provided for you, but you’ll be writing everything in the future. The code that creates each instance of your Person class is in the main method. Don’t worry if you don’t understand it all quite yet! Note: Do not remove or alter the stub code in the editor. Input FormatInput is handled for you by the stub code in the editor. The first line contains an integer, T (the number of test cases), and the T subsequent lines each contain an integer denoting the age of a Person instance. Constraints 1 &lt;= T &lt;= 4 -5 &lt;= age &lt;= 30 Output FormatComplete the method definitions provided in the editor so they meet the specifications outlined above; the code to test your work is already in the editor. If your methods are implemented correctly, each test case will print 2 or 3 lines (depending on whether or not a valid initialAge was passed to the constructor). Sample Input123454-1101618 Sample Output123456789101112Age is not valid, setting age to 0.You are young.You are young.You are young.You are a teenager.You are a teenager.You are old.You are old.You are old. ExplanationTest Case 0: initialAge = -1Because initialAge &lt; 0, our code must set age to 0 and print the “Age is not valid…” message followed by the young message. Three years pass and age = 3, so we print the young message again. Test Case 1: initialAge = 10Because initialAge &lt; 13, our code should print that the person is young. Three years pass and age = 13, so we print that the person is now a teenager. Test Case 2: initialAge = 16Because 13 &lt;= initialAge &lt; 18, our code should print that the person is a teenager. Three years pass and age = 19, so we print that the person is old. Test Case 3: initialAge = 18Because initialAge &gt;= 18, our code should print that the person is old. Three years pass and the person is still old at age = 21, so we print the old message again. The extra line at the end of the output is supposed to be there and is trimmed before being compared against the test case’s expected output. If you’re failing this challenge, check your logic and review your print statements for spelling errors. Solution12345678910111213141516171819function Person(initialAge){ // Add some more code to run some checks on initialAge (initialAge &lt;= 0) &amp;&amp; (console.log('Age is not valid, setting age to 0.')); this.age = (initialAge &lt;= 0) ? 0 : initialAge; this.amIOld=function(){ // Do some computations in here and print out the correct statement to the console let age = this.age; let result = ''; console.log(`You are ${(age &gt;= 13 &amp;&amp; age &lt; 18) ? 'a teenager.' : ((age &lt; 13) ? 'young.' : 'old.')}`); }; this.yearPasses=function(){ // Increment the age of the person in here return this.age++; };}","link":"/2019/06/15/algorithm/hackerrank/Day4_ClassVsInstance/"},{"title":"Day5 Loops","text":"ObjectiveIn this challenge, we’re going to use loops to help us do some simple math. Check out the Tutorial tab to learn more. TaskGiven an integer, n, print its first 10 multiples. Each multiple n x i (where 1 &lt;= i &lt;= 10) should be printed on a new line in the form: n x i = result. Input FormatA single integer, n. Constraints 2 &lt;= n &lt;= 20 Output FormatPrint 10 lines of output; each line i (where 1 &lt;= i &lt;= 10) contains the result of n x i in the form:n x i = result. Sample Input12 Sample Output123456789102 x 1 = 22 x 2 = 42 x 3 = 62 x 4 = 82 x 5 = 102 x 6 = 122 x 7 = 142 x 8 = 162 x 9 = 182 x 10 = 20 Solution 11234567function main() { const n = parseInt(readLine(), 10); for (let i = 1; i &lt;= 10; i++) { console.log(`${n} x ${i} = ${n * i}`); }} Solution 212345678function main() { const n = parseInt(readLine(), 10); new Array(10).fill(n).forEach((time, index) =&gt; { console.log(`${time} x ${index + 1} = ${time * (index + 1)}`); });}","link":"/2019/06/15/algorithm/hackerrank/Day5_Loops/"},{"title":"Day6 Let's Review","text":"ObjectiveToday we’re expanding our knowledge of Strings and combining it with what we’ve already learned about loops. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven a string, S, of length N that is indexed from 0 to N - 1, print its even-indexed and odd-indexed characters as 2 space-separated strings on a single line (see the Sample below for more detail). Note: 0 is considered to be an even index. Input FormatThe first line contains an integer, T (the number of test cases).Each line i of the T subsequent lines contain a String, S. Constraints 1 &lt;= T &lt;= 10 2 &lt;= length of S &lt;= 10000 Output FormatFor each String Sj (where 0 &lt;= j &lt;= T - 1), print Sj‘s even-indexed characters, followed by a space, followed by Sj‘s odd-indexed characters. Sample Input1232HackerRank Sample Output12Hce akrRn ak ExplanationTest Case 0: S = “Hacker”S[0] = “H”S[1] = “a”S[2] = “c”S[3] = “k”S[4] = “e”S[5] = “r” The even indices are 0, 2, and 4, and the odd indices are 1, 3, and 5. We then print a single line of 2 space-separated strings; the first string contains the ordered characters from S‘s even indices (Hce), and the second string contains the ordered characters from S‘s odd indices (akr). Test Case 1: S = “Rank”S[0] = “R”S[1] = “a”S[2] = “n”S[3] = “k” The even indices are 0 and 2, and the odd indices are 1 and 3. We then print a single line of 2 space-separated strings; the first string contains the ordered characters from S‘s even indices (Rn), and the second string contains the ordered characters from S‘s odd indices (ak). Solution 1123456789101112131415function processData(input) { let array = input.split('\\n'); array.shift(); array.map((value, index) =&gt; { let odd = ''; let even = ''; value.split('').map((value, index) =&gt; { index % 2 === 0 ? odd += value : even += value; }); console.log(`${odd} ${even}`); });} Solution 21234567891011121314151617function processData(input) { //Enter your code here input.split(\"\\n\").reduce((target, item, index) =&gt; { if (index &amp;&amp; Number.isNaN(+item)) { let result = item.split('').reduce((target, text, index) =&gt; { target[+(index % 2 !== 0)] += text; return target; }, new Array(2).fill('')).join(' '); console.log(result); } return target; }, '');}","link":"/2019/06/15/algorithm/hackerrank/Day6_LetsReview/"},{"title":"Day7 Arrays","text":"ObjectiveToday, we’re learning about the Array data structure. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven an array, A, of N integers, print A‘s elements in reverse order as a single line of space-separated numbers. Input FormatThe first line contains an integer, N (the size of our array).The second line contains N space-separated integers describing array A‘s elements. Constraints 1 &lt;= N &lt;= 1000 1 &lt;= Ai &lt;= 10000, where Ai is the ith integer in the array. Output FormatPrint the elements of array A in reverse order as a single line of space-separated numbers. Sample Input1241 4 3 2 Sample Output12 3 4 1 Solution 11234567function main() { const n = parseInt(readLine(), 10); const arr = readLine().split(' ').map(arrTemp =&gt; parseInt(arrTemp, 10)); console.log(arr.reverse().join(' '));} Solution 2123456789101112131415161718function main() { const n = parseInt(readLine(), 10); const arr = readLine().split(' ').map(arrTemp =&gt; parseInt(arrTemp, 10)); const reverseArray = (array) =&gt; { let temp = null; const length = array.length; for (let i = 0; i &lt; length / 2; i++){ temp = array[i]; array[i] = array[length - 1 - i]; array[length - 1 - i] = temp; } return array; }; console.log(reverseArray(arr).join(' '));}","link":"/2019/06/15/algorithm/hackerrank/Day7_Arrays/"},{"title":"Day8 Dictionaries and Maps","text":"ObjectiveToday, we’re learning about Key-Value pair mappings using a Map or Dictionary data structure. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven n names and phone numbers, assemble a phone book that maps friends’ names to their respective phone numbers. You will then be given an unknown number of names to query your phone book for. For each name queried, print the associated entry from your phone book on a new line in the form name=phoneNumber; if an entry for name is not found, print Not found instead. Note: Your phone book should be a Dictionary/Map/HashMap data structure. Input FormatThe first line contains an integer, n, denoting the number of entries in the phone book.Each of the n subsequent lines describes an entry in the form of 2 space-separated values on a single line. The first value is a friend’s name, and the second value is an 8-digit phone number. After the n lines of phone book entries, there are an unknown number of lines of queries. Each line (query) contains a name to look up, and you must continue reading lines until there is no more input. Note: Names consist of lowercase English alphabetic letters and are first names only. Constraints 1 &lt;= n &lt;= 105 1 &lt;= queries &lt;= 105 Output FormatOn a new line for each query, print Not found if the name has no corresponding entry in the phone book; otherwise, print the full name and phoneNumber in the format name=phoneNumber. Sample Input12345673sam 99912222tom 11122222harry 12299933samedwardharry Sample Output123sam=99912222Not foundharry=12299933 ExplanationWe add the following n = 3 (Key,Value) pairs to our map so it looks like this: phoneBook = {(sam, 99912222), (tom, 11122222), (harry, 12299933)} We then process each query and print key=value if the queried key is found in the map; otherwise, we print Not found. Query 0: samSam is one of the keys in our dictionary, so we print sam=99912222. Query 1: edwardEdward is not one of the keys in our dictionary, so we print Not found. Query 2: harryHarry is one of the keys in our dictionary, so we print harry=12299933. Solution 11234567891011121314151617181920212223function processData(input) { //Enter your code here const { phoneBook, queries } = input.split('\\n').reduce((target, item, index) =&gt; { let total = !index ? item : target['total']; let { 0: key, 1: value } = item.split(' '); !index ? (target['total'] = total) : ( index &lt;= total ? (target['phoneBook'][key] = value) : target['queries'].push(item) ); return target; }, { total: 0, phoneBook: [], queries: [] }); queries.forEach((query) =&gt; { let value = phoneBook[String(query)]; console.log(value ? `${query}=${value}` : 'Not found'); });} Solution 2123456789101112131415function processData(input) { //Enter your code here const inputData = input.split('\\n'); const dataLength = Number(inputData.shift()); const phoneBook = new Map(); const queryData = inputData.reduce((target, item, index) =&gt; { index &lt; dataLength ? phoneBook.set(item.split(' ')[0], item.split(' ')[1]) : target.push(item); return target; }, []); queryData.forEach((val, index) =&gt; { console.log(phoneBook.get(val) ? `${val}=${phoneBook.get(val)}` : 'Not found'); })} Solution 31234567891011121314151617181920212223242526function processData(input) { //Enter your code here const splitInput = input.split(\"\\n\"); const phoneBookSize = +splitInput[0]; const inputValue = splitInput.slice(phoneBookSize + 1); const temp = splitInput.slice(1, phoneBookSize + 1).map(list =&gt; { let result = { name: list.split(\" \")[0], phoneNumber: list.split(\" \")[1] }; return result; }); let phoneBook = []; for (let list of temp) { phoneBook[list.name] = list.phoneNumber; } for (let name of inputValue) { if (phoneBook[name]) { console.log(`${name}=${phoneBook[name]}`); } else { console.log('Not found') } }}","link":"/2019/06/15/algorithm/hackerrank/Day8_DictionariesAndMaps/"},{"title":"Day9 Recursion 3","text":"ObjectiveToday, we’re learning and practicing an algorithmic concept called Recursion. Check out the Tutorial tab for learning materials and an instructional video! Recursive Method for Calculating Factorial TaskWrite a factorial function that takes a positive integer, N as a parameter and prints the result of N! (N factorial). Note: If you fail to use recursion or fail to name your recursive function factorial or Factorial, you will get a score of 0. Input FormatA single integer, N (the argument to pass to factorial). Constraints 2 &lt;= N &lt;= 12 Your submission must contain a recursive function named factorial. Output FormatPrint a single integer denoting N!. Sample Input13 Sample Output16 ExplanationConsider the following steps: factorial(3) = 3 X factorial(2) factorial(2) = 2 X factorial(1) factorial(1) = 1 From steps 2 and 3, we can say factorial(2) = 2 X 1 = 2; then when we apply the value from factorial(2) to step 1, we get factorial(3) = 3 X 2 X 1 = 6. Thus, we print 6 as our answer. Solutions 1123function factorial(n) { return n &lt; 2 ? 1 : n * factorial(n - 1);} Solution 2123function factorial(n) { return (!+n) ? 1 : n * factorial(n - 1);} Solution 3123456789let memoization = [0, 1];const factorial = (n) =&gt; { (typeof memoization[n] !== 'number') &amp;&amp; ( memoization[n] = (n - 1) &gt; 0 ? n * factorial(n - 1) : 1 ); return memoization[n];}","link":"/2019/06/16/algorithm/hackerrank/Day9_Recursion3/"},{"title":"HEXO - 시작하기","text":"정적 블로그, HEXO 시작해보기프론트엔트 개발을 시작하면서 그동안 공부해오던 것을 정리해야할 필요성이 생겼습니다.좋은 자료, 세미나, 기술 서적, 스터디, 개발하면서 느꼈던 점 등을 정리하고 그 흔적을 남겨보고자 블로그를 시작하게 되었습니다. 설치형 블로그, 서비스형 블로그, 동적 혹은 정적 블로그 등 설치 방법과 사용방법에 따라 다양하게 나뉘고 있는 블로그들 중 설치형 정적 블로그로 말할 수 있는 HEXO를 사용하게 되었고, 그 방법을 공유하고자 합니다. 공식 사이트에서 얘기하는 HEXO! Node.js 기반의 정적사이트 생성기(Static site generator)의 일종으로 빠르고 간단하고 강력한 블로그 프레임워크입니다. 엄청나게 빠른 속도 Node.js는 몇 초만에 수백개의 파일을 빌드할 수 있을 정도로 빠른 생성 속도를 제공합니다. Markdown 지원 친화적인 Markdown의 모든 기능을 지원하며 거의 모든 Octopress 플러그인들을 사용할 수 있습니다. 한 번의 명령으로 Deployment 하기 단지 하나의 명령어로 당신의 웹 사이트를 GitHub나 Heroku에 deploy할 수 있습니다. 다양한 플러그인 Hexo는 강력한 플러그인 시스템을 가지고 있습니다. 사용자는 Jade와 CoffeeScript를 위한 플러그인들을 설치할 수도 있습니다. 설치하기설치전 확인Git과 Node.js가 설치 되어 있어야 합니다. 설치되지 않았다면 아래 경로에서 확인해 주세요. Node.js - 6.9 이상 Git HEXO INSTALL Hexo 공식 사이트에 간단한 설치방법과 사용법이 나와있습니다. new GDemo('#demo-teriminal1') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`npm install -g hexo-cli`, {onCompleteDelay: 500}) .respond(` `) .end(); hexo-cli를 global로 설치해주세요. HEXO INIT hexo를 설치할 폴더에 init으로 기본 파일을 생성해 주세요. new GDemo('#demo-teriminal2-1') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`hexo init `, {onCompleteDelay: 500}) .respond(` `) .end(); new GDemo('#demo-teriminal2-2') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`cd `, {onCompleteDelay: 500}) .respond(` `) .end(); new GDemo('#demo-teriminal2-3') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`npm install`, {onCompleteDelay: 500}) .respond(` `) .end(); 기본 설정이 된 폴더로 이동을 한 후 npm install을 해주세요. 초기화가 완료되었다면 아래와 같은 폴더구조를 확인 할 수 있습니다. 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes HEXO SERVER hexo server 또는 hexo s를 명령어를 사용하여 로컬 서버에서 블로그를 확인 할 수 있습니다. new GDemo('#demo-teriminal3') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`hexo server`, {onCompleteDelay: 500}) .respond(` `) .end(); localhost:4000 에서 확인 할 수 있습니다. 글쓰기새글 작성 hexo new [layout] &lt;title&gt; 사용하여 새글 작성을 할 수 있습니다. new GDemo('#demo-teriminal4') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`hexo new test.md`, {onCompleteDelay: 500}) .respond(``) .end(); 명령어를 사용하면 /scaffolds/의 md 파일을 스캐폴딩 합니다. 발행되지 않는 형태의 초안 문서를 작성하고 싶은 경우 [layout]에 draft를 사용해 줍니다. 아래와 같은 경로에 markdown 문서가 만들어 집니다. . └── source ├── _drafts └── _posts └── test.md Front-matter 생성된 test.md에서 타이틀 및 발행시간, 카테고리, 테마 등을 수정할 수 있습니다. test.md12345678910---title: 첫번째 포스팅입니다.categories:- TOOL- HEXOtags:- HEXO- BLOGdate: 2019-07-06 22:15:19--- Front-matter는 YAML 또는 JSON 형태로 작성할 수 있습니다. [, : …등의 문자는 제목에 들어가면 오류가 날 수 있습니다. “”로 감싸서 사용해주세요. Publish post에 바로 발행하지 않고 deaft문서를 작성했다면 publish를 이용해 발행해 줍니다. new GDemo('#demo-teriminal5') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`hexo publish`, {onCompleteDelay: 500}) .respond(``) .end(); 배포하기(Deploy)깃 저장소 확인 저장소 2개를 준비합니다. 정적파일이 deploy되는 (githubID).github.io hexo 블로그 및 md 파일을 관리할 수 있는 repository (ex. blog) 환경설정 _config.yml 파일을 수정해 주세요._config.yml1234567891011# URLurl: https://alleyful.github.io //(githubID).github.ioroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Deploymentdeploy: type: git repo: https://github.com/alleyful/alleyful.github.io.git //gihub pages repository branch : master hexo generate new GDemo('#demo-teriminal6') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`hexo generate`, {onCompleteDelay: 500}) .respond(``) .end(); 정적파일을 생성해 public폴더에 넣어줍니다. hexo deploy deploy를 하기 위해서 hexo-deploy-git 플러그인을 먼저 설치해 주세요. new GDemo('#demo-teriminal7') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`npm install hexo-deploy-git --save`, {onCompleteDelay: 500}) .respond(``) .end(); new GDemo('#demo-teriminal8') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`hexo deploy`, {onCompleteDelay: 500}) .respond(``) .end(); 플러그인을 설치 한 후 deploy를 해줍니다. Github Pages에서 확인 할 수 있습니다. https://&lt;계정이름&gt;.github.io hexo blog 버전관리 위에서 만들어 놓은 repository 중 blog(또는 원하는 이름의 저장소)를 사용해 주세요. 테마적용도 해볼까요.HEXO를 설치하고 POST를 작성한 후 Git Pages에 Deploy까지 해 보았습니다.다음글에는 HEXO Theme를 사용하여 블로그에 원하는 layout과 스타일을 적용해 보도록 하겠습니다.","link":"/2019/07/07/tools/hexo/hexo-guide-01/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"github.io","slug":"github-io","link":"/tags/github-io/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"seo","slug":"seo","link":"/tags/seo/"},{"name":"ES6","slug":"ES6","link":"/tags/ES6/"},{"name":"promise","slug":"promise","link":"/tags/promise/"},{"name":"javascript","slug":"javascript","link":"/tags/javascript/"},{"name":"Algorithm","slug":"Algorithm","link":"/tags/Algorithm/"},{"name":"Programmers","slug":"Programmers","link":"/tags/Programmers/"},{"name":"프로그래머스","slug":"프로그래머스","link":"/tags/프로그래머스/"},{"name":"stack","slug":"stack","link":"/tags/stack/"},{"name":"queue","slug":"queue","link":"/tags/queue/"},{"name":"HackerRank","slug":"HackerRank","link":"/tags/HackerRank/"},{"name":"ProblemSolving","slug":"ProblemSolving","link":"/tags/ProblemSolving/"},{"name":"10DaysOfJS","slug":"10DaysOfJS","link":"/tags/10DaysOfJS/"}],"categories":[{"name":"Tools","slug":"Tools","link":"/categories/Tools/"},{"name":"develop","slug":"develop","link":"/categories/develop/"},{"name":"Hexo","slug":"Tools/Hexo","link":"/categories/Tools/Hexo/"},{"name":"javascript","slug":"develop/javascript","link":"/categories/develop/javascript/"},{"name":"Algorithm","slug":"Algorithm","link":"/categories/Algorithm/"},{"name":"Programmers","slug":"Algorithm/Programmers","link":"/categories/Algorithm/Programmers/"},{"name":"Level1","slug":"Algorithm/Programmers/Level1","link":"/categories/Algorithm/Programmers/Level1/"},{"name":"Level2","slug":"Algorithm/Programmers/Level2","link":"/categories/Algorithm/Programmers/Level2/"},{"name":"HackerRank","slug":"Algorithm/HackerRank","link":"/categories/Algorithm/HackerRank/"},{"name":"30DaysOfCode","slug":"Algorithm/HackerRank/30DaysOfCode","link":"/categories/Algorithm/HackerRank/30DaysOfCode/"},{"name":"ProblemSolving","slug":"Algorithm/HackerRank/ProblemSolving","link":"/categories/Algorithm/HackerRank/ProblemSolving/"},{"name":"10DaysOfJS","slug":"Algorithm/HackerRank/10DaysOfJS","link":"/categories/Algorithm/HackerRank/10DaysOfJS/"}]}