{"pages":[{"title":"About me","text":"Ju Young Kim‘Alley’라고 불리는게 더 익숙한 Front-End Developer 입니다. Experience스냅스 [ 2017.08 ~ ] Front-End Developer 스냅스 및 오프린트미의 서비스에 관련된 Front-End 개발에 참여하고 있습니다. 스냅스 - PC, MOBILE, APP, GLOBAL(JPN) 오프린트미 - PC, MOBILE, APP React, Redux, Sass, Gulp, Webpack, GitLap","link":"/about/index.html"}],"posts":[{"title":"프로그래머스 - 모의고사","text":"문제 설명수포자는 수학을 포기한 사람의 준말입니다. 수포자 삼인방은 모의고사에 수학 문제를 전부 찍으려 합니다.수포자는 1번 문제부터 마지막 문제까지 다음과 같이 찍습니다. 1번 수포자가 찍는 방식: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, …2번 수포자가 찍는 방식: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, 3, 2, 4, 2, 5, …3번 수포자가 찍는 방식: 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, … 1번 문제부터 마지막 문제까지의 정답이 순서대로 들은 배열 answers가 주어졌을 때, 가장 많은 문제를 맞힌 사람이 누구인지 배열에 담아 return 하도록 solution 함수를 작성해주세요. 제한 조건시험은 최대 10,000 문제로 구성되어있습니다.문제의 정답은 1, 2, 3, 4, 5중 하나입니다.가장 높은 점수를 받은 사람이 여럿일 경우, return하는 값을 오름차순 정렬해주세요. 입출력 예 answers return [1,2,3,4,5] [1] [1,3,2,4,2] [1,2,3] 입출력 예 설명 입출력 예 #1 수포자 1은 모든 문제를 맞혔습니다. 수포자 2는 모든 문제를 틀렸습니다. 수포자 3은 모든 문제를 틀렸습니다. 따라서 가장 문제를 많이 맞힌 사람은 수포자 1입니다. 입출력 예 #2 모든 사람이 2문제씩을 맞췄습니다. Solution123456789101112131415161718192021222324function solution(answers) { const pattens = [ [1, 2, 3, 4, 5], [2, 1, 2, 3, 2, 4, 2, 5], [3, 3, 1, 1, 2, 2, 4, 4, 5, 5] ]; const results = answers.reduce((target, answer, index) =&gt; { pattens.map((patten, i) =&gt; { (patten[0] === answer) &amp;&amp; target[i]++; patten.push(patten.shift()); }); return target; }, new Array(pattens.length).fill(0)); let topClass = Math.max(...results); return results.reduce((target, result, index) =&gt; { (result === topClass) &amp;&amp; target.push(index + 1); return target; }, [])}","link":"/2019/06/11/algorithm/programmers/level1-02/"},{"title":"프로그래머스 - K번째수","text":"문제 설명배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다. 예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면 array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다. 1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다. 2에서 나온 배열의 3번째 숫자는 5입니다.배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요. 제한사항 array의 길이는 1 이상 100 이하입니다. array의 각 원소는 1 이상 100 이하입니다. commands의 길이는 1 이상 50 이하입니다. commands의 각 원소는 길이가 3입니다. 입출력 예 array commands return [1, 5, 2, 6, 3, 7, 4] [[2, 5, 3], [4, 4, 1], [1, 7, 3]] [5, 6, 3] 입출력 예 설명 [1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다. [1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다. [1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다. Solution1234567function solution(array, commands) { return commands.reduce((target, commans) =&gt; { target.push((array.slice(commans[0]-1, commans[1]).sort((a, b) =&gt; a - b))[commans[2]-1]); return target; }, [])}","link":"/2019/06/12/algorithm/programmers/level1-03/"},{"title":"프로그래머스 - 체육복","text":"문제 설명점심시간에 도둑이 들어, 일부 학생이 체육복을 도난당했습니다.다행히 여벌 체육복이 있는 학생이 이들에게 체육복을 빌려주려 합니다.학생들의 번호는 체격 순으로 매겨져 있어, 바로 앞번호의 학생이나 바로 뒷번호의 학생에게만 체육복을 빌려줄 수 있습니다.예를 들어, 4번 학생은 3번 학생이나 5번 학생에게만 체육복을 빌려줄 수 있습니다.체육복이 없으면 수업을 들을 수 없기 때문에 체육복을 적절히 빌려 최대한 많은 학생이 체육수업을 들어야 합니다. 전체 학생의 수 n, 체육복을 도난당한 학생들의 번호가 담긴 배열 lost, 여벌의 체육복을 가져온 학생들의 번호가 담긴 배열 reserve가 매개변수로 주어질 때, 체육수업을 들을 수 있는 학생의 최댓값을 return 하도록 solution 함수를 작성해주세요. 제한사항 전체 학생의 수는 2명 이상 30명 이하입니다. 체육복을 도난당한 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다. 여벌의 체육복을 가져온 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다. 여벌 체육복이 있는 학생만 다른 학생에게 체육복을 빌려줄 수 있습니다. 여벌 체육복을 가져온 학생이 체육복을 도난당했을 수 있습니다. 이때 이 학생은 체육복을 하나만 도난당했다고 가정하며, 남은 체육복이 하나이기에 다른 학생에게는 체육복을 빌려줄 수 없습니다. 입출력 예 n lost reserve return 5 [2, 4] [1, 3, 5] 5 5 [2, 4] [3] 4 3 [3] [1] 2 입출력 예 설명 예제 #1 1번 학생이 2번 학생에게 체육복을 빌려주고, 3번 학생이나 5번 학생이 4번 학생에게 체육복을 빌려주면 학생 5명이 체육수업을 들을 수 있습니다. 예제 #2 3번 학생이 2번 학생이나 4번 학생에게 체육복을 빌려주면 학생 4명이 체육수업을 들을 수 있습니다. Solution123456789101112131415161718192021function solution(n, lost, reserve) { let reserveList = reserve; let reserveLostIndex = -1; let lostList = lost.reduce((target, item) =&gt; { reserveLostIndex = reserveList.findIndex(reser =&gt; item === reser); reserveLostIndex &gt;= 0 ? reserveList.splice(reserveLostIndex, 1) : target.push(item); return target; }, []); return n - lostList.reduce((target, item) =&gt; { let index = reserveList.findIndex(reser =&gt; reser === item - 1 || reser === item + 1); index &gt;= 0 &amp;&amp; ( reserveList.splice(index, 1), target-- ); return target; }, lostList.length);}","link":"/2019/06/13/algorithm/programmers/level1-04/"},{"title":"프로그래머스 - 2016년","text":"문제 설명2016년 1월 1일은 금요일입니다. 2016년 a월 b일은 무슨 요일일까요?두 수 a ,b를 입력받아 2016년 a월 b일이 무슨 요일인지 리턴하는 함수, solution을 완성하세요.요일의 이름은 일요일부터 토요일까지 각각 1SUN,MON,TUE,WED,THU,FRI,SAT 입니다. 예를 들어 a=5, b=24라면 5월 24일은 화요일이므로 문자열 TUE를 반환하세요. 제한 조건 2016년은 윤년입니다. 2016년 a월 b일은 실제로 있는 날입니다. (13월 26일이나 2월 45일같은 날짜는 주어지지 않습니다) 입출력 예 a b result 5 24 TUE Solution 1123456function solution(a, b) { const date = `2016/${a}/${b}`; const weekName = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"]; const week = new Date(date); return weekName[week.getDay()];} Solution 2123function solution(a, b) { return ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'][new Date(2016, a - 1, b).getDay()];}","link":"/2019/06/13/algorithm/programmers/level1-05/"},{"title":"프로그래머스 - 가운데 글자 가져오기","text":"문제 설명단어 s의 가운데 글자를 반환하는 함수, solution을 만들어 보세요.단어의 길이가 짝수라면 가운데 두글자를 반환하면 됩니다. 제한사항s는 길이가 1 이상, 100이하인 스트링입니다. 입출력 예 s return “abcde” “c” “qwer” “we” Solution 112345function solution(s) { let string = [...s]; const leng = string.length; return (leng % 2 === 0 ? string.splice(leng/2 - 1, 2) : string.splice(leng/2, 1)).join('');} Solution 2123function solution(s) { return s.substr(Math.ceil(s.length / 2) - 1, s.length % 2 === 0 ? 2 : 1);}","link":"/2019/06/13/algorithm/programmers/level1-06/"},{"title":"프로그래머스 - 같은 숫자는 싫어","text":"문제 설명배열 arr가 주어집니다. 배열 arr의 각 원소는 숫자 0부터 9까지로 이루어져 있습니다.이때, 배열 arr에서 연속적으로 나타나는 숫자는 하나만 남기고 전부 제거하려고 합니다.배열 arr에서 제거 되고 남은 수들을 return 하는 solution 함수를 완성해 주세요.단, 제거된 후 남은 수들을 반환할 때는 배열 arr의 원소들의 순서를 유지해야 합니다.예를들면 arr = [1, 1, 3, 3, 0, 1, 1] 이면 [1, 3, 0, 1] 을 return 합니다. arr = [4, 4, 4, 3, 3] 이면 [4, 3] 을 return 합니다. 배열 arr에서 연속적으로 나타나는 숫자는 제거하고 남은 수들을 return 하는 solution 함수를 완성해 주세요. 제한사항 배열 arr의 크기 : 1,000,000 이하의 자연수 배열 arr의 원소의 크기 : 0보다 크거나 같고 9보다 작거나 같은 정수 입출력 예 arr answer [1,1,3,3,0,1,1] [1,3,0,1] [4,4,4,3,3] [4,3] 입출력 예 설명입출력 예 #1,2문제의 예시와 같습니다. Solution 11234567function solution(arr){ return arr.reduce((target, item, index) =&gt; { (index === 0 || target[target.length-1] !== item) &amp;&amp; target.push(item); return target; }, []);} Solution 2123function solution(arr){ return arr.filter((v, i) =&gt; v !== arr[i + 1]);}","link":"/2019/06/13/algorithm/programmers/level1-07/"},{"title":"프로그래머스 - 나누어 떨어지는 숫자 배열","text":"문제 설명array의 각 element 중 divisor로 나누어 떨어지는 값을 오름차순으로 정렬한 배열을 반환하는 함수, solution을 작성해주세요.divisor로 나누어 떨어지는 element가 하나도 없다면 배열에 -1을 담아 반환하세요. 제한사항arr은 자연수를 담은 배열입니다.정수 i, j에 대해 i ≠ j 이면 arr[i] ≠ arr[j] 입니다.divisor는 자연수입니다.array는 길이 1 이상인 배열입니다. 입출력 예 arr divisor return [5, 9, 7, 10] 5 [5, 10] [2, 36, 1, 3] 1 [1, 2, 3, 36] [3,2,6] 10 [-1] 입출력 예 설명 입출력 예#1 arr의 원소 중 5로 나누어 떨어지는 원소는 5와 10입니다. 따라서 [5, 10]을 리턴합니다. 입출력 예#2 arr의 모든 원소는 1으로 나누어 떨어집니다. 원소를 오름차순으로 정렬해 [1, 2, 3, 36]을 리턴합니다. 입출력 예#3 3, 2, 6은 10으로 나누어 떨어지지 않습니다. 나누어 떨어지는 원소가 없으므로 [-1]을 리턴합니다. Solution123456789function solution(arr, divisor) { const result = arr.reduce((target, item) =&gt; { (item % divisor === 0) &amp;&amp; target.push(item); return target; }, []); return result.length &gt; 0 ? result.sort((a, b) =&gt; a - b) : [-1];}","link":"/2019/06/14/algorithm/programmers/level1-08/"},{"title":"프로그래머스 - 두 정수 사이의 합","text":"문제 설명두 정수 a, b가 주어졌을 때 a와 b 사이에 속한 모든 정수의 합을 리턴하는 함수, solution을 완성하세요.예를 들어 a = 3, b = 5인 경우, 3 + 4 + 5 = 12이므로 12를 리턴합니다. 제한 조건a와 b가 같은 경우는 둘 중 아무 수나 리턴하세요.a와 b는 -10,000,000 이상 10,000,000 이하인 정수입니다.a와 b의 대소관계는 정해져있지 않습니다. 입출력 예 a b return 3 5 12 3 3 3 5 3 12 Solution 112345678function solution(a, b) { const array = [a, b].sort((a, b) =&gt; a - b); const bigNum = array[1]; const smallNum = array[0]; const baseNum = smallNum - 1; const length = bigNum - smallNum + 1; return bigNum === smallNum ? bigNum : (baseNum * length) + ((1 + length) * length / 2);} Solution 2123function solution(a, b) { return (a + b) * ((a &gt; b ? a - b : b - a) + 1) / 2;}","link":"/2019/06/14/algorithm/programmers/level1-09/"},{"title":"프로그래머스 - 문자열 내 마음대로 정렬하기","text":"문제 설명문자열로 구성된 리스트 strings와, 정수 n이 주어졌을 때, 각 문자열의 인덱스 n번째 글자를 기준으로 오름차순 정렬하려 합니다.예를 들어 strings가 [sun, bed, car]이고 n이 1이면 각 단어의 인덱스 1의 문자 u, e, a로 strings를 정렬합니다. 제한 조건strings는 길이 1 이상, 50이하인 배열입니다.strings의 원소는 소문자 알파벳으로 이루어져 있습니다.strings의 원소는 길이 1 이상, 100이하인 문자열입니다.모든 strings의 원소의 길이는 n보다 큽니다.인덱스 1의 문자가 같은 문자열이 여럿 일 경우, 사전순으로 앞선 문자열이 앞쪽에 위치합니다. 입출력 예 strings n return [sun, bed, car] 1 [car, bed, sun] [abce, abcd, cdx] 2 [abcd, abce, cdx] 입출력 예 설명 입출력 예 1 sun, bed, car의 1번째 인덱스 값은 각각 u, e, a 입니다. 이를 기준으로 strings를 정렬하면 [car, bed, sun] 입니다. 입출력 예 2 abce와 abcd, cdx의 2번째 인덱스 값은 c, c, x입니다. 따라서 정렬 후에는 cdx가 가장 뒤에 위치합니다.abce와 abcd는 사전순으로 정렬하면 abcd가 우선하므로, 답은 [abcd, abce, cdx] 입니다. Solution 1123function solution(strings, n) { return strings.sort((p, c) =&gt; p[n] === c[n] ? p.localeCompare(c) : p[n].localeCompare(c[n]))} Solution 21234function solution(strings, n) { return strings.sort((p, c) =&gt; p[n] === c[n] ? (p &lt; c ? -1 : (p &gt; c ? 1 : 0)) : (p[n] &lt; c[n] ? -1 : (p[n] &gt; c[n] ? 1 : 0)))}","link":"/2019/06/14/algorithm/programmers/level1-10/"},{"title":"프로그래머스 - 완주하지 못한 선수","text":"문제 설명수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요. 제한사항 마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다. completion의 길이는 participant의 길이보다 1 작습니다. 참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다. 참가자 중에는 동명이인이 있을 수 있습니다. 입출력 예 participant completion return [leo, kiki, eden] [eden, kiki] leo [marina, josipa, nikola, vinko, filipa] [josipa, filipa, marina, nikola] vinko [stanko, ana, mislav] [mislav, stanko, mislav, ana] mislav 입출력 예 설명 예제 #1 leo는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다. 예제 #2 vinko는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다. 예제 #3 mislav는 참여자 명단에는 두 명이 있지만, 완주자 명단에는 한 명밖에 없기 때문에 한명은 완주하지 못했습니다. Solution12345678910function solution(participant, completion) { participant.sort(); completion.sort(); return participant.reduce((target, name, index) =&gt; { name !== completion[index] &amp;&amp; target.push(name); return target; }, [])[0];}","link":"/2019/06/10/algorithm/programmers/level1-01/"},{"title":"Day0 Hello World","text":"ObjectiveIn this challenge, we review some basic concepts that will get you started with this series. You will need to use the same (or similar) syntax to read input and write output in challenges throughout HackerRank. Check out the Tutorial tab for learning materials and an instructional video! TaskTo complete this challenge, you must save a line of input from stdin to a variable, print Hello, World. on a single line, and finally print the value of your variable on a second line. You’ve got this! Note: The instructions are Java-based, but we support submissions in many popular languages. You can switch languages using the drop-down menu above your editor, and the InputString variable may be written differently depending on the best-practice conventions of your submission language. Input FormatA single line of text denoting inputString (the variable whose contents must be printed). Output FormatPrint Hello, World. on the first line, and the contents of inputString on the second line. Sample Input 01Welcome to 30 Days of Code! ##Sample Output 0 12Hello, World. Welcome to 30 Days of Code! ExplanationOn the first line, we print the string literal Hello, World.. On the second line, we print the contents of the inputString variable which, for this sample case, happens to be Welcome to 30 Days of Code!. If you do not print the variable’s contents to stdout, you will not pass the hidden test case. Solution1234567function processData(inputString) { // This line of code prints the first line of output console.log(\"Hello, World.\"); // Write the second line of output that prints the contents of 'inputString' here.}","link":"/2019/06/15/algorithm/hackerrank/Day0_HelloWorld/"},{"title":"Day5 Loops","text":"ObjectiveIn this challenge, we’re going to use loops to help us do some simple math. Check out the Tutorial tab to learn more. TaskGiven an integer, n, print its first 10 multiples. Each multiple n x i (where 1 &lt;= i &lt;= 10) should be printed on a new line in the form: n x i = result. Input FormatA single integer, n. Constraints 2 &lt;= n &lt;= 20 Output FormatPrint 10 lines of output; each line i (where 1 &lt;= i &lt;= 10) contains the result of n x i in the form:n x i = result. Sample Input12 ##Sample Output 123456789102 x 1 = 22 x 2 = 42 x 3 = 62 x 4 = 82 x 5 = 102 x 6 = 122 x 7 = 142 x 8 = 162 x 9 = 182 x 10 = 20 Solution 11234567function main() { const n = parseInt(readLine(), 10); for (let i = 1; i &lt;= 10; i++) { console.log(`${n} x ${i} = ${n * i}`); }} Solution 212345678function main() { const n = parseInt(readLine(), 10); new Array(10).fill(n).forEach((time, index) =&gt; { console.log(`${time} x ${index + 1} = ${time * (index + 1)}`); });}","link":"/2019/06/15/algorithm/hackerrank/Day5_Loops/"},{"title":"Day9 Recursion 3","text":"ObjectiveToday, we’re learning and practicing an algorithmic concept called Recursion. Check out the Tutorial tab for learning materials and an instructional video! Recursive Method for Calculating Factorial TaskWrite a factorial function that takes a positive integer, N as a parameter and prints the result of N! (N factorial). Note: If you fail to use recursion or fail to name your recursive function factorial or Factorial, you will get a score of 0. Input FormatA single integer, N (the argument to pass to factorial). Constraints 2 &lt;= N &lt;= 12 Your submission must contain a recursive function named factorial. Output FormatPrint a single integer denoting N!. Sample Input13 Sample Output16 ExplanationConsider the following steps: factorial(3) = 3 X factorial(2) factorial(2) = 2 X factorial(1) factorial(1) = 1 From steps 2 and 3, we can say factorial(2) = 2 X 1 = 2; then when we apply the value from factorial(2) to step 1, we get factorial(3) = 3 X 2 X 1 = 6. Thus, we print 6 as our answer. Solutions 11234function factorial(n) { return n &lt; 2 ? 1 : n * factorial(n - 1);} Solution 21234function factorial(n) { return (!+n) ? 1 : n * factorial(n - 1);} Solution 312345678910let memoization = [0, 1];const factorial = (n) =&gt; { (typeof memoization[n] !== 'number') &amp;&amp; ( memoization[n] = (n - 1) &gt; 0 ? n * factorial(n - 1) : 1 ); return memoization[n];}","link":"/2019/06/16/algorithm/hackerrank/Day9_Recursion3/"},{"title":"Day3 Intro to Conditional Statements","text":"ObjectiveIn this challenge, we’re getting started with conditional statements. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven an integer, n, perform the following conditional actions: If n is odd, print Weird If n is even and in the inclusive range of 2 to 5, print Not Weird If n is even and in the inclusive range of 6 to 20, print Weird If n is even and greater than 20, print Not Weird Complete the stub code provided in your editor to print whether or not is weird. Input FormatA single line containing a positive integer, n. Constraints 1 &lt;= n &lt;= 100 Output FormatPrint Weird if the number is weird; otherwise, print Not Weird. Sample Input 013 ##Sample Output 0 1Weird Sample Input 1124 ##Sample Output 1 1Not Weird ExplanationSample Case 0: n = 3n is odd and odd numbers are weird, so we print Weird. Sample Case 1: n = 24n &gt; 20 and n is even, so it isn’t weird. Thus, we print Not Weird. Solution 11234567891011121314151617// Complete the solve function below.function main() { var N = parseInt(readLine()); if(N % 2 == 0) { if(N &gt;= 2 &amp;&amp; N &lt; 6) { console.log('Not Weird'); } else if(N &gt;= 6 &amp;&amp; N &lt;= 20) { console.log('Weird'); } else if(N &gt; 20) { console.log('Not Weird'); } } else { console.log('Weird'); }} Solution 212345678// Complete the solve function below.function main() { const N = parseInt(readLine(), 10); let result = (N % 2 === 1 || (N % 2 === 0 &amp;&amp; N &gt;= 6 &amp;&amp; N &lt;= 20)) ? 'Weird' : 'Not Weird'; console.log(result);}","link":"/2019/06/15/algorithm/hackerrank/Day3_IntroToConditionalStatements/"},{"title":"Day10 Binary Numbers","text":"ObjectiveToday, we’re working with binary numbers. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven a base-10 integer, n, convert it to binary (base-2). Then find and print the base-10 integer denoting the maximum number of consecutive 1‘s in n‘s binary representation. Input FormatA single integer, n. Constraints 1 &lt;= n &lt;= 106 Output FormatPrint a single base-10 integer denoting the maximum number of consecutive 1‘s in the binary representation of n. Sample Input 115 Sample Output 111 Sample Input 2113 Sample Output 212 ExplanationSample Case 1:The binary representation of 5 is 101, so the maximum number of consecutive 1‘s is 1. Sample Case 2:The binary representation of 13 is 1101, so the maximum number of consecutive 1‘s is 2. Solution 112345678910111213141516171819202122function main() { let n = parseInt(readLine(), 10); let values = []; while (+n != 0) { values.push(n % 2); n = Math.floor(n / 2); } let { result } = values.reduce((target, item, index) =&gt; { item ? target['accumulator']++ : (target['accumulator'] = 0); target['accumulator'] &gt; target['result'] &amp;&amp; (target['result'] = target['accumulator']); return target; }, { accumulator: 0, result: 0 }); console.log(result);} Solution 212345678910111213141516function main() { const n = parseInt(readLine(), 10); let result = 0; const temp = n.toString(2).split('').reduce((target, num) =&gt; { let value = Number(num) &gt; 0 ? Number(target) + Number(num) : ( result = target &gt; result ? target : result, 0 ); return value; }, 0); console.log(result - temp &gt; 0 ? result : temp)} Solution 31234567891011121314151617181920212223function main() { const n = parseInt(readLine(), 10); const array = n.toString(2).split(''); let max = 0; let cur = 0; for (let i = 0, itotal = array.length; i &lt; itotal; i++) { if (array[i] == 1) { cur++; } else if (array[i] == 0) { if (cur &gt; max) { max = cur; } cur = 0; } } if (cur &gt; max) { max = cur; } console.log(max);}","link":"/2019/06/16/algorithm/hackerrank/Day10_BinaryNumbers/"},{"title":"Day4 Class vs. Instance","text":"ObjectiveIn this challenge, we’re going to learn about the difference between a class and an instance; because this is an Object Oriented concept, it’s only enabled in certain languages. Check out the Tutorial tab for learning materials and an instructional video! TaskWrite a Person class with an instance variable, , and a constructor that takes an integer, , as a parameter. The constructor must assign to after confirming the argument passed as is not negative; if a negative argument is passed as , the constructor should set to and print Age is not valid, setting age to 0.. In addition, you must write the following instance methods: yearPasses() should increase the instance variable by .amIOld() should perform the following conditional actions:If , print You are young..If and , print You are a teenager..Otherwise, print You are old..To help you learn by example and complete this challenge, much of the code is provided for you, but you’ll be writing everything in the future. The code that creates each instance of your Person class is in the main method. Don’t worry if you don’t understand it all quite yet! Note: Do not remove or alter the stub code in the editor. Input FormatInput is handled for you by the stub code in the editor. The first line contains an integer, T (the number of test cases), and the T subsequent lines each contain an integer denoting the age of a Person instance. Constraints 1 &lt;= T &lt;= 4 -5 &lt;= age &lt;= 30 Output FormatComplete the method definitions provided in the editor so they meet the specifications outlined above; the code to test your work is already in the editor. If your methods are implemented correctly, each test case will print 2 or 3 lines (depending on whether or not a valid initialAge was passed to the constructor). Sample Input123454-1101618 ##Sample Output 123456789101112Age is not valid, setting age to 0.You are young.You are young.You are young.You are a teenager.You are a teenager.You are old.You are old.You are old. ExplanationTest Case 0: initialAge = -1Because initialAge &lt; 0, our code must set age to 0 and print the “Age is not valid…” message followed by the young message. Three years pass and age = 3, so we print the young message again. Test Case 1: initialAge = 10Because initialAge &lt; 13, our code should print that the person is young. Three years pass and age = 13, so we print that the person is now a teenager. Test Case 2: initialAge = 16Because 13 &lt;= initialAge &lt; 18, our code should print that the person is a teenager. Three years pass and age = 19, so we print that the person is old. Test Case 3: initialAge = 18Because initialAge &gt;= 18, our code should print that the person is old. Three years pass and the person is still old at age = 21, so we print the old message again. The extra line at the end of the output is supposed to be there and is trimmed before being compared against the test case’s expected output. If you’re failing this challenge, check your logic and review your print statements for spelling errors. Solution12345678910111213141516171819function Person(initialAge){ // Add some more code to run some checks on initialAge (initialAge &lt;= 0) &amp;&amp; (console.log('Age is not valid, setting age to 0.')); this.age = (initialAge &lt;= 0) ? 0 : initialAge; this.amIOld=function(){ // Do some computations in here and print out the correct statement to the console let age = this.age; let result = ''; console.log(`You are ${(age &gt;= 13 &amp;&amp; age &lt; 18) ? 'a teenager.' : ((age &lt; 13) ? 'young.' : 'old.')}`); }; this.yearPasses=function(){ // Increment the age of the person in here return this.age++; };}","link":"/2019/06/15/algorithm/hackerrank/Day4_ClassVsInstance/"},{"title":"Day7 Arrays","text":"ObjectiveToday, we’re learning about the Array data structure. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven an array, A, of N integers, print A‘s elements in reverse order as a single line of space-separated numbers. Input FormatThe first line contains an integer, N (the size of our array).The second line contains N space-separated integers describing array A‘s elements. Constraints 1 &lt;= N &lt;= 1000 1 &lt;= Ai &lt;= 10000, where Ai is the ith integer in the array. Output FormatPrint the elements of array A in reverse order as a single line of space-separated numbers. Sample Input1241 4 3 2 Sample Output12 3 4 1 SolutionsSolution 11234567function main() { const n = parseInt(readLine(), 10); const arr = readLine().split(' ').map(arrTemp =&gt; parseInt(arrTemp, 10)); console.log(arr.reverse().join(' '));} Solution 2123456789101112131415161718function main() { const n = parseInt(readLine(), 10); const arr = readLine().split(' ').map(arrTemp =&gt; parseInt(arrTemp, 10)); const reverseArray = (array) =&gt; { let temp = null; const length = array.length; for (let i = 0; i &lt; length / 2; i++){ temp = array[i]; array[i] = array[length - 1 - i]; array[length - 1 - i] = temp; } return array; }; console.log(reverseArray(arr).join(' '));}","link":"/2019/06/15/algorithm/hackerrank/Day7_Arrays/"},{"title":"Day1 Data Types","text":"ObjectiveToday, we’re discussing data types. Check out the Tutorial tab for learning materials and an instructional video! TaskComplete the code in the editor below. The variables i, d, and s are already declared and initialized for you. You must: Declare 3 variables: one of type int, one of type double, and one of type String. Read 3 lines of input from stdin (according to the sequence given in the Input Format section below) and initialize your 3 variables. Use the + operator to perform the following operations: Print the sum of i plus your int variable on a new line. Print the sum of d plus your double variable to a scale of one decimal place on a new line. Concatenate s with the string you read as input and print the result on a new line. Note: If you are using a language that doesn’t support using + for string concatenation (e.g.: C), you can just print one variable immediately following the other on the same line. The string provided in your editor must be printed first, immediately followed by the string you read as input. Input FormatThe first line contains an integer that you must sum with i. The second line contains a double that you must sum with d. The third line contains a string that you must concatenate with s. Output FormatPrint the sum of both integers on the first line, the sum of both doubles (scaled to 1 decimal place) on the second line, and then the two concatenated strings on the third line. Sample Input 0123124.0is the best place to learn and practice coding! ##Sample Output 0 123168.0HackerRank is the best place to learn and practice coding! ExplanationWhen we sum the integers 4 and 12, we get the integer 16.When we sum the floating-point numbers 4.0 and 4.0, we get 8.0. When we concatenate HackerRank with is the best place to learn and practice coding!, we get HackerRank is the best place to learn and practice coding!. You will not pass this challenge if you attempt to assign the Sample Case values to your variables instead of following the instructions above and reading input from stdin. SolutionsSolution 1123456789101112131415161718// Declare second integer, double, and String variables.var first = +input_stdin_array[0];var second = +input_stdin_array[1];var third = input_stdin_array[2];// Read and save an integer, double, and String to your variables.// Print the sum of both integer variables on a new line.console.log(i + first);// Print the sum of the double variables on a new line.console.log((d + second).toFixed(1));// Concatenate and print the String variables on a new line// The 's' variable above should be printed first.console.log(s+third); Solution 2123456789101112131415161718// Declare second integer, double, and String variables.let first, second, third;// Read and save an integer, double, and String to your variables.first = parseInt(readLine());second = parseFloat(readLine());third = readLine();// Print the sum of both integer variables on a new line.console.log(i + first);// Print the sum of the double variables on a new line.console.log((d + second).toFixed(1));// Concatenate and print the String variables on a new line// The 's' variable above should be printed first.console.log(s + third);","link":"/2019/06/15/algorithm/hackerrank/Day1_DataTypes/"},{"title":"Day6 Let's Review","text":"ObjectiveToday we’re expanding our knowledge of Strings and combining it with what we’ve already learned about loops. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven a string, S, of length N that is indexed from 0 to N - 1, print its even-indexed and odd-indexed characters as 2 space-separated strings on a single line (see the Sample below for more detail). Note: 0 is considered to be an even index. Input FormatThe first line contains an integer, T (the number of test cases).Each line i of the T subsequent lines contain a String, S. Constraints 1 &lt;= T &lt;= 10 2 &lt;= length of S &lt;= 10000 Output FormatFor each String Sj (where 0 &lt;= j &lt;= T - 1), print Sj‘s even-indexed characters, followed by a space, followed by Sj‘s odd-indexed characters. Sample Input1232HackerRank ##Sample Output 12Hce akrRn ak ##Explanation Test Case 0: S = “Hacker”S[0] = “H”S[1] = “a”S[2] = “c”S[3] = “k”S[4] = “e”S[5] = “r” The even indices are 0, 2, and 4, and the odd indices are 1, 3, and 5. We then print a single line of 2 space-separated strings; the first string contains the ordered characters from S‘s even indices (Hce), and the second string contains the ordered characters from S‘s odd indices (akr). Test Case 1: S = “Rank”S[0] = “R”S[1] = “a”S[2] = “n”S[3] = “k” The even indices are 0 and 2, and the odd indices are 1 and 3. We then print a single line of 2 space-separated strings; the first string contains the ordered characters from S‘s even indices (Rn), and the second string contains the ordered characters from S‘s odd indices (ak). Solution 1123456789101112131415function processData(input) { let array = input.split('\\n'); array.shift(); array.map((value, index) =&gt; { let odd = ''; let even = ''; value.split('').map((value, index) =&gt; { index % 2 === 0 ? odd += value : even += value; }); console.log(`${odd} ${even}`); });} Solution 21234567891011121314151617function processData(input) { //Enter your code here input.split(\"\\n\").reduce((target, item, index) =&gt; { if (index &amp;&amp; Number.isNaN(+item)) { let result = item.split('').reduce((target, text, index) =&gt; { target[+(index % 2 !== 0)] += text; return target; }, new Array(2).fill('')).join(' '); console.log(result); } return target; }, '');}","link":"/2019/06/15/algorithm/hackerrank/Day6_LetsReview/"},{"title":"Day2 Operators","text":"ObjectiveIn this challenge, you’ll work with arithmetic operators. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven the meal price (base cost of a meal), tip percent (the percentage of the meal price being added as tip), and tax percent (the percentage of the meal price being added as tax) for a meal, find and print the meal’s total cost. Note: Be sure to use precise values for your calculations, or you may end up with an incorrectly rounded result! Input FormatThere are 3 lines of numeric input:The first line has a double, mealCost (the cost of the meal before tax and tip).The second line has an integer, tipPercent (the percentage of mealCost being added as tip).The third line has an integer, taxPercent (the percentage of mealCost being added as tax). Output FormatPrint the total meal cost, where totalCost is the rounded integer result of the entire bill (mealCost with added tax and tip). Sample Input 012312.00208 ##Sample Output 0 115 ExplanationGiven:mealCost = 12, tipPercent = 20, taxPercent = 8 Calculations: tip = 12 x = 2.4 tax = 12 x = 0.96 totalCost = mealCost + tip + tax = 12 + 2.4 + 0.96 = 15.36 round(totalCost) = 15 We round totalCost to the nearest dollar (integer) and then print our result, 15. Solution1234567891011121314151617function main() { var cost = +input_stdin_array[0]; var tip = cost * input_stdin_array[1] / 100; var tax = cost * input_stdin_array[2] / 100; var total = cost + tip + tax; var round = Math.round(total); console.log('The total meal cost is ' + round + ' dollars.');}// Complete the solve function below.function solve(meal_cost, tip_percent, tax_percent) { let totalCost = meal_cost * (1 + (tip_percent / 100) + (tax_percent / 100)); console.log(Math.round(totalCost));}","link":"/2019/06/15/algorithm/hackerrank/Day2_Operator/"},{"title":"Day8 Dictionaries and Maps","text":"ObjectiveToday, we’re learning about Key-Value pair mappings using a Map or Dictionary data structure. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven n names and phone numbers, assemble a phone book that maps friends’ names to their respective phone numbers. You will then be given an unknown number of names to query your phone book for. For each name queried, print the associated entry from your phone book on a new line in the form name=phoneNumber; if an entry for name is not found, print Not found instead. Note: Your phone book should be a Dictionary/Map/HashMap data structure. Input FormatThe first line contains an integer, n, denoting the number of entries in the phone book.Each of the n subsequent lines describes an entry in the form of 2 space-separated values on a single line. The first value is a friend’s name, and the second value is an 8-digit phone number. After the n lines of phone book entries, there are an unknown number of lines of queries. Each line (query) contains a name to look up, and you must continue reading lines until there is no more input. Note: Names consist of lowercase English alphabetic letters and are first names only. Constraints 1 &lt;= n &lt;= 105 1 &lt;= queries &lt;= 105 Output FormatOn a new line for each query, print Not found if the name has no corresponding entry in the phone book; otherwise, print the full name and phoneNumber in the format name=phoneNumber. Sample Input12345673sam 99912222tom 11122222harry 12299933samedwardharry Sample Output123sam=99912222Not foundharry=12299933 ExplanationWe add the following n = 3 (Key,Value) pairs to our map so it looks like this: phoneBook = {(sam, 99912222), (tom, 11122222), (harry, 12299933)} We then process each query and print key=value if the queried key is found in the map; otherwise, we print Not found. Query 0: samSam is one of the keys in our dictionary, so we print sam=99912222. Query 1: edwardEdward is not one of the keys in our dictionary, so we print Not found. Query 2: harryHarry is one of the keys in our dictionary, so we print harry=12299933. Solution 1123456789101112131415161718192021222324function processData(input) { //Enter your code here const { phoneBook, queries } = input.split('\\n').reduce((target, item, index) =&gt; { let total = !index ? item : target['total']; let { 0: key, 1: value } = item.split(' '); !index ? (target['total'] = total) : ( index &lt;= total ? (target['phoneBook'][key] = value) : target['queries'].push(item) ); return target; }, { total: 0, phoneBook: [], queries: [] }); queries.forEach((query) =&gt; { let value = phoneBook[String(query)]; console.log(value ? `${query}=${value}` : 'Not found'); });} Solution 212345678910111213141516function processData(input) { //Enter your code here const inputData = input.split('\\n'); const dataLength = Number(inputData.shift()); const phoneBook = new Map(); const queryData = inputData.reduce((target, item, index) =&gt; { index &lt; dataLength ? phoneBook.set(item.split(' ')[0], item.split(' ')[1]) : target.push(item); return target; }, []); queryData.forEach((val, index) =&gt; { console.log(phoneBook.get(val) ? `${val}=${phoneBook.get(val)}` : 'Not found'); })} Solution 3123456789101112131415161718192021222324252627function processData(input) { //Enter your code here const splitInput = input.split(\"\\n\"); const phoneBookSize = +splitInput[0]; const inputValue = splitInput.slice(phoneBookSize + 1); const temp = splitInput.slice(1, phoneBookSize + 1).map(list =&gt; { let result = { name: list.split(\" \")[0], phoneNumber: list.split(\" \")[1] }; return result; }); let phoneBook = []; for (let list of temp) { phoneBook[list.name] = list.phoneNumber; } for (let name of inputValue) { if (phoneBook[name]) { console.log(`${name}=${phoneBook[name]}`); } else { console.log('Not found') } }}","link":"/2019/06/15/algorithm/hackerrank/Day8_DictionariesAndMaps/"},{"title":"Day11 2D Arrays","text":"ObjectiveToday, we’re building on our knowledge of Arrays by adding another dimension. Check out the Tutorial tab for learning materials and an instructional video! ContextGiven a 6 X 6 2D Array, A: 1234561 1 1 0 0 00 1 0 0 0 01 1 1 0 0 00 0 0 0 0 00 0 0 0 0 00 0 0 0 0 0 We define an hourglass in A to be a subset of values with indices falling in this pattern in A‘s graphical representation: 123a b c de f g There are 16 hourglasses in A, and an hourglass sum is the sum of an hourglass’ values. TaskCalculate the hourglass sum for every hourglass in A, then print the maximum hourglass sum. Input FormatThere are 6 lines of input, where each line contains 6 space-separated integers describing 2D Array A; every value in A will be in the inclusive range of -9 to 9. Constraints -9 &lt;= A[i][j] &lt;= 9 0 &lt;= i,j &lt;= 5 Output FormatPrint the largest (maximum) hourglass sum found in A. Sample Input1234561 1 1 0 0 00 1 0 0 0 01 1 1 0 0 00 0 2 4 4 00 0 0 2 0 00 0 1 2 4 0 Sample Output119 ExplanationA contains the following hourglasses: 1234567891011121314151 1 1 1 1 0 1 0 0 0 0 0 1 0 0 01 1 1 1 1 0 1 0 0 0 0 00 1 0 1 0 0 0 0 0 0 0 0 1 1 0 00 0 2 0 2 4 2 4 4 4 4 01 1 1 1 1 0 1 0 0 0 0 0 0 2 4 40 0 0 0 0 2 0 2 0 2 0 00 0 2 0 2 4 2 4 4 4 4 0 0 0 2 00 0 1 0 1 2 1 2 4 2 4 0 The hourglass with the maximum sum (19) is: 1232 4 4 21 2 4 Solution 11234567891011121314151617181920212223function main() { let arr = Array(6); for (let i = 0; i &lt; 6; i++) { arr[i] = readLine().split(' ').map(arrTemp =&gt; parseInt(arrTemp, 10)); } let result = arr.reduce((target, rows, index) =&gt; { rows.reduce((subTarget, item, subIndex) =&gt; { ( index &lt; arr.length - 2 &amp;&amp; subIndex &lt; arr.length - 2 ) &amp;&amp; target.push( arr[index][subIndex] + arr[index][subIndex + 1] + arr[index][subIndex + 2] + arr[index + 1][subIndex + 1] + arr[index + 2][subIndex] + arr[index + 2][subIndex + 1] + arr[index + 2][subIndex + 2] ); }, []); return target; }, []); console.log(Math.max.apply(null, result));} Solution 2123456789101112131415161718192021222324252627282930313233function main() { let arr = Array(6); let maxSum; for (let i = 0; i &lt; 6; i++) { arr[i] = readLine().split(' ').map(arrTemp =&gt; parseInt(arrTemp, 10)); } const findMaxSum = (n, m) =&gt; { let sum = 0; for (let i = 0; i &lt; 3; i++) { for (let j = 0; j &lt; 3; j++) { sum += !(i === 1 &amp;&amp; (j === 0 || j === 2)) &amp;&amp; arr[n + i][m + j]; } } return sum; } const search = () =&gt; { let sum; for (let i = 0; i &lt; 4; i++) { for (let j = 0; j &lt; 4; j++) { sum = findMaxSum(i, j); (i === 0 &amp;&amp; j === 0) &amp;&amp; (maxSum = sum); maxSum &lt; sum &amp;&amp; (maxSum = sum); } } } search(); console.log(maxSum); } Solution 3123456789101112131415161718192021function main() { let arr = Array(6); for (let i = 0; i &lt; 6; i++) { arr[i] = readLine().split(' ').map(arrTemp =&gt; parseInt(arrTemp, 10)); } const temp = [] for (let i = 0; i &lt; 4; i++) { for (let j = 0; j &lt; 4; j++) { temp.push(arr[i][j] + arr[i][j + 1] + arr[i][j + 2] + arr[i + 1][j + 1] + arr[i + 2][j] + arr[i + 2][j + 1] + arr[i + 2][j + 2]) } } let max = temp.reduce(function (previous, current) { return previous &gt; current ? previous : current; }); console.log(max);}","link":"/2019/06/16/algorithm/hackerrank/Day11_2DArrays/"},{"title":"Day12 Inheritance","text":"ObjectiveToday, we’re delving into Inheritance. Check out the attached tutorial for learning materials and an instructional video! TaskYou are given two classes, Person and Student, where Person is the base class and Student is the derived class. Completed code for Person and a declaration for Student are provided for you in the editor. Observe that Student inherits all the properties of Person. Complete the Student class by writing the following: A Student class constructor, which has 4 parameters: A string, firstName. A string, lastName. An integer, id. An integer array (or vector) of test scores, scores. A char calculate() method that calculates a Student object’s average and returns the grade character representative of their calculated average: Input FormatThe locked stub code in your editor calls your Student class constructor and passes it the necessary arguments. It also calls the calculate method (which takes no arguments). You are not responsible for reading the following input from stdin:The first line contains firstName, lastName, and id, respectively. The second line contains the number of test scores. The third line of space-separated integers describes scores. Constraints 1 &lt;= |firstName|,|lastName| &lt;= 10 |id| = 7 0 &lt;= score,average &lt;= 100 Output FormatThis is handled by the locked stub code in your editor. Your output will be correct if your Student class constructor and calculate() method are properly implemented. Sample Input123Heraldo Memelli 81356272100 80 Sample Output123Name: Memelli, HeraldoID: 8135627Grade: O ExplanationThis student had 2 scores to average: 100 and 80. The student’s average grade is https://latex.codecogs.com/svg.latex?\\frac{(100&space;&plus;&space;80)}{2} = 90. An average grade of 90 corresponds to the letter grade O, so our calculate() method should return the character’O’. Solution 112345678910111213141516171819202122232425262728293031323334353637383940414243444546class Student extends Person { constructor(firstName, lastName, id, scores) { super(firstName, lastName, id, scores); this.scores = scores; } calculate() { const average = this.scores.reduce((target, score) =&gt; { return target + score }) / this.scores.length; const range = (average &lt; 70) ? Math.ceil((100 - average) / 15) : Math.floor((100 - average - 1) / 10); let letter = ''; switch (range) { case -1: case 0: letter = 'O'; break; case 1: letter = 'E'; break; case 2: letter = 'A'; break; case 3: letter = 'P'; break; case 4: letter = 'D'; break; default: letter = 'T'; break; } return letter; }} Solution 2123456789101112131415161718192021222324252627282930class Student extends Person { constructor(firstName, lastName, idNumber, testScores) { super(firstName, lastName, idNumber); this.testScores = testScores; } calculate() { let average = 0; let sum = 0; let grade = ''; for (let i = 0, length = this.testScores.length; i &lt; length; i++) { sum += this.testScores[i]; } average = sum / this.testScores.length; if (90 &lt;= average &amp;&amp; average &lt;= 100) { grade = 'O'; } else if (80 &lt;= average &amp;&amp; average &lt; 90) { grade = 'E'; } else if (70 &lt;= average &amp;&amp; average &lt; 80) { grade = 'A'; } else if (55 &lt;= average &amp;&amp; average &lt; 70) { grade = 'P'; } else if (40 &lt;= average &amp;&amp; average &lt; 55) { grade = 'D'; } else { grade = 'T'; } return grade; }}","link":"/2019/06/16/algorithm/hackerrank/Day12_Inheritance/"},{"title":"Day13 Abstract Classes","text":"Day 13: Abstract ClassesObjectiveToday, we’re taking what we learned yesterday about Inheritance and extending it to Abstract Classes. Because this is a very specific Object-Oriented concept, submissions are limited to the few languages that use this construct. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven a Book class and a Solution class, write a MyBook class that does the following: Inherits from Book Has a parameterized constructor taking these 3 parameters: string title string author int price Implements the Book class’ abstract display() method so it prints these 3 lines: title, a space, and then the current instance’s title. author, a space, and then the current instance’s author. price, a space, and then the current instance’s price. Note: Because these classes are being written in the same file, you must not use an access modifier (e.g.: public) when declaring MyBook or your code will not execute. Input FormatYou are not responsible for reading any input from stdin. The Solution class creates a Book object and calls the MyBook class constructor (passing it the necessary arguments). It then calls the display method on the Book object. Output FormatThe void display() method should print and label the respective title, author, and price of the MyBook object’s instance (with each value on its own line) like so: 123Title: $titleAuthor: $authorPrice: $price Note: The $ is prepended to variable names to indicate they are placeholders for variables. Sample InputThe following input from stdin is handled by the locked stub code in your editor: 123The AlchemistPaulo Coelho248 Sample OutputThe following output is printed by your display() method: 123Title: The AlchemistAuthor: Paulo CoelhoPrice: 248 Solution1234567891011121314151617181920212223242526272829303132333435// Declare your class here.class MyBook extends Book { /** * Class Constructor * * @param title The book's title. * @param author The book's author. * @param price The book's price. **/ // Write your constructor here constructor(title, author, price) { super(); this.title = title; this.author = author; this.price = price; } /** * Method Name: display * * Print the title, author, and price in the specified format. **/ // Write your method here display() { console.log(`Title: ${this.title}`); console.log(`Author: ${this.author}`); console.log(`Price: ${this.price}`); } // End class}","link":"/2019/06/16/algorithm/hackerrank/Day13_AbstractClasses/"},{"title":"Day14 Scope","text":"ObjectiveToday we’re discussing scope. Check out the Tutorial tab for learning materials and an instructional video! The absolute difference between two integers, a and b, is written as |a - b|. The maximum absolute difference between two integers in a set of positive integers, elements, is the largest absolute difference between any two integers in elements. The Difference class is started for you in the editor. It has a private integer array (elements) for storing N non-negative integers, and a public integer (maximumDifference) for storing the maximum absolute difference. TaskComplete the Difference class by writing the following: A class constructor that takes an array of integers as a parameter and saves it to the elements instance variable. A computeDifference method that finds the maximum absolute difference between any 2 numbers in N and stores it in the maximumDifference instance variable. Input FormatYou are not responsible for reading any input from stdin. The locked Solution class in your editor reads in 2 lines of input; the first line contains N, and the second line describes the elements array. Constraints 1 &lt;= N &lt;= 10 1 &lt;= elements[i] &lt;= 100, where 0 &lt;= i &lt;= N - 1 Output FormatYou are not responsible for printing any output; the Solution class will print the value of the maximumDifference instance variable. Sample Input1231 2 5 Sample Output14 ExplanationThe scope of the elements array and maximumDifference integer is the entire class instance. The class constructor saves the argument passed to the constructor as the elements instance variable (where the computeDifference method can access it). To find the maximum difference, computeDifference checks each element in the array and finds the maximum difference between any 2 elements: |1 - 2| = 1 |1 - 5| = 4|2 - 5| = 3 The maximum of these differences is 4, so it saves the value 4 as the maximumDifference instance variable. The locked stub code in the editor then prints the value stored as maximumDifference, which is 4. Solution 1123456789101112131415161718let input = \"3\\n1 2 5\";const difference = () =&gt; { const result = input.split('\\n')[1].split(' ').reduce( (target, el) =&gt; { let { min, max } = target; target[\"min\"] = el &gt; min ? el : min; target[\"max\"] = el &lt; max ? el : max; return target; }, { min: -999, max: 999 } ); console.log(Math.abs(result[\"max\"] - result[\"min\"]));};difference(); Solution 2123456789101112131415161718192021222324let input = \"3\\n1 2 5\";function difference(input) { const split = input.split(\"\\n\"); const length = +split[0]; const array = split[1].split(\" \"); console.log(array, length); let maximum = 0; let result = 0; array.forEach(value1 =&gt; { array.forEach(value2 =&gt;{ result = Math.abs(value1-value2); if(result &gt; maximum) { maximum = result; } }) }); console.log(maximum);}console.log(input);difference(input);","link":"/2019/06/16/algorithm/hackerrank/Day14_Scope/"},{"title":"Day15 Linked List","text":"ObjectiveToday we’re working with Linked Lists. Check out the Tutorial tab for learning materials and an instructional video! A Node class is provided for you in the editor. A Node object has an integer data field, data, and a Node instance pointer, next, pointing to another node (i.e.: the next node in a list). A Node insert function is also declared in your editor. It has two parameters: a pointer, head, pointing to the first node of a linked list, and an integer data value that must be added to the end of the list as a new Node object. TaskComplete the insert function in your editor so that it creates a new Node (pass data as the Node constructor argument) and inserts it at the tail of the linked list referenced by the head parameter. Once the new node is added, return the reference to the head node. Note: If the head argument passed to the insert function is null, then the initial list is empty. Input FormatThe insert function has 2 parameters: a pointer to a Node named head, and an integer value, data. The constructor for Node has 1 parameter: an integer value for the data field. You do not need to read anything from stdin. Output FormatYour insert function should return a reference to the head node of the linked list. Sample InputThe following input is handled for you by the locked code in the editor: The first line contains T, the number of test cases. The T subsequent lines of test cases each contain an integer to be inserted at the list’s tail. 1234542341 Sample OutputThe locked code in your editor prints the ordered data values for each element in your list as a single line of space-separated integers: 12 3 4 1 ExplanationT = 4, so the locked code in the editor will be inserting 4 nodes. The list is initially empty, so head is null; accounting for this, our code returns a new node containing the data value 2 as the head of our list. We then create and insert nodes 3, 4, and 1 at the tail of our list. The resulting list returned by the last call to insert is [2, 3, 4, 1], so the printed output is 2 3 4 1. Solution12345678910111213141516171819this.insert=function(head,data){ //complete this method let node = new Node(data); if (!head) { head = node; } else { let current = head; while (current.next != null) { current = current.next; } current.next = node; } return head;};","link":"/2019/06/16/algorithm/hackerrank/Day15_LinkedList/"},{"title":"Day16 Exceptions - String to Integer","text":"ObjectiveToday, we’re getting started with Exceptions by learning how to parse an integer from a string and print a custom error message. Check out the Tutorial tab for learning materials and an instructional video! TaskRead a string, S, and print its integer value; if S cannot be converted to an integer, print Bad String. Note: You must use the String-to-Integer and exception handling constructs built into your submission language. If you attempt to use loops/conditional statements, you will get a 0 score. Input FormatA single string, S. Constraints 1 &lt;= |S| &lt;= 6, where |S| is the length of string S. S is composed of either lowercase letters (a - z) or decimal digits (0 - 9). Output FormatPrint the parsed integer value of S, or Bad String if S cannot be converted to an integer. Sample Input 013 Sample Output 013 Sample Input 11za Sample Output 11Bad String ExplanationSample Case 0 contains an integer, so it should not raise an exception when we attempt to convert it to an integer. Thus, we print the 3.Sample Case 1 does not contain any integers, so an attempt to convert it to an integer will raise an exception. Thus, our exception handler prints Bad String. Solution1234567891011121314151617181920212223242526/* * You can use the following pseudocode: * * `S` = read string from stdin. * try { * `N` = numeric value of `S`. * * If `N` is `NaN` or `undefined`, then some exception must be thrown, * you can write the following withtout using conditional statement: * &lt;condition to return true when `N` is `NaN` or `undefined`&gt; &amp;&amp; an_undefined_function_call() * * print `N` * } catch (err) { * print `Bad String`. * } */function main() { const S = readLine(); try { console.log(parseInt(S).toString().replace('NaN', 'Bad String')); } catch (e) { console.log(\"Bad String\"); }}","link":"/2019/06/16/algorithm/hackerrank/Day16_ExceptionsStringToInteger/"},{"title":"Day17 More Exceptions","text":"ObjectiveYesterday’s challenge taught you to manage exceptional situations by using try and catch blocks. In today’s challenge, you’re going to practice throwing and propagating an exception. Check out the Tutorial tab for learning materials and an instructional video! TaskWrite a Calculator class with a single method: int power(int,int). The power method takes two integers, n and p, as parameters and returns the integer result of np. If either or is negative, then the method must throw an exception with the message: n and p should be non-negative. Note: Do not use an access modifier (e.g.: public) in the declaration for your Calculator class. Input FormatInput from stdin is handled for you by the locked stub code in your editor. The first line contains an integer, T, the number of test cases. Each of the T subsequent lines describes a test case in 2 space-separated integers denoting n and p, respectively. Constraints No Test Case will result in overflow for correctly written code. Output FormatOutput to stdout is handled for you by the locked stub code in your editor. There are T lines of output, where each line contains the result of np as calculated by your Calculator class’ power method. Sample Input1234543 52 4-1 -2-1 3 Sample Output123424316n and p should be non-negativen and p should be non-negative ExplanationT = 4T0: 3 and 5 are positive, so power returns the result of 35, which is 243. T1: 2 and 4 are positive, so power returns the result of 24=, which is 16. T2: Both inputs (-1 and -2) are negative, so power throws an exception and n and p should be non-negative is printed. T3: One of the inputs (-1) is negative, so power throws an exception and n and p should be non-negative is printed. Solution12345678910111213141516171819202122232425262728293031/* * You can use the following pseudocode: * * `S` = read string from stdin. * try { * `N` = numeric value of `S`. * * If `N` is `NaN` or `undefined`, then some exception must be thrown, * you can write the following withtout using conditional statement: * &lt;condition to return true when `N` is `NaN` or `undefined`&gt; &amp;&amp; an_undefined_function_call() * * print `N` * } catch (err) { * print `Bad String`. * } *///Write your code herelet Calculator = function () { this.power = function (n, p) { try { if (n &gt;= 0 &amp;&amp; p &gt;= 0) { return n ** p; } else { throw 'n and p should be non-negative'; } } catch (error) { return error; } }}","link":"/2019/06/16/algorithm/hackerrank/Day17_MoreExceptions/"},{"title":"Day18 Queues and Stacks","text":"ObjectiveWelcome to Day 18! Today we’re learning about Stacks and Queues. Check out the Tutorial tab for learning materials and an instructional video! A palindrome is a word, phrase, number, or other sequence of characters which reads the same backwards and forwards. Can you determine if a given string, s, is a palindrome? To solve this challenge, we must first take each character in s, enqueue it in a queue, and also push that same character onto a stack. Once that’s done, we must dequeue the first character from the queue and pop the top character off the stack, then compare the two characters to see if they are the same; as long as the characters match, we continue dequeueing, popping, and comparing each character until our containers are empty (a non-match means s isn’t a palindrome). Write the following declarations and implementations: Two instance variables: one for your stack, and one for your queue. A void pushCharacter(char ch) method that pushes a character onto a stack. A void enqueueCharacter(char ch) method that enqueues a character in the queue instance variable. A char popCharacter() method that pops and returns the character at the top of the stack instance variable. A char dequeueCharacter() method that dequeues and returns the first character in the queue instance variable. Input FormatYou do not need to read anything from stdin. The locked stub code in your editor reads a single line containing string s. It then calls the methods specified above to pass each character to your instance variables. Constraints s is composed of lowercase English letters. Output FormatYou are not responsible for printing any output to stdout.If your code is correctly written and s is a palindrome, the locked stub code will print The word, s, is not a palindrome; otherwise, it will print The word, s, is not a palindrome Sample Input1racecar Sample Output1The word, racecar, is a palindrome. Solution1234567891011function Solution(){ //Write your code here this.stack = []; this.queue = []; this.pushCharacter = (value) =&gt; this.stack.push(value); this.enqueueCharacter = (value) =&gt; this.queue.push(value); this.popCharacter = () =&gt; this.stack.pop(); this.dequeueCharacter = () =&gt; this.queue.shift();}","link":"/2019/06/16/algorithm/hackerrank/Day18_QueuesAndStack/"},{"title":"Day19 Interfaces","text":"Day 19: InterfacesObjectiveToday, we’re learning about Interfaces. Check out the Tutorial tab for learning materials and an instructional video! TaskThe AdvancedArithmetic interface and the method declaration for the abstract divisorSum(n) method are provided for you in the editor below. Complete the implementation of Calculator class, which implements the AdvancedArithmetic interface. The implementation for the divisorSum(n) method must return the sum of all divisors of n. Input FormatA single line containing an integer, n. Constraints 1 &lt;= n &lt;= 1000 Output FormatYou are not responsible for printing anything to stdout. The locked template code in the editor below will call your code and print the necessary output. Sample Input16 Sample Output12I implemented: AdvancedArithmetic12 ExplanationThe integer 6 is evenly divisible by 1, 2, 3, and 6. Our divisorSum method should return the sum of these numbers, which is 1 + 2 + 3 + 6 = 12. The Solution class then prints I implemented: AdvancedArithmetic on the first line, followed by the sum returned by divisorSum (which is 12) on the second line. Solution1234567891011121314151617181920212223242526272829303132333435/** It's not supported JavaScript so it create similar code **/class AdvancedArithmetic { divisor(n) { return n || 0; };}class Calculator extends AdvancedArithmetic { constructor(props) { super(props); this.divisor = this.divisorSum.bind(this); } divisorSum(n) { return Array(n).fill(0).reduce((target, item, index) =&gt; { !(n % (index + 1)) &amp;&amp; (target += (index + 1)) ; return target; }, 0); }}function Solution () { const n = 6; const myCalculator = new Calculator(); let sum = myCalculator.divisor(n); console.log(\"I implemented: AdvancedArithmetic\\n\" + sum); }Solution();","link":"/2019/06/16/algorithm/hackerrank/Day19_Interfaces/"},{"title":"Day20 Sorting","text":"ObjectiveToday, we’re discussing a simple sorting algorithm called Bubble Sort. Check out the Tutorial tab for learning materials and an instructional video! Consider the following version of Bubble Sort: 1234567891011121314151617for (int i = 0; i &lt; n; i++) { // Track number of elements swapped during a single array traversal int numberOfSwaps = 0; for (int j = 0; j &lt; n - 1; j++) { // Swap adjacent elements if they are in decreasing order if (a[j] &gt; a[j + 1]) { swap(a[j], a[j + 1]); numberOfSwaps++; } } // If no elements were swapped during a traversal, array is sorted if (numberOfSwaps == 0) { break; }} TaskGiven an array, a, of size n distinct elements, sort the array in ascending order using the Bubble Sort algorithm above. Once sorted, print the following 3 lines: Array is sorted in numSwaps swaps.where numSwaps is the number of swaps that took place. First Element: firstElementwhere firstElement is the first element in the sorted array. Last Element: lastElementwhere lastElement is the last element in the sorted array. Hint: To complete this challenge, you will need to add a variable that keeps a running tally of all swaps that occur during execution. Input FormatThe first line contains an integer, n, denoting the number of elements in array a. The second line contains n space-separated integers describing the respective values of a0, a1, …, an-1. Constraints 2 &lt;= n &lt;= 600 1 &lt;= ai &lt;= 2 X 106, where 0 &lt;= i &lt; n Output FormatPrint the following three lines of output: Array is sorted in numSwaps swaps.where numSwaps is the number of swaps that took place. First Element: firstElementwhere firstElement is the first element in the sorted array. Last Element: lastElementwhere lastElements is the last element in the sorted array. Sample Input 01231 2 3 Sample Output 0123Array is sorted in 0 swaps.First Element: 1Last Element: 3 Explanation 0The array is already sorted, so 0 swaps take place and we print the necessary 3 lines of output shown above. Sample Input 11233 2 1 Sample Output 1123Array is sorted in 3 swaps.First Element: 1Last Element: 3 Explanation 1The array a = [3, 2, 1] is not sorted, so we perform the following swaps: [3, 2, 1] -&gt; [2, 3, 1] [2, 3, 1] -&gt; [2, 1, 3] [2, 1, 3] -&gt; [1, 2, 3] At this point the array is sorted and we print the necessary 3 lines of output shown above. Solution 1123456789101112131415161718192021222324252627282930313233function main() { var n = parseInt(readLine()); a = readLine().split(' '); a = a.map(Number); // Write Your Code Here let numberOfSwaps = 0; const bubbleSort = (array) =&gt; { let arr = array; let length = arr.length; let i, j, temp; for (i = 0; i &lt; length - 1; i++) { for (j = 0; j &lt; length - 1 - i; j++) { if (arr[j] &gt; arr[j + 1]) { temp = arr[j + 1]; arr[j + 1] = arr[j]; arr[j] = temp; numberOfSwaps++; } } } return arr; } let sortArray = bubbleSort(a); console.log(`Array is sorted in ${numberOfSwaps} swaps.`) console.log(`First Element: ${sortArray[0]}`) console.log(`Last Element: ${sortArray[sortArray.length-1]}`)} Solution 2123456789101112131415161718192021222324252627282930313233function main() { var n = parseInt(readLine()); a = readLine().split(' '); a = a.map(Number); // Write Your Code Here let numberOfSwaps = 0; const bubbleSort = (values) =&gt; { let swapped; do { swapped = false; for (let i = 0, { length } = values; i &lt; length; i++) { if (values[i] &gt; values[i + 1]) { let tmp = values[i]; values[i] = values[i + 1]; values[i + 1] = tmp; swapped = true; numberOfSwaps++; } } } while (swapped); return values; }; let result = bubbleSort(a); console.log(`Array is sorted in ${numberOfSwaps} swaps.\\nFirst Element: ${result[0]}\\nLast Element: ${result[n - 1]}`);}","link":"/2019/06/16/algorithm/hackerrank/Day20_Sorting/"},{"title":"Day21 Generics","text":"ObjectiveToday we’re discussing Generics; be aware that not all languages support this construct, so fewer languages are enabled for this challenge. Check out the Tutorial tab for learning materials and an instructional video! TaskWrite a single generic function named printArray; this function must take an array of generic elements as a parameter (the exception to this is C++, which takes a vector). The locked Solution class in your editor tests your function. Note: You must use generics to solve this challenge. Do not write overloaded functions. Input FormatThe locked Solution class in your editor will pass different types of arrays to your printArray function. Constraints You must have exactly function named printArray. 1 Output FormatYour printArray function should print each element of its generic array parameter on a new line. Solution1234567891011121314/**** What is the Generic?* That is being able to create a component that can work over a variety of types rather than a single one.* JavaScript is a dynamically typed language and it doesn't have any generics. So we can write a normal function or method.* Also, you can write in languages like TypeScript, Java, C#.* It's a creation code in C#***/static void PrintArray&lt;T&gt;(T[] array){ foreach(T i in array) Console.WriteLine(i);}","link":"/2019/06/16/algorithm/hackerrank/Day21_Generics/"},{"title":"Day22 Binary Search Trees","text":"ObjectiveToday, we’re working with Binary Search Trees (BSTs). Check out the Tutorial tab for learning materials and an instructional video! TaskThe height of a binary search tree is the number of edges between the tree’s root and its furthest leaf. You are given a pointer, root, pointing to the root of a binary search tree. Complete the getHeight function provided in your editor so that it returns the height of the binary search tree. Input FormatThe locked stub code in your editor reads the following inputs and assembles them into a binary search tree: The first line contains an integer, n, denoting the number of nodes in the tree. Each of the n subsequent lines contains an integer, data, denoting the value of an element that must be added to the BST. Output FormatThe locked stub code in your editor will print the integer returned by your getHeight function denoting the height of the BST. Sample Input1234567873521467 Sample Output13 ExplanationThe input forms the following BST: The longest root-to-leaf path is shown below: There are 4 nodes in this path that are connected by 3 edges, meaning our BST’s height = 3. Thus, we print 3 as our answer. Solution123if (root === null) return -1;return Math.max(this.getHeight(root.left), this.getHeight(root.right)) + 1;","link":"/2019/06/16/algorithm/hackerrank/Day22_BinarySearchTrees/"},{"title":"Day23 BST Level-Order Traversal","text":"ObjectiveToday, we’re going further with Binary Search Trees. Check out the Tutorial tab for learning materials and an instructional video! TaskA level-order traversal, also known as a breadth-first search, visits each level of a tree’s nodes from left to right, top to bottom. You are given a pointer, root, pointing to the root of a binary search tree. Complete the levelOrder function provided in your editor so that it prints the level-order traversal of the binary search tree. Hint: You’ll find a queue helpful in completing this challenge. Input FormatThe locked stub code in your editor reads the following inputs and assembles them into a BST:The first line contains an integer, T (the number of test cases).The T subsequent lines each contain an integer, data, denoting the value of an element that must be added to the BST. Output FormatPrint the data value of each node in the tree’s level-order traversal as a single line of N space-separated integers. Sample Input12345676354721 Sample Output13 2 5 1 4 7 ExplanationThe input forms the following binary search tree: We traverse each level of the tree from the root downward, and we process the nodes at each level from left to right. The resulting level-order traversal is 3 -&gt; 2 -&gt; 5 -&gt; 1 -&gt; 4 -&gt; 7, and we print these data values as a single line of space-separated integers. Solution 1123456789101112131415// Add your code here// To print values separated by spaces use process.stdout.write(someValue + ' ')const queue = [root];const result = [];while (queue.length) { let treeNode = queue.shift(); result.push(treeNode.data); treeNode.left &amp;&amp; queue.push(treeNode.left); treeNode.right &amp;&amp; queue.push(treeNode.right);}console.log(result.join(' ')); Solution 21234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859// Start of function Nodefunction Node(data) { this.data = data; this.left = null; this.right = null;}; // End of function Node// Start of function BinarySearchTreefunction BinarySearchTree() { this.insert = function(root, data) { if (root === null) { this.root = new Node(data); return this.root; } if (data &lt;= root.data) { if (root.left) { this.insert(root.left, data); } else { root.left = new Node(data); } } else { if (root.right) { this.insert(root.right, data); } else { root.right = new Node(data); } } return this.root; }; // Start of function levelOrder this.levelOrder = function(root) { // Add your code here // To print values separated by spaces use process.stdout.write(someValue + ' ') let temp; const queue = []; const result = []; queue.push(root); while (queue.length) { // Deque the Queue temp = queue.splice(0, 1)[0]; result.push(temp.data); // Enqueue the Queue if (temp.left) queue.push(temp.left); if (temp.right) queue.push(temp.right) } console.log(result.join(' ')); }; // End of function levelOrder}; // End of function BinarySearchTree","link":"/2019/06/16/algorithm/hackerrank/Day23_BSTLevelOrderTraversal/"},{"title":"Day24 More Linked Lists","text":"ObjectiveCheck out the Tutorial tab for learning materials and an instructional video! TaskA Node class is provided for you in the editor. A Node object has an integer data field, data, and a Node instance pointer, next, pointing to another node (i.e.: the next node in a list). A removeDuplicates function is declared in your editor, which takes a pointer to the head node of a linked list as a parameter. Complete removeDuplicates so that it deletes any duplicate nodes from the list and returns the head of the updated list. Note: The head pointer may be null, indicating that the list is empty. Be sure to reset your next pointer when performing deletions to avoid breaking the list. Input FormatYou do not need to read any input from stdin. The following input is handled by the locked stub code and passed to the removeDuplicates function:The first line contains an integer, N, the number of nodes to be inserted.The N subsequent lines each contain an integer describing the data value of a node being inserted at the list’s tail. Constraints The data elements of the linked list argument will always be in non-decreasing order. Output FormatYour removeDuplicates function should return the head of the updated linked list. The locked stub code in your editor will print the returned list to stdout. Sample Input12345676122334 Sample Output11 2 3 4 ExplanationN = 6, and our non-decreasing list is {1, 2, 2, 3, 3, 4}. The values 2 and 3 both occur twice in the list, so we remove the two duplicate nodes. We then return our updated (ascending) list, which is {1, 2, 3, 4}. Solution1234567891011121314this.removeDuplicates=function(head){ //Write your code here let prev = head; while (prev) { let next = prev.next; (next &amp;&amp; prev.data == next.data) ? (prev.next = next.next) : (prev = prev.next); } return head;}","link":"/2019/06/16/algorithm/hackerrank/Day24_MoreLinkedLists/"},{"title":"Day26 Nested Logic","text":"ObjectiveToday’s challenge puts your understanding of nested conditional statements to the test. You already have the knowledge to complete this challenge, but check out the Tutorial tab for a video on testing! TaskYour local library needs your help! Given the expected and actual return dates for a library book, create a program that calculates the fine (if any). The fee structure is as follows: If the book is returned on or before the expected return date, no fine will be charged (i.e.: fine = 0). If the book is returned after the expected return day but still within the same calendar month and year as the expected return date, fine = 15 Hackos x (the number of days late). If the book is returned after the expected return month but still within the same calendar year as the expected return date, the fine = 500 Hackos x (the number of months late). If the book is returned after the calendar year in which it was expected, there is a fixed fine of 10000 Hackos. Input FormatThe first line contains 3 space-separated integers denoting the respective day, month, and year on which the book was actually returned.The second line contains 3 space-separated integers denoting the respective day, month, and year on which the book was expected to be returned (due date). Constraints 1 &lt;= D &lt;= 31 1 &lt;= M &lt;= 12 1 &lt;= Y &lt;= 3000 It is guanranteed that the dates will be valid Gregorian calendar dates. Output FormatPrint a single integer denoting the library fine for the book received as input. Sample Input129 6 20156 6 2015 Sample Output145 ExplanationGiven the following return dates: Actual: Da = 9, Ma = 6, Ya = 2015Expected: De = 6, Me = 6, Ye = 2015 Because Ye = Ya, we know it is less than a year late. Because Me = Ma, we know it’s less than a month late. Because De = Da, we know that it was returned late (but still within the same month and year). Per the library’s fee structure, we know that our fine will be 15 Hackos X (# days late). We then print the result of 15 X (Da - De) = 15 X (9 - 6) = 45 as our output. Solution 1123456789101112131415161718192021222324function processData(input) { //Enter your code here let fine = 0; const [actual, expected] = input.split('\\n').map(item =&gt; { const [day, month, year] = item.split(' ').map(Number); return { day, month, year }; }); ( actual.year === expected.year &amp;&amp; actual.month === expected.month &amp;&amp; actual.day &gt; expected.day ) &amp;&amp; (fine = (actual.day - expected.day) * 15); ( actual.year === expected.year &amp;&amp; actual.month &gt; expected.month ) &amp;&amp; (fine = (actual.month - expected.month) * 500); (actual.year &gt; expected.year) &amp;&amp; (fine = 10000); console.log(fine);} Solution 21234567891011121314151617181920212223function processData(input) { const data = input.split(\"\\n\"); const [actual, expected] = data.map(line =&gt; { const [day, month, year] = line.split(\" \").map(Number); return { day, month, year }; }); console.log(calculatePrice(actual, expected));}const calculatePrice = (actual, expected) =&gt; { return actual.year &gt; expected.year ? 10000 : ( actual.year &lt; expected.year ? 0 : ( actual.month &gt; expected.month ? (actual.month - expected.month) * 500 : ( actual.month &lt; expected.month ? 0 : (actual.day - expected.day) * 15 ) ) )}","link":"/2019/06/17/algorithm/hackerrank/Day26_NestedLogic/"},{"title":"Day25 Running Time and Complexity","text":"ObjectiveToday we’re learning about running time! Check out the Tutorial tab for learning materials and an instructional video! TaskA prime is a natural number greater than 1 that has no positive divisors other than 1 and itself. Given a number, n, determine and print whether it’s Prime or Not Prime. Note: If possible, try to come up with a primality algorithm, or see what sort of optimizations you come up with for an algorithm. Be sure to check out the Editorial after submitting your code! Input FormatThe first line contains an integer, T, the number of test cases.Each of the T subsequent lines contains an integer, n, to be tested for primality. Constraints 1 &lt;= T &lt;= 30 1 &lt;= n &lt;= 2 X 109 Output FormatFor each test case, print whether n is Prime or Not prime on a new line. Sample Input123431257 Sample Output123Not primePrimePrime ExplanationTest Case 0: n = 12. 12 is divisible by numbers other than 1 and itself (i.e.: 2, 3, 6), so we print Not prime on a new line. Test Case 1: n = 5. 5 is only divisible 1 and itself, so we print Prime on a new line. Test Case 2: n = 7. 7 is only divisible 1 and itself, so we print Prime on a new line. SolutionsSolution 11234567891011121314151617181920212223242526272829/** Consider to write code by using the Sieve of Eratosthenes, then you can make a optimization code **/function processData(input) { //Enter your code here let result = input.split('\\n').slice(1).map(isPrime); function isPrime(input, i) { let messages = ['Not prime', 'Prime']; if (input == 1) { return messages[0]; } if (input == 2) { return messages[1]; } if (input % 2 == 0) { return messages[0]; } for (i = 3; i &lt;= Math.sqrt(input); i += 2) { if (input % i == 0) { return messages[0]; } } return messages[1]; } console.log(result.join(\"\\n\"));} Solution 212345678910111213141516function processData(input) { //Enter your code here input.split('\\n').slice(1).map((n, i) =&gt; { console.log(isPrime(n) ? 'Prime' : 'Not prime'); }); function isPrime(n) { if (n == 1) return false; for (let i = 2; i * i &lt;= n; i++) { if (n % i == 0) return false; } return true; }}","link":"/2019/06/17/algorithm/hackerrank/Day25_RunningTimeAndComplexity/"},{"title":"Day29 Bitwise AND","text":"ObjectiveWelcome to the last day! Today, we’re discussing bitwise operations. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven set . Find two integers, A and B (where A &lt; B ), from set S such that the value of A &amp; B is the maximum possible and also less than a given integer, K.In this case, &amp; represents the bitwise AND operator. Input FormatThe first line contains an integer, T, the number of test cases.Each of the T subsequent lines defines a test case as 2 space-separated integers, N and K, respectively. Constraints Output FormatFor each test case, print the maximum possible value of on a new line. Sample Input123435 28 52 2 Sample Output123140 Explanation All possible values of and are: The maximum possible value of A&amp;B that is also &lt; (K = 2) is 1, so we print 1 on a new line. 12345678910111213141516171819202122232425262728function findMax(n, k) { var max = 0; for (let i = 0; i &lt;= n; i++) { for (let j = 0; j &lt; i; j++) { let value = j &amp; i; if (value &lt; k &amp;&amp; value &gt; max) { max = value; } } } return max;}function main() { const t = parseInt(readLine(), 10); for (let tItr = 0; tItr &lt; t; tItr++) { const nk = readLine().split(' '); const n = parseInt(nk[0], 10); const k = parseInt(nk[1], 10); console.log(findMax(n, k)); }}","link":"/2019/06/17/algorithm/hackerrank/Day29_BitwiseAND/"},{"title":"Day28 RegEx, Patterns, and Intro to Databases","text":"ObjectiveToday, we’re working with regular expressions. Check out the Tutorial tab for learning materials and an instructional video! TaskConsider a database table, Emails, which has the attributes First Name and Email ID. Given rows of data simulating the Emails table, print an alphabetically-ordered list of people whose email address ends in . Input FormatThe first line contains an integer, , total number of rows in the table.Each of the subsequent lines contains space-separated strings denoting a person’s first name and email ID, respectively. ConstraintsEach of the first names consists of lower case letters only.Each of the email IDs consists of lower case letters , and only.The length of the first name is no longer than 20.The length of the email ID is no longer than 50. Output FormatPrint an alphabetically-ordered list of first names for every user with a gmail account. Each name must be printed on a new line. Sample Input123456786riya riya@gmail.comjulia julia@julia.mejulia sjulia@gmail.comjulia julia@gmail.comsamantha samantha@gmail.comtanya tanya@gmail.comSample Output Sample Output12345juliajuliariyasamanthatanya Solution1234567891011121314151617function main() { const N = parseInt(readLine(), 10); const patten = new RegExp(\"@gmail.com\"); const names = []; for (let NItr = 0; NItr &lt; N; NItr++) { const firstNameEmailID = readLine().split(' '); const firstName = firstNameEmailID[0]; const emailID = firstNameEmailID[1]; patten.test(emailID) &amp;&amp; names.push(firstName); } names.sort().forEach(name =&gt; console.log(name));}","link":"/2019/06/17/algorithm/hackerrank/Day28_RegExPatternsAndIntroToDatabases/"},{"title":"프로그래머스 - 문자열 내림차순으로 배치하기","text":"문제 설명문자열 s에 나타나는 문자를 큰것부터 작은 순으로 정렬해 새로운 문자열을 리턴하는 함수, solution을 완성해주세요.s는 영문 대소문자로만 구성되어 있으며, 대문자는 소문자보다 작은 것으로 간주합니다. 제한 사항str은 길이 1 이상인 문자열입니다. 입출력 예 s return “Zbcdefg” “gfedcbZ” Solution123function solution(s) { return [...s].sort().reverse().join('')}","link":"/2019/06/17/algorithm/programmers/level1-12/"},{"title":"프로그래머스 - 문자열 내 p와 y의 개수","text":"문제 설명대문자와 소문자가 섞여있는 문자열 s가 주어집니다.s에 ‘p’의 개수와 ‘y’의 개수를 비교해 같으면 True, 다르면 False를 return 하는 solution를 완성하세요.‘p’, ‘y’ 모두 하나도 없는 경우는 항상 True를 리턴합니다. 단, 개수를 비교할 때 대문자와 소문자는 구별하지 않습니다.예를들어 s가 pPoooyY면 true를 return하고 Pyy라면 false를 return합니다. 제한사항 문자열 s의 길이 : 50 이하의 자연수 문자열 s는 알파벳으로만 이루어져 있습니다. 입출력 예 s answer pPoooyY true Pyy false 입출력 예 설명 입출력 예 #1 ‘p’의 개수 2개, ‘y’의 개수 2개로 같으므로 true를 return 합니다. 입출력 예 #2 ‘p’의 개수 1개, ‘y’의 개수 2개로 다르므로 false를 return 합니다. Solution 1123456function solution(s){ let pList = [...s].filter(v =&gt; v === 'p' || v === 'P'); let yList = [...s].filter(v =&gt; v === 'y' || v === 'Y'); return pList.length === yList.length;} Solution 2123function solution(s){ return (s.match(/p/gi) || []).length === (s.match(/y/gi) || []).length;}","link":"/2019/06/17/algorithm/programmers/level1-11/"},{"title":"프로그래머스 - 문자열 다루기 기본","text":"문제 설명문자열 s의 길이가 4 혹은 6이고, 숫자로만 구성돼있는지 확인해주는 함수, solution을 완성하세요. 예를 들어 s가 a234이면 False를 리턴하고 1234라면 True를 리턴하면 됩니다. 제한 사항s는 길이 1 이상, 길이 8 이하인 문자열입니다. 입출력 예 s return “a234” false “1234” true Solution 1123function solution(s) { return !(s.match(/\\D/g)) &amp;&amp; (s.length === 4 || s.length === 6)} Solution 2123function solution(s) { return /^\\d{6}$|^\\d{4}$/.test(s);}","link":"/2019/06/17/algorithm/programmers/level1-13/"},{"title":"프로그래머스 - 문자열을 정수로 바꾸기","text":"문제 설명문자열 s를 숫자로 변환한 결과를 반환하는 함수, solution을 완성하세요. 제한 조건 s의 길이는 1 이상 5이하입니다. s의 맨앞에는 부호(+, -)가 올 수 있습니다. s는 부호와 숫자로만 이루어져있습니다. s는 0으로 시작하지 않습니다. 입출력 예예를들어 str이 1234이면 1234를 반환하고, -1234이면 -1234를 반환하면 됩니다.str은 부호(+,-)와 숫자로만 구성되어 있고, 잘못된 값이 입력되는 경우는 없습니다. Solution 1123function solution(s) { return Number(s);} Solution 2123function solution(s) { return +s;}","link":"/2019/06/18/algorithm/programmers/level1-14/"},{"title":"프로그래머스 - 시저 암호","text":"문제 설명어떤 문장의 각 알파벳을 일정한 거리만큼 밀어서 다른 알파벳으로 바꾸는 암호화 방식을 시저 암호라고 합니다.예를 들어 AB는 1만큼 밀면 BC가 되고, 3만큼 밀면 DE가 됩니다.z는 1만큼 밀면 a가 됩니다.문자열 s와 거리 n을 입력받아 s를 n만큼 민 암호문을 만드는 함수, solution을 완성해 보세요. 제한 조건 공백은 아무리 밀어도 공백입니다. s는 알파벳 소문자, 대문자, 공백으로만 이루어져 있습니다. s의 길이는 8000이하입니다. n은 1 이상, 25이하인 자연수입니다. 입출력 예 s n result “AB” 1 “BC” “z” 1 “a” “a B z” 4 “e F d” Solution 1123456789101112131415function solution(s, n) { //ASCII : A~Z(65~90) , a~z(97~122) return [...s].reduce((target, string, index) =&gt; { let asciiCode = s.charCodeAt(index) let changedCode = asciiCode + n let sCode = asciiCode &lt; 65 ? asciiCode : ( (asciiCode &gt;= 65 &amp;&amp; asciiCode &lt;= 90) ? (changedCode &gt; 90 ? changedCode - 26 : changedCode) : (changedCode &gt; 122 ? changedCode - 26 : changedCode) ) target.push(String.fromCharCode(sCode)) return target; }, []).join('')} Solution 212345678910111213function solution(s, n) { return (s || '').split('').reduce((target,item,index) =&gt; { target += ( item == ' ' ? ' ' : String.fromCharCode((s.charCodeAt(index)&gt;90) ? (s.charCodeAt(index)+n-97)%26+97 : (s.charCodeAt(index)+n-65)%26+65 ) ); return target; }, '')}","link":"/2019/06/18/algorithm/programmers/level1-15/"},{"title":"프로그래머스 - 약수의 합","text":"문제 설명자연수 n을 입력받아 n의 약수를 모두 더한 값을 리턴하는 함수, solution을 완성해주세요. 제한 사항n은 0 이상 3000이하인 자연수입니다. 입출력 예 n return 12 28 5 6 입출력 예 설명 입출력 예 #1 12의 약수는 1, 2, 3, 4, 6, 12입니다. 이를 모두 더하면 28입니다. 입출력 예 #2 5의 약수는 1, 5입니다. 이를 모두 더하면 6입니다. Solution12345678function solution(n) { return new Array(Math.floor(Math.sqrt(n))).fill(0).reduce((target, arr, index) =&gt; { let number = index + 1; let numberLast = n / number; n % number === 0 &amp;&amp; (target = target + (numberLast === number ? number : number + numberLast)) return target; }, 0)}","link":"/2019/06/19/algorithm/programmers/level1-16/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","link":"/tags/Algorithm/"},{"name":"Programmers","slug":"Programmers","link":"/tags/Programmers/"},{"name":"HackerRank","slug":"HackerRank","link":"/tags/HackerRank/"},{"name":"프로그래머스","slug":"프로그래머스","link":"/tags/프로그래머스/"}],"categories":[{"name":"Algorithm","slug":"Algorithm","link":"/categories/Algorithm/"},{"name":"Programmers","slug":"Algorithm/Programmers","link":"/categories/Algorithm/Programmers/"},{"name":"Level1","slug":"Algorithm/Programmers/Level1","link":"/categories/Algorithm/Programmers/Level1/"},{"name":"HackerRank","slug":"Algorithm/HackerRank","link":"/categories/Algorithm/HackerRank/"},{"name":"30DaysOfCode","slug":"Algorithm/HackerRank/30DaysOfCode","link":"/categories/Algorithm/HackerRank/30DaysOfCode/"}]}