<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ALLEY</title>
    <link>https://alleyful.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>alley&#39;s blog for study</description>
    <pubDate>Thu, 24 Oct 2019 15:41:46 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>NOMADCODERS ReactJS Challenge - Day12</title>
      <link>https://alleyful.github.io/2019/10/24/log/react-challenge/react-challenge-day12/</link>
      <guid>https://alleyful.github.io/2019/10/24/log/react-challenge/react-challenge-day12/</guid>
      <pubDate>Thu, 24 Oct 2019 12:37:12 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Day12&quot;&gt;&lt;a href=&quot;#Day12&quot; class=&quot;headerlink&quot; title=&quot;Day12&quot;&gt;&lt;/a&gt;Day12&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;오늘의 강의: 없습니다.&lt;br&gt;  오늘의 과제: 아래 코드 챌린지를 제출하면 됩니다.&lt;br&gt;  이번 챌린지는 1일간 진행되는 챌린지 입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Day12"><a href="#Day12" class="headerlink" title="Day12"></a>Day12</h1><blockquote><p>오늘의 강의: 없습니다.<br>  오늘의 과제: 아래 코드 챌린지를 제출하면 됩니다.<br>  이번 챌린지는 1일간 진행되는 챌린지 입니다.</p></blockquote><br><a id="more"></a><hr><br><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><p><a href="https://codesandbox.io/s/day-six-solution-6n2q7" rel="external nofollow noopener noreferrer" target="_blank">Day12 템플릿</a></p><p>Take the boilerplate and turn refactor it to use hooks 100%</p><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements:"></a>Requirements:</h3><ul><li>Don’t use Class Components.</li><li>Use only hooks.</li><li>No Container/Presenter.</li><li>All functionality should remain the same.</li></ul><br><h3 id="Submit"><a href="#Submit" class="headerlink" title="Submit"></a>Submit</h3><p><code>My Answer</code><br><a href="https://codesandbox.io/s/day-six-solution-0vhns" rel="external nofollow noopener noreferrer" target="_blank">Day12 Answer</a></p><br><p><code>Container/Presenter use Class Component</code></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// index.js</span></span><br><span class="line"><span class="hljs-keyword">import</span> PricesContainer <span class="hljs-keyword">from</span> <span class="hljs-string">"./PricesContainer"</span>;</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> PricesContainer;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// PricesContainer.js</span></span><br><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> PricesPresenter <span class="hljs-keyword">from</span> <span class="hljs-string">"./PricesPresenter"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; getPrices &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"../../api"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    loading: <span class="hljs-literal">true</span>,</span><br><span class="line">    prices: []</span><br><span class="line">  &#125;;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.getPrices();</span><br><span class="line">  &#125;</span><br><span class="line">  getPrices = <span class="hljs-keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: prices &#125; = <span class="hljs-keyword">await</span> getPrices();</span><br><span class="line">      <span class="hljs-keyword">this</span>.setState(&#123;</span><br><span class="line">        prices</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(e);</span><br><span class="line">    &#125; <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>.setState(&#123; <span class="hljs-attr">loading</span>: <span class="hljs-literal">false</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> &lt;PricesPresenter &#123;...this.state&#125; /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// PricesPresenter.js</span><br><span class="line">import React from "react";</span><br><span class="line">import PropTypes from "prop-types";</span><br><span class="line">import Loader from "../../Components/Loader";</span><br><span class="line">import Price from "../../Components/Price";</span><br><span class="line"></span><br><span class="line">const PricesPresenter = (&#123; loading, prices &#125;) =&gt;</span><br><span class="line">  loading ? (</span><br><span class="line">    &lt;Loader /&gt;</span><br><span class="line">  ) : (</span><br><span class="line">    prices.map(price =&gt; &lt;Price key=&#123;price.id&#125; &#123;...price&#125; /&gt;)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">PricesPresenter.propTypes = &#123;</span><br><span class="line">  loading: PropTypes.bool.isRequired,</span><br><span class="line">  prices: PropTypes.arrayOf(</span><br><span class="line">    PropTypes.shape(&#123;</span><br><span class="line">      id: PropTypes.string.isRequired,</span><br><span class="line">      name: PropTypes.string.isRequired,</span><br><span class="line">      symbol: PropTypes.string.isRequired,</span><br><span class="line">      quotes: PropTypes.shape(&#123;</span><br><span class="line">        USD: PropTypes.shape(&#123;</span><br><span class="line">          price: PropTypes.number.isRequired</span><br><span class="line">        &#125;).isRequired</span><br><span class="line">      &#125;).isRequired</span><br><span class="line">    &#125;).isRequired</span><br><span class="line">  ).isRequired</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default PricesPresenter;</span><br></pre></td></tr></table></figure><p><code>use Hooks</code></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; getPrices &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"../../api"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Loader <span class="hljs-keyword">from</span> <span class="hljs-string">"../../Components/Loader"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Price <span class="hljs-keyword">from</span> <span class="hljs-string">"../../Components/Price"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> [loading, setLoading] = useState(<span class="hljs-literal">true</span>);</span><br><span class="line">  <span class="hljs-keyword">const</span> [prices, setPrices] = useState([]);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> getPrice = <span class="hljs-keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: prices &#125; = <span class="hljs-keyword">await</span> getPrices();</span><br><span class="line">      setPrices(prices);</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(e);</span><br><span class="line">    &#125; <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">      setLoading(<span class="hljs-literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    getPrice();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &#123;loading ? (</span><br><span class="line">        &lt;Loader /&gt;</span><br><span class="line">      ) : (</span><br><span class="line">        prices.map(<span class="hljs-function"><span class="hljs-params">price</span> =&gt;</span> &lt;Price key=&#123;price.id&#125; &#123;...price&#125; /&gt;)</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><p><code>correct</code><br><a href="https://codesandbox.io/s/day-eight-solution-0210c" rel="external nofollow noopener noreferrer" target="_blank">Day12 Currect</a></p>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/10/24/log/react-challenge/react-challenge-day12/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS ReactJS Challenge - Day10</title>
      <link>https://alleyful.github.io/2019/10/19/log/react-challenge/react-challenge-day10/</link>
      <guid>https://alleyful.github.io/2019/10/19/log/react-challenge/react-challenge-day10/</guid>
      <pubDate>Sat, 19 Oct 2019 13:30:52 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;오늘의 강의: #1.0 ~ #2.9 (리액트 훅스 강의 관련 입니다)&lt;br&gt;  오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.&lt;br&gt;  이번 챌린지는 2일간 진행되는 챌린지 입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/p/introduction-to-react-hooks&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;[노마드 코더] 실전형 리액트 Hooks 10개&lt;/a&gt;&lt;br&gt;&lt;code&gt;1 useState&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.0 Introduction to useState&lt;/li&gt;
&lt;li&gt;1.1 useInput&lt;/li&gt;
&lt;li&gt;1.2 useInput part Two&lt;/li&gt;
&lt;li&gt;1.3 useTabs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;2 useEffect&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.0 Introduction to useEffect&lt;/li&gt;
&lt;li&gt;2.1 useTitle&lt;/li&gt;
&lt;li&gt;2.2 useClick&lt;/li&gt;
&lt;li&gt;2.3 useConfirm &amp;amp; usePreventLeave&lt;/li&gt;
&lt;li&gt;2.4 useBeforeLeave&lt;/li&gt;
&lt;li&gt;2.5 useFadeIn &amp;amp; useNetwork&lt;/li&gt;
&lt;li&gt;2.6 useScroll &amp;amp; useFullscreen&lt;/li&gt;
&lt;li&gt;2.7 useNotification&lt;/li&gt;
&lt;li&gt;2.8 useAxios&lt;/li&gt;
&lt;li&gt;2.9 Conclusions&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>오늘의 강의: #1.0 ~ #2.9 (리액트 훅스 강의 관련 입니다)<br>  오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.<br>  이번 챌린지는 2일간 진행되는 챌린지 입니다.</p></blockquote><br><p><a href="https://academy.nomadcoders.co/p/introduction-to-react-hooks" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 실전형 리액트 Hooks 10개</a><br><code>1 useState</code></p><ul><li>1.0 Introduction to useState</li><li>1.1 useInput</li><li>1.2 useInput part Two</li><li>1.3 useTabs</li></ul><p><code>2 useEffect</code></p><ul><li>2.0 Introduction to useEffect</li><li>2.1 useTitle</li><li>2.2 useClick</li><li>2.3 useConfirm &amp; usePreventLeave</li><li>2.4 useBeforeLeave</li><li>2.5 useFadeIn &amp; useNetwork</li><li>2.6 useScroll &amp; useFullscreen</li><li>2.7 useNotification</li><li>2.8 useAxios</li><li>2.9 Conclusions</li></ul><br><a id="more"></a><hr><br><h2 id="Lecture-Summery"><a href="#Lecture-Summery" class="headerlink" title="Lecture Summery"></a>Lecture Summery</h2><br><h2 id="React-Hooks"><a href="#React-Hooks" class="headerlink" title="React Hooks"></a>React Hooks</h2><br><h3 id="Hook-소개"><a href="#Hook-소개" class="headerlink" title="Hook 소개"></a>Hook 소개</h3><p>Hooks 는 리액트 v16.8 에 새로 도입된 기능으로서, 함수형 컴포넌트에서도 상태 관리를 할 수 있는 useState, 그리고 렌더링 직후 작업을 설정하는 useEffect 등의 기능등을 제공하여 기존의 함수형 컴포넌트에서 할 수 없었던 다양한 작업을 할 수 있게 해줍니다.</p><h4 id="소개영상"><a href="#소개영상" class="headerlink" title="소개영상"></a><code>소개영상</code></h4><p>React Conf 2018에서 Sophie Alpert와 Dan Abramov는 Hook를 소개했었습니다. 이어서 Ryan Florence가 Hook를 사용하여 어떻게 애플리케이션을 리팩토링 할 것인지 보여주었습니다. 아래 영상에서 확인해보세요.<br><a href="https://youtu.be/xsSnOQynTHs" rel="external nofollow noopener noreferrer" target="_blank"><img src="http://img.youtube.com/vi/xsSnOQynTHs/0.jpg" alt="Video Label"></a><br><br></p><h4 id="동기"><a href="#동기" class="headerlink" title="동기"></a><code>동기</code></h4><ol><li>상태와 관련된 로직을 재사용하기 어렵습니다.</li><li>로직과 관련이 없는 생명주기 메서드 등의 사용으로 컴포넌트가 복잡해 집니다.</li><li>class의 this 사용이 의도치 않은 문제를 일으킵니다.</li></ol><br><br><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><p>useState 는 가장 기본적인 Hook 으로서, 함수형 컴포넌트에서도 가변적인 상태를 지니고 있을 수 있게 해줍니다. 만약에 함수형 컴포넌트에서 상태를 관리해야 되는 일이 발생한다면 이 Hook 을 사용하시면 됩니다.</p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Counter = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> [value, setValue] = useState(<span class="hljs-number">0</span>);</span><br><span class="line">  <span class="hljs-keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        현재 카운터 값은 &lt;b&gt;&#123;value&#125;&lt;<span class="hljs-regexp">/b&gt; 입니다.</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>p&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setValue(value + <span class="hljs-number">1</span>)&#125;&gt;+<span class="hljs-number">1</span>&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;button onClick=&#123;() =&gt; setValue(value - 1)&#125;&gt;-1&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">  );</span></span><br><span class="line"><span class="hljs-regexp">&#125;;</span></span><br></pre></td></tr></table></figure><br><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><p>useEffect 는 리액트 컴포넌트가 렌더링 될 때마다 특정 작업을 수행하도록 설정 할 수 있는 Hook 입니다. 클래스형 컴포넌트의 componentDidMount 와 componentDidUpdate 를 합친 형태로 보아도 무방합니다.</p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Info = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> [name, setName] = useState(<span class="hljs-string">''</span>);</span><br><span class="line">  <span class="hljs-keyword">const</span> [nickname, setNickname] = useState(<span class="hljs-string">''</span>);</span><br><span class="line">  useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'렌더링이 완료되었습니다!'</span>);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(&#123;</span><br><span class="line">      name,</span><br><span class="line">      nickname</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> onChangeName = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><br><span class="line">    setName(e.target.value);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> onChangeNickname = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><br><span class="line">    setNickname(e.target.value);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> (</span><br><span class="line">    (...)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Info;</span><br></pre></td></tr></table></figure><br><h4 id="마운트-될-때만-실행하고-싶을-때"><a href="#마운트-될-때만-실행하고-싶을-때" class="headerlink" title="마운트 될 때만 실행하고 싶을 때"></a>마운트 될 때만 실행하고 싶을 때</h4><p>만약 useEffect 에서 설정한 함수가 컴포넌트가 화면에 가장 처음 렌더링 될 때만 실행되고 업데이트 할 경우에는 실행 할 필요가 없는 경우엔 함수의 두번째 파라미터로 비어있는 배열을 넣어주시면 됩니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'마운트 될 때만 실행됩니다.'</span>);</span><br><span class="line">  &#125;, []);</span><br></pre></td></tr></table></figure><br><h4 id="특정-값이-업데이트-될-때만-실행하고-싶을-때"><a href="#특정-값이-업데이트-될-때만-실행하고-싶을-때" class="headerlink" title="특정 값이 업데이트 될 때만 실행하고 싶을 때"></a>특정 값이 업데이트 될 때만 실행하고 싶을 때</h4><p>useEffect 를 사용 할 때 특정 값이 변경이 될 때만 호출하게 하고 싶을 경우도 있을 것입니다.</p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//class 형</span></span><br><span class="line">componentDidUpdate(prevProps, prevState) &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (prevProps.value !== <span class="hljs-keyword">this</span>.props.value) &#123;</span><br><span class="line">    doSomething();  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//useEffect 사용시</span></span><br><span class="line">useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(name);</span><br><span class="line">  &#125;, [name]);</span><br></pre></td></tr></table></figure><br><h4 id="cleanup"><a href="#cleanup" class="headerlink" title="cleanup"></a>cleanup</h4><p>useEffect 는 기본적으로 렌더링 되고난 직후마다 실행되며, 두번째 파라미터 배열에 무엇을 넣느냐에 따라 실행되는 조건이 달라집니다.</p><p>만약 컴포넌트가 언마운트되기 전이나, 업데이트 되기 직전에 어떠한 작업을 수행하고 싶다면 useEffect 에서 뒷정리(cleanup) 함수를 반환해주어야 합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'effect'</span>);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(name);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'cleanup'</span>);</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(name);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>만약에, 오직 언마운트 될 때만 뒷정리 함수를 호출하고 싶으시다면 useEffect 함수의 두번째 파라미터에 비어있는 배열을 넣으시면 됩니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'effect'</span>);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(name);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'cleanup'</span>);</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(name);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br></pre></td></tr></table></figure><br><br><h3 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h3><p>이 Hook 을 사용하면 함수형 컴포넌트에서 Context 를 보다 더 쉽게 사용 할 수 있습니다.</p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; createContext, useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> ThemeContext = createContext(<span class="hljs-string">'black'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> ContextSample = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> theme = useContext(ThemeContext);</span><br><span class="line">  <span class="hljs-keyword">const</span> style = &#123;</span><br><span class="line">    width: <span class="hljs-string">'24px'</span>,</span><br><span class="line">    height: <span class="hljs-string">'24px'</span>,</span><br><span class="line">    background: theme</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="hljs-xml">&#125;;</span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml">export default ContextSample;</span></span><br></pre></td></tr></table></figure><br><br><h3 id="UseReducer"><a href="#UseReducer" class="headerlink" title="UseReducer"></a>UseReducer</h3><p>useReducer 는 useState 보다 컴포넌트에서 더 다양한 상황에 따라 다양한 상태를 다른 값으로 업데이트해주고 싶을 때 사용하는 Hook 입니다.</p><p>리듀서는 현재 상태와, 업데이트를 위해 필요한 정보를 담은 액션(action) 값을 전달 받아 새로운 상태를 반환하는 함수입니다. 리듀서 함수에서 새로운 상태를 만들 때는 꼭 불변성을 지켜주어야 합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reducer</span>(<span class="hljs-params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> &#123; ... &#125;; <span class="hljs-comment">// 불변성을 지키면서 업데이트한 새로운 상태를 반환합니다</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>액션값은 주로 다음과 같은 형태로 이루어져있습니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">type: <span class="hljs-string">'INCREMENT'</span>,</span><br><span class="line"><span class="hljs-comment">// 다른 값들이 필요하다면, 추가적으로 들어감</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Redux 에서는 액션 객체에는 어떤 액션인지 알려주는 type 필드가 꼭 있어야 하지만, useReducer 에서 사용하는 액션 객체는 꼭 type 를 지니고 있을 필요가 없습니다. 심지어, 객체가 아니라 문자열이나, 숫자여도 상관이 없습니다.</p><br><h4 id="카운터-구현하기"><a href="#카운터-구현하기" class="headerlink" title="카운터 구현하기"></a>카운터 구현하기</h4><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reducer</span>(<span class="hljs-params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// action.type 에 따라 다른 작업 수행</span></span><br><span class="line">  <span class="hljs-keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">'INCREMENT'</span>:</span><br><span class="line">      <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">value</span>: state.value + <span class="hljs-number">1</span> &#125;;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">'DECREMENT'</span>:</span><br><span class="line">      <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">value</span>: state.value - <span class="hljs-number">1</span> &#125;;</span><br><span class="line">    <span class="hljs-keyword">default</span>:</span><br><span class="line">      <span class="hljs-comment">// 아무것도 해당되지 않을 때 기존 상태 반환</span></span><br><span class="line">      <span class="hljs-keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Counter = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> [state, dispatch] = useReducer(reducer, &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        현재 카운터 값은 &lt;b&gt;&#123;state.value&#125;&lt;<span class="hljs-regexp">/b&gt; 입니다.</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>p&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">'INCREMENT'</span> &#125;)&#125;&gt;+<span class="hljs-number">1</span>&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: 'DECREMENT' &#125;)&#125;&gt;-1&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">  );</span></span><br><span class="line"><span class="hljs-regexp">&#125;;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">export default Counter;</span></span><br></pre></td></tr></table></figure><p>useReducer 의 첫번째 파라미터는 리듀서 함수, 그리고 두번째 파라미터는 해당 리듀서의 기본 값을 넣어줍니다. 이 Hook 을 사용 했을 때에는 state 값과 dispatch 함수를 받아오게 되는데요, 여기서 state 는 현재 가르키고 있는 상태고, dispatch 는 액션을 발생시키는 함수입니다. dispatch(action) 와 같은 형태로, 함수 안에 파라미터로 액션 값을 넣어주면 리듀서 함수가 호출되는 구조입니다.</p><p>useReducer 을 사용했을 때의 가장 큰 장점은 컴포넌트 업데이트 로직을 컴포넌트 바깥으로 빼낼 수 있다는 점 입니다.</p><br><h4 id="인풋-상태-관리하기"><a href="#인풋-상태-관리하기" class="headerlink" title="인풋 상태 관리하기"></a>인풋 상태 관리하기</h4><p>기존에는 인풋이 여러 개여서 useState 를 여러번 사용했는데요, useReducer 를 사용한다면 우리가 기존에 클래스형 컴포넌트에서 input 태그에 name 값을 할당하고 e.target.name 을 참조하여 setState 를 해준 것과 유사한 방식으로 작업을 처리 할 수 있습니다.</p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reducer</span>(<span class="hljs-params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">    ...state,</span><br><span class="line">    [action.name]: action.value</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Info = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> [state, dispatch] = useReducer(reducer, &#123;</span><br><span class="line">    name: <span class="hljs-string">''</span>,</span><br><span class="line">    nickname: <span class="hljs-string">''</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="hljs-keyword">const</span> &#123; name, nickname &#125; = state;</span><br><span class="line">  <span class="hljs-keyword">const</span> onChange = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><br><span class="line">    dispatch(e.target);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input name=<span class="hljs-string">"name"</span> value=&#123;name&#125; onChange=&#123;onChange&#125; /&gt;</span><br><span class="line">        &lt;input name=<span class="hljs-string">"nickname"</span> value=&#123;nickname&#125; onChange=&#123;onChange&#125; /&gt;</span><br><span class="line">      &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="hljs-regexp">          &lt;b&gt;이름:&lt;/</span>b&gt; &#123;name&#125;</span><br><span class="line">        &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="hljs-regexp">          &lt;b&gt;닉네임: &lt;/</span>b&gt;</span><br><span class="line">          &#123;nickname&#125;</span><br><span class="line">        &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">  );</span></span><br><span class="line"><span class="hljs-regexp">&#125;;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">export default Info;</span></span><br></pre></td></tr></table></figure><p>useReducer 에서의 액션은 그 어떤 값이 되어도 됩니다. 그래서 이번에 우리는 이벤트 객체가 지니고있는 e.target 값 자체를 액션 값으로 사용하였습니다.</p><p>이런 식으로 인풋을 관리하면, 아무리 인풋의 개수가 많아져도 코드를 짧고 깔끔하기 유지 할 수 있습니다.</p><br><br><h3 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h3><p>useMemo 를 사용하면 함수형 컴포넌트 내부에서 발생하는 연산을 최적화 할 수 있습니다. 먼저 리스트에 숫자들을 추가하면 해당 숫자들의 평균을 나타내는 함수형 컴포넌트를 작성해봅시다.</p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> getAverage = <span class="hljs-function"><span class="hljs-params">numbers</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'평균값 계산중..'</span>);</span><br><span class="line">  <span class="hljs-keyword">if</span> (numbers.length === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">const</span> sum = numbers.reduce(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b);</span><br><span class="line">  <span class="hljs-keyword">return</span> sum / numbers.length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Average = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> [list, setList] = useState([]);</span><br><span class="line">  <span class="hljs-keyword">const</span> [number, setNumber] = useState(<span class="hljs-string">''</span>);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> onChange = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><br><span class="line">    setNumber(e.target.value);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="hljs-keyword">const</span> onInsert = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> nextList = list.concat(<span class="hljs-built_in">parseInt</span>(number));</span><br><span class="line">    setList(nextList);</span><br><span class="line">    setNumber(<span class="hljs-string">''</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input value=&#123;number&#125; onChange=&#123;onChange&#125; /&gt;</span><br><span class="line">      &lt;button onClick=&#123;onInsert&#125;&gt;등록&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &#123;list.map((value, index) =&gt; (</span></span><br><span class="line"><span class="hljs-regexp">          &lt;li key=&#123;index&#125;&gt;&#123;value&#125;&lt;/</span>li&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;<span class="hljs-regexp">/ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;b&gt;평균 값:&lt;/</span>b&gt; &#123;getAverage(list)&#125;</span><br><span class="line">      &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Average;</span><br></pre></td></tr></table></figure><p>평균 값은 잘 보여지고 있는데, 숫자를 등록할 때뿐만 아니라 인풋 내용이 수정 될 때도 우리가 만든 getAverage 함수가 호출되고 있는것을 확인 할 수 있습니다. 인풋 내용이 바뀔 땐 평균 값을 다시 계산 할 필요가 없는데, 이렇게 렌더링 할 때마다 계산을 하는 것은 낭비지요?</p><p>useMemo Hook 을 사용하면 이러한 작업을 최적화 할 수 있습니다. 렌더링 하는 과정에서 특정 값이 바뀌었을 때만 연산을 실행하고 만약에 원하는 값이 바뀐 것이 아니라면 이전에 연산했던 결과를 다시 사용하는 방식입니다.</p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; useState, useMemo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> getAverage = <span class="hljs-function"><span class="hljs-params">numbers</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'평균값 계산중..'</span>);</span><br><span class="line">  <span class="hljs-keyword">if</span> (numbers.length === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">const</span> sum = numbers.reduce(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b);</span><br><span class="line">  <span class="hljs-keyword">return</span> sum / numbers.length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Average = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> [list, setList] = useState([]);</span><br><span class="line">  <span class="hljs-keyword">const</span> [number, setNumber] = useState(<span class="hljs-string">''</span>);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> onChange = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><br><span class="line">    setNumber(e.target.value);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="hljs-keyword">const</span> onInsert = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> nextList = list.concat(<span class="hljs-built_in">parseInt</span>(number));</span><br><span class="line">    setList(nextList);</span><br><span class="line">    setNumber(<span class="hljs-string">''</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> avg = useMemo(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> getAverage(list), [list]);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input value=&#123;number&#125; onChange=&#123;onChange&#125; /&gt;</span><br><span class="line">      &lt;button onClick=&#123;onInsert&#125;&gt;등록&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &#123;list.map((value, index) =&gt; (</span></span><br><span class="line"><span class="hljs-regexp">          &lt;li key=&#123;index&#125;&gt;&#123;value&#125;&lt;/</span>li&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;<span class="hljs-regexp">/ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;b&gt;평균 값:&lt;/</span>b&gt; &#123;avg&#125;</span><br><span class="line">      &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Average;</span><br></pre></td></tr></table></figure><br><br><h3 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h3><p>useCallback 은 useMemo와 상당히 비슷한 함수입니다. 주로 렌더링 성능을 최적화해야 하는 상황에서 사용하는데요, 이 Hook을 사용하면 이벤트 핸들러 함수를 필요할 때만 생성 할 수 있습니다.</p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; useState, useMemo, useCallback &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> getAverage = <span class="hljs-function"><span class="hljs-params">numbers</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'평균값 계산중..'</span>);</span><br><span class="line">  <span class="hljs-keyword">if</span> (numbers.length === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">const</span> sum = numbers.reduce(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b);</span><br><span class="line">  <span class="hljs-keyword">return</span> sum / numbers.length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Average = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> [list, setList] = useState([]);</span><br><span class="line">  <span class="hljs-keyword">const</span> [number, setNumber] = useState(<span class="hljs-string">''</span>);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> onChange = useCallback(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><br><span class="line">    setNumber(e.target.value);</span><br><span class="line">  &#125;, []); <span class="hljs-comment">// 컴포넌트가 처음 렌더링 될 때만 함수 생성</span></span><br><span class="line">  <span class="hljs-keyword">const</span> onInsert = useCallback(</span><br><span class="line">    e =&gt; &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> nextList = list.concat(<span class="hljs-built_in">parseInt</span>(number));</span><br><span class="line">      setList(nextList);</span><br><span class="line">      setNumber(<span class="hljs-string">''</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    [number, list]</span><br><span class="line">  ); <span class="hljs-comment">// number 혹은 list 가 바뀌었을 때만 함수 생성</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> avg = useMemo(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> getAverage(list), [list]);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input value=&#123;number&#125; onChange=&#123;onChange&#125;  /&gt;</span><br><span class="line">      &lt;button onClick=&#123;onInsert&#125;&gt;등록&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &#123;list.map((value, index) =&gt; (</span></span><br><span class="line"><span class="hljs-regexp">          &lt;li key=&#123;index&#125;&gt;&#123;value&#125;&lt;/</span>li&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;<span class="hljs-regexp">/ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;b&gt;평균값:&lt;/</span>b&gt; &#123;avg&#125;</span><br><span class="line">      &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Average;</span><br></pre></td></tr></table></figure><p>useCallback 의 첫번째 파라미터에는 우리가 생성해주고 싶은 함수를 넣어주고, 두번째 파라미터에는 배열을 넣어주면 되는데 이 배열에는 어떤 값이 바뀌었을 때 함수를 새로 생성해주어야 하는지 명시해주어야 합니다.</p><p>만약에 onChange 처럼 비어있는 배열을 넣게 되면 컴포넌트가 렌더링 될 때 단 한번만 함수가 생성되며, onInsert 처럼 배열 안에 number 와 list 를 넣게 되면 인풋 내용이 바뀌거나 새로운 항목이 추가 될 때마다 함수가 생성됩니다.</p><p>함수 내부에서 기존의 상태 값을 의존해야 할 때는 꼭 두번째 파라미터 안에 포함을 시켜주어야 합니다. 예를 들어서 onChange 의 경우엔 기존의 값을 조회하는 일은 없고 바로 설정만 하기 때문에 배열이 비어있어도 상관이 없지만 onInsert 는 기존의 number 와 list 를 조회해서 nextList 를 생성하기 때문에 배열 안에 number 와 list 를 꼭 넣어주어야 합니다.</p><br><p>참고로 다음 두 코드는 완벽히 똑같은 코드입니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">useCallback(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'hello world!'</span>);</span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br><span class="line">useMemo(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> fn = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'hello world!'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="hljs-keyword">return</span> fn;</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><p>useCallback 은 결국 useMemo 에서 함수를 반환하는 상황에서 더 편하게 사용 할 수 있는 Hook 입니다. 숫자, 문자열, 객체 처럼 일반 값을 재사용하기 위해서는 useMemo 를, 그리고 함수를 재사용 하기 위해서는 useCallback 을 사용하세요</p><br><br><h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h3><p>useRef Hook 은 함수형 컴포넌트에서 ref 를 쉽게 사용 할 수 있게 해줍니다.</p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; useState, useMemo, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> getAverage = <span class="hljs-function"><span class="hljs-params">numbers</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'평균값 계산중..'</span>);</span><br><span class="line">  <span class="hljs-keyword">if</span> (numbers.length === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">const</span> sum = numbers.reduce(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b);</span><br><span class="line">  <span class="hljs-keyword">return</span> sum / numbers.length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Average = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> [list, setList] = useState([]);</span><br><span class="line">  <span class="hljs-keyword">const</span> [number, setNumber] = useState(<span class="hljs-string">''</span>);</span><br><span class="line">  <span class="hljs-keyword">const</span> inputEl = useRef(<span class="hljs-literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> onChange = useCallback(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><br><span class="line">    setNumber(e.target.value);</span><br><span class="line">  &#125;, []); <span class="hljs-comment">// 컴포넌트가 처음 렌더링 될 때만 함수 생성</span></span><br><span class="line">  <span class="hljs-keyword">const</span> onInsert = useCallback(</span><br><span class="line">    e =&gt; &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> nextList = list.concat(<span class="hljs-built_in">parseInt</span>(number));</span><br><span class="line">      setList(nextList);</span><br><span class="line">      setNumber(<span class="hljs-string">''</span>);</span><br><span class="line">      inputEl.current.focus();</span><br><span class="line">    &#125;,</span><br><span class="line">    [number, list]</span><br><span class="line">  ); <span class="hljs-comment">// number 혹은 list 가 바뀌었을 때만 함수 생성</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> avg = useMemo(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> getAverage(list), [list]);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input value=&#123;number&#125; onChange=&#123;onChange&#125; ref=&#123;inputEl&#125; /&gt;</span><br><span class="line">      &lt;button onClick=&#123;onInsert&#125;&gt;등록&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &#123;list.map((value, index) =&gt; (</span></span><br><span class="line"><span class="hljs-regexp">          &lt;li key=&#123;index&#125;&gt;&#123;value&#125;&lt;/</span>li&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;<span class="hljs-regexp">/ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;b&gt;평균 값:&lt;/</span>b&gt; &#123;avg&#125;</span><br><span class="line">      &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Average;</span><br></pre></td></tr></table></figure><p>useRef 를 사용하여 ref 를 설정하면, useRef 를 통해 만든 객체 안의 current 값이 실제 엘리먼트를 가르키게 됩니다.</p><br><h4 id="로컬-변수-사용하기"><a href="#로컬-변수-사용하기" class="headerlink" title="로컬 변수 사용하기"></a>로컬 변수 사용하기</h4><p>추가적으로, 컴포넌트 로컬 변수를 사용해야 할 때도 useRef 를 활용 할 수 있습니다. 여기서 로컬 변수라 함은, 렌더링이랑은 관계 없이 바뀔 수 있는 값을 의미합니다. 만약에 클래스 형태의 컴포넌트로 따지자면 다음과 같은 코드죠.</p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  id = <span class="hljs-number">1</span></span><br><span class="line">  setId = <span class="hljs-function">(<span class="hljs-params">n</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.id = n;</span><br><span class="line">  &#125;</span><br><span class="line">  printId = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.id);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        MyComponent</span><br><span class="line">      &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    );</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">export default MyComponent;</span></span><br></pre></td></tr></table></figure><p>이러한 코드를 만약에 함수형 컴포넌트로 작성한다면 다음과 같이 할 수 있습니다.</p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> RefSample = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> id = useRef(<span class="hljs-number">1</span>);</span><br><span class="line">  <span class="hljs-keyword">const</span> setId = <span class="hljs-function">(<span class="hljs-params">n</span>) =&gt;</span> &#123;</span><br><span class="line">    id.current = n;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">const</span> printId = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(id.current);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      refsample</span><br><span class="line">    &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">  );</span></span><br><span class="line"><span class="hljs-regexp">&#125;;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">export default RefSample;</span></span><br></pre></td></tr></table></figure><p>주의 하실 점은, 이렇게 넣는 ref 안의 값은 바뀌어도 컴포넌트가 렌더링 되지 않는다는 점 입니다. 렌더링과 관련 되지 않은 값을 관리 할 때만 이러한 방식으로 코드를 작성해주세요.</p><br><br><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://ko.reactjs.org/docs/hooks-intro.html" rel="external nofollow noopener noreferrer" target="_blank">REACT HOOK</a></li><li><a href="https://velog.io/@velopert/react-hooks" rel="external nofollow noopener noreferrer" target="_blank">리액트의 Hooks 완벽 정복하기</a></li></ul><br><hr><br><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><p><a href="https://codesandbox.io/s/day-seven-blueprint-xrfub" rel="external nofollow noopener noreferrer" target="_blank">Day10 템플릿</a></p><p>You will have to create the following hooks and use them all in one page:</p><ul><li>useDeviceOrientation</li><li>useFavicon</li><li>useGeolocation</li><li>useKeyPress</li><li>useLocalStorage</li><li>useMousePosition</li><li>useOnline</li><li>useLockScroll</li></ul><p>Here is the desired output:</p><p><a href="https://youtu.be/o5z6rzzbsGA" rel="external nofollow noopener noreferrer" target="_blank"><img src="http://img.youtube.com/vi/o5z6rzzbsGA/0.jpg" alt="Video Label"></a></p><br><h3 id="useDeviceOrientation"><a href="#useDeviceOrientation" class="headerlink" title="useDeviceOrientation:"></a>useDeviceOrientation:</h3><p>Takes no arguments, returns an object containing “alpha, beta, gamma”.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> &#123; alpha, beta, gamma &#125; = useDeviceOrientation();</span><br></pre></td></tr></table></figure><br><h3 id="useFavicon"><a href="#useFavicon" class="headerlink" title="useFavicon:"></a>useFavicon:</h3><p>Takes the initial favicon URL as argument, returns ‘setFavicon’ that changes the favicon.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> setFavicon = useFavicon(initialFaviconUrl);</span><br><span class="line">srFavicon(newFaviconUrl)</span><br></pre></td></tr></table></figure><br><h3 id="useGeolocation"><a href="#useGeolocation" class="headerlink" title="useGeolocation:"></a>useGeolocation:</h3><p>Take no arguments, returns an object containing ‘error, coords: {lat:long}’</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> &#123;</span><br><span class="line">  coords: &#123; lat, long &#125;,</span><br><span class="line">  error</span><br><span class="line">&#125; = useGeolocation();</span><br></pre></td></tr></table></figure><br><h3 id="useKeyPress"><a href="#useKeyPress" class="headerlink" title="useKeyPress"></a>useKeyPress</h3><p>Takes one argument, a key, returns a boolean that becomes ‘true’ or ‘false’ if the key is pressed</p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> kPressed = useKeyPress(<span class="hljs-string">"k"</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> iPressed = useKeyPress(<span class="hljs-string">"i"</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> mPressed = useKeyPress(<span class="hljs-string">"m"</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> cPressed = useKeyPress(<span class="hljs-string">"c"</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> hPressed = useKeyPress(<span class="hljs-string">"h"</span>);</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;Pressed <span class="hljs-string">'k'</span> : &#123;kPressed &amp;&amp; <span class="hljs-string">"K"</span>&#125; &lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;li&gt;Pressed 'i' : &#123;kPressed &amp;&amp; "I"&#125; &lt;/</span>li&gt;</span><br><span class="line">  &lt;li&gt;Pressed <span class="hljs-string">'m'</span> : &#123;kPressed &amp;&amp; <span class="hljs-string">"M"</span>&#125; &lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;li&gt;Pressed 'c' : &#123;kPressed &amp;&amp; "C"&#125; &lt;/</span>li&gt;</span><br><span class="line">  &lt;li&gt;Pressed <span class="hljs-string">'h'</span> : &#123;kPressed &amp;&amp; <span class="hljs-string">"H"</span>&#125; &lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;li&gt;Pressed 'i' : &#123;kPressed &amp;&amp; "I"&#125; &lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/ul&gt;</span></span><br></pre></td></tr></table></figure><br><h3 id="useLocalStorage"><a href="#useLocalStorage" class="headerlink" title="useLocalStorage"></a>useLocalStorage</h3><p>Takes two arguments, the name of the localStorage key, and the initialValue to give to it.</p><p>Returns an array where the first item is the current element in localStorage and the second item is a function to update localStorage</p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> &#123;currentLS, setLS&#125; = useLocalStorage(name, initialValue);</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;Current Value: &#123;currentLS&#125;&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;button onClick=&#123;() =&gt; setLS("123")&#125;&gt;Set Value: 12345&lt;/</span>button&gt;</span><br><span class="line">  &lt;button onClick=&#123;() =&gt; setLS(<span class="hljs-literal">null</span>)&#125;&gt;clear LS&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure><br><h3 id="useMousePosition"><a href="#useMousePosition" class="headerlink" title="useMousePosition:"></a>useMousePosition:</h3><p>Takes no arguments, returns the x,y coordinates of the mouse.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> &#123;x, y&#125; = useMousePosition();</span><br></pre></td></tr></table></figure><br><h3 id="useOnline"><a href="#useOnline" class="headerlink" title="useOnline:"></a>useOnline:</h3><p>Takes no arguments, returns a boolean that changes when the user goes online or offline.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> isOnLine = useOnline();</span><br></pre></td></tr></table></figure><br><h3 id="useLockScroll"><a href="#useLockScroll" class="headerlink" title="useLockScroll:"></a>useLockScroll:</h3><p>Takes no arguments, returns an array with two elements.</p><p>The first element notifies ‘true’ or ‘false’ if the scroll is locked, the second element is an object containing two functions, one to lock scroll, one to unlock it.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> [isLocked, &#123; lockScroll, unlockScroll &#125;] = useLockScroll();</span><br></pre></td></tr></table></figure><br><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements:"></a>Requirements:</h3><ul><li>Don’t you dare give up! </li><li>Make a page that uses all the hooks, like the one on the video.</li></ul><br><h3 id="Submit"><a href="#Submit" class="headerlink" title="Submit"></a>Submit</h3><p><code>My Answer</code><br><a href="https://codesandbox.io/s/day-seven-blueprint-sud5f" rel="external nofollow noopener noreferrer" target="_blank">Day10 Answer</a></p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">"react-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"./styles.css"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> useDeviceOrientation = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> [alpha, setAlpha] = useState(<span class="hljs-literal">null</span>);</span><br><span class="line">  <span class="hljs-keyword">const</span> [beta, setBeta] = useState(<span class="hljs-literal">null</span>);</span><br><span class="line">  <span class="hljs-keyword">const</span> [gamma, setGamma] = useState(<span class="hljs-literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> handleOrientation = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><br><span class="line">    setAlpha(e.alpha);</span><br><span class="line">    setBeta(e.beta);</span><br><span class="line">    setGamma(e.gamma);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">"deviceorientation"</span>, handleOrientation, <span class="hljs-literal">false</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-built_in">window</span>.removeEventListener(<span class="hljs-string">"deviceorientation"</span>, handleOrientation, <span class="hljs-literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [alpha, beta, gamma]);</span><br><span class="line">  <span class="hljs-keyword">return</span> &#123; alpha, beta, gamma &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> useFavicon = <span class="hljs-function"><span class="hljs-params">initialFaviconUrl</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> [favicon, setFavicon] = useState(initialFaviconUrl);</span><br><span class="line">  <span class="hljs-keyword">const</span> changeFavicon = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> htmlFavicon = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">"link[rel*='icon']"</span>);</span><br><span class="line">    htmlFavicon.href = favicon;</span><br><span class="line">  &#125;;</span><br><span class="line">  useEffect(changeFavicon, [favicon]);</span><br><span class="line">  <span class="hljs-keyword">return</span> setFavicon;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> useGeolocation = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> [coords, setCoords] = useState(&#123;&#125;);</span><br><span class="line">  <span class="hljs-keyword">const</span> [error, setError] = useState(<span class="hljs-literal">null</span>);</span><br><span class="line">  useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    navigator.geolocation.getCurrentPosition(</span><br><span class="line">      position =&gt; &#123;</span><br><span class="line">        setCoords(&#123;</span><br><span class="line">          lat: position.coords.latitude,</span><br><span class="line">          long: position.coords.longitude</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      error =&gt; &#123;</span><br><span class="line">        setError(error);</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        enableHighAccuracy: <span class="hljs-literal">true</span>,</span><br><span class="line">        timeout: <span class="hljs-number">1000</span>,</span><br><span class="line">        maximumAge: <span class="hljs-number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="hljs-keyword">return</span> &#123; coords, error &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> useKeyPress = <span class="hljs-function"><span class="hljs-params">targetKey</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> [keyPress, setKeyPress] = useState(<span class="hljs-literal">false</span>);</span><br><span class="line">  <span class="hljs-keyword">const</span> handleKeyDown = <span class="hljs-function">(<span class="hljs-params">&#123; key &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    key === targetKey &amp;&amp; setKeyPress(<span class="hljs-literal">true</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="hljs-keyword">const</span> handleKeyUp = <span class="hljs-function">(<span class="hljs-params">&#123; key &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    key === targetKey &amp;&amp; setKeyPress(<span class="hljs-literal">false</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">"keydown"</span>, handleKeyDown);</span><br><span class="line">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">"keyup"</span>, handleKeyUp);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-built_in">document</span>.removeEventListener(<span class="hljs-string">"keydown"</span>, handleKeyDown);</span><br><span class="line">      <span class="hljs-built_in">document</span>.removeEventListener(<span class="hljs-string">"keyup"</span>, handleKeyUp);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="hljs-keyword">return</span> keyPress;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> useLocalStorage = <span class="hljs-function">(<span class="hljs-params">name, initialValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> [currentLS, setLS] = useState(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> valueLS = <span class="hljs-built_in">window</span>.localStorage.getItem(name);</span><br><span class="line">      <span class="hljs-keyword">return</span> valueLS ? <span class="hljs-built_in">JSON</span>.parse(valueLS) : initialValue;</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">return</span> initialValue;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">      localStorage.setItem(name, currentLS);</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> &#123;&#125;</span><br><span class="line">  &#125;, [currentLS]);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> [currentLS, setLS];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> useMousePosition = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> [x, setX] = useState(<span class="hljs-number">0</span>);</span><br><span class="line">  <span class="hljs-keyword">const</span> [y, setY] = useState(<span class="hljs-number">0</span>);</span><br><span class="line">  <span class="hljs-keyword">const</span> updatePosition = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><br><span class="line">    setX(e.clientX);</span><br><span class="line">    setY(e.clientY);</span><br><span class="line">  &#125;;</span><br><span class="line">  useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">"mousemove"</span>, updatePosition);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-built_in">document</span>.removeEventListener(<span class="hljs-string">"mousemove"</span>, updatePosition);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [x, y]);</span><br><span class="line">  <span class="hljs-keyword">return</span> &#123; x, y &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> useOnline = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> [status, setStatus] = useState(navigator.onLine);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> handleChange = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setStatus(navigator.onLine);</span><br><span class="line">  &#125;;</span><br><span class="line">  useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">"online"</span>, handleChange);</span><br><span class="line">    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">"offline"</span>, handleChange);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-built_in">window</span>.removeEventListener(<span class="hljs-string">"online"</span>, handleChange);</span><br><span class="line">      <span class="hljs-built_in">window</span>.removeEventListener(<span class="hljs-string">"offline"</span>, handleChange);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [status]);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> status;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> useLockScroll = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> [isLocked, setIsLocked] = useState(<span class="hljs-literal">false</span>);</span><br><span class="line">  <span class="hljs-keyword">const</span> lockScroll = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setIsLocked(<span class="hljs-literal">true</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="hljs-keyword">const</span> unLockScroll = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setIsLocked(<span class="hljs-literal">false</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">"html"</span>).style.overflow = isLocked</span><br><span class="line">      ? <span class="hljs-string">"hidden"</span></span><br><span class="line">      : <span class="hljs-string">"auto"</span>;</span><br><span class="line">  &#125;, [isLocked]);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> [isLocked, &#123; lockScroll, unLockScroll &#125;];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> &#123; alpha, beta, gamma &#125; = useDeviceOrientation();</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> setFavicon = useFavicon(</span><br><span class="line">    <span class="hljs-string">"https://www.snaps.com/images/common/favicon.ico"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> &#123;</span><br><span class="line">    coords: &#123; lat, long &#125;,</span><br><span class="line">    error</span><br><span class="line">  &#125; = useGeolocation();</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> kPressed = useKeyPress(<span class="hljs-string">"k"</span>);</span><br><span class="line">  <span class="hljs-keyword">const</span> iPressed = useKeyPress(<span class="hljs-string">"i"</span>);</span><br><span class="line">  <span class="hljs-keyword">const</span> mPressed = useKeyPress(<span class="hljs-string">"m"</span>);</span><br><span class="line">  <span class="hljs-keyword">const</span> cPressed = useKeyPress(<span class="hljs-string">"c"</span>);</span><br><span class="line">  <span class="hljs-keyword">const</span> hPressed = useKeyPress(<span class="hljs-string">"h"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> [currentLS, setLS] = useLocalStorage(<span class="hljs-string">"name"</span>, <span class="hljs-string">"12345"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> &#123; x, y &#125; = useMousePosition();</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> isOnline = useOnline();</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> [isLocked, &#123; lockScroll, unLockScroll &#125;] = useLockScroll();</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="hljs-string">"App"</span>&gt;</span><br><span class="line">      &lt;h1&gt;Superhooks!<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;useDeviceOrientation&lt;<span class="hljs-regexp">/h2&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">          &lt;li&gt;&#123;`Alpha: $&#123;alpha ? alpha : "null"&#125;`&#125;&lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;&#123;<span class="hljs-string">`Beta: <span class="hljs-subst">$&#123;beta ? beta : <span class="hljs-string">"null"</span>&#125;</span>`</span>&#125;&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">          &lt;li&gt;&#123;`Gamma: $&#123;gamma ? gamma : "null"&#125;`&#125;&lt;/</span>li&gt;</span><br><span class="line">        &lt;<span class="hljs-regexp">/ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;useFavicon&lt;<span class="hljs-regexp">/h2&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;button</span></span><br><span class="line"><span class="hljs-regexp">          onClick=&#123;() =&gt;</span></span><br><span class="line"><span class="hljs-regexp">            setFavicon("https:/</span><span class="hljs-regexp">/www.ohprint.me/im</span>ages/common/favicon.ico<span class="hljs-string">")</span></span><br><span class="line"><span class="hljs-string">          &#125;</span></span><br><span class="line"><span class="hljs-string">        &gt;</span></span><br><span class="line"><span class="hljs-string">          Change Favicon</span></span><br><span class="line"><span class="hljs-string">        &lt;/button&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">      &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;h2&gt;useGeolocation&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;ul&gt;</span></span><br><span class="line"><span class="hljs-string">          &lt;li&gt;&#123;`Latitude: $&#123;lat ? lat : "</span><span class="hljs-literal">null</span><span class="hljs-string">"&#125;`&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">          &lt;li&gt;&#123;`Longitude: $&#123;long ? long : "</span><span class="hljs-literal">null</span><span class="hljs-string">"&#125;`&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">          &lt;li&gt;&#123;`Geolocation Error: $&#123;error ? error : "</span><span class="hljs-literal">null</span><span class="hljs-string">"&#125;`&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">      &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;h2&gt;useKeyPress&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;ul&gt;</span></span><br><span class="line"><span class="hljs-string">          &lt;li&gt;Pressed 'k': &#123;kPressed &amp;&amp; "</span>K<span class="hljs-string">"&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">          &lt;li&gt;Pressed 'i': &#123;iPressed &amp;&amp; "</span>I<span class="hljs-string">"&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">          &lt;li&gt;Pressed 'm': &#123;mPressed &amp;&amp; "</span>M<span class="hljs-string">"&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">          &lt;li&gt;Pressed 'c': &#123;cPressed &amp;&amp; "</span>C<span class="hljs-string">"&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">          &lt;li&gt;Pressed 'h': &#123;hPressed &amp;&amp; "</span>H<span class="hljs-string">"&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">          &lt;li&gt;Pressed 'i': &#123;iPressed &amp;&amp; "</span>I<span class="hljs-string">"&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">      &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;h2&gt;useLocalStorage&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;ul&gt;</span></span><br><span class="line"><span class="hljs-string">          &lt;li&gt;Current Value: &#123;currentLS&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">          &lt;button onClick=&#123;() =&gt; setLS("</span><span class="hljs-number">12345</span><span class="hljs-string">")&#125;&gt;Set value: 12345&lt;/button&gt;</span></span><br><span class="line"><span class="hljs-string">          &lt;button onClick=&#123;() =&gt; setLS(null)&#125;&gt;Clear LS&lt;/button&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">      &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;h2&gt;useMousePosition&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;ul&gt;</span></span><br><span class="line"><span class="hljs-string">          &lt;li&gt;&#123;`Mouse X: $&#123;x&#125;`&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">          &lt;li&gt;&#123;`Mouse Y: $&#123;y&#125;`&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">      &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;h2&gt;useOnline&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;p&gt;Are you onlone? &#123;isOnline ? "</span>Yes<span class="hljs-string">" : "</span>No<span class="hljs-string">"&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">      &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;h2&gt;useLockScroll&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;h3&gt;Is Locked? &#123;isLocked ? "</span>Yes<span class="hljs-string">" : "</span>No<span class="hljs-string">"&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;button onClick=&#123;() =&gt; lockScroll()&#125;&gt;Lock Scroll&lt;/button&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;button onClick=&#123;() =&gt; unLockScroll()&#125;&gt;Unlock Scroll&lt;/button&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">  );</span></span><br><span class="line"><span class="hljs-string">&#125;</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">const rootElement = document.getElementById("</span>root<span class="hljs-string">");</span></span><br><span class="line"><span class="hljs-string">ReactDOM.render(&lt;App /&gt;, rootElement);</span></span><br></pre></td></tr></table></figure><br><p><code>correct</code><br><a href="https://codesandbox.io/s/day-seven-solution-tvz5q" rel="external nofollow noopener noreferrer" target="_blank">Day10 Currect</a></p>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/10/19/log/react-challenge/react-challenge-day10/#disqus_thread</comments>
    </item>
    
    <item>
      <title>자바스크립트 개발자라면 알아야하는 핵심 컨셉 33 (1~5)</title>
      <link>https://alleyful.github.io/2019/10/11/develop/javascript/33-js-concepts-01/</link>
      <guid>https://alleyful.github.io/2019/10/11/develop/javascript/33-js-concepts-01/</guid>
      <pubDate>Fri, 11 Oct 2019 08:31:19 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;1-Call-Stack&quot;&gt;&lt;a href=&quot;#1-Call-Stack&quot; class=&quot;headerlink&quot; title=&quot;1. Call Stack&quot;&gt;&lt;/a&gt;1. Call Stack&lt;/h1&gt;&lt;p&gt;여러 함수들(functions)을 호출하는 스크립트에서 해당 위치를 추적하는 인터프리터 (웹 브라우저의 자바스크립트 인터프리터같은)를 위한 메커니즘.&lt;br&gt;현재 어떤 함수가 동작하고 있는지, 그 함수 내에서 어떤 함수가 동작하는지, 다음에 어떤 함수가 호출되어야 하는지 등을 제어.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스크립트가 함수를 호출하면 인터프리터는 이를 호출 스택에 추가한 다음 함수를 수행하기 시작.&lt;/li&gt;
&lt;li&gt;해당 함수에 의해 호출되는 모든 함수는 호출 스택에 추가되고 호출이 도달하는 위치에서 실행.&lt;/li&gt;
&lt;li&gt;메인 함수가 끝나면 인터프리터는 스택을 제거하고 메인 코드 목록에서 중단된 실행을 다시 시작.&lt;/li&gt;
&lt;li&gt;스택이 할당된 공간보다 많은 공간을 차지하면 “stack overflow” 에러가 발생.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="1-Call-Stack"><a href="#1-Call-Stack" class="headerlink" title="1. Call Stack"></a>1. Call Stack</h1><p>여러 함수들(functions)을 호출하는 스크립트에서 해당 위치를 추적하는 인터프리터 (웹 브라우저의 자바스크립트 인터프리터같은)를 위한 메커니즘.<br>현재 어떤 함수가 동작하고 있는지, 그 함수 내에서 어떤 함수가 동작하는지, 다음에 어떤 함수가 호출되어야 하는지 등을 제어.</p><ul><li>스크립트가 함수를 호출하면 인터프리터는 이를 호출 스택에 추가한 다음 함수를 수행하기 시작.</li><li>해당 함수에 의해 호출되는 모든 함수는 호출 스택에 추가되고 호출이 도달하는 위치에서 실행.</li><li>메인 함수가 끝나면 인터프리터는 스택을 제거하고 메인 코드 목록에서 중단된 실행을 다시 시작.</li><li>스택이 할당된 공간보다 많은 공간을 차지하면 “stack overflow” 에러가 발생.</li></ul><a id="more"></a><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">three</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'I love JS'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">two</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  three();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">one</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  two();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">zero</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  one();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">zero();</span><br></pre></td></tr></table></figure><p><code>callstack</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0. empty 스택</span><br><span class="line">1. zero() 스택 삽입</span><br><span class="line">2. zero() =&gt; one() 스택 삽입</span><br><span class="line">3. zero() =&gt; one() =&gt; two() 스택 삽입</span><br><span class="line">4. zero() =&gt; one() =&gt; two() =&gt; three() 스택 삽입</span><br><span class="line">5. zero() =&gt; one() =&gt; two() =&gt; three() =&gt; console.log() 실행완료</span><br><span class="line">6. zero() =&gt; one() =&gt; two() =&gt; three() 스택에서 제거</span><br><span class="line">7. zero() =&gt; one() =&gt; two() 스택에서 제거</span><br><span class="line">8. zero() =&gt; one() 스택에서 제거</span><br><span class="line">9. zero() 스택에서 제거</span><br><span class="line">10. empty 스택</span><br></pre></td></tr></table></figure><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Glossary/Call_stack" rel="external nofollow noopener noreferrer" target="_blank">MDN Callstack</a></li><li><a href="https://www.youtube.com/watch?v=QkFkFqg-J04&list=PL7jH19IHhOLMmmjrwCi7-dMFVdoU0hhgF&index=10" rel="external nofollow noopener noreferrer" target="_blank">Nomadcoders</a></li></ul><br><h1 id="2-Primitive-Types"><a href="#2-Primitive-Types" class="headerlink" title="2. Primitive Types"></a>2. Primitive Types</h1><p>Primitive Types는 원시 자료형 또는 기본 자료형으로 자바스크립트의 기본이 되는 자료형을 의미. </p><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><ul><li>숫자의 자료형을 의미. </li><li>숫자가 아님을 뜻하는 NaN(Not a Number)도 숫자 자료형.  </li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typeof</span> <span class="hljs-number">1</span> <span class="hljs-comment">// "number"</span></span><br><span class="line"><span class="hljs-keyword">typeof</span> <span class="hljs-literal">NaN</span> <span class="hljs-comment">// "number"</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">2</span>, <span class="hljs-string">'abc'</span>) <span class="hljs-comment">//NaN</span></span><br></pre></td></tr></table></figure><br><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul><li>자바스크립트 문자열을 의미하며, 텍스트 데이터를 나타내는데 사용. </li><li>“, ‘ 또는 ` 기호 안에 텍스트를 기입하는 방식으로 사용하며 시작한 기호로 끝내야 한다.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">"Hello"</span></span><br><span class="line"><span class="hljs-string">'Hi'</span></span><br><span class="line"><span class="hljs-string">`Nice`</span></span><br></pre></td></tr></table></figure><ul><li>“ “ 안에 ‘ ‘ 쌍을 쓸 수 있습니다. 하지만 “ “ 쌍 안에 “ “를 쓰려면 역슬래쉬로 이스케이프(escape) 해야 한다.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">"Hello \"Javascript\" "</span></span><br></pre></td></tr></table></figure><br><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><ul><li>논리적인 요소를 나타내는 타입으로 true(참)와 false(거짓)이 있음. </li><li>만약 “true”와 “false”로 쓰면 이는 문자형으로 인지됨.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">"Hello"</span> === <span class="hljs-string">"Hi"</span> <span class="hljs-comment">//false</span></span><br><span class="line"><span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span> <span class="hljs-comment">//"boolean"</span></span><br><span class="line"><span class="hljs-keyword">typeof</span> <span class="hljs-string">"true"</span> <span class="hljs-comment">//"string"</span></span><br></pre></td></tr></table></figure><br><h2 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h2><ul><li>Null은 존재하지 않음이라는 정의를 한 것.</li></ul><br><h2 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h2><ul><li>정의 자체를 하지 않은 것을 의미.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span> === <span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span> <span class="hljs-comment">//false</span></span><br></pre></td></tr></table></figure><br><h2 id="Symbol-ES6에서-추가"><a href="#Symbol-ES6에서-추가" class="headerlink" title="Symbol(ES6에서 추가)"></a>Symbol(ES6에서 추가)</h2><ul><li>심볼(symbol)은 ES6에서 새롭게 추가된 7번째 타입으로 변경 불가능한 원시 타입의 값. </li><li>주로 이름의 충돌 위험이 없는 유일한 객체의 프로퍼티 키(property key)를 만들기 위해 사용.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> mySymbol = <span class="hljs-built_in">Symbol</span>();</span><br><span class="line"><span class="hljs-built_in">console</span>.log(mySymbol);        <span class="hljs-comment">// Symbol()</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> mySymbol); <span class="hljs-comment">// symbol</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> mySymbol = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'mySymbol'</span>);</span><br><span class="line">obj[mySymbol] = <span class="hljs-number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj); <span class="hljs-comment">// &#123; [Symbol(mySymbol)]: 123 &#125;</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj[mySymbol]); <span class="hljs-comment">// 123</span></span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Data_structures#Primitive_values" rel="external nofollow noopener noreferrer" target="_blank">MDN data types</a></li><li><a href="https://poiemaweb.com/es6-symbol" rel="external nofollow noopener noreferrer" target="_blank">7번째 타입 심볼(Symbol)</a></li></ul><br><h1 id="3-Value-Types-and-Reference-Types"><a href="#3-Value-Types-and-Reference-Types" class="headerlink" title="3. Value Types and Reference Types"></a>3. Value Types and Reference Types</h1><p><img src="/images/develop/javascript/33-js-1.png" alt="Value Types and Reference Types"></p><h2 id="Value-Types"><a href="#Value-Types" class="headerlink" title="Value Types"></a>Value Types</h2><ul><li>원시타입(Value Types or primitive type) : Number, String, Boolean, Null, Undefined, Symbol</li><li>원시 타입 데이터는 변수에 할당될 때 메모리 상에 고정된 크기로 저장되고 해당 변수가 원시 데이터의 값을 보관한다. </li><li>원시 타입 자료형은 모두 변수 선언, 초기화, 할당시 값이 저장된 메모리 영역에 직접적으로 접근한다, 즉 변수에 새 값이 할당 될 때 변수에 할당된 메모리 블럭에 저장된 값을 바로 변경한다는 뜻이다.<br><img src="/images/develop/javascript/33-js-2.png" alt="Value Types"></li></ul><h2 id="Referunce-Types"><a href="#Referunce-Types" class="headerlink" title="Referunce Types"></a>Referunce Types</h2><ul><li>참조타입(reference type) : Object, Array, Function</li><li>참조 타입 데이터는 변수에 할당될 때 값이 직접 해당 변수에 저장될 수 없으며, 변수에는 데이터에 대한 참조, 즉 변수의 값이 저장된 힙(Heap) 메모리의 주소값을 저장한다. </li><li>참조 타입은 변수의 값이 저장된 메모리 블럭의 주소를 가지고 있고, 자바스크립트 엔진이 변수가 가지고 있는 메모리 주소를 이용해서 변수의 값에 접근한다<br><img src="/images/develop/javascript/33-js-3.png" alt="Referunce Types"></li></ul><br><h1 id="4-Type-Coercoin"><a href="#4-Type-Coercoin" class="headerlink" title="4. Type Coercoin"></a>4. Type Coercoin</h1><p>동적 타입 언어인 자바스크립트는 개발자의 의도와는 상관없이 자바스크립트 엔진에 의해 암묵적으로 타입이 자동 변환되기도 한다.<br>이를 암묵적 타입 변환(Implicit coercion) 또는 타입 강제 변환(Type coercion)이라고 한다.</p><br><h2 id="String-1"><a href="#String-1" class="headerlink" title="String"></a>String</h2><ul><li>위의 + 연산자는 피연산자중 문자열이 있으면 문자열의 연결 연산자로 동작한다. </li><li>때문에 4 (Number) -&gt; ‘4’ (String)의 묵시적 형변환이 일어난다.<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span> + <span class="hljs-string">"hello"</span>); <span class="hljs-comment">//4hello</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span> + <span class="hljs-number">4</span> + <span class="hljs-string">"hello"</span>); <span class="hljs-comment">//8hello</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> + <span class="hljs-string">''</span>); <span class="hljs-comment">// "1"</span></span><br></pre></td></tr></table></figure></li></ul><br><h2 id="Number-1"><a href="#Number-1" class="headerlink" title="Number"></a>Number</h2><ul><li>‘-‘, ‘*’, ‘/‘ 등의 산술연산자는 피연산자가 숫자가 아니면 숫자 타입으로 묵시적 형변환 후 연산한다.<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> - <span class="hljs-string">'1'</span>); <span class="hljs-comment">//0</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(+<span class="hljs-string">'0'</span>); <span class="hljs-comment">// 0</span></span><br></pre></td></tr></table></figure></li></ul><br><h2 id="Boolean-Truthy-값-참으로-인식할-값-또는-Falsy-값-거짓으로-인식할-값"><a href="#Boolean-Truthy-값-참으로-인식할-값-또는-Falsy-값-거짓으로-인식할-값" class="headerlink" title="Boolean : Truthy 값(참으로 인식할 값) 또는 Falsy 값(거짓으로 인식할 값)"></a>Boolean : Truthy 값(참으로 인식할 값) 또는 Falsy 값(거짓으로 인식할 값)</h2><p>JavaScript에서는 아래의 값들은 모두 falsy이고, 이를 제외한 모든 값들은 truthy다.</p><ul><li>false</li><li>undefined</li><li>null</li><li>0, -0</li><li>NaN</li><li>’’ (빈문자열)<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">""</span> == <span class="hljs-literal">true</span>); <span class="hljs-comment">//false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> == <span class="hljs-literal">true</span>); <span class="hljs-comment">//true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">true</span> + <span class="hljs-string">''</span>); <span class="hljs-comment">// "true"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(+<span class="hljs-literal">true</span>); <span class="hljs-comment">// 1</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">true</span> * <span class="hljs-number">1</span>); <span class="hljs-comment">// 1</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">66</span> + <span class="hljs-literal">true</span>); <span class="hljs-comment">//67</span></span><br></pre></td></tr></table></figure></li></ul><br><h1 id="5-vs-vs-typeof"><a href="#5-vs-vs-typeof" class="headerlink" title="5. == vs === vs typeof"></a>5. == vs === vs typeof</h1><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>변수의 데이터 타입을 반환하는 연산자.</p><ul><li>undefined : 변수가 정의되지 않거나 값이 없을 때</li><li>number : 데이터 타입이 수일 때</li><li>string : 데이터 타입이 문자열일 때</li><li>boolean : 데이터 타입이 불리언일 때</li><li>object : 데이터 타입이 함수, 배열 등 객체일 때</li><li>function : 변수의 값이 함수일 때</li><li>symbol : 데이터 타입이 심볼일 때</li></ul><br><h2 id><a href="#" class="headerlink" title="=="></a>==</h2><p>두 가지를 비교할 때 유형 변환을 수행하고 IEEE 754를 준수하기 위해 NaN, -0 및 +0을 특별히 처리합니다 (NaN != NaN, -0 == +0)</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> num = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">"0"</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> str = <span class="hljs-string">"0"</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> b = <span class="hljs-literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num == num); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj == obj); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(str == str); <span class="hljs-comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num == obj); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num == str); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj == str); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span>); <span class="hljs-comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 둘 다 false, 드문 경우를 제외하고는</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj == <span class="hljs-literal">null</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj == <span class="hljs-literal">undefined</span>);</span><br></pre></td></tr></table></figure><br><h2 id="-1"><a href="#-1" class="headerlink" title="==="></a>===</h2><p>이중 equals (NaN, -0 및 +0의 특수 처리 포함)와 동일한 비교를 수행하지만 유형 변환은 수행하지 않습니다. 형식이 다른 경우 false가 반환됩니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> num = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">"0"</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> str = <span class="hljs-string">"0"</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> b = <span class="hljs-literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num === num); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj === obj); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(str === str); <span class="hljs-comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num === obj); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num === str); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj === str); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">null</span> === <span class="hljs-literal">undefined</span>); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj === <span class="hljs-literal">null</span>); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj === <span class="hljs-literal">undefined</span>); <span class="hljs-comment">// false</span></span><br></pre></td></tr></table></figure><br><h2 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is"></a>Object.is</h2><p>형식 변환을하지 않으며 NaN, -0 및 +0에 대한 특수 처리를 수행하지 않습니다 (특수 숫자 값을 제외하고는 ===와 동일한 동작을 제공함).</p>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/10/11/develop/javascript/33-js-concepts-01/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS Youtube Challenge - Day9 of 42</title>
      <link>https://alleyful.github.io/2019/10/09/log/youtube-challenge/youtube-challenge-day9/</link>
      <guid>https://alleyful.github.io/2019/10/09/log/youtube-challenge/youtube-challenge-day9/</guid>
      <pubDate>Wed, 09 Oct 2019 14:01:38 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;Today’s quiz is based on videos #2.6 to #2.12&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;오늘의 강의: 유튜브 클론코딩 #2.6 to #2.12&lt;/li&gt;
&lt;li&gt;오늘의 과제: 위의 강의를 시청하신 후, 아래 퀴즈를 풀면 됩니다.  &lt;/li&gt;
&lt;li&gt;제출기간: 익일 오전 6시까지&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/courses/enrolled/435438&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;[노마드 코더] 유튜브 클론 코딩&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#2 ExpressJS&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.6 Express Core: Middlewares &lt;/li&gt;
&lt;li&gt;2.7 Express Core: Middlewares part Two &lt;/li&gt;
&lt;li&gt;2.8 Express Core: Routing &lt;/li&gt;
&lt;li&gt;2.9 MVC Pattern part One &lt;/li&gt;
&lt;li&gt;2.10 MVC Pattern part Two &lt;/li&gt;
&lt;li&gt;2.11 MVC Pattern part Three &lt;/li&gt;
&lt;li&gt;2.12 Recap &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Today’s quiz is based on videos #2.6 to #2.12</p></blockquote><ul><li>오늘의 강의: 유튜브 클론코딩 #2.6 to #2.12</li><li>오늘의 과제: 위의 강의를 시청하신 후, 아래 퀴즈를 풀면 됩니다.  </li><li>제출기간: 익일 오전 6시까지</li></ul><br><p><a href="https://academy.nomadcoders.co/courses/enrolled/435438" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 유튜브 클론 코딩</a></p><p><code>#2 ExpressJS</code></p><ul><li>2.6 Express Core: Middlewares </li><li>2.7 Express Core: Middlewares part Two </li><li>2.8 Express Core: Routing </li><li>2.9 MVC Pattern part One </li><li>2.10 MVC Pattern part Two </li><li>2.11 MVC Pattern part Three </li><li>2.12 Recap </li></ul><br><a id="more"></a><hr><br><h2 id="Lecture-Summery"><a href="#Lecture-Summery" class="headerlink" title="Lecture Summery"></a>Lecture Summery</h2><br><hr><br><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><h3 id="Quiz"><a href="#Quiz" class="headerlink" title="Quiz"></a>Quiz</h3><ol><li><p>What are the three arguments that middlewares have? * 1) They don’t have three arguments<br> 2) connection, client, next<br> 3) <code>request, response, next</code></p> <br></li><li><p>What does the ‘next’ function do? * 1) It sends the user to the next page<br> 2) <code>It calls the next middleware</code><br> 3) It receives the next costumer</p> <br></li><li><p>Routes are middlewares * 1) <code>True</code><br> 2) False</p> <br></li><li><p>What is the difference between ‘routes’ and ‘middlewares’ * 1) There is no difference<br> 2) <code>A route is just a middleware that doesn&#39;t call &quot;next&quot; but uses &quot;res&quot; to terminate the connection.</code></p> <br></li><li><p>How can I make a middleware be used in ALL the routes? * 1) Using “app.useAll(<middleware>)”<br> 2) Using “app.getAll(<middleware>)”<br> 3) <code>Using &quot;app.use(&lt;MIDDLEWARE&gt;)&quot;</code></middleware></middleware></p> <br></li><li><p>How can a middleware terminate a connection * 1) Using “res.kill()”<br> 2) Using “req.kill()”<br> 3) <code>Using &quot;res.end()&quot;</code></p> <br></li><li><p>What is the use of express.Router * 1) <code>It allows us to break down our routes in small groups</code><br> 2) express.Router allows us to answer to requests from the users<br> 3) express.Router does not exist</p> <br></li><li><p>How can I include a Router in my app? * 1) Using “app.router(<router>)”<br> 2) Using “app.include(<router>)”<br> 3) <code>Using &quot;app.use(&lt;ROUTER&gt;)&quot;</code></router></router></p> <br></li><li><p>What is the difference between “app.get” and “app.use” * 1) “app.get” finds a page on the website and renders it and “app.use” includes a router<br> 2) <code>&quot;app.get&quot; is only called for GET requests, &quot;app.use&quot; is called for ALL requests</code></p> <br></li><li><p>What does MVC mean *1) Me Very Cute<br>2) My Vegetarian Cook<br>3) <code>Model View Controller</code></p><br></li><li><p>What is the M in MVC? *1) Is what we show to the user<br>2) Is what handles the logic<br>3) <code>Is what stores the data</code></p><br></li><li><p>What is the V in MVC? *1) <code>Is what we show to the user</code><br>2) Is what handles the logic<br>3) Is what stores the data</p><br></li><li><p>What is the C in MVC? *1) Is what we show to the user<br>2) <code>Is what handles the logic</code><br>3) Is what stores the data</p><br></li><li><p>MVC is something I can install *1) Yes, it’s a Node module<br>2) <code>No, it&#39;s just a pattern</code></p></li></ol>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/10/09/log/youtube-challenge/youtube-challenge-day9/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 행렬의 곱셈</title>
      <link>https://alleyful.github.io/2019/10/08/algorithm/programmers/level2-15/</link>
      <guid>https://alleyful.github.io/2019/10/08/algorithm/programmers/level2-15/</guid>
      <pubDate>Tue, 08 Oct 2019 11:17:12 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;2차원 행렬 arr1과 arr2를 입력받아, arr1에 arr2를 곱한 결과를 반환하는 함수, solution을 완성해주세요.&lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;제한-조건&quot;&gt;&lt;a href=&quot;#제한-조건&quot; class=&quot;headerlink&quot; title=&quot;제한 조건&quot;&gt;&lt;/a&gt;제한 조건&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;행렬 arr1, arr2의 행과 열의 길이는 2 이상 100 이하입니다.&lt;/li&gt;
&lt;li&gt;행렬 arr1, arr2의 원소는 -10 이상 20 이하인 자연수입니다.&lt;/li&gt;
&lt;li&gt;곱할 수 있는 배열만 주어집니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>2차원 행렬 arr1과 arr2를 입력받아, arr1에 arr2를 곱한 결과를 반환하는 함수, solution을 완성해주세요.</p><br><h2 id="제한-조건"><a href="#제한-조건" class="headerlink" title="제한 조건"></a>제한 조건</h2><ul><li>행렬 arr1, arr2의 행과 열의 길이는 2 이상 100 이하입니다.</li><li>행렬 arr1, arr2의 원소는 -10 이상 20 이하인 자연수입니다.</li><li>곱할 수 있는 배열만 주어집니다.</li></ul><br><a id="more"></a><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="left">arr1</th><th align="left">arr2</th><th align="left">return</th></tr></thead><tbody><tr><td align="left">[[1, 4], [3, 2], [4, 1]]</td><td align="left">[[3, 3], [3, 3]]</td><td align="left">[[15, 15], [15, 15], [15, 15]]</td></tr><tr><td align="left">[[2, 3, 2], [4, 2, 4], [3, 1, 4]]</td><td align="left">[[5, 4, 3], [2, 4, 1], [3, 1, 1]]</td><td align="left">[[22, 22, 11], [36, 28, 18], [29, 20, 14]]</td></tr></tbody></table><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">arr1, arr2</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>(arr1.length).fill(<span class="hljs-string">''</span>).map(</span><br><span class="line">        (rowValue, index) =&gt; <span class="hljs-built_in">Array</span>(arr2[<span class="hljs-number">0</span>].length).fill(<span class="hljs-string">''</span>).map(</span><br><span class="line">            (verticalValue, innerIndex) =&gt; arr1[index].reduce(</span><br><span class="line">                (target, current, array) =&gt;target + current * arr2[array][innerIndex], <span class="hljs-number">0</span></span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/10/08/algorithm/programmers/level2-15/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS Youtube Challenge - Day8 of 42</title>
      <link>https://alleyful.github.io/2019/10/05/log/youtube-challenge/youtube-challenge-day8/</link>
      <guid>https://alleyful.github.io/2019/10/05/log/youtube-challenge/youtube-challenge-day8/</guid>
      <pubDate>Sat, 05 Oct 2019 13:19:58 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;Today’s challenge is based on videos #2.8 to #2.11&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;오늘 시청하는 강의: #2.12 to #2.17&lt;/li&gt;
&lt;li&gt;오늘 제출하는 과제: 위의 강의를 시청하신 후, 아래 코딩챌린지를 완료하세요.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/courses/enrolled/435438&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;[노마드 코더] 유튜브 클론 코딩&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#2 ExpressJS&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.12 Recap &lt;/li&gt;
&lt;li&gt;2.13 Installing Pug &lt;/li&gt;
&lt;li&gt;2.14 Layouts with Pug &lt;/li&gt;
&lt;li&gt;2.15 Partials with Pug &lt;/li&gt;
&lt;li&gt;2.16 Local Variables in Pug &lt;/li&gt;
&lt;li&gt;2.17 Template Variables in Pug &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Today’s challenge is based on videos #2.8 to #2.11</p></blockquote><ul><li>오늘 시청하는 강의: #2.12 to #2.17</li><li>오늘 제출하는 과제: 위의 강의를 시청하신 후, 아래 코딩챌린지를 완료하세요.</li></ul><br><p><a href="https://academy.nomadcoders.co/courses/enrolled/435438" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 유튜브 클론 코딩</a></p><p><code>#2 ExpressJS</code></p><ul><li>2.12 Recap </li><li>2.13 Installing Pug </li><li>2.14 Layouts with Pug </li><li>2.15 Partials with Pug </li><li>2.16 Local Variables in Pug </li><li>2.17 Template Variables in Pug </li></ul><br><a id="more"></a><hr><br><h2 id="Lecture-Summery"><a href="#Lecture-Summery" class="headerlink" title="Lecture Summery"></a>Lecture Summery</h2><h3 id="Pug"><a href="#Pug" class="headerlink" title="Pug"></a>Pug</h3><p>Express Framework의 Template Engine</p><br><h3 id="설치하기"><a href="#설치하기" class="headerlink" title="설치하기"></a>설치하기</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pug</span><br></pre></td></tr></table></figure><br><h3 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h3><p><code>app.js</code></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> routes = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/index'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// view engine setup</span></span><br><span class="line">app.set(<span class="hljs-string">'views'</span>, path.join(__dirname, <span class="hljs-string">'views'</span>));</span><br><span class="line">app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">'pug'</span>);</span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-string">'/'</span>, routes);</span><br></pre></td></tr></table></figure><br><p><code>indes.js</code></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* GET home page. */</span></span><br><span class="line">router.get(<span class="hljs-string">'/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="hljs-string">'index'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="hljs-string">'Hey'</span>,</span><br><span class="line">    message: <span class="hljs-string">'Hello there!'</span></span><br><span class="line">  &#125; );</span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><br><p><code>index.pug</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html(lang=&quot;en&quot;)</span><br><span class="line">    head</span><br><span class="line">        title= title</span><br><span class="line">    body</span><br><span class="line">        p.greetings#people #&#123;message&#125;</span><br></pre></td></tr></table></figure><br><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://cinema4dr12.tistory.com/961" rel="external nofollow noopener noreferrer" target="_blank">Express Template Engine / Pug</a></li></ul><br><hr><br><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><h3 id="Challenge-goals"><a href="#Challenge-goals" class="headerlink" title="Challenge goals:"></a>Challenge goals:</h3><p>아래 주어진 컨디션들을 모두 수행하여야 코딩챌린지를 통과할 수 있습니다.</p><p>Using the provided blueprint build a server that has the following routes:</p><p><img src="./images/wetube-dat8.gif" alt></p><br><h3 id="조건"><a href="#조건" class="headerlink" title="조건:"></a>조건:</h3><ul><li>Make FOUR (4) routes. / /login /photos /profile</li><li>Each route should render a PUG template.</li><li>NO Anonymous functions allowed. Every route should have a controller.</li><li>Put the templates on the ‘views’ folder.</li><li>All templates should extend from a layout.</li><li>The layout should contain the <head><meta name="generator" content="Hexo 3.9.0"> portion of the page and a <footer> partial.</footer></head></li><li>On the <body> each page has to have a <h1> with the title of the page.</h1></body></li><li>On the <head><meta name="generator" content="Hexo 3.9.0"> each page has to have a <title> with the title of the page and the title of the website.</title></head></li><li>The title of the page and the website should not be written on the template.</li><li>The title of the page should come from the controller.</li><li>The title of the website should not come from the controller, it should come from the locals.</li><li>There should be one router file and one controller file.</li><li>Middlewares should have their own file.</li></ul><h3 id="제출"><a href="#제출" class="headerlink" title="제출:"></a>제출:</h3><ul><li>CodeSandbox 템플릿 : <a href="https://codesandbox.io/s/express-pug-blueprint-qopyp" rel="external nofollow noopener noreferrer" target="_blank">Day8 Boilerplate</a></li><li>제출 : <a href="https://codesandbox.io/s/express-pug-blueprint-czp7f" rel="external nofollow noopener noreferrer" target="_blank">Day8 Homework</a></li><li>정답 : <a href="https://codesandbox.io/s/day-six-solution-rcez2" rel="external nofollow noopener noreferrer" target="_blank">Day8 Answer</a></li></ul>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/10/05/log/youtube-challenge/youtube-challenge-day8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS Youtube Challenge - Day5 of 42</title>
      <link>https://alleyful.github.io/2019/10/04/log/youtube-challenge/youtube-challenge-day5/</link>
      <guid>https://alleyful.github.io/2019/10/04/log/youtube-challenge/youtube-challenge-day5/</guid>
      <pubDate>Fri, 04 Oct 2019 14:32:11 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;Today’s challenge is based on videos #2.8 to #2.11&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;오늘 시청하는 강의: #2.8 to #2.11&lt;/li&gt;
&lt;li&gt;오늘 제출하는 과제: 위의 강의를 시청하신 후, 아래 코딩챌린지를 완료하세요.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/courses/enrolled/435438&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;[노마드 코더] 유튜브 클론 코딩&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#2 ExpressJS&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.8 Express Core: Routing &lt;/li&gt;
&lt;li&gt;2.9 MVC Pattern part One &lt;/li&gt;
&lt;li&gt;2.10 MVC Pattern part Two &lt;/li&gt;
&lt;li&gt;2.11 MVC Pattern part Three &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Today’s challenge is based on videos #2.8 to #2.11</p></blockquote><ul><li>오늘 시청하는 강의: #2.8 to #2.11</li><li>오늘 제출하는 과제: 위의 강의를 시청하신 후, 아래 코딩챌린지를 완료하세요.</li></ul><br><p><a href="https://academy.nomadcoders.co/courses/enrolled/435438" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 유튜브 클론 코딩</a></p><p><code>#2 ExpressJS</code></p><ul><li>2.8 Express Core: Routing </li><li>2.9 MVC Pattern part One </li><li>2.10 MVC Pattern part Two </li><li>2.11 MVC Pattern part Three </li></ul><br><a id="more"></a><hr><br><h2 id="Lecture-Summery"><a href="#Lecture-Summery" class="headerlink" title="Lecture Summery"></a>Lecture Summery</h2><h3 id="Express-Router"><a href="#Express-Router" class="headerlink" title="Express Router"></a>Express Router</h3><h4 id="응답-메소드"><a href="#응답-메소드" class="headerlink" title="응답 메소드"></a>응답 메소드</h4><p>다음 표에 표시된 응답 오브젝트에 대한 메소드(res)는 응답을 클라이언트로 전송하고 요청-응답 주기를 종료할 수 있습니다. 라우트 핸들러로부터 다음 메소드 중 어느 하나도 호출되지 않는 경우, 클라이언트 요청은 정지된 채로 방치됩니다.</p><table><thead><tr><th align="left">메소드</th><th align="left">설명</th></tr></thead><tbody><tr><td align="left"><code>res.download()</code></td><td align="left">파일이 다운로드되도록 프롬프트합니다.</td></tr><tr><td align="left"><code>res.end()</code></td><td align="left">응답 프로세스를 종료합니다.</td></tr><tr><td align="left"><code>res.json()</code></td><td align="left">JSON 응답을 전송합니다.</td></tr><tr><td align="left"><code>res.jsonp()</code></td><td align="left">JSONP 지원을 통해 JSON 응답을 전송합니다.</td></tr><tr><td align="left"><code>res.redirect()</code></td><td align="left">요청의 경로를 재지정합니다.</td></tr><tr><td align="left"><code>res.render()</code></td><td align="left">보기 템플리트를 렌더링합니다.</td></tr><tr><td align="left"><code>res.send()</code></td><td align="left">다양한 유형의 응답을 전송합니다.</td></tr><tr><td align="left"><code>res.sendFile</code></td><td align="left">파일을 옥텟 스트림의 형태로 전송합니다.</td></tr><tr><td align="left"><code>res.sendStatus()</code></td><td align="left">응답 상태 코드를 설정한 후 해당 코드를 문자열로 표현한 내용을 응답 본문으로서 전송합니다.</td></tr></tbody></table><br><h4 id="app-route"><a href="#app-route" class="headerlink" title="app.route()"></a>app.route()</h4><p>app.route()를 이용하면 라우트 경로에 대하여 체인 가능한 라우트 핸들러를 작성할 수 있습니다. 경로는 한 곳에 지정되어 있으므로, 모듈식 라우트를 작성하면 중복성과 오타가 감소하여 도움이 됩니다. </p><br><h4 id="express-Router"><a href="#express-Router" class="headerlink" title="express.Router"></a>express.Router</h4><p>express.Router 클래스를 사용하면 모듈식 마운팅 가능한 핸들러를 작성할 수 있습니다. Router 인스턴스는 완전한 미들웨어이자 라우팅 시스템이며, 따라서 “미니 앱(mini-app)”이라고 불리는 경우가 많습니다.</p><p>다음 예에서는 라우터를 모듈로서 작성하고, 라우터 모듈에서 미들웨어 함수를 로드하고, 몇몇 라우트를 정의하고, 기본 앱의 한 경로에 라우터 모듈을 마운트합니다.</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> express <span class="hljs-keyword">from</span> <span class="hljs-string">'express'</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// middleware that is specific to this router</span></span><br><span class="line">router.use(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timeLog</span>(<span class="hljs-params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Time: '</span>, <span class="hljs-built_in">Date</span>.now());</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-comment">// define the home page route</span></span><br><span class="line">router.get(<span class="hljs-string">'/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="hljs-string">'Birds home page'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-comment">// define the about route</span></span><br><span class="line">router.get(<span class="hljs-string">'/about'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="hljs-string">'About birds'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><br><h3 id="MVC-Pattern"><a href="#MVC-Pattern" class="headerlink" title="MVC Pattern"></a>MVC Pattern</h3><p><code>MVC</code>는 <code>Model-View-Controller 의 약자</code>입니다.</p><p>개발 할 때, 3가지 형태로 역할을 나누어 개발하는 방법론입니다.<br>비지니스 처리 로직과 사용자 인터페이스 요소를 분리시켜 서로 영향없이 개발 하기 수월하다는 장점이 있습니다.</p><ul><li><p><strong>Model</strong>은 어플리케이션이 “무엇”을 할 것인지를 정의 합니다. 내부 비지니스 로직을 처리하기 위한 역할을 할 것입니다.   </p><ul><li>처리되는 알고리즘, DB, 데이터 등등.</li></ul></li><li><p><strong>Controller</strong>는 모델이 “어떻게” 처리할 지를 알려주는 역할을 할 것이고, 모바일에서는 화면의 로직처리 부분입니다.</p></li><li><p><strong>View</strong>는 화면에 무엇인가를 보여주기 위한 역할을 합니다. 컨트롤러 하위에 종속되어, 모델이나 컨트롤러가 보여주려고 하는 모든 필요한 것들을 보여줄 것입니다. 그리고 사용자의 입력을 받아서 모델의 데이터를 업데이트를 합니다.</p></li></ul><p>그리고 Controller는 Model과 View가 각각 무엇을 해야 할 지를 알고 있고, 통제합니다. 비지니스 로직을 처리하는 Model과 완전히 UI에 의존적인 View가 서로 직접 이야기 할 수 없게 합니다.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wetube</span><br><span class="line">├── controllers</span><br><span class="line">├── models    </span><br><span class="line">└── views</span><br></pre></td></tr></table></figure><br><br><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://expressjs.com/ko/guide/routing.html" rel="external nofollow noopener noreferrer" target="_blank">Express routing</a></li></ul><br><hr><br><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><h3 id="Challenge-goals"><a href="#Challenge-goals" class="headerlink" title="Challenge goals:"></a>Challenge goals:</h3><p>아래 주어진 컨디션들을 모두 수행하여야 코딩챌린지를 통과할 수 있습니다.</p><p>Using the provided blueprint build a server that has the following routes:</p><ul><li>/</li><li>/join</li><li>/login</li><li>/confirm-account</li><li>/courses,</li><li>/courses/new,</li><li>/courses/mine</li><li>/api/documentation</li><li>/api/v1/buy</li><li>/api/v1/refund</li><li>/api/v2/remove</li><li>/api/v2/edit</li></ul><p>This is the expected output:<br><a href="https://youtu.be/z-keQSxut7g" rel="external nofollow noopener noreferrer" target="_blank"><img src="http://img.youtube.com/vi/z-keQSxut7g/0.jpg" alt="Video Label"></a></p><br><h3 id="조건"><a href="#조건" class="headerlink" title="조건:"></a>조건:</h3><ul><li>Those URLs should be divided in FIVE different routers.</li><li>Each route needs to have a controller function imported from a “controllers” file.</li><li>NO Anonymous functions allowed. Every route should have a controller.</li></ul><h3 id="제출"><a href="#제출" class="headerlink" title="제출:"></a>제출:</h3><ul><li>CodeSandbox 템플릿 : <a href="https://codesandbox.io/s/express-blueprint-cedwx" rel="external nofollow noopener noreferrer" target="_blank">Day5 Boilerplate</a></li><li>제출 : <a href="https://codesandbox.io/s/express-blueprint-myq5b" rel="external nofollow noopener noreferrer" target="_blank">Day5 Homework</a></li><li>정답 : <a href="https://codesandbox.io/s/day-five-solution-rkcyp" rel="external nofollow noopener noreferrer" target="_blank">Day5 Answer</a></li></ul>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/10/04/log/youtube-challenge/youtube-challenge-day5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 피보나치 수</title>
      <link>https://alleyful.github.io/2019/09/28/algorithm/programmers/level2-14/</link>
      <guid>https://alleyful.github.io/2019/09/28/algorithm/programmers/level2-14/</guid>
      <pubDate>Sat, 28 Sep 2019 13:19:52 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;피보나치 수는 F(0) = 0, F(1) = 1일 때, 1 이상의 n에 대하여 F(n) = F(n-1) + F(n-2) 가 적용되는 수 입니다.&lt;/p&gt;
&lt;p&gt;예를들어&lt;/p&gt;
&lt;p&gt;F(2) = F(0) + F(1) = 0 + 1 = 1&lt;br&gt;F(3) = F(1) + F(2) = 1 + 1 = 2&lt;br&gt;F(4) = F(2) + F(3) = 1 + 2 = 3&lt;br&gt;F(5) = F(3) + F(4) = 2 + 3 = 5&lt;br&gt;와 같이 이어집니다.&lt;/p&gt;
&lt;p&gt;2 이상의 n이 입력되었을 때, n번째 피보나치 수를 1234567으로 나눈 나머지를 리턴하는 함수, solution을 완성해 주세요.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>피보나치 수는 F(0) = 0, F(1) = 1일 때, 1 이상의 n에 대하여 F(n) = F(n-1) + F(n-2) 가 적용되는 수 입니다.</p><p>예를들어</p><p>F(2) = F(0) + F(1) = 0 + 1 = 1<br>F(3) = F(1) + F(2) = 1 + 1 = 2<br>F(4) = F(2) + F(3) = 1 + 2 = 3<br>F(5) = F(3) + F(4) = 2 + 3 = 5<br>와 같이 이어집니다.</p><p>2 이상의 n이 입력되었을 때, n번째 피보나치 수를 1234567으로 나눈 나머지를 리턴하는 함수, solution을 완성해 주세요.</p><br><a id="more"></a><h2 id="제한-사항"><a href="#제한-사항" class="headerlink" title="제한 사항"></a>제한 사항</h2><ul><li>n은 1이상, 100000이하인 자연수입니다.</li></ul><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="center">n</th><th align="center">return</th></tr></thead><tbody><tr><td align="center">3</td><td align="center">2</td></tr><tr><td align="center">5</td><td align="center">5</td></tr></tbody></table><br><h2 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h2><p>피보나치수는 0번째부터 0, 1, 1, 2, 3, 5, … 와 같이 이어집니다.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> fibonacci = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>];</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        fibonacci.push((fibonacci[i - <span class="hljs-number">1</span>] + fibonacci[i]) % <span class="hljs-number">1234567</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="hljs-keyword">return</span> fibonacci[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/28/algorithm/programmers/level2-14/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS Youtube Challenge - Day4 of 42</title>
      <link>https://alleyful.github.io/2019/09/27/log/youtube-challenge/youtube-challenge-day4/</link>
      <guid>https://alleyful.github.io/2019/09/27/log/youtube-challenge/youtube-challenge-day4/</guid>
      <pubDate>Fri, 27 Sep 2019 03:32:19 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;Today’s challenge is based on videos #2.3 to #2.7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;오늘 시청하는 강의: #2.3 to #2.7&lt;/li&gt;
&lt;li&gt;오늘 제출하는 과제: 위의 강의를 시청하신 후, 아래 코딩챌린지를 완료하세요.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/courses/enrolled/435438&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;[노마드 코더] 유튜브 클론 코딩&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#2 ExpressJS&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.3 Your First Express Server &lt;/li&gt;
&lt;li&gt;2.4 Handling Routes with Express &lt;/li&gt;
&lt;li&gt;2.5 ES6 on NodeJS using Babel &lt;/li&gt;
&lt;li&gt;2.6 Express Core: Middlewares &lt;/li&gt;
&lt;li&gt;2.7 Express Core: Middlewares part Two &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Today’s challenge is based on videos #2.3 to #2.7</p></blockquote><ul><li>오늘 시청하는 강의: #2.3 to #2.7</li><li>오늘 제출하는 과제: 위의 강의를 시청하신 후, 아래 코딩챌린지를 완료하세요.</li></ul><br><p><a href="https://academy.nomadcoders.co/courses/enrolled/435438" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 유튜브 클론 코딩</a></p><p><code>#2 ExpressJS</code></p><ul><li>2.3 Your First Express Server </li><li>2.4 Handling Routes with Express </li><li>2.5 ES6 on NodeJS using Babel </li><li>2.6 Express Core: Middlewares </li><li>2.7 Express Core: Middlewares part Two </li></ul><br><a id="more"></a><hr><br><h2 id="Lecture-Summery"><a href="#Lecture-Summery" class="headerlink" title="Lecture Summery"></a>Lecture Summery</h2><h3 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h3><h4 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><br><h4 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h4><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// respond with "hello world" when a GET request is made to the homepage</span></span><br><span class="line">app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="hljs-string">'hello world'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><h4 id="Route-Methods"><a href="#Route-Methods" class="headerlink" title="Route Methods"></a>Route Methods</h4><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// GET method route</span></span><br><span class="line">app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="hljs-string">'GET request to the homepage'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// POST method route</span></span><br><span class="line">app.post(<span class="hljs-string">'/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="hljs-string">'POST request to the homepage'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//모든 요청 메소드에 대해 한 경로에서 미들웨어 함수를 로드하는 데 사용</span></span><br><span class="line">app.all(<span class="hljs-string">'/secret'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Accessing the secret section ...'</span>);</span><br><span class="line">  next(); <span class="hljs-comment">// pass control to the next handler</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>Babel은 ES6+ 코드를 ES5 이하의 버전으로 트랜스파일링한다.</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ES6(Arrow Function) + ES7(Exponentiation operator)</span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].map(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> n ** n);</span><br></pre></td></tr></table></figure><p>위 코드는 ES6에서 도입된 화살표 함수와 ES7에서 도입된 거듭제곱 연산자를 사용하고 있다. 이 두가지 기능은 IE는 물론이고 구형 브라우저에서 지원하지 않는다. 따라서 IE나 구형 브라우저에서도 동작하는 애플리케이션을 구현하기 위해 ES6+ 코드를 ES5 이하의 버전으로 변환(트랜스파일링)할 필요가 있다. Babel을 사용하면 위 코드를 아래와 같이 ES5 이하의 버전으로 트랜스파일링할 수 있다.</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ES5</span></span><br><span class="line"><span class="hljs-meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.pow(n, n);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><h4 id="Babel-CLI-설치"><a href="#Babel-CLI-설치" class="headerlink" title="Babel CLI 설치"></a>Babel CLI 설치</h4><p>npm을 사용하여 Babel CLI을 설치한다.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 프로젝트 폴더 생성</span><br><span class="line">$ mkdir es6-project &amp;&amp; cd es6-project</span><br><span class="line"></span><br><span class="line"># package.json 생성</span><br><span class="line">$ npm init -y</span><br><span class="line"></span><br><span class="line"># babel-core, babel-cli 설치</span><br><span class="line">$ npm install --save-dev @babel/core @babel/cli</span><br></pre></td></tr></table></figure><h4 id="babelrc-설정파일"><a href="#babelrc-설정파일" class="headerlink" title="babelrc 설정파일"></a>babelrc 설정파일</h4><p>Babel을 사용하려면 먼저 @babel/preset-env을 설치해야 한다. @babel/preset-env은 함께 사용되어야 하는 Babel 플러그인을 모아 둔 것으로 Babel 프리셋이라고 부른다.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># env preset 설치</span><br><span class="line">$ npm install --save-dev @babel/preset-env</span><br></pre></td></tr></table></figure><p><code>package.json</code></p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"es6-project"</span>,</span><br><span class="line">  <span class="hljs-attr">"version"</span>: <span class="hljs-string">"1.0.0"</span>,</span><br><span class="line">  <span class="hljs-attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="hljs-attr">"@babel/cli"</span>: <span class="hljs-string">"^7.2.3"</span>,</span><br><span class="line">    <span class="hljs-attr">"@babel/core"</span>: <span class="hljs-string">"^7.2.2"</span>,</span><br><span class="line">    <span class="hljs-attr">"@babel/preset-env"</span>: <span class="hljs-string">"^7.4.5"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>.babelrc</code></p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"presets"</span>: [<span class="hljs-string">"@babel/preset-env"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="트랜스파일링"><a href="#트랜스파일링" class="headerlink" title="트랜스파일링"></a>트랜스파일링</h4><p>package.json 파일에 scripts를 추가한다. 완성된 package.json 파일은 아래와 같다.</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"es6-project"</span>,</span><br><span class="line">  <span class="hljs-attr">"version"</span>: <span class="hljs-string">"1.0.0"</span>,</span><br><span class="line">  <span class="hljs-attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="hljs-attr">"build"</span>: <span class="hljs-string">"babel src/js -w -d dist/js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="hljs-attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="hljs-attr">"@babel/cli"</span>: <span class="hljs-string">"^7.2.3"</span>,</span><br><span class="line">    <span class="hljs-attr">"@babel/core"</span>: <span class="hljs-string">"^7.2.2"</span>,</span><br><span class="line">    <span class="hljs-attr">"@babel/preset-env"</span>: <span class="hljs-string">"^7.3.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 npm script는 src/js 폴더(타깃 폴더)에 있는 모든 ES6+ 파일들을 트랜스파일링한 후, 그 결과물을 dist/js 폴더에 저장한다. 사용한 옵션의 의미는 아래와 같다.</p><blockquote><p>-w : 타깃 폴더에 있는 모든 파일들의 변경을 감지하여 자동으로 트랜스파일한다. (–watch 옵션의 축약형)<br>-d : 트랜스파일링된 결과물이 저장될 폴더를 지정한다. (–out-dir 옵션의 축약형)</p></blockquote><br><br><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://poiemaweb.com/es6-babel-webpack-1" rel="external nofollow noopener noreferrer" target="_blank">Babel과 Webpack을 이용한 ES6 환경 구축</a></li></ul><br><hr><br><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><h3 id="Challenge-goals"><a href="#Challenge-goals" class="headerlink" title="Challenge goals:"></a>Challenge goals:</h3><p>아래 주어진 4가지 목표를 모두 수행하여야 코딩챌린지를 통과할 수 있습니다.</p><ul><li>Make 4 routes: “/“ , “/about-us” , “/contact” and “/protected”</li><li>Each route should render a string with the name of the page, i.e: “/about-us” -&gt; About Us.</li><li>Make one middleware for all the routes, that middleware should console.log the message “I’m a middleware” on every request to any route.</li><li>Make a middleware that won’t allow me to go to “/protected”, if I try to go to “/protected” I should be redirected back to “/“</li></ul><p>This is the expected output:<br><a href="https://youtu.be/z-keQSxut7g" rel="external nofollow noopener noreferrer" target="_blank"><img src="http://img.youtube.com/vi/z-keQSxut7g/0.jpg" alt="Video Label"></a></p><br><h3 id="조건"><a href="#조건" class="headerlink" title="조건:"></a>조건:</h3><ul><li>Use only ONE file: index.js</li><li>There should be TWO middlewares. One is the “console” middleware and the other one is the “protected” middleware.</li><li>There should be FOUR routes.</li></ul><h3 id="제출"><a href="#제출" class="headerlink" title="제출:"></a>제출:</h3><ul><li><p>CodeSandbox 템플릿 : <a href="https://codesandbox.io/s/express-blueprint-cedwx" rel="external nofollow noopener noreferrer" target="_blank">Day4 Boilerplate</a></p></li><li><p>제출 : <a href="https://codesandbox.io/s/express-blueprint-yh60q" rel="external nofollow noopener noreferrer" target="_blank">Day4 Homework</a></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> express <span class="hljs-keyword">from</span> <span class="hljs-string">"express"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Codesanbox does not need PORT :)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> handleHome = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> res.send(<span class="hljs-string">"Home"</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> handleAbout = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> res.send(<span class="hljs-string">"About Us"</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> handleContact = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> res.send(<span class="hljs-string">"Contact"</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> handleRedirect = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> res.redirect(<span class="hljs-string">"/"</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> middleware = <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"I'm a middleware"</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.use(middleware);</span><br><span class="line"></span><br><span class="line">app.get(<span class="hljs-string">"/"</span>, handleHome);</span><br><span class="line"></span><br><span class="line">app.get(<span class="hljs-string">"/about-us"</span>, handleAbout);</span><br><span class="line"></span><br><span class="line">app.get(<span class="hljs-string">"/contact"</span>, handleContact);</span><br><span class="line"></span><br><span class="line">app.get(<span class="hljs-string">"*"</span>, handleRedirect);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Listening!`</span>));</span><br></pre></td></tr></table></figure></li><li><p>정답 : <a href="https://codesandbox.io/s/day-four-solution-5zdh2" rel="external nofollow noopener noreferrer" target="_blank">Day4 Answer</a></p><blockquote><p>Today’s quiz is based on videos #2.0 to #2.2<br>Don’t worry, tomorrow we will start coding :) </p></blockquote></li></ul><ul><li>오늘의 강의: 유튜브 클론코딩 #2.0 to #2.2 </li><li>오늘의 과제: 위의 강의를 시청하신 후, 아래 퀴즈를 풀면 됩니다.  </li><li>제출기간: 익일 오전 6시까지</li></ul><br><p><a href="https://academy.nomadcoders.co/courses/enrolled/435438" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 유튜브 클론 코딩</a></p><p><code>#2 ExpressJS</code></p><ul><li>2.0 What is a Server </li><li>2.1 What is Express </li><li>2.2 Installing Express with NPM </li></ul><br><!-- more --><hr><br><h2 id="Lecture-Summery-1"><a href="#Lecture-Summery-1" class="headerlink" title="Lecture Summery"></a>Lecture Summery</h2><br><h3 id="What-is-a-Server"><a href="#What-is-a-Server" class="headerlink" title="What is a Server"></a>What is a Server</h3><p>서버란 어떤 특화된 임무를 수행하기 위해 설정된 컴퓨터이다. 지금 사용하고 있는 노트북이나 데스크탑도 서버라는 역할을 하면 서버 컴퓨터로 불린다. </p><ul><li>도메인 서버 : 도메인을 관리하는 서버</li><li>이메일 서버 : 이메일을 관리하는 서버</li><li>웹서버 : 웹사이트를 관리하는 서버, 호스팅 서버</li><li>멀티미디어 서버 : 동영상과 음악 파일을 관리하는 서버</li><li>이미지 서버 : 사진을 관리하는 서버</li><li>프린터 서버 : 프린터를 공유할 수 있도록 프린팅 작업을 관리하는 서버</li></ul><br><h3 id="What-is-Express"><a href="#What-is-Express" class="headerlink" title="What is Express"></a>What is Express</h3><p>express는 서버를 만들 수 있는 매우 안정적인 Node.js 프레임워크</p><br><h3 id="Node-js와-NPM-설치하기"><a href="#Node-js와-NPM-설치하기" class="headerlink" title="Node.js와 NPM 설치하기"></a>Node.js와 NPM 설치하기</h3><p>Node.js 설치는 아래의 방법으로 할 수 있다. npm의 경우에는 Node.js를 설치시 함께 설치된다.</p><h4 id="공식사이트에서-패키지를-다운받아-설치하기"><a href="#공식사이트에서-패키지를-다운받아-설치하기" class="headerlink" title="공식사이트에서 패키지를 다운받아 설치하기"></a>공식사이트에서 패키지를 다운받아 설치하기</h4><pre><code>[Node.js](https://nodejs.org/ko/)</code></pre><br><h4 id="Homebrew로-설치하기"><a href="#Homebrew로-설치하기" class="headerlink" title="Homebrew로 설치하기"></a>Homebrew로 설치하기</h4><ul><li>Homebrew 설치하기 : 아래의 명령어를 터미널에서 실행시켜준다. <figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure></li></ul><br><ul><li>Homebrew 사용하기<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 버전확인</span><br><span class="line">$ brew -v</span><br><span class="line"></span><br><span class="line"># 명령어 확인</span><br><span class="line">$brew help</span><br><span class="line"></span><br><span class="line"># 패키지 설치</span><br><span class="line">brew install &lt;패키지이름&gt; </span><br><span class="line"> </span><br><span class="line"># 패키지 삭제</span><br><span class="line">brew remove &lt;패키지이름&gt;</span><br><span class="line"> </span><br><span class="line"># 패키지 정보</span><br><span class="line">brew info &lt;패키지이름&gt;</span><br><span class="line"> </span><br><span class="line"># 설치한 패키지의 최신버전을 설치</span><br><span class="line">brew upgrade &lt;패키지이름&gt;</span><br><span class="line"> </span><br><span class="line">#설치한 패키지 목록</span><br><span class="line">brew list 또는 brew ls</span><br><span class="line"> </span><br><span class="line"># Homebrew 업데이트</span><br><span class="line">brew update</span><br><span class="line"> </span><br><span class="line"># 시스템 문제 확인</span><br><span class="line">brew doctor</span><br><span class="line"> </span><br><span class="line"># 설치된 패키지의 최신 패키지 버전 확인</span><br><span class="line">brew outdated</span><br><span class="line"> </span><br><span class="line"># 패키지 과거버전을 제거</span><br><span class="line">brew cleanup</span><br></pre></td></tr></table></figure></li></ul><br><ul><li>Node.js 설치하기<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 설치하기</span><br><span class="line">brew install node</span><br><span class="line"></span><br><span class="line"># Node 확인</span><br><span class="line">node -v</span><br><span class="line"></span><br><span class="line"># npm 확인</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li></ul><br><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>npm (노드 패키지 매니저/Node Package Manager)은 자바스크립트 프로그래밍 언어를 위한 패키지 관리자이다.<br>자바스크립트 런타임 환경 Node.js의 기본 패키지 관리자이다.</p><ul><li><p>npm init : package.json 생성</p><p>  <code>package.json</code></p><blockquote><p>{   </p><pre><code>    &quot;name&quot; : 해당 모듈의 이름을 정의한다.  (이름에 &apos;node&apos; 나 &apos;js&apos; 가 들어가면 안된다.)        &quot;version&quot; : 해당 모듈의 버전을 정의한다.       &quot;description&quot; : 해당 모듈의 추가적인 설명을 정의한다.       &quot;main&quot; : node에서 해당 package.json 을 탐색할 때 기준이 되는 파일 이름을 정한다.                   기본적으로 index 로 설정이 되며, 생략이 가능한 부분이지만 추후 프로젝트가 복잡해진다면 이 항목을 정의 할 필요가 있다.       &quot;scripts&quot; : package.json 이 있는 폴더에서 추가로 실행 할 스크립트 명령어를 정의한다. 노드 명령이나 쉘 스크립트를 적어주면 된다.                   start, test, build 등을 정의한다.       &quot;author&quot; : 해당 모듈의 제작자를 정의한다.       &quot;liecnse&quot; : 해당 모듈의 라이센스를 정의한다.       &quot;dependencies&quot; : 일반적으로 package.json 에 가장 많은 정보가 입력되는 곳 이며 여기서 모듈의 의존성을 정의 한다.                       해당 모듈이름과 버전을  키 : 값 의형식으로 정의 되어있다.       &quot;devDependencies&quot; : 해당 모듈의 실행에 필요한 또는 개발에 필요한 모듈의 의존성을 입력하는 곳 이다.    }</code></pre></blockquote></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;wetube&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;author&quot;: &quot;alley&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;@babel/core&quot;: &quot;^7.3.3&quot;,</span><br><span class="line">    &quot;@babel/node&quot;: &quot;^7.2.2&quot;,</span><br><span class="line">    &quot;@babel/preset-env&quot;: &quot;^7.3.1&quot;,</span><br><span class="line">    &quot;body-parser&quot;: &quot;^1.18.3&quot;,</span><br><span class="line">    &quot;cookie-parser&quot;: &quot;^1.4.4&quot;,</span><br><span class="line">    &quot;dotenv&quot;: &quot;^7.0.0&quot;,</span><br><span class="line">    &quot;express&quot;: &quot;^4.16.4&quot;,</span><br><span class="line">    &quot;helmet&quot;: &quot;^3.15.1&quot;,</span><br><span class="line">    &quot;mongoose&quot;: &quot;^5.4.19&quot;,</span><br><span class="line">    &quot;morgan&quot;: &quot;^1.9.1&quot;,</span><br><span class="line">    &quot;pug&quot;: &quot;^2.0.3&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;nodemon --exec babel-node init.js --delay 2&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;nodemon&quot;: &quot;^1.18.10&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><ul><li>설치<br>  package.json은 프로젝트에 대한 명세라고 할 수 있다. 해당 프로젝트의 이름, 버전, 사용되는 모듈 등의 스펙이 정해져 있으며, 이 package.json을 통해 모듈 의존성 모듈 관리도 진행할 수 있다. 만약 어떤 오픈 소스를 다운 받을 때 이 package.json만 있다면 해당 오픈 소스가 의존하고 있는 모듈이 어떤 것인지. 그리고 그 모듈들을 아래 명령어로 한 번에 설치할 수 있다.<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li></ul><br><hr><br><h2 id="Homework-1"><a href="#Homework-1" class="headerlink" title="Homework"></a>Homework</h2><h3 id="Quiz"><a href="#Quiz" class="headerlink" title="Quiz"></a>Quiz</h3><ol><li><p>A server is just a computer *   </p><p> 1) <code>True</code><br> 2) False   </p></li></ol><br><ol start="2"><li><p>A server has to be online 24/7 *   </p><p> 1) <code>True</code><br> 2) False   </p></li></ol><br><ol start="3"><li><p>A server can be on a private network *   </p><p> 1) <code>True</code><br> 2) False   </p></li></ol><br><ol start="4"><li><p>A server is a computer without network access *   </p><p> 1) True<br> 2) <code>False</code>   </p></li></ol><br><ol start="5"><li><p>Any computer can be a server *     </p><p> 1) <code>True</code><br> 2) False   </p></li></ol><br><ol start="6"><li><p>What is a framework *   </p><p> 1) <code>Lots of pre-made functions and utilities that somebody else wrote and that we can use</code><br> 2) Is a philosophy that we follow when we are programming   </p></li></ol><br><ol start="7"><li><p>How does a framework help us *   </p><p> 1) It makes us better developers so we can make more money<br> 2) <code>It helps us accomplish complex things in few lines of code</code>   </p></li></ol><br><ol start="8"><li><p>What is the most popular NodeJS Framework *   </p><p> 1) KoaJS<br> 2) SailsJS<br> 3) <code>ExpressJS</code>   </p></li></ol><br><ol start="9"><li><p>ExpressJS is not JS *   </p><p> 1) True<br> 2) <code>False</code>   </p></li></ol><br><ol start="10"><li><p>What does NPM stand for? *   </p><p>1) Node Power Machine<br>2) Node Powder Manager<br>3) Node Package Mama<br>4) <code>Node Package Manager</code>   </p></li></ol><br><ol start="11"><li><p>What is NPM *   </p><p>1) It’s a tool that makes my NodeJS code run faster<br>2) <code>Is a tool to download and share NodeJS packages</code>   </p></li></ol><br><ol start="12"><li><p>ExpressJS is published as an NPM Pacakge *   </p><p>1) <code>True</code><br>2) False   </p></li></ol><br><ol start="13"><li><p>How can I create a NodeJS project *   </p><p>1) <code>Create a package.json</code><br>2) Run ‘node init’   </p></li></ol><br><ol start="14"><li><p>What is “package.json” *   </p><p>1) Is a file where I write the code for my server<br>2) <code>Is a file where I save information about my project and the packages it needs to run</code><br>3) Is a file to save the user’s data   </p></li></ol><br><ol start="15"><li><p>How can I install Express *   </p><p>1) node install express<br>2) npm add express<br>3) <code>npm install express</code>   </p></li></ol><br><ol start="16"><li><p>What is the node_modules folder *   </p><p>1) <code>Is where all the installed packages go</code><br>2) Is where I put the code I want to publish<br>3) Is where I put the code I don’t need anymore   </p></li></ol><br><ol start="17"><li><p>Why I should never share / upload my “node_modules” *   </p><p>1) Because the code there is private<br>2) <code>Because I can just share the package.json</code><br>3) Because I don’t have the upload license   </p></li></ol><br><ol start="18"><li><p>If I delete “node_modules” how can I reinstall my dependencies from my package.json *   </p><p>1) Running: “npm install dependencies”<br>2) <code>Running: &quot;npm install&quot;</code><br>3) Running: “npm reinstall”   </p></li></ol>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/27/log/youtube-challenge/youtube-challenge-day4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS Youtube Challenge - Day3 of 42</title>
      <link>https://alleyful.github.io/2019/09/22/log/youtube-challenge/youtube-challenge-day3/</link>
      <guid>https://alleyful.github.io/2019/09/22/log/youtube-challenge/youtube-challenge-day3/</guid>
      <pubDate>Sun, 22 Sep 2019 11:12:10 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;Today’s quiz is based on videos #2.0 to #2.2&lt;br&gt;  Don’t worry, tomorrow we will start coding :) &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;오늘의 강의: 유튜브 클론코딩 #2.0 to #2.2 &lt;/li&gt;
&lt;li&gt;오늘의 과제: 위의 강의를 시청하신 후, 아래 퀴즈를 풀면 됩니다.  &lt;/li&gt;
&lt;li&gt;제출기간: 익일 오전 6시까지&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/courses/enrolled/435438&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;[노마드 코더] 유튜브 클론 코딩&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#2 ExpressJS&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.0 What is a Server &lt;/li&gt;
&lt;li&gt;2.1 What is Express &lt;/li&gt;
&lt;li&gt;2.2 Installing Express with NPM &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Today’s quiz is based on videos #2.0 to #2.2<br>  Don’t worry, tomorrow we will start coding :) </p></blockquote><ul><li>오늘의 강의: 유튜브 클론코딩 #2.0 to #2.2 </li><li>오늘의 과제: 위의 강의를 시청하신 후, 아래 퀴즈를 풀면 됩니다.  </li><li>제출기간: 익일 오전 6시까지</li></ul><br><p><a href="https://academy.nomadcoders.co/courses/enrolled/435438" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 유튜브 클론 코딩</a></p><p><code>#2 ExpressJS</code></p><ul><li>2.0 What is a Server </li><li>2.1 What is Express </li><li>2.2 Installing Express with NPM </li></ul><br><a id="more"></a><hr><br><h2 id="Lecture-Summery"><a href="#Lecture-Summery" class="headerlink" title="Lecture Summery"></a>Lecture Summery</h2><br><h3 id="What-is-a-Server"><a href="#What-is-a-Server" class="headerlink" title="What is a Server"></a>What is a Server</h3><p>서버란 어떤 특화된 임무를 수행하기 위해 설정된 컴퓨터이다. 지금 사용하고 있는 노트북이나 데스크탑도 서버라는 역할을 하면 서버 컴퓨터로 불린다. </p><ul><li>도메인 서버 : 도메인을 관리하는 서버</li><li>이메일 서버 : 이메일을 관리하는 서버</li><li>웹서버 : 웹사이트를 관리하는 서버, 호스팅 서버</li><li>멀티미디어 서버 : 동영상과 음악 파일을 관리하는 서버</li><li>이미지 서버 : 사진을 관리하는 서버</li><li>프린터 서버 : 프린터를 공유할 수 있도록 프린팅 작업을 관리하는 서버</li></ul><br><h3 id="What-is-Express"><a href="#What-is-Express" class="headerlink" title="What is Express"></a>What is Express</h3><p>express는 서버를 만들 수 있는 매우 안정적인 Node.js 프레임워크</p><br><h3 id="Node-js와-NPM-설치하기"><a href="#Node-js와-NPM-설치하기" class="headerlink" title="Node.js와 NPM 설치하기"></a>Node.js와 NPM 설치하기</h3><p>Node.js 설치는 아래의 방법으로 할 수 있다. npm의 경우에는 Node.js를 설치시 함께 설치된다.</p><h4 id="공식사이트에서-패키지를-다운받아-설치하기"><a href="#공식사이트에서-패키지를-다운받아-설치하기" class="headerlink" title="공식사이트에서 패키지를 다운받아 설치하기"></a>공식사이트에서 패키지를 다운받아 설치하기</h4><pre><code>[Node.js](https://nodejs.org/ko/)</code></pre><br><h4 id="Homebrew로-설치하기"><a href="#Homebrew로-설치하기" class="headerlink" title="Homebrew로 설치하기"></a>Homebrew로 설치하기</h4><ul><li>Homebrew 설치하기 : 아래의 명령어를 터미널에서 실행시켜준다. <figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure></li></ul><br><ul><li>Homebrew 사용하기<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 버전확인</span><br><span class="line">$ brew -v</span><br><span class="line"></span><br><span class="line"># 명령어 확인</span><br><span class="line">$brew help</span><br><span class="line"></span><br><span class="line"># 패키지 설치</span><br><span class="line">brew install &lt;패키지이름&gt; </span><br><span class="line"> </span><br><span class="line"># 패키지 삭제</span><br><span class="line">brew remove &lt;패키지이름&gt;</span><br><span class="line"> </span><br><span class="line"># 패키지 정보</span><br><span class="line">brew info &lt;패키지이름&gt;</span><br><span class="line"> </span><br><span class="line"># 설치한 패키지의 최신버전을 설치</span><br><span class="line">brew upgrade &lt;패키지이름&gt;</span><br><span class="line"> </span><br><span class="line">#설치한 패키지 목록</span><br><span class="line">brew list 또는 brew ls</span><br><span class="line"> </span><br><span class="line"># Homebrew 업데이트</span><br><span class="line">brew update</span><br><span class="line"> </span><br><span class="line"># 시스템 문제 확인</span><br><span class="line">brew doctor</span><br><span class="line"> </span><br><span class="line"># 설치된 패키지의 최신 패키지 버전 확인</span><br><span class="line">brew outdated</span><br><span class="line"> </span><br><span class="line"># 패키지 과거버전을 제거</span><br><span class="line">brew cleanup</span><br></pre></td></tr></table></figure></li></ul><br><ul><li>Node.js 설치하기<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 설치하기</span><br><span class="line">brew install node</span><br><span class="line"></span><br><span class="line"># Node 확인</span><br><span class="line">node -v</span><br><span class="line"></span><br><span class="line"># npm 확인</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li></ul><br><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>npm (노드 패키지 매니저/Node Package Manager)은 자바스크립트 프로그래밍 언어를 위한 패키지 관리자이다.<br>자바스크립트 런타임 환경 Node.js의 기본 패키지 관리자이다.</p><ul><li><p>npm init : package.json 생성</p><p>  <code>package.json</code></p><blockquote><p>{   </p><pre><code>    &quot;name&quot; : 해당 모듈의 이름을 정의한다.  (이름에 &apos;node&apos; 나 &apos;js&apos; 가 들어가면 안된다.)        &quot;version&quot; : 해당 모듈의 버전을 정의한다.       &quot;description&quot; : 해당 모듈의 추가적인 설명을 정의한다.       &quot;main&quot; : node에서 해당 package.json 을 탐색할 때 기준이 되는 파일 이름을 정한다.                   기본적으로 index 로 설정이 되며, 생략이 가능한 부분이지만 추후 프로젝트가 복잡해진다면 이 항목을 정의 할 필요가 있다.       &quot;scripts&quot; : package.json 이 있는 폴더에서 추가로 실행 할 스크립트 명령어를 정의한다. 노드 명령이나 쉘 스크립트를 적어주면 된다.                   start, test, build 등을 정의한다.       &quot;author&quot; : 해당 모듈의 제작자를 정의한다.       &quot;liecnse&quot; : 해당 모듈의 라이센스를 정의한다.       &quot;dependencies&quot; : 일반적으로 package.json 에 가장 많은 정보가 입력되는 곳 이며 여기서 모듈의 의존성을 정의 한다.                       해당 모듈이름과 버전을  키 : 값 의형식으로 정의 되어있다.       &quot;devDependencies&quot; : 해당 모듈의 실행에 필요한 또는 개발에 필요한 모듈의 의존성을 입력하는 곳 이다.    }</code></pre></blockquote></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;wetube&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;author&quot;: &quot;alley&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;@babel/core&quot;: &quot;^7.3.3&quot;,</span><br><span class="line">    &quot;@babel/node&quot;: &quot;^7.2.2&quot;,</span><br><span class="line">    &quot;@babel/preset-env&quot;: &quot;^7.3.1&quot;,</span><br><span class="line">    &quot;body-parser&quot;: &quot;^1.18.3&quot;,</span><br><span class="line">    &quot;cookie-parser&quot;: &quot;^1.4.4&quot;,</span><br><span class="line">    &quot;dotenv&quot;: &quot;^7.0.0&quot;,</span><br><span class="line">    &quot;express&quot;: &quot;^4.16.4&quot;,</span><br><span class="line">    &quot;helmet&quot;: &quot;^3.15.1&quot;,</span><br><span class="line">    &quot;mongoose&quot;: &quot;^5.4.19&quot;,</span><br><span class="line">    &quot;morgan&quot;: &quot;^1.9.1&quot;,</span><br><span class="line">    &quot;pug&quot;: &quot;^2.0.3&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;nodemon --exec babel-node init.js --delay 2&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;nodemon&quot;: &quot;^1.18.10&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><ul><li>설치<br>  package.json은 프로젝트에 대한 명세라고 할 수 있다. 해당 프로젝트의 이름, 버전, 사용되는 모듈 등의 스펙이 정해져 있으며, 이 package.json을 통해 모듈 의존성 모듈 관리도 진행할 수 있다. 만약 어떤 오픈 소스를 다운 받을 때 이 package.json만 있다면 해당 오픈 소스가 의존하고 있는 모듈이 어떤 것인지. 그리고 그 모듈들을 아래 명령어로 한 번에 설치할 수 있다.<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li></ul><br><hr><br><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><h3 id="Quiz"><a href="#Quiz" class="headerlink" title="Quiz"></a>Quiz</h3><ol><li><p>A server is just a computer *    1) <code>True</code><br> 2) False   </p></li><li><p>A server has to be online 24/7 *    1) <code>True</code><br> 2) False   </p></li><li><p>A server can be on a private network *    1) <code>True</code><br> 2) False   </p></li><li><p>A server is a computer without network access *    1) True<br> 2) <code>False</code>   </p></li><li><p>Any computer can be a server *    1) <code>True</code><br> 2) False   </p></li><li><p>What is a framework *    1) <code>Lots of pre-made functions and utilities that somebody else wrote and that we can use</code><br> 2) Is a philosophy that we follow when we are programming   </p></li><li><p>How does a framework help us *    1) It makes us better developers so we can make more money<br> 2) <code>It helps us accomplish complex things in few lines of code</code>   </p></li><li><p>What is the most popular NodeJS Framework *    1) KoaJS<br> 2) SailsJS<br> 3) <code>ExpressJS</code>   </p></li><li><p>ExpressJS is not JS *    1) True<br> 2) <code>False</code>   </p></li><li><p>What does NPM stand for? *   1) Node Power Machine<br>2) Node Powder Manager<br>3) Node Package Mama<br>4) <code>Node Package Manager</code>   </p></li><li><p>What is NPM *   1) It’s a tool that makes my NodeJS code run faster<br>2) <code>Is a tool to download and share NodeJS packages</code>   </p></li><li><p>ExpressJS is published as an NPM Pacakge *   1) <code>True</code><br>2) False   </p></li><li><p>How can I create a NodeJS project *   1) <code>Create a package.json</code><br>2) Run ‘node init’   </p></li><li><p>What is “package.json” *   1) Is a file where I write the code for my server<br>2) <code>Is a file where I save information about my project and the packages it needs to run</code><br>3) Is a file to save the user’s data   </p></li><li><p>How can I install Express *   1) node install express<br>2) npm add express<br>3) <code>npm install express</code>   </p></li><li><p>What is the node_modules folder *   1) <code>Is where all the installed packages go</code><br>2) Is where I put the code I want to publish<br>3) Is where I put the code I don’t need anymore   </p></li><li><p>Why I should never share / upload my “node_modules” *   1) Because the code there is private<br>2) <code>Because I can just share the package.json</code><br>3) Because I don’t have the upload license   </p></li><li><p>If I delete “node_modules” how can I reinstall my dependencies from my package.json *   1) Running: “npm install dependencies”<br>2) <code>Running: &quot;npm install&quot;</code><br>3) Running: “npm reinstall”   </p></li></ol>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/22/log/youtube-challenge/youtube-challenge-day3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS Youtube Challenge - Day2 of 42</title>
      <link>https://alleyful.github.io/2019/09/20/log/youtube-challenge/youtube-challenge-day2/</link>
      <guid>https://alleyful.github.io/2019/09/20/log/youtube-challenge/youtube-challenge-day2/</guid>
      <pubDate>Thu, 19 Sep 2019 15:43:29 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;Today’s quiz is based on videos #1.0 to #1.3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;오늘의 강의: 유튜브 클론코딩 #1.0 to #1.3 (챕터 1. 전체)&lt;/li&gt;
&lt;li&gt;오늘의 과제: 위의 강의를 시청하신 후, 아래 퀴즈를 풀면 됩니다.  &lt;/li&gt;
&lt;li&gt;제출기간: 익일 오전 6시까지&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/courses/enrolled/435438&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;[노마드 코더] 유튜브 클론 코딩&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#1 NodeJS Theory&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.0 What is NodeJS &lt;/li&gt;
&lt;li&gt;1.1 Use Cases for NodeJS &lt;/li&gt;
&lt;li&gt;1.2 Who Uses NodeJS &lt;/li&gt;
&lt;li&gt;1.3 Installing NodeJS &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Today’s quiz is based on videos #1.0 to #1.3</p></blockquote><ul><li>오늘의 강의: 유튜브 클론코딩 #1.0 to #1.3 (챕터 1. 전체)</li><li>오늘의 과제: 위의 강의를 시청하신 후, 아래 퀴즈를 풀면 됩니다.  </li><li>제출기간: 익일 오전 6시까지</li></ul><br><p><a href="https://academy.nomadcoders.co/courses/enrolled/435438" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 유튜브 클론 코딩</a></p><p><code>#1 NodeJS Theory</code></p><ul><li>1.0 What is NodeJS </li><li>1.1 Use Cases for NodeJS </li><li>1.2 Who Uses NodeJS </li><li>1.3 Installing NodeJS </li></ul><br><a id="more"></a><hr><br><h2 id="Lecture-Summery"><a href="#Lecture-Summery" class="headerlink" title="Lecture Summery"></a>Lecture Summery</h2><br><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><blockquote><p>Node.js는 Chrome V8 JavaScript 엔진으로 빌드된 JavaScript 런타임입니다.<br>Node.js는 이벤트 기반, 논 블로킹 I/O 모델을 사용해 가볍고 효율적입니다.<br>Node.js의 패키지 생태계인 npm은 세계에서 가장 큰 오픈 소스 라이브러리 생태계이기도 합니다.</p><p>Node.js 공식사이트</p></blockquote><p>즉, JavaScript를 크롬(Chrome)같은 브라우저에서만 쓰는 것이 아닌 브라우저 밖. 즉, 내 컴퓨터에서 다양한 용도로 확장하기 위해 만들어진 것이 바로 Node.js이다.<br>Node.js를 이용하면 Python과 같이 내 컴퓨터에서 File System를 이용할 수 있고, 서버를 만들 수도 있고 크롤링도 할 수 있다.<br>JavaScript도 Python과 같은 프로그래밍 언어이기 때문이다.   </p><br><h3 id="Node-js의-오해-NodeJS는-서버다"><a href="#Node-js의-오해-NodeJS는-서버다" class="headerlink" title="Node.js의 오해 : NodeJS는 서버다?"></a>Node.js의 오해 : NodeJS는 서버다?</h3><p>Node.js를 통해서 서버도 만들 수 있기 때문에 생긴 오해이다. Node.js 자체는 웹서버가 아니다.</p><br><h3 id="Node-js의-특징"><a href="#Node-js의-특징" class="headerlink" title="Node.js의 특징"></a>Node.js의 특징</h3><ul><li><p>비동기 I/O 처리<br>  Node.js 라이브러리의 모든 API는 비동기식(async)이다, 즉, 멈추지 않는다 (Non-blocking).<br>  Node.js 기반 서버는 API가 실행되었을 때, 데이터를 반환할때까지 기다리지 않고 다음 API 를 실행한다.<br>  그리고 이전에 실행했던 API가 결과값을 반환할 시, Node.js의 이벤트 알림 메커니즘을 통해 결과값을 받아온다.</p></li><li><p>빠른 속도<br>  구글 크롬(Google Chrome)의 V8 자바스크립트 엔진(JavaScript Engine)을 사용하여 빠른 코드 실행을 제공한다.</p></li><li><p>단일 쓰레드와 뛰어난 확장성<br>  Node.js는 이벤트 루프와 함께 단일 쓰레드 모델을 사용한다.<br>  이벤트 메커니즘은 서버가 멈추지않고 반응하도록 해주어 서버의 확장성을 키워준다.<br>  반면, 아파치(Apache)같은 일반적인 웹서버는 요청을 처리하기 위하여 제한된 쓰레드를 생성한다.<br>  Node.js는 쓰레드를 한개만 사용하고 아파치(Apache)같은 웹서버보다 훨씬 많은 요청을 처리할 수 있다.</p></li><li><p>노 버퍼링<br>  Node.js 어플리케이션엔 데이터 버퍼링이 없고, 데이터를 chunk로 출력한다.</p></li><li><p>라이센스<br>  Node.js 는 MIT License가 적용되어있다.</p></li></ul><br><h3 id="Node-js를-사용하기-적합한-곳"><a href="#Node-js를-사용하기-적합한-곳" class="headerlink" title="Node.js를 사용하기 적합한 곳"></a>Node.js를 사용하기 적합한 곳</h3><p>Node.js는 넷플릭스나 우버같은 실시간 처리가 중요한 애플리케이션이나, 많은 양의 데이터 입출력이 있는 곳에서 사용하고 있다.<br>이처럼 다음과 같은 경우에 Node.js를 사용할 경우 좋은 효율성을 발휘할 수 있다. </p><ul><li>알림이나 실시간 대화같이 같이 데이터의 실시간 처리가 필요한 애플리케이션</li><li>사용자의 입력과 출력이 잦은 애플리케이션</li><li>데이터 스트리밍 애플리케이션</li><li>JSON API기반의 애플리케이션</li><li>단일 페이지 기반의 애플리케이션</li></ul><br><h3 id="Node-js를-사용하기-적합하지-않은-곳"><a href="#Node-js를-사용하기-적합하지-않은-곳" class="headerlink" title="Node.js를 사용하기 적합하지 않은 곳"></a>Node.js를 사용하기 적합하지 않은 곳</h3><p>Data Science같이 복잡한 데이터를 처리하기 위해 메모리, 램, CPU 등 하드웨어를 사용해야 하는 곳에는 적합하지 않다.<br>즉, 하드코어한 처리를 위한 목적으로는 적합하지 않다.</p><br><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://nodejs.org/ko/" rel="external nofollow noopener noreferrer" target="_blank">Node.js 공식 홈페이</a></li><li><a href="https://geonlee.tistory.com/92" rel="external nofollow noopener noreferrer" target="_blank">Node.js란 무엇인가</a></li></ul><br><hr><br><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><h3 id="Quiz"><a href="#Quiz" class="headerlink" title="Quiz"></a>Quiz</h3><ol><li><p>What is NodeJS *    </p><p> 1) Javascript inside of the browser<br> 2) <code>Javascript outside of the browser</code>   </p></li></ol><br><ol start="2"><li><p>Where was Javascript designed to be *   </p><p> 1) <code>In the browser</code><br> 2) Outside of the browser   </p></li></ol><br><ol start="3"><li><p>On the frontend there is only one programming language *   </p><p> 1) <code>True</code><br> 2) False   </p></li></ol><br><ol start="4"><li><p>The programming language of the frontend is *   </p><p> 1) CSS<br> 2) React<br> 3) <code>JavaScript</code>   </p></li></ol><br><ol start="5"><li><p>On the backend there is only one programming language *   </p><p> 1) True<br> 2) <code>False</code>   </p></li></ol><br><ol start="6"><li><p>If I don’t like JS I can choose any other language for the frontend *   </p><p> 1) True<br> 2) <code>False</code>   </p></li></ol><br><ol start="7"><li><p>If I don’t like JS I can choose any other language for the backend *   </p><p> 1) <code>True</code><br> 2) False   </p></li></ol><br><ol start="8"><li><p>How can I use Javascript on the backend *   </p><p> 1) With Laravel<br> 2) <code>With NodeJS</code><br> 3) With Django   </p></li></ol><br><ol start="9"><li><p>NodeJS comes with a lot of pre-built functionality out of the box *   </p><p> 1) True<br> 2) <code>False</code>   </p></li></ol><br><ol start="10"><li><p>The difference between NodeJS and Django is *</p><p>1) <code>Django is like a big toy that I have to learn how to use and Node is like a lego set that I can build piece by piece</code><br>2) NodeJS is like a big toy that I have to learn how to use and Django is like a lego set that I can build piece by piece   </p></li></ol><br><ol start="11"><li><p>NodeJS is great for real-time applications *   </p><p>1) <code>True</code><br>2) False   </p></li></ol><br><ol start="12"><li><p>NodeJS is great for CRUD (Create, Read, Update, Delete) applications *   </p><p>1) <code>True</code><br>2) False   </p></li></ol><br><ol start="13"><li><p>NodeJS is great for hardware intensive applications *   </p><p>1) True<br>2) <code>False</code>   </p></li></ol><br><ol start="14"><li><p>Youtube uses NodeJS to compress video *   </p><p>1) True<br>2) <code>False</code>   </p></li></ol><br><ol start="15"><li><p>Uber uses NodeJS to record the GPS locations of the drivers *   </p><p>1) <code>True</code><br>2) False   </p></li></ol>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/20/log/youtube-challenge/youtube-challenge-day2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 최솟값 만들기</title>
      <link>https://alleyful.github.io/2019/09/19/algorithm/programmers/level2-13/</link>
      <guid>https://alleyful.github.io/2019/09/19/algorithm/programmers/level2-13/</guid>
      <pubDate>Wed, 18 Sep 2019 16:29:52 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;길이가 같은 배열 A, B 두개가 있습니다. 각 배열은 자연수로 이루어져 있습니다.&lt;br&gt;배열 A, B에서 각각 한 개의 숫자를 뽑아 두 수를 곱합니다. 이러한 과정을 배열의 길이만큼 반복하며, 두 수를 곱한 값을 누적하여 더합니다.&lt;br&gt;이때 최종적으로 누적된 값이 최소가 되도록 만드는 것이 목표입니다. (단, 각 배열에서 k번째 숫자를 뽑았다면 다음에 k번째 숫자는 다시 뽑을 수 없습니다.)&lt;/p&gt;
&lt;p&gt;예를 들어 A = &lt;code&gt;[1, 4, 2]&lt;/code&gt; , B = &lt;code&gt;[5, 4, 4]&lt;/code&gt; 라면&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A에서 첫번째 숫자인 1, B에서 두번째 숫자인 5를 뽑아 곱하여 더합니다. (누적된 값 : 0 + 5(1x5) = 5)&lt;/li&gt;
&lt;li&gt;A에서 두번째 숫자인 4, B에서 세번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 5 + 16(4x4) = 21)&lt;/li&gt;
&lt;li&gt;A에서 세번째 숫자인 2, B에서 첫번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 21 + 8(2x4) = 29)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;즉, 이 경우가 최소가 되므로 29를 return 합니다.&lt;/p&gt;
&lt;p&gt;배열 A, B가 주어질 때 최종적으로 누적된 최솟값을 return 하는 solution 함수를 완성해 주세요.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>길이가 같은 배열 A, B 두개가 있습니다. 각 배열은 자연수로 이루어져 있습니다.<br>배열 A, B에서 각각 한 개의 숫자를 뽑아 두 수를 곱합니다. 이러한 과정을 배열의 길이만큼 반복하며, 두 수를 곱한 값을 누적하여 더합니다.<br>이때 최종적으로 누적된 값이 최소가 되도록 만드는 것이 목표입니다. (단, 각 배열에서 k번째 숫자를 뽑았다면 다음에 k번째 숫자는 다시 뽑을 수 없습니다.)</p><p>예를 들어 A = <code>[1, 4, 2]</code> , B = <code>[5, 4, 4]</code> 라면</p><ul><li>A에서 첫번째 숫자인 1, B에서 두번째 숫자인 5를 뽑아 곱하여 더합니다. (누적된 값 : 0 + 5(1x5) = 5)</li><li>A에서 두번째 숫자인 4, B에서 세번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 5 + 16(4x4) = 21)</li><li>A에서 세번째 숫자인 2, B에서 첫번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 21 + 8(2x4) = 29)</li></ul><p>즉, 이 경우가 최소가 되므로 29를 return 합니다.</p><p>배열 A, B가 주어질 때 최종적으로 누적된 최솟값을 return 하는 solution 함수를 완성해 주세요.</p><br><a id="more"></a><h2 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h2><ul><li>배열 A, B의 크기 : 1,000 이하의 자연수</li><li>배열 A, B의 원소의 크기 : 1,000 이하의 자연수</li></ul><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">answer</th></tr></thead><tbody><tr><td align="center">[1, 4, 2]</td><td align="center">[5, 4, 4]</td><td align="center">29</td></tr><tr><td align="center">[1,2]</td><td align="center">[3,4]</td><td align="center">10</td></tr></tbody></table><br><h2 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h2><h3 id="입출력-예-1"><a href="#입출력-예-1" class="headerlink" title="입출력 예 #1"></a>입출력 예 #1</h3><p>문제의 예시와 같습니다.</p><h3 id="입출력-예-2"><a href="#입출력-예-2" class="headerlink" title="입출력 예 #2"></a>입출력 예 #2</h3><p>A에서 첫번째 숫자인 1, B에서 두번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 4)<br>다음, A에서 두번째 숫자인 2, B에서 첫번째 숫자인 3을 뽑아 곱하여 더합니다. (누적된 값 : 4 + 6 = 10)<br>이 경우가 최소이므로 10을 return 합니다.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">A,B</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> numbersB = B.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> b - a);</span><br><span class="line">    <span class="hljs-keyword">return</span> A.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b).map(<span class="hljs-function">(<span class="hljs-params">v, i</span>) =&gt;</span> v * numbersB[i]).reduce(<span class="hljs-function">(<span class="hljs-params">target, number</span>) =&gt;</span> target + number, <span class="hljs-number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/19/algorithm/programmers/level2-13/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS Youtube Challenge - Day1 of 42</title>
      <link>https://alleyful.github.io/2019/09/18/log/youtube-challenge/youtube-challenge-day1/</link>
      <guid>https://alleyful.github.io/2019/09/18/log/youtube-challenge/youtube-challenge-day1/</guid>
      <pubDate>Tue, 17 Sep 2019 15:07:12 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;Today’s quiz is based on videos #0.1 to #0.3 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;오늘의 강의: 유튜브 클론코딩 #0.1 - #0.3 (챕터 0. 전체)&lt;/li&gt;
&lt;li&gt;오늘의 과제: 위의 강의를 시청하신 후, 아래 퀴즈를 풀면 됩니다.  &lt;/li&gt;
&lt;li&gt;제출기간: 익일 오전 6시까지&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/courses/enrolled/435438&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;[노마드 코더] 유튜브 클론 코딩&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#0 Introduction&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0.1 What are we building &lt;/li&gt;
&lt;li&gt;0.2 The State of Fullstack &lt;/li&gt;
&lt;li&gt;0.3 Websites vs Webapps &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Today’s quiz is based on videos #0.1 to #0.3 </p></blockquote><ul><li>오늘의 강의: 유튜브 클론코딩 #0.1 - #0.3 (챕터 0. 전체)</li><li>오늘의 과제: 위의 강의를 시청하신 후, 아래 퀴즈를 풀면 됩니다.  </li><li>제출기간: 익일 오전 6시까지</li></ul><br><p><a href="https://academy.nomadcoders.co/courses/enrolled/435438" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 유튜브 클론 코딩</a></p><p><code>#0 Introduction</code></p><ul><li>0.1 What are we building </li><li>0.2 The State of Fullstack </li><li>0.3 Websites vs Webapps </li></ul><br><a id="more"></a><hr><br><h2 id="Lecture-Summery"><a href="#Lecture-Summery" class="headerlink" title="Lecture Summery"></a>Lecture Summery</h2><br><h3 id="Front-Back-and-Full-Stack"><a href="#Front-Back-and-Full-Stack" class="headerlink" title="Front, Back and Full Stack"></a>Front, Back and Full Stack</h3><ul><li>Front-end : 사이트 이용자의 눈에 보이는 부분(HTML/CSS/JAVASCRIPT)을 개발</li><li>Back-end : 사이트 이용자의 눈에 보이지 않는 부분(서버코딩, 서버상에서 DB활용, API제작 등)을 개발</li><li>Full-stack : Front-end와 Back-end를 다 한꺼번에 다 개발</li></ul><br><h4 id="Front-End-Developer"><a href="#Front-End-Developer" class="headerlink" title="Front-End Developer"></a>Front-End Developer</h4><p>프론트엔드는 웹사이트 중 사용자가 직접 상호작용을 하게 되는 부분이다.<br>브라우저의 제어를 받는 HTML, CSS 및 JavaScript의 조합.</p><br><h4 id="Back-End-Developer"><a href="#Back-End-Developer" class="headerlink" title="Back-End Developer"></a>Back-End Developer</h4><p>프론트엔드와 반대로 사용자가 볼 수 없는 즉, 비즈니스 로직 프로그래밍을 하는 개발자들을 뜻한다.<br>프론트엔드에서 전달된 데이터의 포맷이나 데이터베이스 입출력 및 다양한 비즈니스 프로세스를 프로그래밍 코드로 구현하는 역할을 한다.<br>프론트엔드에 대한 이해와 데이터베이스, 웹서버, 네트워킹 등 웹 애플리케이션의 전반적인 인프라에 대한 이해가 필요하다.</p><br><h4 id="Full-Stack-Developer"><a href="#Full-Stack-Developer" class="headerlink" title="Full Stack Developer"></a>Full Stack Developer</h4><p>프론트엔드 개발자는 종종 추가 백엔드 기술을 습득해야하며 그 반대의 경우도 있다.<br>풀스택 개발자라는 호칭은 프론트엔드와 백엔드 모두에서 교차적으로 작업 할 수 있는 역할을 지칭하는 것에서 시작했다.<br>말 그대로 풀패키지(full package)를 제공하는 개발자라는 뜻이다.</p><br><hr><br><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><h3 id="Quiz"><a href="#Quiz" class="headerlink" title="Quiz"></a>Quiz</h3><ol><li><p>What is frontend development *   </p><p> 1) Making the logic and data structures behind websites or applications<br> 2) <code>Making the web interfaces that the user sees and interacts with</code><br> 3) Making native apps for mobile phones   </p> <br></li><li><p>What is backend development *   </p><p> 1) <code>Making the logic and data structures behind websites or applications</code><br> 2) Making the web interfaces that the user sees and interacts with<br> 3) Making native apps for mobile phones   </p> <br></li><li><p>What is the difference between a frontend and a fullstack developer? *   </p><p> 1) Frontend devs work only with servers<br> 2) <code>Frontend devs only build what the users sees</code><br> 3) Frontend devs know how to interact with databases<br> 4) Frontend devs can deploy servers to production   </p> <br></li><li><p>Why is fullstack development so attractive for programmers? *   </p><p> 1) Because it saves money<br> 2) Because it helps when working with teams<br> 3) <code>Because one developer can build a full service by him/her self</code><br> 4) Because a team of developers can work together   </p> <br></li><li><p>What is the most popular language for Fullstack Developers *   </p><p> 1) Scala<br> 2) C#<br> 3) <code>JavaScript</code><br> 4) Java   </p> <br></li><li><p>I can build an iOS &amp; Android App with React Native *   </p><p> 1) <code>Yes</code><br> 2) No   </p> <br></li><li><p>What is ElectronJS *   </p><p> 1) A tool to build Windows Apps with Javascript<br> 2) <code>A tool to build Multi Platform Desktop Apps with Web Languages</code><br> 3) A tool like React Native but for IoT   </p> <br></li><li><p>Websites are different from Webapps because *   </p><p> 1) Websites are interactive and Webapps are not<br> 2) <code>Webapps are interactive and Websites are not</code>   </p> <br></li><li><p>CNN.com is a good example of a Webapp *   </p><p> 1) Yes<br> 2) <code>No</code>   </p> <br></li><li><p>Slack is a good example of a Webapp *   </p><p>1) <code>Yes</code><br>2) No   </p></li></ol>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/18/log/youtube-challenge/youtube-challenge-day1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 최댓값과 최솟값</title>
      <link>https://alleyful.github.io/2019/09/17/algorithm/programmers/level2-12/</link>
      <guid>https://alleyful.github.io/2019/09/17/algorithm/programmers/level2-12/</guid>
      <pubDate>Tue, 17 Sep 2019 14:01:52 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;문자열 s에는 공백으로 구분된 숫자들이 저장되어 있습니다.&lt;br&gt;&lt;code&gt;str에 나타나는 숫자 중 최소값과 최대값을 찾아 이를 (최소값) (최대값)형태의 문자열을 반환하는 함수&lt;/code&gt;, solution을 완성하세요.&lt;br&gt;예를들어 s가 1 2 3 4라면 1 4를 리턴하고, -1 -2 -3 -4라면 -4 -1을 리턴하면 됩니다.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>문자열 s에는 공백으로 구분된 숫자들이 저장되어 있습니다.<br><code>str에 나타나는 숫자 중 최소값과 최대값을 찾아 이를 (최소값) (최대값)형태의 문자열을 반환하는 함수</code>, solution을 완성하세요.<br>예를들어 s가 1 2 3 4라면 1 4를 리턴하고, -1 -2 -3 -4라면 -4 -1을 리턴하면 됩니다.</p><br><a id="more"></a><h2 id="제한-조건"><a href="#제한-조건" class="headerlink" title="제한 조건"></a>제한 조건</h2><p>s에는 둘 이상의 정수가 공백으로 구분되어 있습니다.</p><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="center">s</th><th align="center">return</th></tr></thead><tbody><tr><td align="center">1 2 3 4</td><td align="center">1 4</td></tr><tr><td align="center">-1 -2 -3 -4</td><td align="center">-4 -1</td></tr><tr><td align="center">-1 -1</td><td align="center">-1 -1</td></tr></tbody></table><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">s</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> numbers = s.split(<span class="hljs-string">' '</span>).map(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> +v);</span><br><span class="line">    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">Math</span>.min(...numbers), <span class="hljs-built_in">Math</span>.max(...numbers)].join(<span class="hljs-string">' '</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/17/algorithm/programmers/level2-12/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS Youtube Challenge - 시작하기</title>
      <link>https://alleyful.github.io/2019/09/16/log/youtube-challenge/youtube-challenge-start/</link>
      <guid>https://alleyful.github.io/2019/09/16/log/youtube-challenge/youtube-challenge-start/</guid>
      <pubDate>Mon, 16 Sep 2019 12:06:41 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;code&gt;2019. 9. 16 ~ 2019. 10. 28&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;강의 수강신청만하고 끝까지 완강을 하지 못해서 항상 생각만 하고 있었는데, 이번기회에 꼭 끝까지 완강해 보려고 합니다.&lt;br&gt;이런 기회를 만들어 주셔서 참 감
        
      
      </description>
      
      <content:encoded><![CDATA[<p><code>2019. 9. 16 ~ 2019. 10. 28</code>  </p><p>강의 수강신청만하고 끝까지 완강을 하지 못해서 항상 생각만 하고 있었는데, 이번기회에 꼭 끝까지 완강해 보려고 합니다.<br>이런 기회를 만들어 주셔서 참 감사합니다!! </p><br><h2 id="Clone-Coding-for-WeTube-Challenge"><a href="#Clone-Coding-for-WeTube-Challenge" class="headerlink" title="Clone Coding for WeTube Challenge"></a>Clone Coding for WeTube Challenge</h2><ul><li><a href="https://academy.nomadcoders.co/p/javascript-fullstack-from-zero-to-hero" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 유튜브 클론 코딩 강좌소개</a></li><li><a href="https://polar-sea-27980.herokuapp.com/" rel="external nofollow noopener noreferrer" target="_blank">완성된 모습 보기</a></li></ul><br>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/16/log/youtube-challenge/youtube-challenge-start/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS ReactJS Challenge - Day8</title>
      <link>https://alleyful.github.io/2019/09/15/log/react-challenge/react-challenge-day8/</link>
      <guid>https://alleyful.github.io/2019/09/15/log/react-challenge/react-challenge-day8/</guid>
      <pubDate>Sat, 14 Sep 2019 15:10:51 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;오늘의 강의: #6.8 ~ #6.9&lt;br&gt;  오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.&lt;br&gt;  이번 챌린지는 2일간 진행되는 챌린지 입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/courses/436641/lectures/8467057&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;[노마드 코더] 초보를 위한 React JS&lt;/a&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;6.8 Detail Container part One&lt;/li&gt;
&lt;li&gt;6.9 Detail Container part Two&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>오늘의 강의: #6.8 ~ #6.9<br>  오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.<br>  이번 챌린지는 2일간 진행되는 챌린지 입니다.</p></blockquote><br><p><a href="https://academy.nomadcoders.co/courses/436641/lectures/8467057" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 초보를 위한 React JS</a>   </p><ul><li>6.8 Detail Container part One</li><li>6.9 Detail Container part Two</li></ul><br><a id="more"></a><hr><br><h2 id="Lecture-Summery"><a href="#Lecture-Summery" class="headerlink" title="Lecture Summery"></a>Lecture Summery</h2><h3 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">my-app</span><br><span class="line">└── src</span><br><span class="line">    └── Screen</span><br><span class="line">        └── Coin</span><br><span class="line">            ├── CoinContainer.js   </span><br><span class="line">            ├── CoinPresenter.js   </span><br><span class="line">            └── index.js</span><br></pre></td></tr></table></figure><br><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> CoinContainer <span class="hljs-keyword">from</span> <span class="hljs-string">"./CoinContainer"</span>;</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CoinContainer;</span><br></pre></td></tr></table></figure><br><h3 id="CoinContainer-js"><a href="#CoinContainer-js" class="headerlink" title="CoinContainer.js"></a>CoinContainer.js</h3><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> CoinPresenter <span class="hljs-keyword">from</span> <span class="hljs-string">"./CoinPresenter"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; getCoinDetail &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"../../api"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    loading: <span class="hljs-literal">true</span>,</span><br><span class="line">    coin: <span class="hljs-literal">null</span></span><br><span class="line">  &#125;;</span><br><span class="line">  getCoin = <span class="hljs-keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> &#123;</span><br><span class="line">      match: &#123;</span><br><span class="line">        params: &#123; id &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; = <span class="hljs-keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: coin &#125; = <span class="hljs-keyword">await</span> getCoinDetail(id);</span><br><span class="line">      <span class="hljs-keyword">this</span>.setState(&#123;</span><br><span class="line">        coin</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(e);</span><br><span class="line">    &#125; <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>.setState(&#123; <span class="hljs-attr">loading</span>: <span class="hljs-literal">false</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.getCoin();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">CoinPresenter</span> &#123;<span class="hljs-attr">...this.state</span>&#125; /&gt;</span>;</span></span><br><span class="line"><span class="hljs-xml">  &#125;</span></span><br><span class="line"><span class="hljs-xml">&#125;</span></span><br></pre></td></tr></table></figure><br><h3 id="CoinPresenter-js"><a href="#CoinPresenter-js" class="headerlink" title="CoinPresenter.js"></a>CoinPresenter.js</h3><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">"styled-components"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> PropTypes <span class="hljs-keyword">from</span> <span class="hljs-string">"prop-types"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Route, Link, withRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react-router-dom"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Loader <span class="hljs-keyword">from</span> <span class="hljs-string">"../../Components/Loader"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Markets <span class="hljs-keyword">from</span> <span class="hljs-string">"../Markets"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Exchanges <span class="hljs-keyword">from</span> <span class="hljs-string">"../CoinExchanges"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Title = styled(<span class="hljs-string">"h1"</span>)<span class="hljs-string">``</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Description = styled(<span class="hljs-string">"p"</span>)<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  margin: 30px 0px;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> KeyValueRow = styled(<span class="hljs-string">"div"</span>)<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  margin-bottom: 5px;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Key = styled(<span class="hljs-string">"span"</span>)<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  font-weight: 600;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Value = styled(<span class="hljs-string">"span"</span>)<span class="hljs-string">``</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> InsideMenu = styled(<span class="hljs-string">"div"</span>)<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  margin: 20px 0px;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> List = styled(<span class="hljs-string">"ul"</span>)<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  display: flex;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Item = styled(<span class="hljs-string">"li"</span>)<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  margin-right: 20px;</span></span><br><span class="line"><span class="hljs-string">  text-transform: uppercase;</span></span><br><span class="line"><span class="hljs-string">  font-weight: 600;</span></span><br><span class="line"><span class="hljs-string">  border: 2px solid #1abc9c;</span></span><br><span class="line"><span class="hljs-string">  padding: 5px;</span></span><br><span class="line"><span class="hljs-string">  border-radius: 3px;</span></span><br><span class="line"><span class="hljs-string">  background-color: <span class="hljs-subst">$&#123;props =&gt; (props.active ? <span class="hljs-string">"#1abc9c"</span> : <span class="hljs-string">"transparent"</span>)&#125;</span>;</span></span><br><span class="line"><span class="hljs-string">  color: <span class="hljs-subst">$&#123;props =&gt; (props.active ? <span class="hljs-string">"white"</span> : <span class="hljs-string">"black"</span>)&#125;</span>;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> CoinPresenter = withRouter(<span class="hljs-function">(<span class="hljs-params">&#123; location: &#123; pathname &#125;, loading, coin &#125;</span>) =&gt;</span></span><br><span class="line">  loading ? (</span><br><span class="line">    &lt;Loader /&gt;</span><br><span class="line">  ) : (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Title&gt;</span><br><span class="line">        &#123;coin.name&#125; / &#123;coin.symbol&#125;</span><br><span class="line">      &lt;<span class="hljs-regexp">/Title&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;Description&gt;&#123;coin.description&#125;&lt;/</span>Description&gt;</span><br><span class="line">      &lt;KeyValueRow&gt;</span><br><span class="line">        &lt;Key&gt;Rank:<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Key</span>&gt;</span></span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Value</span>&gt;</span>&#123;coin.rank&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Value</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="hljs-regexp">/KeyValueRow&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;KeyValueRow&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;Key&gt;Open Source:&lt;/</span>Key&gt; <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Value</span>&gt;</span>&#123;coin.open_source ? "Yes" : "No"&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Value</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="hljs-regexp">/KeyValueRow&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;KeyValueRow&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;Key&gt;Proof Type:&lt;/</span>Key&gt; <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Value</span>&gt;</span>&#123;coin.proof_type&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Value</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="hljs-regexp">/KeyValueRow&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;KeyValueRow&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;Key&gt;Structure:&lt;/</span>Key&gt; <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Value</span>&gt;</span>&#123;coin.org_structure&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Value</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="hljs-regexp">/KeyValueRow&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;InsideMenu&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;List&gt;</span></span><br><span class="line"><span class="hljs-regexp">          &lt;Item active=&#123;pathname === `/</span>coins/$&#123;coin.id&#125;/markets<span class="hljs-string">`&#125;&gt;</span></span><br><span class="line"><span class="hljs-string">            &lt;Link to=&#123;`</span>/coins/$&#123;coin.id&#125;/markets<span class="hljs-string">`&#125;&gt;Markets&lt;/Link&gt;</span></span><br><span class="line"><span class="hljs-string">          &lt;/Item&gt;</span></span><br><span class="line"><span class="hljs-string">          &lt;Item active=&#123;pathname === `</span>/coins/$&#123;coin.id&#125;/exchanges<span class="hljs-string">`&#125;&gt;</span></span><br><span class="line"><span class="hljs-string">            &lt;Link to=&#123;`</span>/coins/$&#123;coin.id&#125;/exchanges<span class="hljs-string">`&#125;&gt;Exchanges&lt;/Link&gt;</span></span><br><span class="line"><span class="hljs-string">          &lt;/Item&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;/List&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;/InsideMenu&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;Route path="/coins/:id/markets" component=&#123;Markets&#125; /&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;Route path="/coins/:id/exchanges" component=&#123;Exchanges&#125; /&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;/&gt;</span></span><br><span class="line"><span class="hljs-string">  )</span></span><br><span class="line"><span class="hljs-string">);</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">CoinPresenter.propTypes = &#123;</span></span><br><span class="line"><span class="hljs-string">  loading: PropTypes.bool.isRequired,</span></span><br><span class="line"><span class="hljs-string">  coin: PropTypes.shape(&#123;</span></span><br><span class="line"><span class="hljs-string">    id: PropTypes.string.isRequired,</span></span><br><span class="line"><span class="hljs-string">    name: PropTypes.string.isRequired,</span></span><br><span class="line"><span class="hljs-string">    symbol: PropTypes.string.isRequired,</span></span><br><span class="line"><span class="hljs-string">    description: PropTypes.string.isRequired,</span></span><br><span class="line"><span class="hljs-string">    rank: PropTypes.number.isRequired,</span></span><br><span class="line"><span class="hljs-string">    open_source: PropTypes.bool.isRequired,</span></span><br><span class="line"><span class="hljs-string">    proof_type: PropTypes.string.isRequired,</span></span><br><span class="line"><span class="hljs-string">    org_structure: PropTypes.string.isRequired</span></span><br><span class="line"><span class="hljs-string">  &#125;)</span></span><br><span class="line"><span class="hljs-string">&#125;;</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">export default CoinPresenter;</span></span><br></pre></td></tr></table></figure><br><hr><br><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><p><a href="https://codesandbox.io/s/day-five-solution-xoocs" rel="external nofollow noopener noreferrer" target="_blank">Day8 템플릿</a></p><p><a href="https://youtu.be/A7Zn8o-JL5Q" rel="external nofollow noopener noreferrer" target="_blank"><img src="http://img.youtube.com/vi/A7Zn8o-JL5Q/0.jpg" alt="Video Label"></a></p><br><p>Extend the Coin Explorer to create a detail view of each coin. You have to make the following URLs on your existing app.</p><ol><li>/coins/{coin_id} <code>https://api.coinpaprika.com/v1/coins/{coin_id}</code></li><li>/coins/{coin_id}/exchanges <code>https://api.coinpaprika.com/v1/coins/{coin_id}/exchanges</code></li><li>/coins/{coin_id}/markets <code>https://api.coinpaprika.com/v1/coins/{coin_id}/markets</code></li></ol><p>Documentation: <code>https://api.coinpaprika.com/?ref=public-apis#operation/getCoinById</code></p><ul><li><strong>Coin Markets &amp; Coin Exchanges</strong>: These two <strong>ROUTES</strong> should be inside of the Coin Detail. </li></ul><br><h3 id="Global-Requirements"><a href="#Global-Requirements" class="headerlink" title="Global Requirements:"></a>Global Requirements:</h3><ul><li>Use <strong>Container/Presenter</strong> pattern with <strong>class</strong> components.</li><li><strong>DO NOT</strong> use <strong>Hooks</strong>. I know they are awesome, we will use them later.</li><li><strong>ALL PRESENTERS</strong> should use <strong>PropTypes</strong>.</li><li>Use <strong>PropTypes.shape</strong></li><li>Use <strong>async/await</strong></li><li>All AJAX requests MUST be made with an <strong>AXIOS INSTANCE</strong> (‘axios.create’)</li><li>Containers MUST NEVER call Axios directly, they should call the instance.</li><li>Use a <strong>Loader</strong> Component.</li><li>Coin Markets and Coin Exchanges should be <strong>ROUTES</strong>. </li></ul><br><h3 id="Submit"><a href="#Submit" class="headerlink" title="Submit"></a>Submit</h3><p><code>My Answer</code><br><a href="https://codesandbox.io/s/day-five-solution-2wr12" rel="external nofollow noopener noreferrer" target="_blank">Day8 Answer</a></p><br><p><code>correct</code><br><a href="https://codesandbox.io/s/day-six-solution-6n2q7" rel="external nofollow noopener noreferrer" target="_blank">Day8 Currect</a></p><br><hr><br><h2 id="Day8-9-2일간-진행되는-Challenges"><a href="#Day8-9-2일간-진행되는-Challenges" class="headerlink" title="Day8 ~ 9 (2일간 진행되는 Challenges)"></a>Day8 ~ 9 (2일간 진행되는 Challenges)</h2><ul><li>오늘의 강의<ul><li>6.8 Detail Container part One</li><li>6.9 Detail Container part Two</li></ul></li><li>강의노트: <a href="https://github.com/alleyful/nomflix" rel="external nofollow noopener noreferrer" target="_blank">Day8 Note</a></li><li>오늘의 과제: <a href="https://codesandbox.io/s/day-five-solution-xoocs" rel="external nofollow noopener noreferrer" target="_blank">Day8 Question</a></li><li>제출: <a href="https://codesandbox.io/s/day-five-solution-2wr12" rel="external nofollow noopener noreferrer" target="_blank">Day8 Answer</a></li><li>정답: <a href="https://codesandbox.io/s/day-six-solution-6n2q7" rel="external nofollow noopener noreferrer" target="_blank">Day8 Current</a> </li><li>회고<br>  답을 알고보면 정말 간단히 풀리는 것을 많이 돌아돌아 겨우 풀어낸 것 같다. 아마 깊이 있게 알지 못하고 경험이 부족하기 때문이 아닐까 싶다.<br>  더욱더 많은 노력이 필요할 것 같다는 생각을 다시한번 해본다. react-router에 대해 다시한번 알아볼 수 있는 기회가 되어 더욱 좋은 시간이었다.</li></ul><br>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/15/log/react-challenge/react-challenge-day8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 숫자의 표현</title>
      <link>https://alleyful.github.io/2019/09/15/algorithm/programmers/level2-11/</link>
      <guid>https://alleyful.github.io/2019/09/15/algorithm/programmers/level2-11/</guid>
      <pubDate>Sat, 14 Sep 2019 15:03:19 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;Finn은 요즘 수학공부에 빠져 있습니다. 수학 공부를 하던 Finn은 자연수 n을 연속한 자연수들로 표현 하는 방법이 여러개라는 사실을 알게 되었습니다.&lt;br&gt;예를들어 15는 다음과 같이 4가지로 표현 할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 + 2 + 3 + 4 + 5 = 15&lt;/li&gt;
&lt;li&gt;4 + 5 + 6 = 15&lt;/li&gt;
&lt;li&gt;7 + 8 = 15&lt;/li&gt;
&lt;li&gt;15 = 15&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;자연수 n이 매개변수로 주어질 때, &lt;code&gt;연속된 자연수들로 n을 표현하는 방법의 수를 return하는 solution를 완성&lt;/code&gt;해주세요.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>Finn은 요즘 수학공부에 빠져 있습니다. 수학 공부를 하던 Finn은 자연수 n을 연속한 자연수들로 표현 하는 방법이 여러개라는 사실을 알게 되었습니다.<br>예를들어 15는 다음과 같이 4가지로 표현 할 수 있습니다.</p><ul><li>1 + 2 + 3 + 4 + 5 = 15</li><li>4 + 5 + 6 = 15</li><li>7 + 8 = 15</li><li>15 = 15</li></ul><p>자연수 n이 매개변수로 주어질 때, <code>연속된 자연수들로 n을 표현하는 방법의 수를 return하는 solution를 완성</code>해주세요.</p><br><a id="more"></a><h2 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h2><ul><li>n은 10,000 이하의 자연수 입니다.</li></ul><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="center">n</th><th align="center">result</th></tr></thead><tbody><tr><td align="center">15</td><td align="center">4</td></tr></tbody></table><br><h2 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h2><h3 id="입출력-예-1"><a href="#입출력-예-1" class="headerlink" title="입출력 예#1"></a>입출력 예#1</h3><p>문제의 예시와 같습니다.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>(n).fill().map(<span class="hljs-function">(<span class="hljs-params">v, i</span>) =&gt;</span> i + <span class="hljs-number">1</span>).filter(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> ( !(n % v) &amp;&amp; (v % <span class="hljs-number">2</span>)) ).length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/15/algorithm/programmers/level2-11/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS ReactJS Challenge - Day5</title>
      <link>https://alleyful.github.io/2019/09/13/log/react-challenge/react-challenge-day5/</link>
      <guid>https://alleyful.github.io/2019/09/13/log/react-challenge/react-challenge-day5/</guid>
      <pubDate>Fri, 13 Sep 2019 11:10:29 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;오늘의 강의: #4.1 ~ #6.2&lt;br&gt;오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.&lt;br&gt;이번 챌린지는 2일간 진행되는 챌린지 입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/courses/436641/lectures/8467057&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;[노마드 코더] 초보를 위한 React JS&lt;/a&gt;&lt;br&gt;&lt;code&gt;4 Networking&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4.0 Introduction to The Movie DB API &lt;/li&gt;
&lt;li&gt;4.1 Sexy Networking with Axios Instances &lt;/li&gt;
&lt;li&gt;4.2 API Verbs part One &lt;/li&gt;
&lt;li&gt;4.3 API Verbs part Two     &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;5 Containers&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5.0 Container Presenter Pattern part One &lt;/li&gt;
&lt;li&gt;5.1 Container Presenter Pattern part Two &lt;/li&gt;
&lt;li&gt;5.2 Home Container &lt;/li&gt;
&lt;li&gt;5.3 TV Container &lt;/li&gt;
&lt;li&gt;5.4 Search Container &lt;/li&gt;
&lt;li&gt;5.5 Detail Container part One &lt;/li&gt;
&lt;li&gt;5.6 Detail Container part Two &lt;/li&gt;
&lt;li&gt;5.7 Destructuring assignment with let &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;6 Presenters&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;6.0 Presenter Structure &lt;/li&gt;
&lt;li&gt;6.1 HomePresenter and Section Components &lt;/li&gt;
&lt;li&gt;6.2 TVPresenter and Loader Components &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>오늘의 강의: #4.1 ~ #6.2<br>오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.<br>이번 챌린지는 2일간 진행되는 챌린지 입니다.</p></blockquote><br><p><a href="https://academy.nomadcoders.co/courses/436641/lectures/8467057" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 초보를 위한 React JS</a><br><code>4 Networking</code></p><ul><li>4.0 Introduction to The Movie DB API </li><li>4.1 Sexy Networking with Axios Instances </li><li>4.2 API Verbs part One </li><li>4.3 API Verbs part Two     </li></ul><p><code>5 Containers</code></p><ul><li>5.0 Container Presenter Pattern part One </li><li>5.1 Container Presenter Pattern part Two </li><li>5.2 Home Container </li><li>5.3 TV Container </li><li>5.4 Search Container </li><li>5.5 Detail Container part One </li><li>5.6 Detail Container part Two </li><li>5.7 Destructuring assignment with let </li></ul><p><code>6 Presenters</code></p><ul><li>6.0 Presenter Structure </li><li>6.1 HomePresenter and Section Components </li><li>6.2 TVPresenter and Loader Components </li></ul><br><a id="more"></a><hr><br><h1 id="Lecture-Summery"><a href="#Lecture-Summery" class="headerlink" title="Lecture Summery"></a>Lecture Summery</h1><br><h2 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h2><br><h3 id="Restful-API"><a href="#Restful-API" class="headerlink" title="Restful API"></a>Restful API</h3><ul><li>REST(REpresentational State Transfer) ‘대표적인 상태 전달’ </li><li>REST란, “웹에 존재하는 모든 자원(이미지, 동영상, DB 자원)에 고유한 URI를 부여해 활용”하는 것으로, 자원을 정의하고 자원에 대한 주소를 지정하는 방법론을 의미한다고 한다.</li><li>따라서 Restful API는 REST 특징을 지키면서 API를 제공하는 것을 의미한다</li></ul><br><h4 id="REST-구성"><a href="#REST-구성" class="headerlink" title="REST 구성"></a><strong>REST 구성</strong></h4><ul><li>자원 (Resouce) - URI</li><li>행위 (Verb) - HTTP Method</li><li>표현 (Representations)</li></ul><br><h4 id="REST의-특징"><a href="#REST의-특징" class="headerlink" title="REST의 특징"></a><strong>REST의 특징</strong></h4><p>  1)  Uniform (유니폼 인터페이스)<br>  HTTP 표준에만 따른다면, 안드로이드/IOS 플랫폼이든, 특정 언어나 기술에 종속되지 않고 모든 플랫폼에 사용이 가능하며, URI로 지정한 리소스에 대한 조작이 가능한 아키텍처 스타일을 의미한다.</p><p>  2) Stateless (무상태성)<br>  HTTP는 Stateless Protocol 이므로, REST 역시 무상태성을 갖는다. 즉, HttpSession과 같은 컨텍스트 저장소에 상태정보를 따로 저장하고 관리하지 않고, API 서버는 들어오는 요청만을 단순 처리하면 된다. 세션과 같은 컨텍스트 정보를 신경쓸 필요가 없어 구현이 단순해진다.</p><p>  3) Cacheable (캐시가능)<br>  HTTP 기존의 웹 표준을 그대로 사용하므로, 웹에서 사용하는 기존의 인프라를 그대로 활용 가능하다. HTTP 프로토콜 기반의 로드밸런서(mod_proxy)나, SSL은 물론이고 HTTP가 가진 가장 강력한 특징 중의 하나인 캐싱 기능을 적용할 수 있다. 일반적인 서비스에서 조회 기능이 주로 사용됨을 감안하면, HTTP 리소스들을 웹 캐쉬 서버 등에 캐싱하는 것은 용량이나 성능 면에서 이점이 있다. 캐싱 구현은 HTTP 프로토콜 표준에서 사용하는 Last-Modified 태그나 E-Tag를 이용하면 가능하다.</p><p>  4) Self-descriptiveness (자체 표현 구조)<br>  동사(Method) + 명사(URI) 로 이루어져있어 어떤 메서드에 무슨 행위를 하는지 알 수 있으며, 메시지 포맷 역시 JSON을 이용해서 직관적으로 이해가 가능한 구조로, REST API 메시지만 보고도 이를 쉽게 이해할 수 있다.</p><p>  5) Client - Server 구조<br>  REST 서버는 API 제공, 클라이언트는 사용자 인증이나 컨텍스트(세션, 로그인 정보 등)을 직접 관리하는 구조로 각각의 역할이 확실히 구분되기 때문에 클라이언트와 서버에서 개발해야 할 내용이 명확해지고 서로간 의존성이 줄어들게 된다.</p><p>  6) 계층형 구조<br>  API 서버는 순수 비지니스 로직을 수행하고, 그 앞단에 사용자 인증, 암호화(ssl), 로드밸런싱 등을 하는 계층을 추가하여 구조상의 유연상을 둘 수 있다. 이는 간단하게는 HA Proxy나 Apache의 Reverse Proxy를 통해, 더 나아가서는 API gateway 등을 활용하여 Micro Service Architecture로도 구현이 가능하게 한다.</p><br><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>Axios는 HTTP통신을 하는데 매우 인기있는 Javascript<br>Axios는 브라우저와 Node.js 플랫폼에서 모두 사용할 수 있다.<br>Axios는 Promise를 기반으로하여 async/await문법을 사용하여 XHR요청을 매우 쉽게 할 수 있다.     </p><p>Fetch API보다 Axios가 더 좋은 장점</p><ul><li>구형브라우저를 지원. (Fetch API의 경우는 폴리필 필요)</li><li>요청을 중단시킬 수 있다.</li><li>응답 시간 초과를 설정하는 방법이 있다.</li><li>CSRF 보호 기능이 내장</li><li>JSON 데이터 자동변환</li><li>Node.js에서의 사용</li></ul><br><h3 id="GET-요청"><a href="#GET-요청" class="headerlink" title="GET 요청"></a>GET 요청</h3><p>Axios를 사용하는 편한 방법 중 하나는 async/ await 구문을 사용하는 것이다.</p><p>이 Node.js 예제는 Dog APi를 사용하여 모든 Dog의 breed 목록을 가져와 axios.get()</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">'axios'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> getBreeds = <span class="hljs-keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> axios.get(<span class="hljs-string">'https://dog.ceo/api/breeds/list/all'</span>);</span><br><span class="line">  &#125; <span class="hljs-keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.error(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> countBreeds = <span class="hljs-keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> breeds = <span class="hljs-keyword">await</span> getBreeds();</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">if</span> (breeds.data.message) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`현재 강아지의 수는 <span class="hljs-subst">$&#123;<span class="hljs-built_in">Object</span>.entries(breeds.data.message).length&#125;</span>입니다.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">countBreeds();</span><br></pre></td></tr></table></figure><br><p>만약 async / await 구문을 사용하지 않는다면 Promise 구문을 사용 할 수 있다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">'axios'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> getBreeds = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> axios.get(<span class="hljs-string">'https://dog.ceo/api/breeds/list/all'</span>);</span><br><span class="line">  &#125; <span class="hljs-keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.error(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> countBreeds = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> breeds = getBreeds()</span><br><span class="line">  .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span> (response.data.message) &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`현재 강아지의 수는 <span class="hljs-subst">$&#123;<span class="hljs-built_in">Object</span>.entries(breeds.data.message).length&#125;</span>입니다.`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(error);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">countBreeds();</span><br></pre></td></tr></table></figure><br><h4 id="GET-요청에-매개-변수-추가"><a href="#GET-요청에-매개-변수-추가" class="headerlink" title="GET 요청에 매개 변수 추가"></a><strong>GET 요청에 매개 변수 추가</strong></h4><p>Axios를 사용하여 GET 요청시 간단하게 매개변수를 추가 할 수 있다.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.get(&apos;https://test.com/?foo=bar&apos;);</span><br></pre></td></tr></table></figure><p>또는 params옵션에서 추가하여 사용 할 수 있다.</p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="hljs-string">'https://test.com/'</span>, &#123;</span><br><span class="line">  params: &#123;</span><br><span class="line">    foo: <span class="hljs-string">'bar'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><h3 id="POST-요청"><a href="#POST-요청" class="headerlink" title="POST 요청"></a>POST 요청</h3><p>axios.post처럼 POST 요청은 axios.getGET 요청과 같이 거의 같다.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.post(&apos;https://test.com&apos;);</span><br></pre></td></tr></table></figure><p>POST 역시 매개변수를 추가하는방법은 GET과 같다.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.post(&apos;https://test.com/&apos;, &#123;</span><br><span class="line">  params: &#123;</span><br><span class="line">    foo: &apos;bar&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><br><h2 id="Containers-amp-Presenters"><a href="#Containers-amp-Presenters" class="headerlink" title="Containers &amp; Presenters"></a>Containers &amp; Presenters</h2><br><h3 id="React-디자인-패턴"><a href="#React-디자인-패턴" class="headerlink" title="React 디자인 패턴"></a>React 디자인 패턴</h3><ul><li><p>Container<br>Logic : API Requests, errors etc…</p></li><li><p>Presenter<br>Data comes from props. No logic. Only UI</p></li></ul><br><p>Derectory</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">my-app</span><br><span class="line">└── src</span><br><span class="line">    └── Screen</span><br><span class="line">        ├── PricesContainer.js   </span><br><span class="line">        ├── PricesPresenter.js   </span><br><span class="line">        └── index.js</span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> PricesContainer <span class="hljs-keyword">from</span> <span class="hljs-string">"./PricesContainer"</span>;</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> PricesContainer;</span><br></pre></td></tr></table></figure><p>PricesContainer.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> PricesPresenter <span class="hljs-keyword">from</span> <span class="hljs-string">"./PricesPresenter"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; getPrices &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"../../api"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    loading: <span class="hljs-literal">true</span>,</span><br><span class="line">    prices: []</span><br><span class="line">  &#125;;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.getPrices();</span><br><span class="line">  &#125;</span><br><span class="line">  getPrices = <span class="hljs-keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: prices &#125; = <span class="hljs-keyword">await</span> getPrices();</span><br><span class="line">      <span class="hljs-keyword">this</span>.setState(&#123;</span><br><span class="line">        prices</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(e);</span><br><span class="line">    &#125; <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>.setState(&#123; <span class="hljs-attr">loading</span>: <span class="hljs-literal">false</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">PricesPresenter</span> &#123;<span class="hljs-attr">...this.state</span>&#125; /&gt;</span>;</span></span><br><span class="line"><span class="hljs-xml">  &#125;</span></span><br><span class="line"><span class="hljs-xml">&#125;</span></span><br></pre></td></tr></table></figure><p>PricesPresenter.js</p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> PropTypes <span class="hljs-keyword">from</span> <span class="hljs-string">"prop-types"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Loader <span class="hljs-keyword">from</span> <span class="hljs-string">"../../Components/Loader"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Price <span class="hljs-keyword">from</span> <span class="hljs-string">"../../Components/Price"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> PricesPresenter = <span class="hljs-function">(<span class="hljs-params">&#123; loading, prices &#125;</span>) =&gt;</span></span><br><span class="line">  loading ? (</span><br><span class="line">    &lt;Loader /&gt;</span><br><span class="line">  ) : (</span><br><span class="line">    prices.map(<span class="hljs-function"><span class="hljs-params">price</span> =&gt;</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Price</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;price.id&#125;</span> &#123;<span class="hljs-attr">...price</span>&#125; /&gt;</span>)</span></span><br><span class="line"><span class="hljs-xml">  );</span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml">PricesPresenter.propTypes = &#123;</span></span><br><span class="line"><span class="hljs-xml">  loading: PropTypes.bool.isRequired,</span></span><br><span class="line"><span class="hljs-xml">  prices: PropTypes.arrayOf(</span></span><br><span class="line"><span class="hljs-xml">    PropTypes.shape(&#123;</span></span><br><span class="line"><span class="hljs-xml">      id: PropTypes.string.isRequired,</span></span><br><span class="line"><span class="hljs-xml">      name: PropTypes.string.isRequired,</span></span><br><span class="line"><span class="hljs-xml">      symbol: PropTypes.string.isRequired,</span></span><br><span class="line"><span class="hljs-xml">      quotes: PropTypes.shape(&#123;</span></span><br><span class="line"><span class="hljs-xml">        USD: PropTypes.shape(&#123;</span></span><br><span class="line"><span class="hljs-xml">          price: PropTypes.number.isRequired</span></span><br><span class="line"><span class="hljs-xml">        &#125;).isRequired</span></span><br><span class="line"><span class="hljs-xml">      &#125;).isRequired</span></span><br><span class="line"><span class="hljs-xml">    &#125;).isRequired</span></span><br><span class="line"><span class="hljs-xml">  ).isRequired</span></span><br><span class="line"><span class="hljs-xml">&#125;;</span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml">export default PricesPresenter;</span></span><br></pre></td></tr></table></figure><br><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://medium.com/@sangboaklee/react-proptypes-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0-7a0615da236" rel="external nofollow noopener noreferrer" target="_blank">[React] PropTypes 활용하기</a></li><li><a href="https://github.com/axios/axios" rel="external nofollow noopener noreferrer" target="_blank">axios</a></li><li><a href="https://mangkyu.tistory.com/46" rel="external nofollow noopener noreferrer" target="_blank">[Restful API] Rest API란?</a></li></ul><br><hr><br><h1 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h1><p><a href="https://codesandbox.io/s/day-five-blueprint-ubv3d" rel="external nofollow noopener noreferrer" target="_blank">Day5 템플릿</a></p><p><a href="https://youtu.be/gBCUJuS5-HU" rel="external nofollow noopener noreferrer" target="_blank"><img src="http://img.youtube.com/vi/gBCUJuS5-HU/0.jpg" alt="Video Label"></a></p><br><p>Extend the Coin Explorer to call the following API endpoints on the following pages:</p><p>/(Homepage) <a href="https://api.coinpaprika.com/v1/tickers" rel="external nofollow noopener noreferrer" target="_blank">https://api.coinpaprika.com/v1/tickers</a><br>/exchanges <a href="https://api.coinpaprika.com/v1/exchanges" rel="external nofollow noopener noreferrer" target="_blank">https://api.coinpaprika.com/v1/exchanges</a><br>/coins <a href="https://api.coinpaprika.com/v1/coins" rel="external nofollow noopener noreferrer" target="_blank">https://api.coinpaprika.com/v1/coins</a>   </p><ul><li>Homepage: Show the name of the coin, the symbol and price.</li><li>Exchanges: Show the name of the exchange, description and website link.</li><li>Coins: List the coins and sort them by rank.</li></ul><br><h2 id="Global-Requirements"><a href="#Global-Requirements" class="headerlink" title="Global Requirements:"></a>Global Requirements:</h2><ul><li>Use <strong>Container/Presenter</strong> pattern with class components.   </li><li><strong>DO NOT use Hooks</strong>. I know they are awesome, we will use them later.   </li><li>ALL PRESENTERS should use <strong>PropTypes</strong>.   </li><li>Use <strong>PropTypes.shape</strong>   </li><li>Use <strong>async/await</strong>   </li><li>All AJAX requests MUST be made with an <strong>AXIOS INSTANCE</strong> (‘axios.create’)   </li><li>Containers MUST NEVER call Axios directly, they should call the instance.   </li><li>Use a <strong>Loader</strong> Component.   </li></ul><br><h2 id="Submit"><a href="#Submit" class="headerlink" title="Submit"></a>Submit</h2><p><code>My Answer</code><br><a href="https://codesandbox.io/s/day-five-blueprint-swptw" rel="external nofollow noopener noreferrer" target="_blank">Day5 Answer</a></p><br><p><code>correct</code><br><a href="https://codesandbox.io/s/day-five-solution-xoocs" rel="external nofollow noopener noreferrer" target="_blank">Day5 Currect</a></p><br><hr><br><h1 id="Day5-6-2일간-진행되는-Challenges"><a href="#Day5-6-2일간-진행되는-Challenges" class="headerlink" title="Day5 ~ 6 (2일간 진행되는 Challenges)"></a>Day5 ~ 6 (2일간 진행되는 Challenges)</h1><ul><li><p>오늘의 강의<br>  <code>4 Networking</code></p><ul><li><p>4.0 Introduction to The Movie DB API </p></li><li><p>4.1 Sexy Networking with Axios Instances </p></li><li><p>4.2 API Verbs part One </p></li><li><p>4.3 API Verbs part Two     </p><p><code>5 Containers</code></p></li><li><p>5.0 Container Presenter Pattern part One </p></li><li><p>5.1 Container Presenter Pattern part Two </p></li><li><p>5.2 Home Container </p></li><li><p>5.3 TV Container </p></li><li><p>5.4 Search Container </p></li><li><p>5.5 Detail Container part One </p></li><li><p>5.6 Detail Container part Two </p></li><li><p>5.7 Destructuring assignment with let </p><p><code>6 Presenters</code></p></li><li><p>6.0 Presenter Structure </p></li><li><p>6.1 HomePresenter and Section Components </p></li><li><p>6.2 TVPresenter and Loader Components </p></li></ul></li><li><p>강의노트: <a href="https://github.com/alleyful/nomflix" rel="external nofollow noopener noreferrer" target="_blank">Day5 Note</a></p></li><li><p>오늘의 과제: <a href="https://codesandbox.io/s/day-five-blueprint-ubv3d" rel="external nofollow noopener noreferrer" target="_blank">Day5 Question</a></p></li><li><p>제출: <a href="https://codesandbox.io/s/day-five-blueprint-swptw" rel="external nofollow noopener noreferrer" target="_blank">Day5 Answer</a></p></li><li><p>정답: <a href="https://codesandbox.io/s/day-five-solution-xoocs" rel="external nofollow noopener noreferrer" target="_blank">Day5 Current</a> </p></li></ul><br>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/13/log/react-challenge/react-challenge-day5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 땅따먹기</title>
      <link>https://alleyful.github.io/2019/09/11/algorithm/programmers/level2-10/</link>
      <guid>https://alleyful.github.io/2019/09/11/algorithm/programmers/level2-10/</guid>
      <pubDate>Tue, 10 Sep 2019 15:05:28 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;땅따먹기 게임을 하려고 합니다. 땅따먹기 게임의 땅(land)은 총 N행 4열로 이루어져 있고, 모든 칸에는 점수가 쓰여 있습니다. 1행부터 땅을 밟으며 한 행씩 내려올 때, 각 행의 4칸 중 한 칸만 밟으면서 내려와야 합니다. 단, 땅따먹기 게임에는 한 행씩 내려올 때, 같은 열을 연속해서 밟을 수 없는 특수 규칙이 있습니다.&lt;/p&gt;
&lt;p&gt;예를 들면,&lt;/p&gt;
&lt;p&gt;| 1 | 2 | 3 | 5 |&lt;/p&gt;
&lt;p&gt;| 5 | 6 | 7 | 8 |&lt;/p&gt;
&lt;p&gt;| 4 | 3 | 2 | 1 |&lt;/p&gt;
&lt;p&gt;로 땅이 주어졌다면, 1행에서 네번째 칸 (5)를 밟았으면, 2행의 네번째 칸 (8)은 밟을 수 없습니다.&lt;/p&gt;
&lt;p&gt;마지막 행까지 모두 내려왔을 때, &lt;code&gt;얻을 수 있는 점수의 최대값을 return하는 solution 함수&lt;/code&gt;를 완성해 주세요. &lt;/p&gt;
&lt;p&gt;위 예의 경우, 1행의 네번째 칸 (5), 2행의 세번째 칸 (7), 3행의 첫번째 칸 (4) 땅을 밟아 16점이 최고점이 되므로 16을 return 하면 됩니다.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>땅따먹기 게임을 하려고 합니다. 땅따먹기 게임의 땅(land)은 총 N행 4열로 이루어져 있고, 모든 칸에는 점수가 쓰여 있습니다. 1행부터 땅을 밟으며 한 행씩 내려올 때, 각 행의 4칸 중 한 칸만 밟으면서 내려와야 합니다. 단, 땅따먹기 게임에는 한 행씩 내려올 때, 같은 열을 연속해서 밟을 수 없는 특수 규칙이 있습니다.</p><p>예를 들면,</p><p>| 1 | 2 | 3 | 5 |</p><p>| 5 | 6 | 7 | 8 |</p><p>| 4 | 3 | 2 | 1 |</p><p>로 땅이 주어졌다면, 1행에서 네번째 칸 (5)를 밟았으면, 2행의 네번째 칸 (8)은 밟을 수 없습니다.</p><p>마지막 행까지 모두 내려왔을 때, <code>얻을 수 있는 점수의 최대값을 return하는 solution 함수</code>를 완성해 주세요. </p><p>위 예의 경우, 1행의 네번째 칸 (5), 2행의 세번째 칸 (7), 3행의 첫번째 칸 (4) 땅을 밟아 16점이 최고점이 되므로 16을 return 하면 됩니다.</p><br><a id="more"></a><h2 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h2><p>행의 개수 N : 100,000 이하의 자연수<br>열의 개수는 4개이고, 땅(land)은 2차원 배열로 주어집니다.<br>점수 : 100 이하의 자연수</p><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="center">land</th><th align="center">answer</th></tr></thead><tbody><tr><td align="center">[[1,2,3,5],[5,6,7,8],[4,3,2,1]]</td><td align="center">16</td></tr></tbody></table><br><h2 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h2><h3 id="입출력-예-1"><a href="#입출력-예-1" class="headerlink" title="입출력 예 #1"></a>입출력 예 #1</h3><p>문제의 예시와 같습니다.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">land</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(...land.reduce(<span class="hljs-function">(<span class="hljs-params">target, score</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> [</span><br><span class="line">            score[<span class="hljs-number">0</span>] + <span class="hljs-built_in">Math</span>.max(target[<span class="hljs-number">1</span>], target[<span class="hljs-number">2</span>], target[<span class="hljs-number">3</span>]),  </span><br><span class="line">            score[<span class="hljs-number">1</span>] + <span class="hljs-built_in">Math</span>.max(target[<span class="hljs-number">0</span>], target[<span class="hljs-number">2</span>], target[<span class="hljs-number">3</span>]),</span><br><span class="line">            score[<span class="hljs-number">2</span>] + <span class="hljs-built_in">Math</span>.max(target[<span class="hljs-number">0</span>], target[<span class="hljs-number">1</span>], target[<span class="hljs-number">3</span>]),</span><br><span class="line">            score[<span class="hljs-number">3</span>] + <span class="hljs-built_in">Math</span>.max(target[<span class="hljs-number">0</span>], target[<span class="hljs-number">1</span>], target[<span class="hljs-number">2</span>]),</span><br><span class="line">        ];</span><br><span class="line">    &#125;, [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/11/algorithm/programmers/level2-10/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 다음 큰 숫자</title>
      <link>https://alleyful.github.io/2019/09/10/algorithm/programmers/level2-09/</link>
      <guid>https://alleyful.github.io/2019/09/10/algorithm/programmers/level2-09/</guid>
      <pubDate>Tue, 10 Sep 2019 14:01:28 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;자연수 n이 주어졌을 때, n의 다음 큰 숫자는 다음과 같이 정의 합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;조건 1. n의 다음 큰 숫자는 n보다 큰 자연수 입니다.&lt;/li&gt;
&lt;li&gt;조건 2. n의 다음 큰 숫자와 n은 2진수로 변환했을 때 1의 갯수가 같습니다.&lt;/li&gt;
&lt;li&gt;조건 3. n의 다음 큰 숫자는 조건 1, 2를 만족하는 수 중 가장 작은 수 입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예를 들어서 78(1001110)의 다음 큰 숫자는 83(1010011)입니다.&lt;/p&gt;
&lt;p&gt;자연수 n이 매개변수로 주어질 때, &lt;code&gt;n의 다음 큰 숫자를 return 하는 solution 함수&lt;/code&gt;를 완성해주세요.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>자연수 n이 주어졌을 때, n의 다음 큰 숫자는 다음과 같이 정의 합니다.</p><ul><li>조건 1. n의 다음 큰 숫자는 n보다 큰 자연수 입니다.</li><li>조건 2. n의 다음 큰 숫자와 n은 2진수로 변환했을 때 1의 갯수가 같습니다.</li><li>조건 3. n의 다음 큰 숫자는 조건 1, 2를 만족하는 수 중 가장 작은 수 입니다.</li></ul><p>예를 들어서 78(1001110)의 다음 큰 숫자는 83(1010011)입니다.</p><p>자연수 n이 매개변수로 주어질 때, <code>n의 다음 큰 숫자를 return 하는 solution 함수</code>를 완성해주세요.</p><br><a id="more"></a><h2 id="제한-사항"><a href="#제한-사항" class="headerlink" title="제한 사항"></a>제한 사항</h2><p>n은 1,000,000 이하의 자연수 입니다.</p><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="center">n</th><th align="center">result</th></tr></thead><tbody><tr><td align="center">78</td><td align="center">83</td></tr><tr><td align="center">15</td><td align="center">23</td></tr></tbody></table><br><h2 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h2><h3 id="입출력-예-1"><a href="#입출력-예-1" class="headerlink" title="입출력 예#1"></a>입출력 예#1</h3><p>문제 예시와 같습니다.</p><h3 id="입출력-예-2"><a href="#입출력-예-2" class="headerlink" title="입출력 예#2"></a>입출력 예#2</h3><p>15(1111)의 다음 큰 숫자는 23(10111)입니다.</p><br><hr><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">n,a=n+<span class="hljs-number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> n.toString(<span class="hljs-number">2</span>).match(<span class="hljs-regexp">/1/g</span>).length == a.toString(<span class="hljs-number">2</span>).match(<span class="hljs-regexp">/1/g</span>).length ? a : solution(n,a+<span class="hljs-number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="Sountion-2"><a href="#Sountion-2" class="headerlink" title="Sountion 2"></a>Sountion 2</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> lengthBy1 = n.toString(<span class="hljs-number">2</span>).match(<span class="hljs-regexp">/1/g</span>).length;</span><br><span class="line">    <span class="hljs-keyword">while</span> (n++) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(n.toString(<span class="hljs-number">2</span>).match(<span class="hljs-regexp">/1/g</span>).length === lengthBy1) <span class="hljs-keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/10/algorithm/programmers/level2-09/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
