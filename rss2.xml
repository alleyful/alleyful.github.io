<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ALLEY</title>
    <link>https://alleyful.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>alley&#39;s blog for study</description>
    <pubDate>Tue, 17 Sep 2019 15:09:21 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>NOMADCODERS Youtube Challenge - Day1 of 42</title>
      <link>https://alleyful.github.io/2019/09/18/log/youtube-challenge/youtube-challenge-day1/</link>
      <guid>https://alleyful.github.io/2019/09/18/log/youtube-challenge/youtube-challenge-day1/</guid>
      <pubDate>Tue, 17 Sep 2019 15:07:12 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;Today’s quiz is based on videos #0.1 to #0.3 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;오늘의 강의: 유튜브 클론코딩 #0.1 - #0.3 (챕터 0. 전체)&lt;/li&gt;
&lt;li&gt;오늘의 과제: 위의 강의를 시청하신 후, 아래 퀴즈를 풀면 됩니다.  &lt;/li&gt;
&lt;li&gt;제출기간: 익일 오전 6시까지&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/courses/enrolled/435438&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;[노마드 코더] 유튜브 클론 코딩&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#0 Introduction&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0.1 What are we building &lt;/li&gt;
&lt;li&gt;0.2 The State of Fullstack &lt;/li&gt;
&lt;li&gt;0.3 Websites vs Webapps &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Today’s quiz is based on videos #0.1 to #0.3 </p></blockquote><ul><li>오늘의 강의: 유튜브 클론코딩 #0.1 - #0.3 (챕터 0. 전체)</li><li>오늘의 과제: 위의 강의를 시청하신 후, 아래 퀴즈를 풀면 됩니다.  </li><li>제출기간: 익일 오전 6시까지</li></ul><br><p><a href="https://academy.nomadcoders.co/courses/enrolled/435438" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 유튜브 클론 코딩</a></p><p><code>#0 Introduction</code></p><ul><li>0.1 What are we building </li><li>0.2 The State of Fullstack </li><li>0.3 Websites vs Webapps </li></ul><br><a id="more"></a><hr><br><h2 id="Lecture-Summery"><a href="#Lecture-Summery" class="headerlink" title="Lecture Summery"></a>Lecture Summery</h2><br><h3 id="Front-Back-and-Full-Stack"><a href="#Front-Back-and-Full-Stack" class="headerlink" title="Front, Back and Full Stack"></a>Front, Back and Full Stack</h3><ul><li>Front-end : 사이트 이용자의 눈에 보이는 부분(HTML/CSS/JAVASCRIPT)을 개발</li><li>Back-end : 사이트 이용자의 눈에 보이지 않는 부분(서버코딩, 서버상에서 DB활용, API제작 등)을 개발</li><li>Full-stack : Front-end와 Back-end를 다 한꺼번에 다 개발</li></ul><br><h4 id="Front-End-Developer"><a href="#Front-End-Developer" class="headerlink" title="Front-End Developer"></a>Front-End Developer</h4><p>프론트엔드는 웹사이트 중 사용자가 직접 상호작용을 하게 되는 부분이다.<br>브라우저의 제어를 받는 HTML, CSS 및 JavaScript의 조합.</p><br><h4 id="Back-End-Developer"><a href="#Back-End-Developer" class="headerlink" title="Back-End Developer"></a>Back-End Developer</h4><p>프론트엔드와 반대로 사용자가 볼 수 없는 즉, 비즈니스 로직 프로그래밍을 하는 개발자들을 뜻한다.<br>프론트엔드에서 전달된 데이터의 포맷이나 데이터베이스 입출력 및 다양한 비즈니스 프로세스를 프로그래밍 코드로 구현하는 역할을 한다.<br>프론트엔드에 대한 이해와 데이터베이스, 웹서버, 네트워킹 등 웹 애플리케이션의 전반적인 인프라에 대한 이해가 필요하다.</p><br><h4 id="Full-Stack-Developer"><a href="#Full-Stack-Developer" class="headerlink" title="Full Stack Developer"></a>Full Stack Developer</h4><p>프론트엔드 개발자는 종종 추가 백엔드 기술을 습득해야하며 그 반대의 경우도 있다.<br>풀스택 개발자라는 호칭은 프론트엔드와 백엔드 모두에서 교차적으로 작업 할 수 있는 역할을 지칭하는 것에서 시작했다.<br>말 그대로 풀패키지(full package)를 제공하는 개발자라는 뜻이다.</p><br><hr><br><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><h3 id="Quiz"><a href="#Quiz" class="headerlink" title="Quiz"></a>Quiz</h3><ol><li><p>What is frontend development *   </p><p> 1) Making the logic and data structures behind websites or applications<br> 2) <code>Making the web interfaces that the user sees and interacts with</code><br> 3) Making native apps for mobile phones   </p> <br></li><li><p>What is backend development *   </p><p> 1) <code>Making the logic and data structures behind websites or applications</code><br> 2) Making the web interfaces that the user sees and interacts with<br> 3) Making native apps for mobile phones   </p> <br></li><li><p>What is the difference between a frontend and a fullstack developer? *   </p><p> 1) Frontend devs work only with servers<br> 2) <code>Frontend devs only build what the users sees</code><br> 3) Frontend devs know how to interact with databases<br> 4) Frontend devs can deploy servers to production   </p> <br></li><li><p>Why is fullstack development so attractive for programmers? *   </p><p> 1) Because it saves money<br> 2) Because it helps when working with teams<br> 3) <code>Because one developer can build a full service by him/her self</code><br> 4) Because a team of developers can work together   </p> <br></li><li><p>What is the most popular language for Fullstack Developers *   </p><p> 1) Scala<br> 2) C#<br> 3) <code>JavaScript</code><br> 4) Java   </p> <br></li><li><p>I can build an iOS &amp; Android App with React Native *   </p><p> 1) <code>Yes</code><br> 2) No   </p> <br></li><li><p>What is ElectronJS *   </p><p> 1) A tool to build Windows Apps with Javascript<br> 2) <code>A tool to build Multi Platform Desktop Apps with Web Languages</code><br> 3) A tool like React Native but for IoT   </p> <br></li><li><p>Websites are different from Webapps because *   </p><p> 1) Websites are interactive and Webapps are not<br> 2) <code>Webapps are interactive and Websites are not</code>   </p> <br></li><li><p>CNN.com is a good example of a Webapp *   </p><p> 1) Yes<br> 2) <code>No</code>   </p> <br></li><li><p>Slack is a good example of a Webapp *   </p><p>1) <code>Yes</code><br>2) No   </p></li></ol>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/18/log/youtube-challenge/youtube-challenge-day1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 최댓값과 최솟값</title>
      <link>https://alleyful.github.io/2019/09/17/algorithm/programmers/level2-12/</link>
      <guid>https://alleyful.github.io/2019/09/17/algorithm/programmers/level2-12/</guid>
      <pubDate>Tue, 17 Sep 2019 14:01:52 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;문자열 s에는 공백으로 구분된 숫자들이 저장되어 있습니다.&lt;br&gt;&lt;code&gt;str에 나타나는 숫자 중 최소값과 최대값을 찾아 이를 (최소값) (최대값)형태의 문자열을 반환하는 함수&lt;/code&gt;, solution을 완성하세요.&lt;br&gt;예를들어 s가 1 2 3 4라면 1 4를 리턴하고, -1 -2 -3 -4라면 -4 -1을 리턴하면 됩니다.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>문자열 s에는 공백으로 구분된 숫자들이 저장되어 있습니다.<br><code>str에 나타나는 숫자 중 최소값과 최대값을 찾아 이를 (최소값) (최대값)형태의 문자열을 반환하는 함수</code>, solution을 완성하세요.<br>예를들어 s가 1 2 3 4라면 1 4를 리턴하고, -1 -2 -3 -4라면 -4 -1을 리턴하면 됩니다.</p><br><a id="more"></a><h2 id="제한-조건"><a href="#제한-조건" class="headerlink" title="제한 조건"></a>제한 조건</h2><p>s에는 둘 이상의 정수가 공백으로 구분되어 있습니다.</p><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="center">s</th><th align="center">return</th></tr></thead><tbody><tr><td align="center">1 2 3 4</td><td align="center">1 4</td></tr><tr><td align="center">-1 -2 -3 -4</td><td align="center">-4 -1</td></tr><tr><td align="center">-1 -1</td><td align="center">-1 -1</td></tr></tbody></table><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">s</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> numbers = s.split(<span class="hljs-string">' '</span>).map(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> +v);</span><br><span class="line">    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">Math</span>.min(...numbers), <span class="hljs-built_in">Math</span>.max(...numbers)].join(<span class="hljs-string">' '</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/17/algorithm/programmers/level2-12/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS Youtube Challenge - 시작하기</title>
      <link>https://alleyful.github.io/2019/09/16/log/youtube-challenge/youtube-challenge-start/</link>
      <guid>https://alleyful.github.io/2019/09/16/log/youtube-challenge/youtube-challenge-start/</guid>
      <pubDate>Mon, 16 Sep 2019 12:06:41 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;code&gt;2019. 9. 16 ~ 2019. 10. 28&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;강의 수강신청만하고 끝까지 완강을 하지 못해서 항상 생각만 하고 있었는데, 이번기회에 꼭 끝까지 완강해 보려고 합니다.&lt;br&gt;이런 기회를 만들어 주셔서 참 감
        
      
      </description>
      
      <content:encoded><![CDATA[<p><code>2019. 9. 16 ~ 2019. 10. 28</code>  </p><p>강의 수강신청만하고 끝까지 완강을 하지 못해서 항상 생각만 하고 있었는데, 이번기회에 꼭 끝까지 완강해 보려고 합니다.<br>이런 기회를 만들어 주셔서 참 감사합니다!! </p><br><h2 id="Clone-Coding-for-WeTube-Challenge"><a href="#Clone-Coding-for-WeTube-Challenge" class="headerlink" title="Clone Coding for WeTube Challenge"></a>Clone Coding for WeTube Challenge</h2><ul><li><a href="https://academy.nomadcoders.co/p/javascript-fullstack-from-zero-to-hero" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 유튜브 클론 코딩 강좌소개</a></li><li><a href="https://polar-sea-27980.herokuapp.com/" rel="external nofollow noopener noreferrer" target="_blank">완성된 모습 보기</a></li></ul><br>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/16/log/youtube-challenge/youtube-challenge-start/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS ReactJS Challenge - Day8</title>
      <link>https://alleyful.github.io/2019/09/15/log/react-challenge/react-challenge-day8/</link>
      <guid>https://alleyful.github.io/2019/09/15/log/react-challenge/react-challenge-day8/</guid>
      <pubDate>Sat, 14 Sep 2019 15:10:51 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;오늘의 강의: #6.8 ~ #6.9&lt;br&gt;  오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.&lt;br&gt;  이번 챌린지는 2일간 진행되는 챌린지 입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/courses/436641/lectures/8467057&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;[노마드 코더] 초보를 위한 React JS&lt;/a&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;6.8 Detail Container part One&lt;/li&gt;
&lt;li&gt;6.9 Detail Container part Two&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>오늘의 강의: #6.8 ~ #6.9<br>  오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.<br>  이번 챌린지는 2일간 진행되는 챌린지 입니다.</p></blockquote><br><p><a href="https://academy.nomadcoders.co/courses/436641/lectures/8467057" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 초보를 위한 React JS</a>   </p><ul><li>6.8 Detail Container part One</li><li>6.9 Detail Container part Two</li></ul><br><a id="more"></a><hr><br><h2 id="Lecture-Summery"><a href="#Lecture-Summery" class="headerlink" title="Lecture Summery"></a>Lecture Summery</h2><h3 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">my-app</span><br><span class="line">└── src</span><br><span class="line">    └── Screen</span><br><span class="line">        └── Coin</span><br><span class="line">            ├── CoinContainer.js   </span><br><span class="line">            ├── CoinPresenter.js   </span><br><span class="line">            └── index.js</span><br></pre></td></tr></table></figure><br><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> CoinContainer <span class="hljs-keyword">from</span> <span class="hljs-string">"./CoinContainer"</span>;</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CoinContainer;</span><br></pre></td></tr></table></figure><br><h3 id="CoinContainer-js"><a href="#CoinContainer-js" class="headerlink" title="CoinContainer.js"></a>CoinContainer.js</h3><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> CoinPresenter <span class="hljs-keyword">from</span> <span class="hljs-string">"./CoinPresenter"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; getCoinDetail &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"../../api"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    loading: <span class="hljs-literal">true</span>,</span><br><span class="line">    coin: <span class="hljs-literal">null</span></span><br><span class="line">  &#125;;</span><br><span class="line">  getCoin = <span class="hljs-keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> &#123;</span><br><span class="line">      match: &#123;</span><br><span class="line">        params: &#123; id &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; = <span class="hljs-keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: coin &#125; = <span class="hljs-keyword">await</span> getCoinDetail(id);</span><br><span class="line">      <span class="hljs-keyword">this</span>.setState(&#123;</span><br><span class="line">        coin</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(e);</span><br><span class="line">    &#125; <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>.setState(&#123; <span class="hljs-attr">loading</span>: <span class="hljs-literal">false</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.getCoin();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> &lt;CoinPresenter &#123;...this.state&#125; /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="CoinPresenter-js"><a href="#CoinPresenter-js" class="headerlink" title="CoinPresenter.js"></a>CoinPresenter.js</h3><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">"styled-components"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> PropTypes <span class="hljs-keyword">from</span> <span class="hljs-string">"prop-types"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Route, Link, withRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react-router-dom"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Loader <span class="hljs-keyword">from</span> <span class="hljs-string">"../../Components/Loader"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Markets <span class="hljs-keyword">from</span> <span class="hljs-string">"../Markets"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Exchanges <span class="hljs-keyword">from</span> <span class="hljs-string">"../CoinExchanges"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Title = styled(<span class="hljs-string">"h1"</span>)<span class="hljs-string">``</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Description = styled(<span class="hljs-string">"p"</span>)<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  margin: 30px 0px;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> KeyValueRow = styled(<span class="hljs-string">"div"</span>)<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  margin-bottom: 5px;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Key = styled(<span class="hljs-string">"span"</span>)<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  font-weight: 600;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Value = styled(<span class="hljs-string">"span"</span>)<span class="hljs-string">``</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> InsideMenu = styled(<span class="hljs-string">"div"</span>)<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  margin: 20px 0px;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> List = styled(<span class="hljs-string">"ul"</span>)<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  display: flex;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Item = styled(<span class="hljs-string">"li"</span>)<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  margin-right: 20px;</span></span><br><span class="line"><span class="hljs-string">  text-transform: uppercase;</span></span><br><span class="line"><span class="hljs-string">  font-weight: 600;</span></span><br><span class="line"><span class="hljs-string">  border: 2px solid #1abc9c;</span></span><br><span class="line"><span class="hljs-string">  padding: 5px;</span></span><br><span class="line"><span class="hljs-string">  border-radius: 3px;</span></span><br><span class="line"><span class="hljs-string">  background-color: <span class="hljs-subst">$&#123;props =&gt; (props.active ? <span class="hljs-string">"#1abc9c"</span> : <span class="hljs-string">"transparent"</span>)&#125;</span>;</span></span><br><span class="line"><span class="hljs-string">  color: <span class="hljs-subst">$&#123;props =&gt; (props.active ? <span class="hljs-string">"white"</span> : <span class="hljs-string">"black"</span>)&#125;</span>;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> CoinPresenter = withRouter(<span class="hljs-function">(<span class="hljs-params">&#123; location: &#123; pathname &#125;, loading, coin &#125;</span>) =&gt;</span></span><br><span class="line">  loading ? (</span><br><span class="line">    &lt;Loader /&gt;</span><br><span class="line">  ) : (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Title&gt;</span><br><span class="line">        &#123;coin.name&#125; / &#123;coin.symbol&#125;</span><br><span class="line">      &lt;<span class="hljs-regexp">/Title&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;Description&gt;&#123;coin.description&#125;&lt;/</span>Description&gt;</span><br><span class="line">      &lt;KeyValueRow&gt;</span><br><span class="line">        &lt;Key&gt;Rank:&lt;/Key&gt; &lt;Value&gt;&#123;coin.rank&#125;&lt;/Value&gt;</span><br><span class="line">      &lt;<span class="hljs-regexp">/KeyValueRow&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;KeyValueRow&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;Key&gt;Open Source:&lt;/</span>Key&gt; &lt;Value&gt;&#123;coin.open_source ? "Yes" : "No"&#125;&lt;/Value&gt;</span><br><span class="line">      &lt;<span class="hljs-regexp">/KeyValueRow&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;KeyValueRow&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;Key&gt;Proof Type:&lt;/</span>Key&gt; &lt;Value&gt;&#123;coin.proof_type&#125;&lt;/Value&gt;</span><br><span class="line">      &lt;<span class="hljs-regexp">/KeyValueRow&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;KeyValueRow&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;Key&gt;Structure:&lt;/</span>Key&gt; &lt;Value&gt;&#123;coin.org_structure&#125;&lt;/Value&gt;</span><br><span class="line">      &lt;<span class="hljs-regexp">/KeyValueRow&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;InsideMenu&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;List&gt;</span></span><br><span class="line"><span class="hljs-regexp">          &lt;Item active=&#123;pathname === `/</span>coins/$&#123;coin.id&#125;/markets<span class="hljs-string">`&#125;&gt;</span></span><br><span class="line"><span class="hljs-string">            &lt;Link to=&#123;`</span>/coins/$&#123;coin.id&#125;/markets<span class="hljs-string">`&#125;&gt;Markets&lt;/Link&gt;</span></span><br><span class="line"><span class="hljs-string">          &lt;/Item&gt;</span></span><br><span class="line"><span class="hljs-string">          &lt;Item active=&#123;pathname === `</span>/coins/$&#123;coin.id&#125;/exchanges<span class="hljs-string">`&#125;&gt;</span></span><br><span class="line"><span class="hljs-string">            &lt;Link to=&#123;`</span>/coins/$&#123;coin.id&#125;/exchanges<span class="hljs-string">`&#125;&gt;Exchanges&lt;/Link&gt;</span></span><br><span class="line"><span class="hljs-string">          &lt;/Item&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;/List&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;/InsideMenu&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;Route path="/coins/:id/markets" component=&#123;Markets&#125; /&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;Route path="/coins/:id/exchanges" component=&#123;Exchanges&#125; /&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;/&gt;</span></span><br><span class="line"><span class="hljs-string">  )</span></span><br><span class="line"><span class="hljs-string">);</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">CoinPresenter.propTypes = &#123;</span></span><br><span class="line"><span class="hljs-string">  loading: PropTypes.bool.isRequired,</span></span><br><span class="line"><span class="hljs-string">  coin: PropTypes.shape(&#123;</span></span><br><span class="line"><span class="hljs-string">    id: PropTypes.string.isRequired,</span></span><br><span class="line"><span class="hljs-string">    name: PropTypes.string.isRequired,</span></span><br><span class="line"><span class="hljs-string">    symbol: PropTypes.string.isRequired,</span></span><br><span class="line"><span class="hljs-string">    description: PropTypes.string.isRequired,</span></span><br><span class="line"><span class="hljs-string">    rank: PropTypes.number.isRequired,</span></span><br><span class="line"><span class="hljs-string">    open_source: PropTypes.bool.isRequired,</span></span><br><span class="line"><span class="hljs-string">    proof_type: PropTypes.string.isRequired,</span></span><br><span class="line"><span class="hljs-string">    org_structure: PropTypes.string.isRequired</span></span><br><span class="line"><span class="hljs-string">  &#125;)</span></span><br><span class="line"><span class="hljs-string">&#125;;</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">export default CoinPresenter;</span></span><br></pre></td></tr></table></figure><br><hr><br><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><p><a href="https://codesandbox.io/s/day-five-solution-xoocs" rel="external nofollow noopener noreferrer" target="_blank">Day8 템플릿</a></p><p><a href="https://youtu.be/A7Zn8o-JL5Q" rel="external nofollow noopener noreferrer" target="_blank"><img src="http://img.youtube.com/vi/A7Zn8o-JL5Q/0.jpg" alt="Video Label"></a></p><br><p>Extend the Coin Explorer to create a detail view of each coin. You have to make the following URLs on your existing app.</p><ol><li>/coins/{coin_id} <code>https://api.coinpaprika.com/v1/coins/{coin_id}</code></li><li>/coins/{coin_id}/exchanges <code>https://api.coinpaprika.com/v1/coins/{coin_id}/exchanges</code></li><li>/coins/{coin_id}/markets <code>https://api.coinpaprika.com/v1/coins/{coin_id}/markets</code></li></ol><p>Documentation: <code>https://api.coinpaprika.com/?ref=public-apis#operation/getCoinById</code></p><ul><li><strong>Coin Markets &amp; Coin Exchanges</strong>: These two <strong>ROUTES</strong> should be inside of the Coin Detail. </li></ul><br><h3 id="Global-Requirements"><a href="#Global-Requirements" class="headerlink" title="Global Requirements:"></a>Global Requirements:</h3><ul><li>Use <strong>Container/Presenter</strong> pattern with <strong>class</strong> components.</li><li><strong>DO NOT</strong> use <strong>Hooks</strong>. I know they are awesome, we will use them later.</li><li><strong>ALL PRESENTERS</strong> should use <strong>PropTypes</strong>.</li><li>Use <strong>PropTypes.shape</strong></li><li>Use <strong>async/await</strong></li><li>All AJAX requests MUST be made with an <strong>AXIOS INSTANCE</strong> (‘axios.create’)</li><li>Containers MUST NEVER call Axios directly, they should call the instance.</li><li>Use a <strong>Loader</strong> Component.</li><li>Coin Markets and Coin Exchanges should be <strong>ROUTES</strong>. </li></ul><br><h3 id="Submit"><a href="#Submit" class="headerlink" title="Submit"></a>Submit</h3><p><code>My Answer</code><br><a href="https://codesandbox.io/s/day-five-solution-2wr12" rel="external nofollow noopener noreferrer" target="_blank">Day8 Answer</a></p><br><p><code>correct</code><br><a href="https://codesandbox.io/s/day-six-solution-6n2q7" rel="external nofollow noopener noreferrer" target="_blank">Day8 Currect</a></p><br><hr><br><h2 id="Day8-9-2일간-진행되는-Challenges"><a href="#Day8-9-2일간-진행되는-Challenges" class="headerlink" title="Day8 ~ 9 (2일간 진행되는 Challenges)"></a>Day8 ~ 9 (2일간 진행되는 Challenges)</h2><ul><li>오늘의 강의<ul><li>6.8 Detail Container part One</li><li>6.9 Detail Container part Two</li></ul></li><li>강의노트: <a href="https://github.com/alleyful/nomflix" rel="external nofollow noopener noreferrer" target="_blank">Day8 Note</a></li><li>오늘의 과제: <a href="https://codesandbox.io/s/day-five-solution-xoocs" rel="external nofollow noopener noreferrer" target="_blank">Day8 Question</a></li><li>제출: <a href="https://codesandbox.io/s/day-five-solution-2wr12" rel="external nofollow noopener noreferrer" target="_blank">Day8 Answer</a></li><li>정답: <a href="https://codesandbox.io/s/day-six-solution-6n2q7" rel="external nofollow noopener noreferrer" target="_blank">Day8 Current</a> </li><li>회고<br>  답을 알고보면 정말 간단히 풀리는 것을 많이 돌아돌아 겨우 풀어낸 것 같다. 아마 깊이 있게 알지 못하고 경험이 부족하기 때문이 아닐까 싶다.<br>  더욱더 많은 노력이 필요할 것 같다는 생각을 다시한번 해본다. react-router에 대해 다시한번 알아볼 수 있는 기회가 되어 더욱 좋은 시간이었다.</li></ul><br>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/15/log/react-challenge/react-challenge-day8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 숫자의 표현</title>
      <link>https://alleyful.github.io/2019/09/15/algorithm/programmers/level2-11/</link>
      <guid>https://alleyful.github.io/2019/09/15/algorithm/programmers/level2-11/</guid>
      <pubDate>Sat, 14 Sep 2019 15:03:19 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;Finn은 요즘 수학공부에 빠져 있습니다. 수학 공부를 하던 Finn은 자연수 n을 연속한 자연수들로 표현 하는 방법이 여러개라는 사실을 알게 되었습니다.&lt;br&gt;예를들어 15는 다음과 같이 4가지로 표현 할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 + 2 + 3 + 4 + 5 = 15&lt;/li&gt;
&lt;li&gt;4 + 5 + 6 = 15&lt;/li&gt;
&lt;li&gt;7 + 8 = 15&lt;/li&gt;
&lt;li&gt;15 = 15&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;자연수 n이 매개변수로 주어질 때, &lt;code&gt;연속된 자연수들로 n을 표현하는 방법의 수를 return하는 solution를 완성&lt;/code&gt;해주세요.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>Finn은 요즘 수학공부에 빠져 있습니다. 수학 공부를 하던 Finn은 자연수 n을 연속한 자연수들로 표현 하는 방법이 여러개라는 사실을 알게 되었습니다.<br>예를들어 15는 다음과 같이 4가지로 표현 할 수 있습니다.</p><ul><li>1 + 2 + 3 + 4 + 5 = 15</li><li>4 + 5 + 6 = 15</li><li>7 + 8 = 15</li><li>15 = 15</li></ul><p>자연수 n이 매개변수로 주어질 때, <code>연속된 자연수들로 n을 표현하는 방법의 수를 return하는 solution를 완성</code>해주세요.</p><br><a id="more"></a><h2 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h2><ul><li>n은 10,000 이하의 자연수 입니다.</li></ul><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="center">n</th><th align="center">result</th></tr></thead><tbody><tr><td align="center">15</td><td align="center">4</td></tr></tbody></table><br><h2 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h2><h3 id="입출력-예-1"><a href="#입출력-예-1" class="headerlink" title="입출력 예#1"></a>입출력 예#1</h3><p>문제의 예시와 같습니다.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>(n).fill().map(<span class="hljs-function">(<span class="hljs-params">v, i</span>) =&gt;</span> i + <span class="hljs-number">1</span>).filter(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> ( !(n % v) &amp;&amp; (v % <span class="hljs-number">2</span>)) ).length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/15/algorithm/programmers/level2-11/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS ReactJS Challenge - Day5</title>
      <link>https://alleyful.github.io/2019/09/13/log/react-challenge/react-challenge-day5/</link>
      <guid>https://alleyful.github.io/2019/09/13/log/react-challenge/react-challenge-day5/</guid>
      <pubDate>Fri, 13 Sep 2019 11:10:29 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;오늘의 강의: #4.1 ~ #6.2&lt;br&gt;오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.&lt;br&gt;이번 챌린지는 2일간 진행되는 챌린지 입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/courses/436641/lectures/8467057&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;[노마드 코더] 초보를 위한 React JS&lt;/a&gt;&lt;br&gt;&lt;code&gt;4 Networking&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4.0 Introduction to The Movie DB API &lt;/li&gt;
&lt;li&gt;4.1 Sexy Networking with Axios Instances &lt;/li&gt;
&lt;li&gt;4.2 API Verbs part One &lt;/li&gt;
&lt;li&gt;4.3 API Verbs part Two     &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;5 Containers&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5.0 Container Presenter Pattern part One &lt;/li&gt;
&lt;li&gt;5.1 Container Presenter Pattern part Two &lt;/li&gt;
&lt;li&gt;5.2 Home Container &lt;/li&gt;
&lt;li&gt;5.3 TV Container &lt;/li&gt;
&lt;li&gt;5.4 Search Container &lt;/li&gt;
&lt;li&gt;5.5 Detail Container part One &lt;/li&gt;
&lt;li&gt;5.6 Detail Container part Two &lt;/li&gt;
&lt;li&gt;5.7 Destructuring assignment with let &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;6 Presenters&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;6.0 Presenter Structure &lt;/li&gt;
&lt;li&gt;6.1 HomePresenter and Section Components &lt;/li&gt;
&lt;li&gt;6.2 TVPresenter and Loader Components &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>오늘의 강의: #4.1 ~ #6.2<br>오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.<br>이번 챌린지는 2일간 진행되는 챌린지 입니다.</p></blockquote><br><p><a href="https://academy.nomadcoders.co/courses/436641/lectures/8467057" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 초보를 위한 React JS</a><br><code>4 Networking</code></p><ul><li>4.0 Introduction to The Movie DB API </li><li>4.1 Sexy Networking with Axios Instances </li><li>4.2 API Verbs part One </li><li>4.3 API Verbs part Two     </li></ul><p><code>5 Containers</code></p><ul><li>5.0 Container Presenter Pattern part One </li><li>5.1 Container Presenter Pattern part Two </li><li>5.2 Home Container </li><li>5.3 TV Container </li><li>5.4 Search Container </li><li>5.5 Detail Container part One </li><li>5.6 Detail Container part Two </li><li>5.7 Destructuring assignment with let </li></ul><p><code>6 Presenters</code></p><ul><li>6.0 Presenter Structure </li><li>6.1 HomePresenter and Section Components </li><li>6.2 TVPresenter and Loader Components </li></ul><br><a id="more"></a><hr><br><h1 id="Lecture-Summery"><a href="#Lecture-Summery" class="headerlink" title="Lecture Summery"></a>Lecture Summery</h1><br><h2 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h2><br><h3 id="Restful-API"><a href="#Restful-API" class="headerlink" title="Restful API"></a>Restful API</h3><ul><li>REST(REpresentational State Transfer) ‘대표적인 상태 전달’ </li><li>REST란, “웹에 존재하는 모든 자원(이미지, 동영상, DB 자원)에 고유한 URI를 부여해 활용”하는 것으로, 자원을 정의하고 자원에 대한 주소를 지정하는 방법론을 의미한다고 한다.</li><li>따라서 Restful API는 REST 특징을 지키면서 API를 제공하는 것을 의미한다</li></ul><br><h4 id="REST-구성"><a href="#REST-구성" class="headerlink" title="REST 구성"></a><strong>REST 구성</strong></h4><ul><li>자원 (Resouce) - URI</li><li>행위 (Verb) - HTTP Method</li><li>표현 (Representations)</li></ul><br><h4 id="REST의-특징"><a href="#REST의-특징" class="headerlink" title="REST의 특징"></a><strong>REST의 특징</strong></h4><p>  1)  Uniform (유니폼 인터페이스)<br>  HTTP 표준에만 따른다면, 안드로이드/IOS 플랫폼이든, 특정 언어나 기술에 종속되지 않고 모든 플랫폼에 사용이 가능하며, URI로 지정한 리소스에 대한 조작이 가능한 아키텍처 스타일을 의미한다.</p><p>  2) Stateless (무상태성)<br>  HTTP는 Stateless Protocol 이므로, REST 역시 무상태성을 갖는다. 즉, HttpSession과 같은 컨텍스트 저장소에 상태정보를 따로 저장하고 관리하지 않고, API 서버는 들어오는 요청만을 단순 처리하면 된다. 세션과 같은 컨텍스트 정보를 신경쓸 필요가 없어 구현이 단순해진다.</p><p>  3) Cacheable (캐시가능)<br>  HTTP 기존의 웹 표준을 그대로 사용하므로, 웹에서 사용하는 기존의 인프라를 그대로 활용 가능하다. HTTP 프로토콜 기반의 로드밸런서(mod_proxy)나, SSL은 물론이고 HTTP가 가진 가장 강력한 특징 중의 하나인 캐싱 기능을 적용할 수 있다. 일반적인 서비스에서 조회 기능이 주로 사용됨을 감안하면, HTTP 리소스들을 웹 캐쉬 서버 등에 캐싱하는 것은 용량이나 성능 면에서 이점이 있다. 캐싱 구현은 HTTP 프로토콜 표준에서 사용하는 Last-Modified 태그나 E-Tag를 이용하면 가능하다.</p><p>  4) Self-descriptiveness (자체 표현 구조)<br>  동사(Method) + 명사(URI) 로 이루어져있어 어떤 메서드에 무슨 행위를 하는지 알 수 있으며, 메시지 포맷 역시 JSON을 이용해서 직관적으로 이해가 가능한 구조로, REST API 메시지만 보고도 이를 쉽게 이해할 수 있다.</p><p>  5) Client - Server 구조<br>  REST 서버는 API 제공, 클라이언트는 사용자 인증이나 컨텍스트(세션, 로그인 정보 등)을 직접 관리하는 구조로 각각의 역할이 확실히 구분되기 때문에 클라이언트와 서버에서 개발해야 할 내용이 명확해지고 서로간 의존성이 줄어들게 된다.</p><p>  6) 계층형 구조<br>  API 서버는 순수 비지니스 로직을 수행하고, 그 앞단에 사용자 인증, 암호화(ssl), 로드밸런싱 등을 하는 계층을 추가하여 구조상의 유연상을 둘 수 있다. 이는 간단하게는 HA Proxy나 Apache의 Reverse Proxy를 통해, 더 나아가서는 API gateway 등을 활용하여 Micro Service Architecture로도 구현이 가능하게 한다.</p><br><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>Axios는 HTTP통신을 하는데 매우 인기있는 Javascript<br>Axios는 브라우저와 Node.js 플랫폼에서 모두 사용할 수 있다.<br>Axios는 Promise를 기반으로하여 async/await문법을 사용하여 XHR요청을 매우 쉽게 할 수 있다.     </p><p>Fetch API보다 Axios가 더 좋은 장점</p><ul><li>구형브라우저를 지원. (Fetch API의 경우는 폴리필 필요)</li><li>요청을 중단시킬 수 있다.</li><li>응답 시간 초과를 설정하는 방법이 있다.</li><li>CSRF 보호 기능이 내장</li><li>JSON 데이터 자동변환</li><li>Node.js에서의 사용</li></ul><br><h3 id="GET-요청"><a href="#GET-요청" class="headerlink" title="GET 요청"></a>GET 요청</h3><p>Axios를 사용하는 편한 방법 중 하나는 async/ await 구문을 사용하는 것이다.</p><p>이 Node.js 예제는 Dog APi를 사용하여 모든 Dog의 breed 목록을 가져와 axios.get()</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">'axios'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> getBreeds = <span class="hljs-keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> axios.get(<span class="hljs-string">'https://dog.ceo/api/breeds/list/all'</span>);</span><br><span class="line">  &#125; <span class="hljs-keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.error(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> countBreeds = <span class="hljs-keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> breeds = <span class="hljs-keyword">await</span> getBreeds();</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">if</span> (breeds.data.message) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`현재 강아지의 수는 <span class="hljs-subst">$&#123;<span class="hljs-built_in">Object</span>.entries(breeds.data.message).length&#125;</span>입니다.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">countBreeds();</span><br></pre></td></tr></table></figure><br><p>만약 async / await 구문을 사용하지 않는다면 Promise 구문을 사용 할 수 있다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">'axios'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> getBreeds = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> axios.get(<span class="hljs-string">'https://dog.ceo/api/breeds/list/all'</span>);</span><br><span class="line">  &#125; <span class="hljs-keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.error(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> countBreeds = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> breeds = getBreeds()</span><br><span class="line">  .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span> (response.data.message) &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`현재 강아지의 수는 <span class="hljs-subst">$&#123;<span class="hljs-built_in">Object</span>.entries(breeds.data.message).length&#125;</span>입니다.`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(error);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">countBreeds();</span><br></pre></td></tr></table></figure><br><h4 id="GET-요청에-매개-변수-추가"><a href="#GET-요청에-매개-변수-추가" class="headerlink" title="GET 요청에 매개 변수 추가"></a><strong>GET 요청에 매개 변수 추가</strong></h4><p>Axios를 사용하여 GET 요청시 간단하게 매개변수를 추가 할 수 있다.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.get(&apos;https://test.com/?foo=bar&apos;);</span><br></pre></td></tr></table></figure><p>또는 params옵션에서 추가하여 사용 할 수 있다.</p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="hljs-string">'https://test.com/'</span>, &#123;</span><br><span class="line">  params: &#123;</span><br><span class="line">    foo: <span class="hljs-string">'bar'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><h3 id="POST-요청"><a href="#POST-요청" class="headerlink" title="POST 요청"></a>POST 요청</h3><p>axios.post처럼 POST 요청은 axios.getGET 요청과 같이 거의 같다.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.post(&apos;https://test.com&apos;);</span><br></pre></td></tr></table></figure><p>POST 역시 매개변수를 추가하는방법은 GET과 같다.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.post(&apos;https://test.com/&apos;, &#123;</span><br><span class="line">  params: &#123;</span><br><span class="line">    foo: &apos;bar&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><br><h2 id="Containers-amp-Presenters"><a href="#Containers-amp-Presenters" class="headerlink" title="Containers &amp; Presenters"></a>Containers &amp; Presenters</h2><br><h3 id="React-디자인-패턴"><a href="#React-디자인-패턴" class="headerlink" title="React 디자인 패턴"></a>React 디자인 패턴</h3><ul><li><p>Container<br>Logic : API Requests, errors etc…</p></li><li><p>Presenter<br>Data comes from props. No logic. Only UI</p></li></ul><br><p>Derectory</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">my-app</span><br><span class="line">└── src</span><br><span class="line">    └── Screen</span><br><span class="line">        ├── PricesContainer.js   </span><br><span class="line">        ├── PricesPresenter.js   </span><br><span class="line">        └── index.js</span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> PricesContainer <span class="hljs-keyword">from</span> <span class="hljs-string">"./PricesContainer"</span>;</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> PricesContainer;</span><br></pre></td></tr></table></figure><p>PricesContainer.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> PricesPresenter <span class="hljs-keyword">from</span> <span class="hljs-string">"./PricesPresenter"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; getPrices &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"../../api"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    loading: <span class="hljs-literal">true</span>,</span><br><span class="line">    prices: []</span><br><span class="line">  &#125;;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.getPrices();</span><br><span class="line">  &#125;</span><br><span class="line">  getPrices = <span class="hljs-keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: prices &#125; = <span class="hljs-keyword">await</span> getPrices();</span><br><span class="line">      <span class="hljs-keyword">this</span>.setState(&#123;</span><br><span class="line">        prices</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(e);</span><br><span class="line">    &#125; <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>.setState(&#123; <span class="hljs-attr">loading</span>: <span class="hljs-literal">false</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> &lt;PricesPresenter &#123;...this.state&#125; /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PricesPresenter.js</p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> PropTypes <span class="hljs-keyword">from</span> <span class="hljs-string">"prop-types"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Loader <span class="hljs-keyword">from</span> <span class="hljs-string">"../../Components/Loader"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Price <span class="hljs-keyword">from</span> <span class="hljs-string">"../../Components/Price"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> PricesPresenter = <span class="hljs-function">(<span class="hljs-params">&#123; loading, prices &#125;</span>) =&gt;</span></span><br><span class="line">  loading ? (</span><br><span class="line">    &lt;Loader /&gt;</span><br><span class="line">  ) : (</span><br><span class="line">    prices.map(<span class="hljs-function"><span class="hljs-params">price</span> =&gt;</span> &lt;Price key=&#123;price.id&#125; &#123;...price&#125; /&gt;)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">PricesPresenter.propTypes = &#123;</span><br><span class="line">  loading: PropTypes.bool.isRequired,</span><br><span class="line">  prices: PropTypes.arrayOf(</span><br><span class="line">    PropTypes.shape(&#123;</span><br><span class="line">      id: PropTypes.string.isRequired,</span><br><span class="line">      name: PropTypes.string.isRequired,</span><br><span class="line">      symbol: PropTypes.string.isRequired,</span><br><span class="line">      quotes: PropTypes.shape(&#123;</span><br><span class="line">        USD: PropTypes.shape(&#123;</span><br><span class="line">          price: PropTypes.number.isRequired</span><br><span class="line">        &#125;).isRequired</span><br><span class="line">      &#125;).isRequired</span><br><span class="line">    &#125;).isRequired</span><br><span class="line">  ).isRequired</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default PricesPresenter;</span><br></pre></td></tr></table></figure><br><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://medium.com/@sangboaklee/react-proptypes-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0-7a0615da236" rel="external nofollow noopener noreferrer" target="_blank">[React] PropTypes 활용하기</a></li><li><a href="https://github.com/axios/axios" rel="external nofollow noopener noreferrer" target="_blank">axios</a></li><li><a href="https://mangkyu.tistory.com/46" rel="external nofollow noopener noreferrer" target="_blank">[Restful API] Rest API란?</a></li></ul><br><hr><br><h1 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h1><p><a href="https://codesandbox.io/s/day-five-blueprint-ubv3d" rel="external nofollow noopener noreferrer" target="_blank">Day5 템플릿</a></p><p><a href="https://youtu.be/gBCUJuS5-HU" rel="external nofollow noopener noreferrer" target="_blank"><img src="http://img.youtube.com/vi/gBCUJuS5-HU/0.jpg" alt="Video Label"></a></p><br><p>Extend the Coin Explorer to call the following API endpoints on the following pages:</p><p>/(Homepage) <a href="https://api.coinpaprika.com/v1/tickers" rel="external nofollow noopener noreferrer" target="_blank">https://api.coinpaprika.com/v1/tickers</a><br>/exchanges <a href="https://api.coinpaprika.com/v1/exchanges" rel="external nofollow noopener noreferrer" target="_blank">https://api.coinpaprika.com/v1/exchanges</a><br>/coins <a href="https://api.coinpaprika.com/v1/coins" rel="external nofollow noopener noreferrer" target="_blank">https://api.coinpaprika.com/v1/coins</a>   </p><ul><li>Homepage: Show the name of the coin, the symbol and price.</li><li>Exchanges: Show the name of the exchange, description and website link.</li><li>Coins: List the coins and sort them by rank.</li></ul><br><h2 id="Global-Requirements"><a href="#Global-Requirements" class="headerlink" title="Global Requirements:"></a>Global Requirements:</h2><ul><li>Use <strong>Container/Presenter</strong> pattern with class components.   </li><li><strong>DO NOT use Hooks</strong>. I know they are awesome, we will use them later.   </li><li>ALL PRESENTERS should use <strong>PropTypes</strong>.   </li><li>Use <strong>PropTypes.shape</strong>   </li><li>Use <strong>async/await</strong>   </li><li>All AJAX requests MUST be made with an <strong>AXIOS INSTANCE</strong> (‘axios.create’)   </li><li>Containers MUST NEVER call Axios directly, they should call the instance.   </li><li>Use a <strong>Loader</strong> Component.   </li></ul><br><h2 id="Submit"><a href="#Submit" class="headerlink" title="Submit"></a>Submit</h2><p><code>My Answer</code><br><a href="https://codesandbox.io/s/day-five-blueprint-swptw" rel="external nofollow noopener noreferrer" target="_blank">Day5 Answer</a></p><br><p><code>correct</code><br><a href="https://codesandbox.io/s/day-five-solution-xoocs" rel="external nofollow noopener noreferrer" target="_blank">Day5 Currect</a></p><br><hr><br><h1 id="Day5-6-2일간-진행되는-Challenges"><a href="#Day5-6-2일간-진행되는-Challenges" class="headerlink" title="Day5 ~ 6 (2일간 진행되는 Challenges)"></a>Day5 ~ 6 (2일간 진행되는 Challenges)</h1><ul><li><p>오늘의 강의<br>  <code>4 Networking</code></p><ul><li><p>4.0 Introduction to The Movie DB API </p></li><li><p>4.1 Sexy Networking with Axios Instances </p></li><li><p>4.2 API Verbs part One </p></li><li><p>4.3 API Verbs part Two     </p><p><code>5 Containers</code></p></li><li><p>5.0 Container Presenter Pattern part One </p></li><li><p>5.1 Container Presenter Pattern part Two </p></li><li><p>5.2 Home Container </p></li><li><p>5.3 TV Container </p></li><li><p>5.4 Search Container </p></li><li><p>5.5 Detail Container part One </p></li><li><p>5.6 Detail Container part Two </p></li><li><p>5.7 Destructuring assignment with let </p><p><code>6 Presenters</code></p></li><li><p>6.0 Presenter Structure </p></li><li><p>6.1 HomePresenter and Section Components </p></li><li><p>6.2 TVPresenter and Loader Components </p></li></ul></li><li><p>강의노트: <a href="https://github.com/alleyful/nomflix" rel="external nofollow noopener noreferrer" target="_blank">Day5 Note</a></p></li><li><p>오늘의 과제: <a href="https://codesandbox.io/s/day-five-blueprint-ubv3d" rel="external nofollow noopener noreferrer" target="_blank">Day5 Question</a></p></li><li><p>제출: <a href="https://codesandbox.io/s/day-five-blueprint-swptw" rel="external nofollow noopener noreferrer" target="_blank">Day5 Answer</a></p></li><li><p>정답: <a href="https://codesandbox.io/s/day-five-solution-xoocs" rel="external nofollow noopener noreferrer" target="_blank">Day5 Current</a> </p></li></ul><br>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/13/log/react-challenge/react-challenge-day5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 땅따먹기</title>
      <link>https://alleyful.github.io/2019/09/11/algorithm/programmers/level2-10/</link>
      <guid>https://alleyful.github.io/2019/09/11/algorithm/programmers/level2-10/</guid>
      <pubDate>Tue, 10 Sep 2019 15:05:28 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;땅따먹기 게임을 하려고 합니다. 땅따먹기 게임의 땅(land)은 총 N행 4열로 이루어져 있고, 모든 칸에는 점수가 쓰여 있습니다. 1행부터 땅을 밟으며 한 행씩 내려올 때, 각 행의 4칸 중 한 칸만 밟으면서 내려와야 합니다. 단, 땅따먹기 게임에는 한 행씩 내려올 때, 같은 열을 연속해서 밟을 수 없는 특수 규칙이 있습니다.&lt;/p&gt;
&lt;p&gt;예를 들면,&lt;/p&gt;
&lt;p&gt;| 1 | 2 | 3 | 5 |&lt;/p&gt;
&lt;p&gt;| 5 | 6 | 7 | 8 |&lt;/p&gt;
&lt;p&gt;| 4 | 3 | 2 | 1 |&lt;/p&gt;
&lt;p&gt;로 땅이 주어졌다면, 1행에서 네번째 칸 (5)를 밟았으면, 2행의 네번째 칸 (8)은 밟을 수 없습니다.&lt;/p&gt;
&lt;p&gt;마지막 행까지 모두 내려왔을 때, &lt;code&gt;얻을 수 있는 점수의 최대값을 return하는 solution 함수&lt;/code&gt;를 완성해 주세요. &lt;/p&gt;
&lt;p&gt;위 예의 경우, 1행의 네번째 칸 (5), 2행의 세번째 칸 (7), 3행의 첫번째 칸 (4) 땅을 밟아 16점이 최고점이 되므로 16을 return 하면 됩니다.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>땅따먹기 게임을 하려고 합니다. 땅따먹기 게임의 땅(land)은 총 N행 4열로 이루어져 있고, 모든 칸에는 점수가 쓰여 있습니다. 1행부터 땅을 밟으며 한 행씩 내려올 때, 각 행의 4칸 중 한 칸만 밟으면서 내려와야 합니다. 단, 땅따먹기 게임에는 한 행씩 내려올 때, 같은 열을 연속해서 밟을 수 없는 특수 규칙이 있습니다.</p><p>예를 들면,</p><p>| 1 | 2 | 3 | 5 |</p><p>| 5 | 6 | 7 | 8 |</p><p>| 4 | 3 | 2 | 1 |</p><p>로 땅이 주어졌다면, 1행에서 네번째 칸 (5)를 밟았으면, 2행의 네번째 칸 (8)은 밟을 수 없습니다.</p><p>마지막 행까지 모두 내려왔을 때, <code>얻을 수 있는 점수의 최대값을 return하는 solution 함수</code>를 완성해 주세요. </p><p>위 예의 경우, 1행의 네번째 칸 (5), 2행의 세번째 칸 (7), 3행의 첫번째 칸 (4) 땅을 밟아 16점이 최고점이 되므로 16을 return 하면 됩니다.</p><br><a id="more"></a><h2 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h2><p>행의 개수 N : 100,000 이하의 자연수<br>열의 개수는 4개이고, 땅(land)은 2차원 배열로 주어집니다.<br>점수 : 100 이하의 자연수</p><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="center">land</th><th align="center">answer</th></tr></thead><tbody><tr><td align="center">[[1,2,3,5],[5,6,7,8],[4,3,2,1]]</td><td align="center">16</td></tr></tbody></table><br><h2 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h2><h3 id="입출력-예-1"><a href="#입출력-예-1" class="headerlink" title="입출력 예 #1"></a>입출력 예 #1</h3><p>문제의 예시와 같습니다.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">land</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(...land.reduce(<span class="hljs-function">(<span class="hljs-params">target, score</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> [</span><br><span class="line">            score[<span class="hljs-number">0</span>] + <span class="hljs-built_in">Math</span>.max(target[<span class="hljs-number">1</span>], target[<span class="hljs-number">2</span>], target[<span class="hljs-number">3</span>]),  </span><br><span class="line">            score[<span class="hljs-number">1</span>] + <span class="hljs-built_in">Math</span>.max(target[<span class="hljs-number">0</span>], target[<span class="hljs-number">2</span>], target[<span class="hljs-number">3</span>]),</span><br><span class="line">            score[<span class="hljs-number">2</span>] + <span class="hljs-built_in">Math</span>.max(target[<span class="hljs-number">0</span>], target[<span class="hljs-number">1</span>], target[<span class="hljs-number">3</span>]),</span><br><span class="line">            score[<span class="hljs-number">3</span>] + <span class="hljs-built_in">Math</span>.max(target[<span class="hljs-number">0</span>], target[<span class="hljs-number">1</span>], target[<span class="hljs-number">2</span>]),</span><br><span class="line">        ];</span><br><span class="line">    &#125;, [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/11/algorithm/programmers/level2-10/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 다음 큰 숫자</title>
      <link>https://alleyful.github.io/2019/09/10/algorithm/programmers/level2-09/</link>
      <guid>https://alleyful.github.io/2019/09/10/algorithm/programmers/level2-09/</guid>
      <pubDate>Tue, 10 Sep 2019 14:01:28 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;자연수 n이 주어졌을 때, n의 다음 큰 숫자는 다음과 같이 정의 합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;조건 1. n의 다음 큰 숫자는 n보다 큰 자연수 입니다.&lt;/li&gt;
&lt;li&gt;조건 2. n의 다음 큰 숫자와 n은 2진수로 변환했을 때 1의 갯수가 같습니다.&lt;/li&gt;
&lt;li&gt;조건 3. n의 다음 큰 숫자는 조건 1, 2를 만족하는 수 중 가장 작은 수 입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예를 들어서 78(1001110)의 다음 큰 숫자는 83(1010011)입니다.&lt;/p&gt;
&lt;p&gt;자연수 n이 매개변수로 주어질 때, &lt;code&gt;n의 다음 큰 숫자를 return 하는 solution 함수&lt;/code&gt;를 완성해주세요.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>자연수 n이 주어졌을 때, n의 다음 큰 숫자는 다음과 같이 정의 합니다.</p><ul><li>조건 1. n의 다음 큰 숫자는 n보다 큰 자연수 입니다.</li><li>조건 2. n의 다음 큰 숫자와 n은 2진수로 변환했을 때 1의 갯수가 같습니다.</li><li>조건 3. n의 다음 큰 숫자는 조건 1, 2를 만족하는 수 중 가장 작은 수 입니다.</li></ul><p>예를 들어서 78(1001110)의 다음 큰 숫자는 83(1010011)입니다.</p><p>자연수 n이 매개변수로 주어질 때, <code>n의 다음 큰 숫자를 return 하는 solution 함수</code>를 완성해주세요.</p><br><a id="more"></a><h2 id="제한-사항"><a href="#제한-사항" class="headerlink" title="제한 사항"></a>제한 사항</h2><p>n은 1,000,000 이하의 자연수 입니다.</p><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="center">n</th><th align="center">result</th></tr></thead><tbody><tr><td align="center">78</td><td align="center">83</td></tr><tr><td align="center">15</td><td align="center">23</td></tr></tbody></table><br><h2 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h2><h3 id="입출력-예-1"><a href="#입출력-예-1" class="headerlink" title="입출력 예#1"></a>입출력 예#1</h3><p>문제 예시와 같습니다.</p><h3 id="입출력-예-2"><a href="#입출력-예-2" class="headerlink" title="입출력 예#2"></a>입출력 예#2</h3><p>15(1111)의 다음 큰 숫자는 23(10111)입니다.</p><br><hr><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">n,a=n+<span class="hljs-number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> n.toString(<span class="hljs-number">2</span>).match(<span class="hljs-regexp">/1/g</span>).length == a.toString(<span class="hljs-number">2</span>).match(<span class="hljs-regexp">/1/g</span>).length ? a : solution(n,a+<span class="hljs-number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="Sountion-2"><a href="#Sountion-2" class="headerlink" title="Sountion 2"></a>Sountion 2</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> lengthBy1 = n.toString(<span class="hljs-number">2</span>).match(<span class="hljs-regexp">/1/g</span>).length;</span><br><span class="line">    <span class="hljs-keyword">while</span> (n++) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(n.toString(<span class="hljs-number">2</span>).match(<span class="hljs-regexp">/1/g</span>).length === lengthBy1) <span class="hljs-keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/10/algorithm/programmers/level2-09/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Lisa&#39;s Workbook</title>
      <link>https://alleyful.github.io/2019/09/04/algorithm/hackerrank/56_LisasWorkbook/</link>
      <guid>https://alleyful.github.io/2019/09/04/algorithm/hackerrank/56_LisasWorkbook/</guid>
      <pubDate>Wed, 04 Sep 2019 05:09:09 GMT</pubDate>
      <description>
      
        &lt;p&gt;Lisa just got a new math workbook. A workbook contains exercise problems, grouped into chapters. Lisa believes a problem to be special if its index (within a chapter) is the same as the page number where it’s located. The format of Lisa’s book is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are &lt;strong&gt;n&lt;/strong&gt; chapters in Lisa’s workbook, numbered from &lt;strong&gt;1&lt;/strong&gt; to &lt;strong&gt;n&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;img src=&quot;https://latex.codecogs.com/gif.latex?i%5E%7Bth%7D&quot; alt&gt; chapter has &lt;strong&gt;arr[i]&lt;/strong&gt; problems, numbered from &lt;strong&gt;1&lt;/strong&gt; to &lt;strong&gt;arr[i]&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Each page can hold up to &lt;strong&gt;k&lt;/strong&gt; problems. Only a chapter’s last page of exercises may contain fewer than &lt;strong&gt;k&lt;/strong&gt; problems.&lt;/li&gt;
&lt;li&gt;Each new chapter starts on a new page, so a page will never contain problems from more than one chapter.&lt;/li&gt;
&lt;li&gt;The page number indexing starts at &lt;strong&gt;1&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Lisa just got a new math workbook. A workbook contains exercise problems, grouped into chapters. Lisa believes a problem to be special if its index (within a chapter) is the same as the page number where it’s located. The format of Lisa’s book is as follows:</p><ul><li>There are <strong>n</strong> chapters in Lisa’s workbook, numbered from <strong>1</strong> to <strong>n</strong>.</li><li>The <img src="https://latex.codecogs.com/gif.latex?i%5E%7Bth%7D" alt> chapter has <strong>arr[i]</strong> problems, numbered from <strong>1</strong> to <strong>arr[i]</strong>.</li><li>Each page can hold up to <strong>k</strong> problems. Only a chapter’s last page of exercises may contain fewer than <strong>k</strong> problems.</li><li>Each new chapter starts on a new page, so a page will never contain problems from more than one chapter.</li><li>The page number indexing starts at <strong>1</strong>.</li></ul><a id="more"></a><p>Given the details for Lisa’s workbook, can you count its number of special problems?</p><p>For example, Lisa’s workbook contains <strong>arr[1] = 4</strong> problems for chapter <strong>1</strong>, and <strong>arr[2] = 2</strong> problems for chapter <strong>2</strong>. Each page can hold <strong>k = 3</strong> problems. The first page will hold <strong>3</strong> problems for chapter <strong>1</strong>. Problem <strong>1</strong> is on page <strong>1</strong>, so it is special. Page <strong>2</strong> contains only Chapter <strong>1</strong>, Problem <strong>4</strong>, so no special problem is on page <strong>2</strong>. Chapter <strong>2</strong> problems start on page <strong>3</strong> and there are <strong>2</strong> problems. Since there is no problem <strong>3</strong> on page <strong>3</strong>, there is no special problem on that page either. There is <strong>1</strong> special problem in her workbook.</p><p><strong>Note</strong>: See the diagram in the Explanation section for more details.</p><br><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the workbook function in the editor below. It should return an integer that represents the number of special problems in the workbook.</p><p>workbook has the following parameter(s):</p><ul><li>n: an integer that denotes the number of chapters</li><li>k: an integer that denotes the maximum number of problems per page</li><li>arr: an array of integers that denote the number of problems in each chapter</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains two integers <strong>n</strong> and <strong>k</strong>, the number of chapters and the maximum number of problems per page.<br>The second line contains <strong>n</strong> space-separated integers <strong>arr[i]</strong> where <strong>arr[i]</strong> denotes the number of problems in the <img src="https://latex.codecogs.com/gif.latex?i%5E%7Bth%7D" alt> chapter.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n,&space;k,&space;arr%5Bi%5D%5Cleq&space;100" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the number of special problems in Lisa’s workbook.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 3  </span><br><span class="line">4 2 6 1 10</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>The diagram below depicts Lisa’s workbook with <strong>n = 5</strong> chapters and a maximum of <strong>k = 3</strong> problems per page. Special problems are outlined in red, and page numbers are in yellow squares.</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/lisa-workbook.png" alt></p><p>There are <strong>4</strong> special problems and thus we print the number <strong>4</strong> on a new line.</p><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">workbook</span>(<span class="hljs-params">n, k, arr</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> currentPage = <span class="hljs-number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">return</span> arr.reduce(<span class="hljs-function">(<span class="hljs-params">target, pages, index</span>) =&gt;</span> &#123; </span><br><span class="line">    target += <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(pages).fill(index).reduce(<span class="hljs-function">(<span class="hljs-params">innerTarget, page, innerIndex</span>) =&gt;</span> &#123; </span><br><span class="line">      ((innerIndex) % k === <span class="hljs-number">0</span>) &amp;&amp; currentPage++;</span><br><span class="line">      ((innerIndex + <span class="hljs-number">1</span>) === currentPage) &amp;&amp; ++innerTarget;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(innerIndex + <span class="hljs-number">1</span>, innerTarget, currentPage);</span><br><span class="line">      <span class="hljs-keyword">return</span> innerTarget;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, <span class="hljs-number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/04/algorithm/hackerrank/56_LisasWorkbook/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS ReactJS Challenge - Day4</title>
      <link>https://alleyful.github.io/2019/09/03/log/react-challenge/react-challenge-day4/</link>
      <guid>https://alleyful.github.io/2019/09/03/log/react-challenge/react-challenge-day4/</guid>
      <pubDate>Mon, 02 Sep 2019 15:10:29 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;오늘의 강의: #3.0 ~ #3.4&lt;br&gt;오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/courses/436641/lectures/8467057&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;[노마드 코더] 초보를 위한 React JS&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3.0 CSS in React part One&lt;/li&gt;
&lt;li&gt;3.1 CSS in React part Two&lt;/li&gt;
&lt;li&gt;3.2 CSS in React part Three&lt;/li&gt;
&lt;li&gt;3.3 GlobalStyles and Header&lt;/li&gt;
&lt;li&gt;3.4 Location Aware Header&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>오늘의 강의: #3.0 ~ #3.4<br>오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.</p></blockquote><br><p><a href="https://academy.nomadcoders.co/courses/436641/lectures/8467057" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 초보를 위한 React JS</a></p><ul><li>3.0 CSS in React part One</li><li>3.1 CSS in React part Two</li><li>3.2 CSS in React part Three</li><li>3.3 GlobalStyles and Header</li><li>3.4 Location Aware Header</li></ul><br><a id="more"></a><hr><br><h2 id="Lecture-Summery"><a href="#Lecture-Summery" class="headerlink" title="Lecture Summery"></a>Lecture Summery</h2><br><h3 id="CSS-in-React"><a href="#CSS-in-React" class="headerlink" title="CSS in React"></a>CSS in React</h3><h4 id="styles-css"><a href="#styles-css" class="headerlink" title="styles.css"></a>styles.css</h4><ul><li>styles.css 생성 후 index.js에서 import</li><li>장점 : 사용방법이 쉬움</li><li>단점 : 컴포넌트와 css 파일이 분리되어 있음   <figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">my-app</span><br><span class="line">└── src</span><br><span class="line">    ├── index.js    // import &quot;styles.css&quot;;</span><br><span class="line">    ├── styles.css</span><br><span class="line">    ├── Router</span><br><span class="line">    └── Components</span><br></pre></td></tr></table></figure></li></ul><br><h4 id="폴더에-정리"><a href="#폴더에-정리" class="headerlink" title="폴더에 정리"></a>폴더에 정리</h4><ul><li>components폴더 안에 js 파일과 css 파일을 함께 생성하여 js 파일에서 import</li><li>장점 : 파일이 한 폴더에 모여있어 찾기 쉬움.</li><li>단점 : 사용할때마다 import 해줘야 함. className을 기억해서 반복되지 않도록 해야함.</li><li>사용 : <code>&lt;header className=&quot;nav&quot;&gt;</code><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">my-app</span><br><span class="line">└── src</span><br><span class="line">    ├── App.js</span><br><span class="line">    ├── Router.js</span><br><span class="line">    └── Components</span><br><span class="line">        └── Header</span><br><span class="line">            ├── Header.css   // className을 사</span><br><span class="line">            ├── Header.js    // import &quot;./Header.css&quot;;</span><br><span class="line">            └── index.js</span><br></pre></td></tr></table></figure></li></ul><br> <h4 id="css모듈-사용"><a href="#css모듈-사용" class="headerlink" title="css모듈 사용"></a>css모듈 사용</h4><ul><li>css가 global이 아닌 local이 되게 함.</li><li>사용 : <code>&lt;ul className={styles.navList}&gt;</code></li><li>렌더시 랜덤한 className이 생성.</li><li>sass 사용시 node-sass 설</li><li>단점 : 여전히 css모듈에서 사용된 className을 기억해야함.<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">my-app</span><br><span class="line">└── src</span><br><span class="line">    ├── App.js</span><br><span class="line">    ├── Router.js</span><br><span class="line">    └── Components</span><br><span class="line">        └── Header</span><br><span class="line">            ├── Header.module.css 또는 Header.module.sass  </span><br><span class="line">            ├── Header.js    // import styles from &quot;./Header.module.css&quot;;</span><br><span class="line">            └── index.js</span><br></pre></td></tr></table></figure></li></ul><br>  <h4 id="styled-components-사용"><a href="#styled-components-사용" class="headerlink" title="styled-components 사용"></a>styled-components 사용</h4><ul><li>설치<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add styled-components</span><br></pre></td></tr></table></figure></li></ul><br><ul><li>사용<figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Link &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react-router-dom"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">"styled-components"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Header = styled.header<span class="hljs-string">``</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> List = styled.ul<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  display: flex;</span></span><br><span class="line"><span class="hljs-string">  &amp;:hover &#123;</span></span><br><span class="line"><span class="hljs-string">    background-color: blue;</span></span><br><span class="line"><span class="hljs-string">  &#125;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Item = styled.li<span class="hljs-string">``</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> SLink = styled(Link)<span class="hljs-string">``</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Header&gt;</span><br><span class="line">    &lt;List&gt;</span><br><span class="line">      &lt;Item&gt;</span><br><span class="line">        &lt;SLink to=<span class="hljs-string">"/"</span>&gt;Movies&lt;<span class="hljs-regexp">/SLink&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>Item&gt;</span><br><span class="line">      &lt;Item&gt;</span><br><span class="line">        &lt;SLink to=<span class="hljs-string">"/tv"</span>&gt;TV&lt;<span class="hljs-regexp">/SLink&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>Item&gt;</span><br><span class="line">      &lt;Item&gt;</span><br><span class="line">        &lt;SLink to=<span class="hljs-string">"/search"</span>&gt;Search&lt;<span class="hljs-regexp">/SLink&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>Item&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/List&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>Header&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><br><ul><li><code>styled-components</code> 을 사용해서 스타일링 할 수 있다.</li><li><code>this -&gt; &amp;</code> 로 내부에서 사용가능</li><li><code>props</code> 도 사용 가능하다.</li><li><code>GlobalStyle</code> 적용시 전체 스타일을 설정할 수 있다. <code>reset</code> 사용</li></ul><br><br><h3 id="GlobalStyles-and-Header"><a href="#GlobalStyles-and-Header" class="headerlink" title="GlobalStyles and Header"></a>GlobalStyles and Header</h3><h4 id="global-설정"><a href="#global-설정" class="headerlink" title="global 설정"></a>global 설정</h4><ul><li>설치<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add styled-reset</span><br></pre></td></tr></table></figure></li></ul><br><ul><li>사용<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my-app</span><br><span class="line">└── src</span><br><span class="line">    ├── Routes</span><br><span class="line">    └── Components</span><br><span class="line">        ├── GlobalStyles.js</span><br><span class="line">        ├── App.js</span><br><span class="line">        ├── Header.js</span><br><span class="line">        └── Router.js</span><br></pre></td></tr></table></figure></li></ul><p><code>GlobalStyles.js</code></p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> &#123; createGlobalStyle &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"styled-components"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> reset <span class="hljs-keyword">from</span> <span class="hljs-string">"styled-reset"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> globalStyles = createGlobalStyle<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">    <span class="hljs-subst">$&#123;reset&#125;</span>;</span></span><br><span class="line"><span class="hljs-string">    a&#123;</span></span><br><span class="line"><span class="hljs-string">        text-decoration:none;</span></span><br><span class="line"><span class="hljs-string">        color:inherit;</span></span><br><span class="line"><span class="hljs-string">    &#125;</span></span><br><span class="line"><span class="hljs-string">    *&#123;</span></span><br><span class="line"><span class="hljs-string">        box-sizing:border-box;</span></span><br><span class="line"><span class="hljs-string">    &#125;</span></span><br><span class="line"><span class="hljs-string">    body&#123;</span></span><br><span class="line"><span class="hljs-string">        font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;</span></span><br><span class="line"><span class="hljs-string">        font-size:12px;</span></span><br><span class="line"><span class="hljs-string">        background-color:rgba(20, 20, 20, 1);</span></span><br><span class="line"><span class="hljs-string">        color:white;</span></span><br><span class="line"><span class="hljs-string">        padding-top:50px;</span></span><br><span class="line"><span class="hljs-string">    &#125;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> globalStyles;</span><br></pre></td></tr></table></figure><br><h3 id="Location-Aware-Header"><a href="#Location-Aware-Header" class="headerlink" title="Location Aware Header"></a>Location Aware Header</h3><ul><li>withRouter를 이용하여 현재의 location정보를 이용   </li></ul><p><code>Header.js</code></p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Link, withRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react-router-dom"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">"styled-components"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Header = styled.header<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  color: white;</span></span><br><span class="line"><span class="hljs-string">  position: fixed;</span></span><br><span class="line"><span class="hljs-string">  top: 0;</span></span><br><span class="line"><span class="hljs-string">  left: 0;</span></span><br><span class="line"><span class="hljs-string">  width: 100%;</span></span><br><span class="line"><span class="hljs-string">  height: 50px;</span></span><br><span class="line"><span class="hljs-string">  display: flex;</span></span><br><span class="line"><span class="hljs-string">  align-items: center;</span></span><br><span class="line"><span class="hljs-string">  background-color: rgba(20, 20, 20, 0.8);</span></span><br><span class="line"><span class="hljs-string">  z-index: 10;</span></span><br><span class="line"><span class="hljs-string">  box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> List = styled.ul<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  display: flex;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Item = styled.li<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  width: 80px;</span></span><br><span class="line"><span class="hljs-string">  height: 50px;</span></span><br><span class="line"><span class="hljs-string">  text-align: center;</span></span><br><span class="line"><span class="hljs-string">  border-bottom: 3px solid</span></span><br><span class="line"><span class="hljs-string">    <span class="hljs-subst">$&#123;props =&gt; (props.current ? <span class="hljs-string">"#3498db"</span> : <span class="hljs-string">"transparent"</span>)&#125;</span>;</span></span><br><span class="line"><span class="hljs-string">  transition: border-bottom 0.5s ease-in-out;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> SLink = styled(Link)<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  height: 50px;</span></span><br><span class="line"><span class="hljs-string">  display: flex;</span></span><br><span class="line"><span class="hljs-string">  align-items: center;</span></span><br><span class="line"><span class="hljs-string">  justify-content: center;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> withRouter(<span class="hljs-function">(<span class="hljs-params">&#123; location: &#123; pathname &#125; &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;Header&gt;</span><br><span class="line">    &lt;List&gt;</span><br><span class="line">      &lt;Item current=&#123;pathname === <span class="hljs-string">"/"</span>&#125;&gt;</span><br><span class="line">        &lt;SLink to=<span class="hljs-string">"/"</span>&gt;Movies&lt;<span class="hljs-regexp">/SLink&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>Item&gt;</span><br><span class="line">      &lt;Item current=&#123;pathname === <span class="hljs-string">"/tv"</span>&#125;&gt;</span><br><span class="line">        &lt;SLink to=<span class="hljs-string">"/tv"</span>&gt;TV&lt;<span class="hljs-regexp">/SLink&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>Item&gt;</span><br><span class="line">      &lt;Item current=&#123;pathname === <span class="hljs-string">"/search"</span>&#125;&gt;</span><br><span class="line">        &lt;SLink to=<span class="hljs-string">"/search"</span>&gt;Search&lt;<span class="hljs-regexp">/SLink&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>Item&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/List&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>Header&gt;</span><br><span class="line">));</span><br></pre></td></tr></table></figure><br><br><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://velog.io/@velopert/react-component-styling" rel="external nofollow noopener noreferrer" target="_blank">다양한 방식의 리액트 컴포넌트 스타일링 방식</a></li><li><a href="https://velopert.com/1712" rel="external nofollow noopener noreferrer" target="_blank">Sass 강좌 – 한 눈에 보기</a></li><li><a href="https://sass-guidelin.es/ko/" rel="external nofollow noopener noreferrer" target="_blank">Sass 작성을 위한 주관적인 스타일가이드.</a></li><li><a href="https://velog.io/@taewo/%EB%A6%AC%EC%95%A1%ED%8A%B8-Styled-Components-76jsolbaf8" rel="external nofollow noopener noreferrer" target="_blank">리액트 Styled Components - 1편</a></li><li><a href="https://velog.io/@taewo/%EB%A6%AC%EC%95%A1%ED%8A%B8-Styled-Componets-2%ED%8E%B8" rel="external nofollow noopener noreferrer" target="_blank">리액트 Styled Components - 2편</a></li><li><a href="https://javaexpert.tistory.com/1020" rel="external nofollow noopener noreferrer" target="_blank">React Styled-Component 공부</a></li></ul><hr><br><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><p><a href="https://codesandbox.io/s/day-four-boilerplate-jxch9" rel="external nofollow noopener noreferrer" target="_blank">Day4 템플릿</a></p><p><img src="https://github.com/alleyful/nomflix/raw/master/note/images/day4.gif" alt></p><br><h3 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h3><ul><li>Use <strong>‘styled-components’</strong> , <strong>‘styled-reset’</strong> and <strong>‘createGlobalStyle’</strong></li><li>The header must be location aware and the links should reflect that.</li><li><strong>DO NOT</strong> use <strong>ANY .css</strong> file or <strong>‘className’</strong> attribute.</li></ul><br><h3 id="Submit"><a href="#Submit" class="headerlink" title="Submit"></a>Submit</h3><p><code>My Answer</code><br><a href="https://codesandbox.io/s/day-four-boilerplate-tddjh" rel="external nofollow noopener noreferrer" target="_blank">Day4 Answer</a></p><p><code>Header.js</code></p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Link, withRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react-router-dom"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">"styled-components"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Header = styled.header<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  padding: 30px 0;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> List = styled.ul<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  display: flex;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Item = styled.li<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  font-size: 15px;</span></span><br><span class="line"><span class="hljs-string">  font-weight: bold;</span></span><br><span class="line"><span class="hljs-string">  margin: 0 20px 0 0;</span></span><br><span class="line"><span class="hljs-string">  background: <span class="hljs-subst">$&#123;props =&gt; (props.current ? <span class="hljs-string">"#faa"</span> : <span class="hljs-string">"#fff"</span>)&#125;</span>;</span></span><br><span class="line"><span class="hljs-string">  color: <span class="hljs-subst">$&#123;props =&gt; (props.current ? <span class="hljs-string">"#fff"</span> : <span class="hljs-string">"#000"</span>)&#125;</span>;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> withRouter(<span class="hljs-function">(<span class="hljs-params">&#123; location: &#123; pathname &#125; &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;Header&gt;</span><br><span class="line">    &lt;List&gt;</span><br><span class="line">      &lt;Item current=&#123;pathname === <span class="hljs-string">"/"</span>&#125;&gt;</span><br><span class="line">        &lt;Link to=<span class="hljs-string">"/"</span>&gt;PRICES&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>Item&gt;</span><br><span class="line">      &lt;Item current=&#123;pathname === <span class="hljs-string">"/exchanges"</span>&#125;&gt;</span><br><span class="line">        &lt;Link to=<span class="hljs-string">"/exchanges"</span>&gt;EXCHANGES&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>Item&gt;</span><br><span class="line">      &lt;Item current=&#123;pathname === <span class="hljs-string">"/coins"</span>&#125;&gt;</span><br><span class="line">        &lt;Link to=<span class="hljs-string">"/coins"</span>&gt;COINS&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>Item&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/List&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>Header&gt;</span><br><span class="line">));</span><br></pre></td></tr></table></figure><br><p><code>correct</code><br><a href="https://codesandbox.io/s/day-four-solution-3j7gi" rel="external nofollow noopener noreferrer" target="_blank">Day4 Currect</a></p><br><hr><br><h2 id="Day4-정리"><a href="#Day4-정리" class="headerlink" title="Day4 정리"></a>Day4 정리</h2><ul><li>오늘의 강의 : <a href="https://academy.nomadcoders.co/courses/436641/lectures/8467057" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 초보를 위한 React JS</a><ul><li>3.0 CSS in React part One</li><li>3.1 CSS in React part Two</li><li>3.2 CSS in React part Three</li><li>3.3 GlobalStyles and Header</li><li>3.4 Location Aware Header</li></ul></li><li>강의노트: <a href="https://github.com/alleyful/nomflix" rel="external nofollow noopener noreferrer" target="_blank">Day4 Note</a></li><li>오늘의 과제: <a href="https://codesandbox.io/s/day-four-boilerplate-jxch9" rel="external nofollow noopener noreferrer" target="_blank">Day4 Question</a></li><li>제출: <a href="https://codesandbox.io/s/day-four-boilerplate-tddjh" rel="external nofollow noopener noreferrer" target="_blank">Day4 Answer</a></li><li>정답: <a href="https://codesandbox.io/s/day-four-solution-3j7gi" rel="external nofollow noopener noreferrer" target="_blank">Day4 Current</a></li></ul><br>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/03/log/react-challenge/react-challenge-day4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Service Lane</title>
      <link>https://alleyful.github.io/2019/09/02/algorithm/hackerrank/55_ServiceLane/</link>
      <guid>https://alleyful.github.io/2019/09/02/algorithm/hackerrank/55_ServiceLane/</guid>
      <pubDate>Mon, 02 Sep 2019 05:24:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;Calvin is driving his favorite vehicle on the 101 freeway. He notices that the check engine light of his vehicle is on, and he wants to service it immediately to avoid any risks. Luckily, a service lane runs parallel to the highway. The service lane varies in width along its length.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/serviceLane.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;You will be given an array of widths at points along the road (indices), then a list of the indices of entry and exit points. Considering each entry and exit point pair, calculate the maximum size vehicle that can travel that segment of the service lane safely.&lt;/p&gt;
&lt;p&gt;For example, there are &lt;strong&gt;n = 4&lt;/strong&gt; measurements yielding &lt;strong&gt;width = [2, 3, 2, 1]&lt;/strong&gt;. If our entry index, &lt;strong&gt;i = 1&lt;/strong&gt; and our exit, &lt;strong&gt;j = 2&lt;/strong&gt;, there are two segment widths of &lt;strong&gt;2&lt;/strong&gt; and &lt;strong&gt;3&lt;/strong&gt; respectively. The widest vehicle that can fit through both is &lt;strong&gt;2&lt;/strong&gt;. If &lt;strong&gt;i = 2&lt;/strong&gt; and &lt;strong&gt;j = 4&lt;/strong&gt;, our widths are &lt;strong&gt;[3, 2, 1]&lt;/strong&gt; which limits vehicle width to &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Calvin is driving his favorite vehicle on the 101 freeway. He notices that the check engine light of his vehicle is on, and he wants to service it immediately to avoid any risks. Luckily, a service lane runs parallel to the highway. The service lane varies in width along its length.</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/serviceLane.png" alt></p><p>You will be given an array of widths at points along the road (indices), then a list of the indices of entry and exit points. Considering each entry and exit point pair, calculate the maximum size vehicle that can travel that segment of the service lane safely.</p><p>For example, there are <strong>n = 4</strong> measurements yielding <strong>width = [2, 3, 2, 1]</strong>. If our entry index, <strong>i = 1</strong> and our exit, <strong>j = 2</strong>, there are two segment widths of <strong>2</strong> and <strong>3</strong> respectively. The widest vehicle that can fit through both is <strong>2</strong>. If <strong>i = 2</strong> and <strong>j = 4</strong>, our widths are <strong>[3, 2, 1]</strong> which limits vehicle width to <strong>1</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the serviceLane function in the editor below. It should return an array of integers representing the maximum width vehicle that can pass through each segment of the highway described.</p><p>serviceLane has the following parameter(s):</p><ul><li>n: an integer denoting the size of the <strong>cases</strong> array</li><li>cases: a two dimensional array of integers where each element is an array of two integers representing starting and ending indices for a segment to consider .</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line of input contains two integers, <strong>n</strong> and <strong>t</strong>, where <strong>n</strong> denotes the number of width measurements you will receive and <strong>t</strong> the number of test cases. The next line has <strong>n</strong> space-separated integers which represent the array <img src="https://latex.codecogs.com/gif.latex?width%5Bw_%7B0%7D,&space;w_%7B1%7D&space;...&space;,&space;w_%7Bn-1%7D%5D" alt>.</p><p>The next <strong>t</strong> lines contain two integers, <strong>i</strong> and <strong>j</strong>, where <strong>i</strong> is the start index and <strong>j</strong> is the end index of the segment being considered.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;n%5Cleq&space;100000" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;t%5Cleq&space;1000" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;i%3C&space;j%3C&space;n" alt></li><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;j&space;-&space;i&space;&plus;&space;1%5Cleq&space;min(n,&space;1000)" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;width%5Bk%5D%5Cleq&space;3,&space;where&space;,&space;0%5Cleq&space;k%3C&space;n" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each test case, print the number that represents the largest vehicle type that can pass through the entire segment of the service lane between indexes <strong>i</strong> and <strong>j</strong> inclusive.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">8 5</span><br><span class="line">2 3 1 2 3 2 3 3</span><br><span class="line">0 3</span><br><span class="line">4 6</span><br><span class="line">6 7</span><br><span class="line">3 5</span><br><span class="line">0 7</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Below is the representation of the lane:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   |HIGHWAY|Lane|    -&gt;    Width</span><br><span class="line"></span><br><span class="line">0: |       |--|            2</span><br><span class="line">1: |       |---|           3</span><br><span class="line">2: |       |-|             1</span><br><span class="line">3: |       |--|            2</span><br><span class="line">4: |       |---|           3</span><br><span class="line">5: |       |--|            2</span><br><span class="line">6: |       |---|           3</span><br><span class="line">7: |       |---|           3</span><br></pre></td></tr></table></figure><ol><li><strong>(0, 3)</strong>: From index <strong>0</strong> through <strong>3</strong> we have widths <strong>2, 3, 1</strong> and . Nothing wider than <strong>1</strong> can pass all segments.</li><li><strong>(4, 6)</strong>: From index <strong>4</strong> through <strong>6</strong> we have width <strong>3, 2</strong> and <strong>3</strong>. Nothing wider than <strong>2</strong> can pass all segments.</li><li><strong>(6, 7)</strong>: <strong>3, 3 -&gt; 3</strong> .</li><li><strong>(3, 5)</strong>: <strong>2, 3, 2 -&gt; 2</strong></li><li><strong>(0, 7)</strong>: <strong>2, 3, 1, 2, 3, 2, 3, 3 -&gt; 1</strong>.</li></ol><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">serviceLane</span>(<span class="hljs-params">width, cases</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> cases.reduce(<span class="hljs-function">(<span class="hljs-params">target, item</span>) =&gt;</span> &#123;</span><br><span class="line">    target.push(<span class="hljs-built_in">Math</span>.min(...width.slice(item[<span class="hljs-number">0</span>], item[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>)));</span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/02/algorithm/hackerrank/55_ServiceLane/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS ReactJS Challenge - Day3</title>
      <link>https://alleyful.github.io/2019/09/01/log/react-challenge/react-challenge-day3/</link>
      <guid>https://alleyful.github.io/2019/09/01/log/react-challenge/react-challenge-day3/</guid>
      <pubDate>Sun, 01 Sep 2019 05:12:04 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;오늘의 강의: #2.1 ~ #2.2&lt;br&gt;오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/courses/436641/lectures/8467057&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;[노마드 코더] 초보를 위한 React JS&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.0 Setting Up the Project&lt;/li&gt;
&lt;li&gt;2.1 React Router Part One&lt;/li&gt;
&lt;li&gt;2.2 React Router Part Two&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>오늘의 강의: #2.1 ~ #2.2<br>오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.</p></blockquote><br><p><a href="https://academy.nomadcoders.co/courses/436641/lectures/8467057" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 초보를 위한 React JS</a></p><ul><li>2.0 Setting Up the Project</li><li>2.1 React Router Part One</li><li>2.2 React Router Part Two</li></ul><br><a id="more"></a><hr><br><h2 id="Lecture-Summery"><a href="#Lecture-Summery" class="headerlink" title="Lecture Summery"></a>Lecture Summery</h2><br><h3 id="2-0-Setting-Up-the-Project"><a href="#2-0-Setting-Up-the-Project" class="headerlink" title="2.0 Setting Up the Project"></a>2.0 Setting Up the Project</h3><br><h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><p>React는 사용자 인터페이스를 구축하기 위한 선언적이고 효율적이며 유연한 JavaScript 라이브러리다.  </p><br><h4 id="create-react-app"><a href="#create-react-app" class="headerlink" title="create-react-app"></a>create-react-app</h4><p>create-react-app은 페이스북에서 만든 react 웹 개발용 boilerplate이다.</p><ul><li>설치 및 사용<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-react-app my-app</span><br><span class="line">$ cd my-app</span><br><span class="line">$ yarn start</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>주의</strong><br>첫 번째 줄의 ‘npx’는 실수가 아니며 npm 5.2+ 버전의 패키지 실행 도구.</p></blockquote><br><ul><li>Output<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">my-app</span><br><span class="line">├── README.md</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── .gitignore</span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── manifest.json</span><br><span class="line">└── src</span><br><span class="line">    ├── App.css</span><br><span class="line">    ├── App.js</span><br><span class="line">    ├── App.test.js</span><br><span class="line">    ├── index.css</span><br><span class="line">    ├── index.js</span><br><span class="line">    ├── logo.svg</span><br><span class="line">    └── serviceWorker.js</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>사용하지 않는 파일 및 내용을 삭제하여 기본적인 설치를 완료합니다.</p></blockquote><br><h3 id="React-Router"><a href="#React-Router" class="headerlink" title="React Router"></a>React Router</h3><p>React는 페이지 이동을 하며 사이트를 보여주는 기존의 웹사이트와 달리 <code>SPA</code>다. 즉 페이지가 1개로 이루어져 있다.<br>하지만 여러가지 정보를 보여주기 위해 주소에 따라 다양한 뷰를 보여줘야 하는데 이럴때 사용할 수 있는게 <code>React Router</code>이다.</p><ul><li>라우팅 : 다른 주소에 따라 다른 뷰를 보여주는 것</li><li>SPA : Single Page Application 말 그대로, 페이지가 1개인 어플리케이션</li></ul><br><h4 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h4><p><a href="https://reacttraining.com/react-router" rel="external nofollow noopener noreferrer" target="_blank">React Router</a>에 보면 Web, Native, Core에 대한 설치 및 사용방법이 자세히 나와 있다.<br>그중 web에서 사용할 수 있는 <code>react-router-dom</code>에 대해 알아보자.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-router-dom</span><br></pre></td></tr></table></figure><br><h4 id="사용"><a href="#사용" class="headerlink" title="사용"></a>사용</h4><p><code>App.js</code></p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Router <span class="hljs-keyword">from</span> <span class="hljs-string">"Components/Router"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Header <span class="hljs-keyword">from</span> <span class="hljs-string">"Components/Header"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;&gt;</span><br><span class="line">        &lt;Header /&gt;</span><br><span class="line">        &lt;Router /&gt;</span><br><span class="line">      &lt;<span class="hljs-regexp">/&gt;</span></span><br><span class="line"><span class="hljs-regexp">    );</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">export default App;</span></span><br></pre></td></tr></table></figure><br><p><code>Router.js</code></p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123;</span><br><span class="line">  BrowserRouter <span class="hljs-keyword">as</span> Router,</span><br><span class="line">  Route,</span><br><span class="line">  Redirect,</span><br><span class="line">  Switch</span><br><span class="line">&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react-router-dom"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">"Routes/Home"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> TV <span class="hljs-keyword">from</span> <span class="hljs-string">"Routes/TV"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Search <span class="hljs-keyword">from</span> <span class="hljs-string">"Routes/Search"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;Switch&gt;</span><br><span class="line">      &lt;Route path=<span class="hljs-string">"/"</span> exact component=&#123;Home&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="hljs-string">"/tv"</span> component=&#123;TV&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="hljs-string">"/search"</span> component=&#123;Search&#125; /&gt;</span><br><span class="line">      &lt;Redirect <span class="hljs-keyword">from</span>=<span class="hljs-string">"*"</span> to=<span class="hljs-string">"/"</span> /&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/Switch&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>Router&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><code>React Router</code>을 사용하기 위해 다음과 같이 import 해준다. as 를 이용하여 Router 라는 이름으로 쓸것이다.</li><li>각각 url로 들어 갔을 때 보여줄 컴포넌트들을 import 해준다.</li><li>Route를 Router로 감싸준다. Switch를 사용하면 해당하는 url을 찾아 그 컴포넌트를 그려주고 빠져나온다.</li><li>exact 또는 exact={true} 는 / 가 포함된 url이 아니라 정확히/ 로 들어왔을 때만 해당 컴포넌트를 그려주게 해주는 것이다. 이것을 안해주면 /search /tv 등등 다른 url에서도 / 을 포함하고 있기 때문에 의도치 않게 함께 그려지는 것을 방지해야 한다.</li></ul><br><p><code>Header.js</code></p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;Link to=<span class="hljs-string">"/"</span>&gt;Movies&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>li&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;Link to=<span class="hljs-string">"/tv"</span>&gt;TV&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>li&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;Link to=<span class="hljs-string">"/search"</span>&gt;Search&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>li&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>header&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>URL 이동시키기</p><ul><li>Link : a 태그와 같다. 하지만 SPA 특성상 a태그 처럼 새로고침이 발생하면 안되기에, a 태그를 기반으로 기능상의 개선을 통해 새로고침없이 다른 뷰를 렌더 하기위해 사용하는 것이다.</li><li>history.push : Route는 컴포넌트에 기본적으로 match, history, location 이라는 것을 넘겨준다. 이때 histroy.push(‘/인자’) 함수에 인자를 넣어주면 해당 인자로 url을 새로고침 없이 이동시켜준다.</li></ul><br><h4 id="match-history-location"><a href="#match-history-location" class="headerlink" title="match, history, location"></a>match, history, location</h4><p>Component에 별도로 설정을 안해주었음에 불구하고, Route의 컴포넌트에 기본적으로 props로 match, history, location을 넘겨준다.</p><ul><li><code>history</code><ul><li>브라우저의 window.history 와 유사</li><li>주소를 임의로 변경하거나 되돌아 갈 수 있도록 한다.</li><li>주소 변경시, SPA 특성을 지키기 위해 페이지 전체를 리로드 하지 않는다.</li><li>location 이 포함되어 있다.</li></ul></li></ul><br><ul><li><p><code>location</code></p><ul><li>브라우저의 window.location 와 유사</li><li>현재 페이지 정보를 지니고 있다.</li><li>url의 query 정보를 search라는 프로퍼티에 가지고 있다.</li></ul><br></li><li><p><code>match</code></p><ul><li>Route의 path에 정의한 것과 매칭된 정보를 가지고 있다.</li><li>params 에 설정한 파라미터를 담고 있다.</li></ul></li></ul><br>    <br><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://ko.reactjs.org/docs/create-a-new-react-app.html" rel="external nofollow noopener noreferrer" target="_blank">새로운 React 앱 만들기</a></li><li><a href="https://kingname.tistory.com/105" rel="external nofollow noopener noreferrer" target="_blank">간단 리엑트 소개와 앱 실행하기</a></li><li><a href="https://github.com/facebook/create-react-app/releases/tag/v3.0.0" rel="external nofollow noopener noreferrer" target="_blank">facebook/create-react-app</a></li><li><a href="https://reacttraining.com/react-router/" rel="external nofollow noopener noreferrer" target="_blank">React Router</a></li><li><a href="https://medium.com/@han7096/react-router-v4-정리-e9931b63dcae" rel="external nofollow noopener noreferrer" target="_blank">React Router V4 정리</a></li></ul><hr><br><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><p><a href="https://codesandbox.io/s/day-three-blueprint-hdx6m" rel="external nofollow noopener noreferrer" target="_blank">Day3 템플릿</a></p><p><img src="https://github.com/alleyful/nomflix/raw/master/note/images/day3.gif" alt></p><br><h3 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h3><ul><li>DO NOT create or delete ANY file.</li><li>DO NOT use <a></a></li></ul><br><h3 id="Submit"><a href="#Submit" class="headerlink" title="Submit"></a>Submit</h3><p><code>My Answer</code><br><a href="https://codesandbox.io/s/day-three-blueprint-nplo3" rel="external nofollow noopener noreferrer" target="_blank">Day3 CodeSandbox</a></p><p><code>Components/Header.js</code></p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Link &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;Link to=<span class="hljs-string">"/prices"</span>&gt;Prices&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>li&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;Link to=<span class="hljs-string">"/exchanges"</span>&gt;Exchanges&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>li&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;Link to=<span class="hljs-string">"/coins"</span>&gt;Coins&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>li&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>header&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><p><code>Components/Router.js</code></p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; HashRouter <span class="hljs-keyword">as</span> Router, Route &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react-router-dom"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Header <span class="hljs-keyword">from</span> <span class="hljs-string">"./Header"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Coins <span class="hljs-keyword">from</span> <span class="hljs-string">"../Screens/Coins"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Exchanges <span class="hljs-keyword">from</span> <span class="hljs-string">"../Screens/Exchanges"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Prices <span class="hljs-keyword">from</span> <span class="hljs-string">"../Screens/Prices"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &lt;Route path=<span class="hljs-string">"/coins"</span> component=&#123;Coins&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="hljs-string">"/exchanges"</span> component=&#123;Exchanges&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="hljs-string">"/prices"</span> component=&#123;Prices&#125; /&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/Router&gt;</span></span><br><span class="line"><span class="hljs-regexp">  );</span></span><br><span class="line"><span class="hljs-regexp">&#125;;</span></span><br></pre></td></tr></table></figure><br><p><code>Correct</code><br><a href="https://codesandbox.io/s/day-three-solution-o4vol" rel="external nofollow noopener noreferrer" target="_blank">Day3 Correct</a></p><p><code>Components/Router.js</code></p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; HashRouter <span class="hljs-keyword">as</span> Router, Route &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react-router-dom"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Header <span class="hljs-keyword">from</span> <span class="hljs-string">"./Header"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Coins <span class="hljs-keyword">from</span> <span class="hljs-string">"../Screens/Coins"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Exchanges <span class="hljs-keyword">from</span> <span class="hljs-string">"../Screens/Exchanges"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Prices <span class="hljs-keyword">from</span> <span class="hljs-string">"../Screens/Prices"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &lt;Route path=<span class="hljs-string">"/"</span> exact component=&#123;Prices&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="hljs-string">"/exchanges"</span> component=&#123;Exchanges&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="hljs-string">"/coins"</span> exact component=&#123;Coins&#125; /&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/Router&gt;</span></span><br><span class="line"><span class="hljs-regexp">  );</span></span><br><span class="line"><span class="hljs-regexp">&#125;;</span></span><br></pre></td></tr></table></figure><br><hr><br><h2 id="Day3-정리"><a href="#Day3-정리" class="headerlink" title="Day3 정리"></a>Day3 정리</h2><ul><li>오늘의 강의 : <a href="https://academy.nomadcoders.co/courses/436641/lectures/8467057" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 초보를 위한 React JS</a><ul><li>2.1 React Router Part One</li><li>2.2 React Router Part Two</li></ul></li><li>강의노트: <a href="https://github.com/alleyful/nomflix" rel="external nofollow noopener noreferrer" target="_blank">Day3 Note</a></li><li>오늘의 과제: <a href="https://codesandbox.io/s/day-two-blueprint-kfv4j" rel="external nofollow noopener noreferrer" target="_blank">Day3 Question</a></li><li>제출: <a href="https://codesandbox.io/s/day-two-blueprint-8zzqh" rel="external nofollow noopener noreferrer" target="_blank">Day3 Answer</a></li><li>정답: <a href="https://codesandbox.io/s/day-three-solution-o4vol" rel="external nofollow noopener noreferrer" target="_blank">Day3 Correct</a></li></ul><br>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/01/log/react-challenge/react-challenge-day3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS ReactJS Challenge - Day2</title>
      <link>https://alleyful.github.io/2019/08/31/log/react-challenge/react-challenge-day2/</link>
      <guid>https://alleyful.github.io/2019/08/31/log/react-challenge/react-challenge-day2/</guid>
      <pubDate>Sat, 31 Aug 2019 09:28:07 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;오늘의 강의: #1.6 ~ #1.8&lt;br&gt;오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/courses/436641/lectures/8467057&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;[노마드 코더] 초보를 위한 React JS&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.6 Array.map&lt;/li&gt;
&lt;li&gt;1.7 Array.filter&lt;/li&gt;
&lt;li&gt;1.8 .forEach .includes .push&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>오늘의 강의: #1.6 ~ #1.8<br>오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.</p></blockquote><br><p><a href="https://academy.nomadcoders.co/courses/436641/lectures/8467057" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 초보를 위한 React JS</a></p><ul><li>1.6 Array.map</li><li>1.7 Array.filter</li><li>1.8 .forEach .includes .push</li></ul><br><a id="more"></a><hr><br><h2 id="Lecture-Summery"><a href="#Lecture-Summery" class="headerlink" title="Lecture Summery"></a>Lecture Summery</h2><p>강의에서 소개된 Array 메소드를 간단히 정리한 후 소개되지 않은 메소드들도 함께 정리해보자.</p><br><h3 id="1-6-Array-map"><a href="#1-6-Array-map" class="headerlink" title="1.6 Array.map"></a>1.6 Array.map</h3><p><code>map()</code> 메서드는 배열 내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 <strong>새로운 배열을 반환</strong>합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> days = [ <span class="hljs-string">'Mon'</span>, <span class="hljs-string">'Tue'</span>, <span class="hljs-string">'Wed'</span>, <span class="hljs-string">'Thu'</span>, <span class="hljs-string">'Fri'</span> ];</span><br><span class="line"><span class="hljs-keyword">const</span> addNumber = <span class="hljs-function">(<span class="hljs-params">day, index</span>) =&gt;</span> <span class="hljs-string">`#<span class="hljs-subst">$&#123;index + <span class="hljs-number">1</span>&#125;</span> <span class="hljs-subst">$&#123;day&#125;</span>`</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> smileDays = days.map(addNumber);</span><br></pre></td></tr></table></figure><br><h3 id="1-7-Array-filter"><a href="#1-7-Array-filter" class="headerlink" title="1.7 Array.filter"></a>1.7 Array.filter</h3><p><code>filter()</code> 메서드는 주어진 함수의 테스트를 통과하는 모든 요소를 모아 <strong>새로운 배열로 반환</strong>합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> posts = [ <span class="hljs-string">'Hi'</span>, <span class="hljs-string">'Hello'</span>, <span class="hljs-string">'Bye'</span> ];</span><br><span class="line"></span><br><span class="line">posts = posts.filter(<span class="hljs-function"><span class="hljs-params">post</span> =&gt;</span> post !== <span class="hljs-string">'Bye'</span>);</span><br></pre></td></tr></table></figure><br><h3 id="1-8-forEach-includes-push"><a href="#1-8-forEach-includes-push" class="headerlink" title="1.8 .forEach .includes .push"></a>1.8 .forEach .includes .push</h3><p><code>forEach()</code> 메서드는 주어진 함수를 배열 요소 <strong>각각에 대해 실행</strong>합니다.<br><code>includes()</code> 메서드는 배열이 특정 요소를 포함하고 있는지 판별 후 <strong>boolean</strong>값을 반환합니다.<br><code>push()</code> 메서드는 <strong>배열의 끝에 하나 이상의 요소를 추가</strong>하고, 배열의 새로운 <strong>길이를 반환</strong>합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> posts = [ <span class="hljs-string">'Hi'</span>, <span class="hljs-string">'Hello'</span>, <span class="hljs-string">'Bye'</span> ];</span><br><span class="line"></span><br><span class="line">posts.forEach(<span class="hljs-function"><span class="hljs-params">post</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(post));</span><br><span class="line"></span><br><span class="line">posts.push(<span class="hljs-string">'new'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span>(posts.includes(<span class="hljs-string">'Howdy'</span>))&#123;</span><br><span class="line">  posts.push(<span class="hljs-string">'Howdy'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><hr><br><h2 id="JavaScript-배열-메소드-Array-method"><a href="#JavaScript-배열-메소드-Array-method" class="headerlink" title="JavaScript 배열 메소드 ( Array method )"></a>JavaScript 배열 메소드 ( Array method )</h2><br><h3 id="변경자-메서드"><a href="#변경자-메서드" class="headerlink" title="변경자 메서드"></a>변경자 메서드</h3><p>변경자 메서드는 <strong>배열을 수정</strong>합니다.</p><br><h4 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin()"></a>copyWithin()</h4><p>배열의 일부를 얕게 복사한 뒤, 동일한 배열의 다른 위치에 덮어쓰고 그 배열을 반환합니다. 이 때, 크기(배열의 길이)를 수정하지 않고 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// copy to index 0 the element at index 3</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1.copyWithin(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: Array ["d", "b", "c", "d", "e"]</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// copy to index 1 all elements from index 3 to the end</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1.copyWithin(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: Array ["d", "d", "e", "d", "e"]</span></span><br></pre></td></tr></table></figure><br><h4 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h4><p>배열 안의 시작 인덱스부터 끝 인덱스까지의 요소값을 지정된 정적 값으로 채웁니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// fill with 0 from position 2 until position 4</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1.fill(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: [1, 2, 0, 0]</span></span><br></pre></td></tr></table></figure><br><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p>배열에서 마지막 요소를 뽑아내고, 그 요소를 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> plants = [<span class="hljs-string">'broccoli'</span>, <span class="hljs-string">'cauliflower'</span>, <span class="hljs-string">'cabbage'</span>, <span class="hljs-string">'kale'</span>, <span class="hljs-string">'tomato'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(plants.pop());</span><br><span class="line"><span class="hljs-comment">// expected output: "tomato"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(plants);</span><br><span class="line"><span class="hljs-comment">// expected output: Array ["broccoli", "cauliflower", "cabbage", "kale"]</span></span><br></pre></td></tr></table></figure><br><h4 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h4><p>배열의 끝에 하나 이상의 요소를 추가하고, 변경된 배열의 길이를 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> animals = [<span class="hljs-string">'pigs'</span>, <span class="hljs-string">'goats'</span>, <span class="hljs-string">'sheep'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(animals.push(<span class="hljs-string">'cows'</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: 4</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(animals);</span><br><span class="line"><span class="hljs-comment">// expected output: Array ["pigs", "goats", "sheep", "cows"]</span></span><br></pre></td></tr></table></figure><br><h4 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h4><p>배열에서 첫 번째 요소를 삭제하고 그 요소를 반환합니다. 이 메서드는 배열의 길이를 변하게 합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> firstElement = array1.shift();</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1);</span><br><span class="line"><span class="hljs-comment">// expected output: Array [2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(firstElement);</span><br><span class="line"><span class="hljs-comment">// expected output: 1</span></span><br></pre></td></tr></table></figure><br><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h4><p>배열의 앞에 하나 이상의 요소를 추가하고 새로운 길이를 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1.unshift(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: 5</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1);</span><br><span class="line"><span class="hljs-comment">// expected output: Array [4, 5, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><br><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><p>배열의 요소 순서를 반전시킵니다. - 첫 번째가 마지막이 되고 마지막이 첫 번째가 됩니다. 원본 배열도 변경됩니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-string">'one'</span>, <span class="hljs-string">'two'</span>, <span class="hljs-string">'three'</span>];</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'array1: '</span>, array1);</span><br><span class="line"><span class="hljs-comment">// expected output: Array ['one', 'two', 'three']</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> reversed = array1.reverse(); </span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'reversed: '</span>, reversed);</span><br><span class="line"><span class="hljs-comment">// expected output: Array ['three', 'two', 'one']</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* Careful: reverse is destructive. It also changes</span></span><br><span class="line"><span class="hljs-comment">the original array */</span> </span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'array1: '</span>, array1);</span><br><span class="line"><span class="hljs-comment">// expected output: Array ['three', 'two', 'one']</span></span><br></pre></td></tr></table></figure><br><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p>배열의 요소를 정렬하고 그 배열을 반환합니다. 기본 정렬 순서는 문자열의 유니코드 코드 포인트를 따릅니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">30</span>, <span class="hljs-number">4</span>, <span class="hljs-number">21</span>, <span class="hljs-number">100000</span>];</span><br><span class="line">array1.sort();</span><br><span class="line"><span class="hljs-comment">// expected output: Array [1, 100000, 21, 30, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>];</span><br><span class="line">numbers.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b);  <span class="hljs-comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line">numbers.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> b - a);  <span class="hljs-comment">// [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><br><h4 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h4><p>메서드는 배열의 기존 요소를 삭제 또는 교체하거나 새 요소를 추가하여 배열의 내용을 변경합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> months = [<span class="hljs-string">'Jan'</span>, <span class="hljs-string">'March'</span>, <span class="hljs-string">'April'</span>, <span class="hljs-string">'June'</span>];</span><br><span class="line">months.splice(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">'Feb'</span>);</span><br><span class="line"><span class="hljs-comment">// inserts at index 1</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(months);</span><br><span class="line"><span class="hljs-comment">// expected output: Array ['Jan', 'Feb', 'March', 'April', 'June']</span></span><br><span class="line"></span><br><span class="line">months.splice(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'May'</span>);</span><br><span class="line"><span class="hljs-comment">// replaces 1 element at index 4</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(months);</span><br><span class="line"><span class="hljs-comment">// expected output: Array ['Jan', 'Feb', 'March', 'April', 'May']</span></span><br></pre></td></tr></table></figure><br><br><br><h3 id="접근자-메서드"><a href="#접근자-메서드" class="headerlink" title="접근자 메서드"></a>접근자 메서드</h3><p>접근자 메서드는 <strong>배열을 수정하지 않고 배열 일부를 반환</strong>합니다.</p><br><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>배열과, 인자로 주어진 배열/값을 결합해 새로운 배열을 만들고, 이 새 배열을 반환합니다.</p><ul><li>기존배열을 변경하지 않습니다. </li><li>추가된 새로운 배열을 반환합니다.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>];</span><br><span class="line"><span class="hljs-keyword">const</span> array2 = [<span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>, <span class="hljs-string">'f'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1.concat(array2));</span><br><span class="line"><span class="hljs-comment">// expected output: Array ["a", "b", "c", "d", "e", "f"]</span></span><br></pre></td></tr></table></figure><br><h4 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h4><p>배열에 특정 요소가 포함돼있는지 알아내어 true 또는 false를 적절히 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1.includes(<span class="hljs-number">2</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: true</span></span><br></pre></td></tr></table></figure><br><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h4><p>배열에서 지정한 값과 같은 요소의 첫 인덱스를 반환합니다. 없으면 -1을 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> beasts = [<span class="hljs-string">'ant'</span>, <span class="hljs-string">'bison'</span>, <span class="hljs-string">'camel'</span>, <span class="hljs-string">'duck'</span>, <span class="hljs-string">'bison'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(beasts.indexOf(<span class="hljs-string">'bison'</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: 1</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// start from index 2</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(beasts.indexOf(<span class="hljs-string">'bison'</span>, <span class="hljs-number">2</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: 4</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(beasts.indexOf(<span class="hljs-string">'giraffe'</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: -1</span></span><br></pre></td></tr></table></figure><br><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p>배열의 모든 요소를 문자열로 변환하여 합칩니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> elements = [<span class="hljs-string">'Fire'</span>, <span class="hljs-string">'Air'</span>, <span class="hljs-string">'Water'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(elements.join());</span><br><span class="line"><span class="hljs-comment">// expected output: "Fire,Air,Water"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(elements.join(<span class="hljs-string">''</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: "FireAirWater"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(elements.join(<span class="hljs-string">'-'</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: "Fire-Air-Water"</span></span><br></pre></td></tr></table></figure><br><h4 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h4><p>배열에서 지정한 값과 같은 요소의 마지막 인덱스를 반환합니다. 없으면 -1을 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> animals = [<span class="hljs-string">'Dodo'</span>, <span class="hljs-string">'Tiger'</span>, <span class="hljs-string">'Penguin'</span>, <span class="hljs-string">'Dodo'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(animals.lastIndexOf(<span class="hljs-string">'Dodo'</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: 3</span></span><br></pre></td></tr></table></figure><br><h4 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h4><p>메서드는 어떤 배열의 begin부터 end까지(end 미포함)에 대한 얕은 복사본을 새로운 배열 객체로 반환합니다. 원본 배열은 수정되지 않습니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> animals = [<span class="hljs-string">'ant'</span>, <span class="hljs-string">'bison'</span>, <span class="hljs-string">'camel'</span>, <span class="hljs-string">'duck'</span>, <span class="hljs-string">'elephant'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(animals.slice(<span class="hljs-number">2</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: Array ["camel", "duck", "elephant"]</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(animals.slice(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: Array ["bison", "camel", "duck", "elephant"]</span></span><br></pre></td></tr></table></figure><br><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><p>배열과 요소를 반환하는 문자열을 반환합니다. Object.prototype.toString() 메서드를 재정의합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">'a'</span>, <span class="hljs-string">'1a'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1.toString());</span><br><span class="line"><span class="hljs-comment">// expected output: "1,2,a,1a"</span></span><br></pre></td></tr></table></figure><br><br><br><h3 id="순회-메서드"><a href="#순회-메서드" class="headerlink" title="순회 메서드"></a>순회 메서드</h3><p>배열을 처리하는 동안, 각각의 배열요소에 대해 (인자로 주어진) 콜백 함수를 호출하는 메서드가 몇 개 있습니다.<br>이러한 메서드들은 메서드의 호출시점에 배열의 길이를 확인한 후, 그 길이까지의 배열요소에 대해서만 콜백을 수행하며, 콜백 중에 추가된 배열 요소(메서드 호출시점에 확인된 길이보다 더 큰 인덱스값을 갖는 요소들)에 대해서는 콜백을 수행하지 않습니다.<br>만약 이런 메서드를 이용해 배열을 변경해야한다면, 원본 배열 대신 새로운 배열로 값을 복사하는 방식으로 처리하세요.</p><br><h4 id="entries"><a href="#entries" class="headerlink" title="entries()"></a>entries()</h4><p>메서드는 배열의 각 인덱스에 대한 키/값 쌍을 가지는 새로운 <code>Array Iterator</code> 객체를 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> iterator1 = array1.entries();</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(iterator1.next().value);</span><br><span class="line"><span class="hljs-comment">// expected output: Array [0, "a"]</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(iterator1.next().value);</span><br><span class="line"><span class="hljs-comment">// expected output: Array [1, "b"]</span></span><br></pre></td></tr></table></figure><br><h4 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h4><p>만약 배열의 모든 요소가 제공된 검사 함수를 만족하면 true를 반환합니다.(빈배열에서 호출하면 무조건 true 반환)</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isBelowThreshold</span>(<span class="hljs-params">currentValue</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> currentValue &lt; <span class="hljs-number">40</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">30</span>, <span class="hljs-number">39</span>, <span class="hljs-number">29</span>, <span class="hljs-number">10</span>, <span class="hljs-number">13</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1.every(isBelowThreshold));</span><br><span class="line"><span class="hljs-comment">// expected output: true</span></span><br></pre></td></tr></table></figure><br><h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><p>주어진 필터링 함수의 값의 결과가 참인 경우의 배열 요소들만으로 새로운 배열을 생성하여 반환합니다</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> words = [<span class="hljs-string">'spray'</span>, <span class="hljs-string">'limit'</span>, <span class="hljs-string">'elite'</span>, <span class="hljs-string">'exuberant'</span>, <span class="hljs-string">'destruction'</span>, <span class="hljs-string">'present'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> result = words.filter(<span class="hljs-function"><span class="hljs-params">word</span> =&gt;</span> word.length &gt; <span class="hljs-number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(result);</span><br><span class="line"><span class="hljs-comment">// expected output: Array ["exuberant", "destruction", "present"]</span></span><br></pre></td></tr></table></figure><br><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>주어진 테스팅 함수의 요구조건을 만족하는 배열 요소를 반환합니다. 그러한 배열 요소가 없으면  undefined를 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">130</span>, <span class="hljs-number">44</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> found = array1.find(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">element</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> element &gt; <span class="hljs-number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(found);</span><br><span class="line"><span class="hljs-comment">// expected output: 12</span></span><br></pre></td></tr></table></figure><br><h4 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a>findIndex()</h4><p>주어진 테스트 함수를 만족하는 배열의 첫 번째 요소에 대한 인덱스를 반환합니다. 그렇지 않으면 -1이 리턴됩니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">130</span>, <span class="hljs-number">44</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isLargeNumber</span>(<span class="hljs-params">element</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> element &gt; <span class="hljs-number">13</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1.findIndex(isLargeNumber));</span><br><span class="line"><span class="hljs-comment">// expected output: 3</span></span><br></pre></td></tr></table></figure><br><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><p>메서드는 주어진 함수를 배열 요소 각각에 대해 실행합니다.배열의 각각의 요소에 함수를 호출합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>];</span><br><span class="line"></span><br><span class="line">array1.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">element</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(element);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// expected output: "a"</span></span><br><span class="line"><span class="hljs-comment">// expected output: "b"</span></span><br><span class="line"><span class="hljs-comment">// expected output: "c"</span></span><br></pre></td></tr></table></figure><br><h4 id="keys"><a href="#keys" class="headerlink" title="keys()"></a>keys()</h4><p>배열의 각 인덱스에 대한 key들을 가지는 새로운 <code>Array Iterator</code> 객체를 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>];</span><br><span class="line"><span class="hljs-keyword">const</span> iterator = array1.keys(); </span><br><span class="line">  </span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> iterator) &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(key); <span class="hljs-comment">// expected output: 0 1 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><p>배열 내의 모든 요소 각각에 대하여  제공된 함수(callback)를 호출하고, 그 결과를 모아서  만든 새로운 배열을 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// pass a function to map</span></span><br><span class="line"><span class="hljs-keyword">const</span> map1 = array1.map(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x * <span class="hljs-number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(map1);</span><br><span class="line"><span class="hljs-comment">// expected output: Array [2, 8, 18, 32]</span></span><br></pre></td></tr></table></figure><br><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h4><p>메서드는 배열의 각 요소에 대해 주어진 리듀서(reducer) 함수를 실행하고, 하나의 결과값을 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];</span><br><span class="line"><span class="hljs-keyword">const</span> reducer = <span class="hljs-function">(<span class="hljs-params">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 1 + 2 + 3 + 4</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1.reduce(reducer));</span><br><span class="line"><span class="hljs-comment">// expected output: 10</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 5 + 1 + 2 + 3 + 4</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1.reduce(reducer, <span class="hljs-number">5</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: 15</span></span><br></pre></td></tr></table></figure><br><h4 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight()"></a>reduceRight()</h4><p>메서드는 누적기에 대해 함수를 적용하고 배열의 각 값 (오른쪽에서 왼쪽으로)은 값을 단일 값으로 줄여야합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]].reduceRight(</span><br><span class="line">  (accumulator, currentValue) =&gt; accumulator.concat(currentValue)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1);</span><br><span class="line"><span class="hljs-comment">// expected output: Array [4, 5, 2, 3, 0, 1]</span></span><br></pre></td></tr></table></figure><br><h4 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h4><p>배열중의 적어도 한 요소가 테스팅 함수를 만족시킨 다면 true를 반환합니다.(빈배열에서 호출시 무조건 false 반)</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> even = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">element</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// checks whether an element is even</span></span><br><span class="line">  <span class="hljs-keyword">return</span> element % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array.some(even));</span><br><span class="line"><span class="hljs-comment">// expected output: true</span></span><br></pre></td></tr></table></figure><br><h4 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h4><p>배열의 요소값들에 대한 Array Iterator 객체를 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>];</span><br><span class="line"><span class="hljs-keyword">const</span> iterator = array1.values();</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> value <span class="hljs-keyword">of</span> iterator) &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(value); <span class="hljs-comment">// expected output: "a" "b" "c"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>    <br><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array" rel="external nofollow noopener noreferrer" target="_blank">MDN Array</a></li></ul><hr><br><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayUtilities</span> </span>&#123;</span><br><span class="line">  <span class="hljs-comment">/* Your magic here */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> addZeros = ArrayUtilities.addZeros(numbers);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(addZeros);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> moreThanFifty = ArrayUtilities.moreThanFifty(addZeros);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(moreThanFifty);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> noFirst = ArrayUtilities.removeFirst(moreThanFifty);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(noFirst);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> sumAll = ArrayUtilities.sumAll(noFirst);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(sumAll);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> divided = ArrayUtilities.divide(sumAll);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(divided);</span><br></pre></td></tr></table></figure><br><h3 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h3><p>Complete the “ArrayUtilities” class with the following functions:</p><ul><li><strong>addZeros</strong>: Add zeros to all the numbers. Return an array of <strong>numbers</strong>.</li><li><strong>moreThanFifty</strong>: Remove the numbers that are <strong>not</strong> more than 50. Return an array of <strong>numbers</strong>.</li><li><strong>removeFirst</strong>: Remove the first element of the array. Return an array of <strong>numbers</strong>.</li><li><strong>sumAll</strong>: Sum all the elements of the array. Return <strong>ONE</strong> number.</li><li><strong>divide</strong>: Take a number and divide it into an array.</li></ul><br><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>This is the desired output.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">▶ [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]</span><br><span class="line">▶ [60, 70, 80, 90, 100]</span><br><span class="line">▶ [70, 80, 90, 100]</span><br><span class="line">340</span><br><span class="line">▶ [&quot;3&quot;, &quot;4&quot;, &quot;0&quot;]</span><br></pre></td></tr></table></figure><br><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><ul><li>Use arrow functions</li><li>Not everything is on the videos, research!</li></ul><br><h3 id="Submit"><a href="#Submit" class="headerlink" title="Submit"></a>Submit</h3><p><code>My Answer</code><br><a href="https://codesandbox.io/s/day-two-blueprint-8zzqh" rel="external nofollow noopener noreferrer" target="_blank">Day2 CodeSandbox</a></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayUtilities</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">static</span> addZeros = <span class="hljs-function"><span class="hljs-params">numbers</span> =&gt;</span> numbers.map(<span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> <span class="hljs-built_in">Number</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;number&#125;</span>0`</span>));</span><br><span class="line">  <span class="hljs-keyword">static</span> moreThanFifty = <span class="hljs-function"><span class="hljs-params">numbers</span> =&gt;</span> numbers.filter(<span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> number &gt; <span class="hljs-number">50</span>);</span><br><span class="line">  <span class="hljs-keyword">static</span> removeFirst = <span class="hljs-function"><span class="hljs-params">numbers</span> =&gt;</span> numbers.slice(<span class="hljs-number">1</span>);</span><br><span class="line">  <span class="hljs-keyword">static</span> sumAll = <span class="hljs-function"><span class="hljs-params">numbers</span> =&gt;</span></span><br><span class="line">    numbers.reduce(<span class="hljs-function">(<span class="hljs-params">target, number</span>) =&gt;</span> target + number, <span class="hljs-number">0</span>);</span><br><span class="line">  <span class="hljs-keyword">static</span> divide = <span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> [...String(number)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><code>Correct</code><br><a href="https://codesandbox.io/s/day-two-solution-t0g38" rel="external nofollow noopener noreferrer" target="_blank">Day3 Correct</a></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayUtilities</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">static</span> addZeros = <span class="hljs-function"><span class="hljs-params">arr</span> =&gt;</span> arr.map(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> n * <span class="hljs-number">10</span>);</span><br><span class="line">  <span class="hljs-keyword">static</span> moreThanFifty = <span class="hljs-function"><span class="hljs-params">arr</span> =&gt;</span> arr.filter(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> n &gt; <span class="hljs-number">50</span>);</span><br><span class="line">  <span class="hljs-keyword">static</span> removeFirst = <span class="hljs-function"><span class="hljs-params">arr</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> [, ...rest] = arr;</span><br><span class="line">    <span class="hljs-keyword">return</span> rest;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="hljs-keyword">static</span> sumAll = <span class="hljs-function"><span class="hljs-params">arr</span> =&gt;</span> arr.reduce(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b, <span class="hljs-number">0</span>);</span><br><span class="line">  <span class="hljs-keyword">static</span> divide = <span class="hljs-function"><span class="hljs-params">payload</span> =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;payload&#125;</span>`</span>.split(<span class="hljs-string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><hr><br><h2 id="Day2-정리"><a href="#Day2-정리" class="headerlink" title="Day2 정리"></a>Day2 정리</h2><ul><li>오늘의 강의 : <a href="https://academy.nomadcoders.co/courses/436641/lectures/8467057" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 초보를 위한 React JS</a><ul><li>1.6 Array.map</li><li>1.7 Array.filter</li><li>1.8 .forEach .includes .push</li></ul></li><li>강의노트: <a href="https://github.com/alleyful/nomflix" rel="external nofollow noopener noreferrer" target="_blank">Day2 Note</a></li><li>오늘의 과제: <a href="https://codesandbox.io/s/day-two-blueprint-kfv4j" rel="external nofollow noopener noreferrer" target="_blank">Day2 Question</a></li><li>제출: <a href="https://codesandbox.io/s/day-two-blueprint-8zzqh" rel="external nofollow noopener noreferrer" target="_blank">Day2 Answer</a></li><li>정답: <a href="https://codesandbox.io/s/day-two-solution-t0g38" rel="external nofollow noopener noreferrer" target="_blank">Day2 Correct</a></li><li>회고<br>  대부분 API를 통해서 얻어진 데이터들은 배열과 객체로 이루어져 있다.<br>  이러한 데이터들을 잘 다루기 위해 javascript에서 제공하는 메소드들을 잘 활용할 수 있도록 다양한 Array 메소드들을 살펴보았다.<br>  이전부터 사용하던 메소드들도 있지만 ES6이후 생겨난 메소드들은 더욱 가독성이 좋으며 직관적으로 코드를 짤 수 있도록 도와준다.<br>  혼자만 작업하는 1인 개발자 회사가 아닌 이상 협업은 필수이며, 가독성 좋게 잘 짜여진 코드 한줄을 위한 노력이 더 좋은 코드를 향해 함께 할 수 있도록 해주는 기본중에 하나가 아닐까 생각해본다.</li></ul><br>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/31/log/react-challenge/react-challenge-day2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS ReactJS Challenge - Day1</title>
      <link>https://alleyful.github.io/2019/08/30/log/react-challenge/react-challenge-day1/</link>
      <guid>https://alleyful.github.io/2019/08/30/log/react-challenge/react-challenge-day1/</guid>
      <pubDate>Thu, 29 Aug 2019 15:48:44 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;오늘의 강의: #1.0 ~ #1.5&lt;br&gt;오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/courses/436641/lectures/8467057&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;[노마드 코더] 초보를 위한 React JS&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.1 Arrow Functions&lt;/li&gt;
&lt;li&gt;1.2 Template Literals&lt;/li&gt;
&lt;li&gt;1.3 Object Destructuring&lt;/li&gt;
&lt;li&gt;1.4 Spread Operator&lt;/li&gt;
&lt;li&gt;1.5 Classes&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>오늘의 강의: #1.0 ~ #1.5<br>오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.</p></blockquote><br><p><a href="https://academy.nomadcoders.co/courses/436641/lectures/8467057" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 초보를 위한 React JS</a></p><ul><li>1.1 Arrow Functions</li><li>1.2 Template Literals</li><li>1.3 Object Destructuring</li><li>1.4 Spread Operator</li><li>1.5 Classes</li></ul><br><a id="more"></a><hr><br><h2 id="Lecture-Summery"><a href="#Lecture-Summery" class="headerlink" title="Lecture Summery"></a>Lecture Summery</h2><h3 id="Arrow-Functions"><a href="#Arrow-Functions" class="headerlink" title="Arrow Functions"></a>Arrow Functions</h3><p>화살표 함수(Arrow function)는 function 키워드 대신 (=&gt;)를 사용하여 보다 간략한 함수를 선언할 수 있다.</p><ul><li>기본 문법   </li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 매개변수 지정 방법</span><br><span class="line">    () =&gt; &#123; ... &#125; // 매개변수가 없을 경우</span><br><span class="line">     x =&gt; &#123; ... &#125; // 매개변수가 한 개인 경우, 소괄호를 생략할 수 있다.</span><br><span class="line">(x, y) =&gt; &#123; ... &#125; // 매개변수가 여러 개인 경우, 소괄호를 생략할 수 없다.</span><br><span class="line"></span><br><span class="line">// 함수 몸체 지정 방법</span><br><span class="line">x =&gt; &#123; return x * x &#125;  // single line block</span><br><span class="line">x =&gt; x * x             // 함수 몸체가 한줄의 구문이라면 중괄호를 생략할 수 있으며 암묵적으로 return된다. 위 표현과 동일하다.</span><br><span class="line"></span><br><span class="line">() =&gt; &#123; return &#123; a: 1 &#125;; &#125;</span><br><span class="line">() =&gt; (&#123; a: 1 &#125;)  // 위 표현과 동일하다. 객체 반환시 소괄호를 사용한다.</span><br><span class="line"></span><br><span class="line">() =&gt; &#123;           // multi line block.</span><br><span class="line">  const x = 10;</span><br><span class="line">  return x * x;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><ul><li>사용 방법   </li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params">name = <span class="hljs-string">"Alley"</span></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-string">"Hello"</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// arrow Function</span></span><br><span class="line"><span class="hljs-keyword">const</span> sayHello = <span class="hljs-function">(<span class="hljs-params">name = <span class="hljs-string">"Alley"</span></span>) =&gt;</span> <span class="hljs-string">"Hello"</span> + name;</span><br></pre></td></tr></table></figure><br><ul><li>화살표 함수 Vs 일반함수  <ol><li>화살표 함수는 항상 바인딩 된 this를 갖는다.(Lexical this)</li><li>화살표 함수는 생성자로 사용할 수 없다(constructor, prototype 없음)</li><li>arguments를 지원하지 않음.</li></ol></li></ul><br><ul><li>화살표 함수를 사용해서는 안되는 경우<ol><li>메소드: 메소드를 호출한 객체를 가리키지 않고 상위 컨택스트를 가리킨다. =&gt; ES6 축약 메소드 표현 사용</li><li>prototype: 위와 같은 문제가 발생하여 일반 함수를 할당하게 된다. </li><li>생성자 함수: 화살표 함수는 prototype 프로퍼티를 가지고 있지 않기때문에 프로토타입 객제의 constructor를 사용할 수 없다.</li></ol></li></ul><br><ul><li>Reference<ul><li><a href="https://academy.nomadcoders.co/courses/436641/lectures/8467057" rel="external nofollow noopener noreferrer" target="_blank">#1.1 Arrow Functions</a></li><li><a href="https://poiemaweb.com/es6-arrow-function" rel="external nofollow noopener noreferrer" target="_blank">화살표 함수</a></li><li><a href="http://webframeworks.kr/tutorials/translate/arrow-function/" rel="external nofollow noopener noreferrer" target="_blank">화살표 함수와 메소드 정의</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/%EC%95%A0%EB%A1%9C%EC%9A%B0_%ED%8E%91%EC%85%98" rel="external nofollow noopener noreferrer" target="_blank">MDN 화살표 함수와</a></li></ul></li></ul><br><br><br><h3 id="Template-Literals"><a href="#Template-Literals" class="headerlink" title="Template Literals"></a>Template Literals</h3><p>ES6의 새로운 문자열 표기이다. 일반적인 문자열과 달리 여러 줄에 걸쳐 문자열을 작성할 수 있으며 템플릿 리터럴 내의 모든 white-space는 있는 그대로 적용된다.<br>템플릿 리터럴은 + 연산자를 사용하지 않아도 간단한 방법으로 새로운 문자열을 삽입할 수 있는 기능을 제공한다. 이를 문자열 인터폴레이션(String Interpolation)이라 한다.<br>문자열 인터폴레이션은 ${ … }으로 표현식을 감싼다. 문자열 인터폴레이션 내의 표현식은 문자열로 강제 타입 변환된다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> sayHello = <span class="hljs-function">(<span class="hljs-params">name = <span class="hljs-string">"Alley"</span></span>) =&gt;</span> <span class="hljs-string">`Hello <span class="hljs-subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`1 + 1 = <span class="hljs-subst">$&#123;<span class="hljs-number">1</span> + <span class="hljs-number">1</span>&#125;</span>`</span>); <span class="hljs-comment">// "1 + 1 = 2"</span></span><br></pre></td></tr></table></figure><br><ul><li>Reference<ul><li><a href="https://poiemaweb.com/es6-template-literals" rel="external nofollow noopener noreferrer" target="_blank">템플릿 리터럴</a></li></ul></li></ul><br><br><br><h3 id="Object-Destructuring"><a href="#Object-Destructuring" class="headerlink" title="Object Destructuring"></a>Object Destructuring</h3><p>디스트럭처링(Destructuring)은 구조화된 배열 또는 객체를 Destructuring(비구조화, 파괴)하여 개별적인 변수에 할당하는 것이다.<br>배열 또는 객체 리터럴에서 필요한 값만을 추출하여 변수에 할당하거나 반환할 때 유용하다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> human = &#123;</span><br><span class="line">  name: <span class="hljs-string">"Alley"</span>,</span><br><span class="line">  lastName: <span class="hljs-string">"Kim"</span>,</span><br><span class="line">  nation: <span class="hljs-string">"Korea"</span>,</span><br><span class="line">  favFood: &#123;</span><br><span class="line">    breakfast: <span class="hljs-string">"egg"</span>,</span><br><span class="line">    lunch: <span class="hljs-string">"bread"</span>,</span><br><span class="line">    dinner: <span class="hljs-string">"meat"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> name = human.name;</span><br><span class="line"><span class="hljs-keyword">const</span> lastName = human.lastName;</span><br><span class="line"><span class="hljs-keyword">const</span> difNation = human.nation;</span><br><span class="line"><span class="hljs-keyword">const</span> dinner = human.favFood.dinner;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//Destructuring</span></span><br><span class="line"><span class="hljs-keyword">const</span> &#123; name, lastName, <span class="hljs-attr">nation</span>: difNation, <span class="hljs-attr">favFood</span>: &#123; dinner &#125; &#125; = human;</span><br></pre></td></tr></table></figure><br><br><br><h3 id="Spread-Operator"><a href="#Spread-Operator" class="headerlink" title="Spread Operator"></a>Spread Operator</h3><p>Spread 연산자는 연산자의 대상 배열 또는 이터러블(iterable)을 “개별” 요소로 분리한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Array</span></span><br><span class="line"><span class="hljs-keyword">const</span> days = [ <span class="hljs-string">'Mon'</span>, <span class="hljs-string">'Tues'</span>, <span class="hljs-string">'Wed'</span> ];</span><br><span class="line"><span class="hljs-keyword">const</span> otherDays = [ <span class="hljs-string">'Thu'</span>, <span class="hljs-string">'Fri'</span>, <span class="hljs-string">'Sat'</span> ];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> allDays = [ ...days, ...otherDays, <span class="hljs-string">'Sun'</span> ];</span><br></pre></td></tr></table></figure><br><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Obj</span></span><br><span class="line"><span class="hljs-keyword">const</span> ob = &#123;</span><br><span class="line">  first: <span class="hljs-string">'hi'</span>,</span><br><span class="line">  second: <span class="hljs-string">'hello'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> ab = &#123;</span><br><span class="line">  thrid: <span class="hljs-string">'bye bye'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> two = &#123; ...ob, ...ab &#125;</span><br></pre></td></tr></table></figure><br><br><br><h3 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h3><p>자바스크립트는 프로토타입 기반(prototype-based) 객체지향 언어다. 비록 다른 객체지향 언어들과의 차이점에 대한 논쟁이 있긴 하지만, 자바스크립트는 강력한 객체지향 프로그래밍 능력을 지니고 있다.</p><p>프로토타입 기반 프로그래밍은 클래스가 필요없는(class-free) 객체지향 프로그래밍 스타일로 프로토타입 체인과 클로저 등으로 객체 지향 언어의 상속, 캡슐화(정보 은닉) 등의 개념을 구현할 수 있다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Human</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(name, lastName) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">    <span class="hljs-keyword">this</span>.lastName = lastName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Baby</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Human</span> </span>&#123;</span><br><span class="line">  cry() &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Waaaaaa'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`My Name is <span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>.name&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> myBaby = <span class="hljs-keyword">new</span> Baby(<span class="hljs-string">'mini'</span>, <span class="hljs-string">'me'</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(myBaby.cry(), myBaby.sayName());</span><br></pre></td></tr></table></figure><p>ES6 클래스는 class 키워드를 사용하여 정의하며, new 연산자와 함께 클래스 이름을 호출하면 클래스의 인스턴스가 생성된다.  </p><p>constructor는 인스턴스를 생성하고 클래스 필드를 초기화하기 위한 특수한 메소드이다. constructor는 클래스 내에 한 개만 존재할 수 있으며 만약 클래스가 2개 이상의 constructor를 포함하면 문법 에러(SyntaxError)가 발생한다. constructor는 인스턴스의 생성과 동시에 클래스 필드의 생성과 초기화를 실행한다. 따라서 클래스 필드를 초기화해야 한다면 constructor를 생략해서는 안된다.</p><p>클래스의 정적(static) 메소드를 정의할 때 static 키워드를 사용한다. 정적 메소드는 클래스의 인스턴스가 아닌 클래스 이름으로 호출한다. 따라서 클래스의 인스턴스를 생성하지 않아도 호출할 수 있다. 정적 메소드는 클래스 이름으로 호출하기 때문에 클래스의 인스턴스를 생성하지 않아도 사용할 수 있다. 단, 정적 메소드는 this를 사용할 수 없다. 달리 말하면 메소드 내부에서 this를 사용할 필요가 없는 메소드는 정적 메소드로 만들 수 있다. 정적 메소드는 Math 객체의 메소드처럼 애플리케이션 전역에서 사용할 유틸리티(utility) 함수를 생성할 때 주로 사용한다.</p><br><ul><li>Reference<ul><li><a href="https://poiemaweb.com/es6-class" rel="external nofollow noopener noreferrer" target="_blank">클래스</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes/static" rel="external nofollow noopener noreferrer" target="_blank">static</a></li></ul></li></ul><br><br><hr><br><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectUtilities</span> </span>&#123;</span><br><span class="line">  <span class="hljs-comment">/* Your magic here */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> objA = &#123;</span><br><span class="line">  name: <span class="hljs-string">"Nicolas"</span>,</span><br><span class="line">  favFood: <span class="hljs-string">"Kimchi"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> objB = &#123;</span><br><span class="line">  password: <span class="hljs-string">"12345"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> user = ObjectUtilities.mergeObjects(objA, objB);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(user);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> cleanUser = ObjectUtilities.removePassword(user);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(cleanUser);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> frozenUser = ObjectUtilities.freezeObj(cleanUser);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> onlyValues = ObjectUtilities.getOnlyValues(frozenUser);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(onlyValues);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> onlyProperties = ObjectUtilities.getOnlyProperties(frozenUser);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(onlyProperties);</span><br><span class="line"></span><br><span class="line">frozenUser.name = <span class="hljs-string">"Hello!"</span>; <span class="hljs-comment">// This should show an error</span></span><br></pre></td></tr></table></figure><br><h3 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h3><p>Complete the “<strong>ObjectUtilities</strong>“ class with the following functions.</p><ul><li><strong>mergeObjects</strong>: Merge two objects. Return an object.</li><li><strong>removePassword</strong>: Remove the ‘password’ key on an object. Return an object.</li><li><strong>freezeObj</strong>: Freezes an object. Returns the frozen object.</li><li><strong>getOnlyValues</strong>: Returns an array of all the values inside of an object.</li><li><strong>getOnlyProperties</strong>: Returns an array of all the properties inside of an object.<br>Changing the ‘<strong>name</strong>‘ of the ‘<strong>frozenUser</strong>‘ SHOULD throw an error.</li></ul><br><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>This is the desired output.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">▶ Object &#123;name: &quot;Nicolas&quot;, favFood: &quot;Kimchi&quot;, password: &quot;12345&quot;&#125;</span><br><span class="line">▶ Object &#123;name: &quot;Nicolas&quot;, favFood: &quot;Kimchi&quot;&#125;</span><br><span class="line">▶ [&quot;Nicolas&quot;, &quot;Kimchi&quot;]</span><br><span class="line">▶ [&quot;name&quot;, &quot;favFood&quot;]</span><br><span class="line">Error in sandbox: </span><br><span class="line">▶ TypeError: Cannot assign to read only property &apos;name&apos; of object &apos;#&lt;Object&gt;&apos;</span><br></pre></td></tr></table></figure><br><h3 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h3><ul><li>The output of the program must be EXACTLY like on the image above.</li><li>Place your functions INSIDE of ‘ObjectUtilities’</li><li>DO NOT edit ANYTHING OUTSIDE of ‘ObjectUtiliies’.</li><li>Don’t give up!</li></ul><br><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><ul><li>Use arrow functions</li><li>Use spread and rest operators</li></ul><br><h3 id="Submit"><a href="#Submit" class="headerlink" title="Submit"></a>Submit</h3><p><code>My Answer</code><br><a href="https://codesandbox.io/s/day-one-blueprint-hrvg2" rel="external nofollow noopener noreferrer" target="_blank">Day1 CodeSandbox</a></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectUtilities</span> </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 주어진 조건에서 instance 생성을 하지 않으므로 static methid 이용.</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">static</span> mergeObjects = <span class="hljs-function">(<span class="hljs-params">objA, objB</span>) =&gt;</span> (&#123; ...objA, ...objB &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">static</span> removePassword = <span class="hljs-function">(<span class="hljs-params">&#123; password, ...user &#125;</span>) =&gt;</span> (&#123; ...user &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">static</span> freezeObj = <span class="hljs-function"><span class="hljs-params">cleanUser</span> =&gt;</span> <span class="hljs-built_in">Object</span>.freeze(cleanUser);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">static</span> getOnlyValues = <span class="hljs-function"><span class="hljs-params">frozenUser</span> =&gt;</span> <span class="hljs-built_in">Object</span>.keys(frozenUser).map(<span class="hljs-function"><span class="hljs-params">k</span> =&gt;</span> frozenUser[k]);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">static</span> getOnlyProperties = <span class="hljs-function"><span class="hljs-params">frozenUser</span> =&gt;</span> <span class="hljs-built_in">Object</span>.keys(frozenUser).map(<span class="hljs-function"><span class="hljs-params">k</span> =&gt;</span> k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><code>Correct</code><br><a href="https://codesandbox.io/s/day-one-solution-qsule" rel="external nofollow noopener noreferrer" target="_blank">Day1 Correct</a></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectUtilities</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">static</span> mergeObjects = <span class="hljs-function">(<span class="hljs-params">objectA, objectB</span>) =&gt;</span> (&#123; ...objectA, ...objectB &#125;);</span><br><span class="line">  <span class="hljs-keyword">static</span> removePassword = <span class="hljs-function">(<span class="hljs-params">&#123; password, ...rest &#125;</span>) =&gt;</span> rest;</span><br><span class="line">  <span class="hljs-keyword">static</span> getOnlyProperties = <span class="hljs-function"><span class="hljs-params">obj</span> =&gt;</span> <span class="hljs-built_in">Object</span>.keys(obj);</span><br><span class="line">  <span class="hljs-keyword">static</span> getOnlyValues = <span class="hljs-function"><span class="hljs-params">obj</span> =&gt;</span> <span class="hljs-built_in">Object</span>.values(obj);</span><br><span class="line">  <span class="hljs-keyword">static</span> freezeObj = <span class="hljs-function"><span class="hljs-params">obj</span> =&gt;</span> <span class="hljs-built_in">Object</span>.freeze(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><hr><br><h2 id="Day1-정리"><a href="#Day1-정리" class="headerlink" title="Day1 정리"></a>Day1 정리</h2><ul><li><p>오늘의 강의 : <a href="https://academy.nomadcoders.co/courses/436641/lectures/8467057" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 초보를 위한 React JS</a></p><ul><li>1.1 Arrow Functions</li><li>1.2 Template Literals</li><li>1.3 Object Destructuring</li><li>1.4 Spread Operator</li><li>1.5 Classes</li></ul></li><li><p>강의노트: <a href="https://github.com/alleyful/nomflix" rel="external nofollow noopener noreferrer" target="_blank">Note</a></p></li><li><p>오늘의 과제: <a href="https://codesandbox.io/s/day-one-blueprint-fdmk3" rel="external nofollow noopener noreferrer" target="_blank">Day1 Question</a></p></li><li><p>제출: <a href="https://codesandbox.io/s/day-one-blueprint-hrvg2" rel="external nofollow noopener noreferrer" target="_blank">Day1 Answer</a></p></li><li><p>정답: <a href="https://codesandbox.io/s/day-one-solution-qsule" rel="external nofollow noopener noreferrer" target="_blank">Day1 Correct</a></p></li><li><p>회고<br>  오늘의 강의는 arrow function, templeate literals 등 ES6를 접하게 되면 처음 배우는 내용이었다.<br>  이미 머리로는 알고 있는 내용이었지만, 정작 인스턴스를 만들지 않고 함수를 호출하는 부분에서부터 막힐줄은 몰랐다. ‘해당 메소드를 찾을 수…..’<br>  모르는 것보다 <strong>알고 있다고 착각</strong>하는 것을 더욱 조심하자.</p><blockquote><p>정적 메서드는 클래스의 인스턴스 없이 호출이 가능하며 클래스가 인스턴스화되면 호출할 수 없다. 정적 메서드는 종종 어플리케이션의 유틸리티 함수를 만드는데 사용된다.</p></blockquote></li></ul><br>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/30/log/react-challenge/react-challenge-day1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Chocolate Feast</title>
      <link>https://alleyful.github.io/2019/08/28/algorithm/hackerrank/54_ChocolateFeast/</link>
      <guid>https://alleyful.github.io/2019/08/28/algorithm/hackerrank/54_ChocolateFeast/</guid>
      <pubDate>Tue, 27 Aug 2019 16:03:51 GMT</pubDate>
      <description>
      
        &lt;p&gt;Little Bobby loves chocolate. He frequently goes to his favorite &lt;strong&gt;5 &amp;amp; 10&lt;/strong&gt; store, Penny Auntie, to buy them. They are having a promotion at Penny Auntie. If Bobby saves enough wrappers, he can turn them in for a free chocolate.&lt;/p&gt;
&lt;p&gt;For example, Bobby has &lt;strong&gt;n = 15&lt;/strong&gt; to spend on bars of chocolate that cost &lt;strong&gt;c = 3&lt;/strong&gt; each. He can turn in &lt;strong&gt;m = 2&lt;/strong&gt; wrappers to receive another bar. Initially, he buys &lt;strong&gt;5&lt;/strong&gt; bars and has &lt;strong&gt;5&lt;/strong&gt; wrappers after eating them. He turns in &lt;strong&gt;4&lt;/strong&gt; of them, leaving him with &lt;strong&gt;1&lt;/strong&gt;, for &lt;strong&gt;2&lt;/strong&gt; more bars. After eating those two, he has &lt;strong&gt;3&lt;/strong&gt; wrappers, turns in &lt;strong&gt;2&lt;/strong&gt; leaving him with &lt;strong&gt;1&lt;/strong&gt; wrapper and his new bar. Once he eats that one, he has &lt;strong&gt;2&lt;/strong&gt; wrappers and turns them in for another bar. After eating that one, he only has &lt;strong&gt;1&lt;/strong&gt; wrapper, and his feast ends. Overall, he has eaten &lt;code&gt;5 + 2 + 1 + 2 = 9&lt;/code&gt; bars.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Little Bobby loves chocolate. He frequently goes to his favorite <strong>5 &amp; 10</strong> store, Penny Auntie, to buy them. They are having a promotion at Penny Auntie. If Bobby saves enough wrappers, he can turn them in for a free chocolate.</p><p>For example, Bobby has <strong>n = 15</strong> to spend on bars of chocolate that cost <strong>c = 3</strong> each. He can turn in <strong>m = 2</strong> wrappers to receive another bar. Initially, he buys <strong>5</strong> bars and has <strong>5</strong> wrappers after eating them. He turns in <strong>4</strong> of them, leaving him with <strong>1</strong>, for <strong>2</strong> more bars. After eating those two, he has <strong>3</strong> wrappers, turns in <strong>2</strong> leaving him with <strong>1</strong> wrapper and his new bar. Once he eats that one, he has <strong>2</strong> wrappers and turns them in for another bar. After eating that one, he only has <strong>1</strong> wrapper, and his feast ends. Overall, he has eaten <code>5 + 2 + 1 + 2 = 9</code> bars.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the chocolateFeast function in the editor below. It must return the number of chocolates Bobby can eat after taking full advantage of the promotion.</p><p>chocolateFeast has the following parameter(s):</p><ul><li>n: an integer representing Bobby’s initial amount of money</li><li>c: an integer representing the cost of a chocolate bar</li><li>m: an integer representing the number of wrappers he can turn in for a free bar   </li></ul><p><strong>Note</strong>: Little Bobby will always turn in his wrappers if he has enough to get a free chocolate.</p><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer, <strong>t</strong>, denoting the number of test cases to analyze.<br>Each of the next <strong>t</strong> lines contains three space-separated integers: <strong>n</strong>, <strong>c</strong>, and <strong>m</strong>. They represent money to spend, cost of a chocolate, and the number of wrappers he can turn in for a free chocolate.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;t%5Cleq&space;1000" alt></li><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;n%5Cleq&space;10%5E%7B5%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;c%5Cleq&space;n" alt></li><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;m%5Cleq&space;n" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each trip to Penny Auntie, print the total number of chocolates Bobby eats on a new line.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">10 2 5</span><br><span class="line">12 4 4</span><br><span class="line">6 2 2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Bobby makes the following <strong>3</strong> trips to the store:</p><ol><li>He spends his <strong>10</strong> dollars on <strong>5</strong> chocolates at <strong>2</strong> dollars apiece. He then eats them and exchanges all <strong>5</strong> wrappers to get <strong>1</strong> more. He eats <strong>6</strong> chocolates.   </li><li>He spends his <strong>12</strong> dollars on <strong>3</strong> chocolates at <strong>4</strong> dollars apiece. He has <strong>3</strong> wrappers, but needs <strong>4</strong> to trade for his next chocolate. He eats <strong>3</strong> chocolates.   </li><li>He spends <strong>6</strong> dollars on <strong>3</strong> chocolates at <strong>2</strong> dollars apiece. He then exchanges <strong>2</strong> of the <strong>3</strong> wrappers for <strong>1</strong> additional piece. Next, he uses his third leftover chocolate wrapper from his initial purchase with the wrapper from his trade-in to do a second trade-in for <strong>1</strong> more piece. At this point he has <strong>1</strong> wrapper left, which is not enough to perform another trade-in. He eats <strong>5</strong> chocolates.   </li></ol><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">chocolateFeast</span>(<span class="hljs-params">n, c, m</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> result = <span class="hljs-built_in">Math</span>.floor(n / c);</span><br><span class="line">  <span class="hljs-keyword">let</span> wrapper = result;</span><br><span class="line">  <span class="hljs-keyword">let</span> rest = <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">let</span> total = result + rest;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">while</span> (total / m &gt;= <span class="hljs-number">1</span>) &#123;</span><br><span class="line">    total = wrapper + rest;</span><br><span class="line">    wrapper = <span class="hljs-built_in">Math</span>.floor(total / m);</span><br><span class="line">    rest = total % m;</span><br><span class="line">    result += wrapper;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/28/algorithm/hackerrank/54_ChocolateFeast/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS ReactJS Challenge - 시작하기</title>
      <link>https://alleyful.github.io/2019/08/27/log/react-challenge/react-challenge-start/</link>
      <guid>https://alleyful.github.io/2019/08/27/log/react-challenge/react-challenge-start/</guid>
      <pubDate>Tue, 27 Aug 2019 11:28:44 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;code&gt;2019. 8. 26 ~ 2019. 9. 9&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;노마드 코더의 &lt;code&gt;초보를 위한 React JS&lt;/code&gt; 강좌는 이미 한번 완강을 했지만 항상 강의만 듣고 기록을 남기지 않아서, 나중에 필요한경우 다시
        
      
      </description>
      
      <content:encoded><![CDATA[<p><code>2019. 8. 26 ~ 2019. 9. 9</code>  </p><p>노마드 코더의 <code>초보를 위한 React JS</code> 강좌는 이미 한번 완강을 했지만 항상 강의만 듣고 기록을 남기지 않아서, 나중에 필요한경우 다시 검색을 하거나 그 부분의 강의를 찾아 보는 경우가 많았던것 같습니다.<br>다시한번 강의를 들으면서 필요한 부분에 대한 내용을 덧붙여 강의노트를 만들어 보고자 기록을 남기기 시작했습니다.<br>이번 챌린지를 통해서 기록을 남기는 습관을 갖을 수 있게 되기를 바랍니다. </p><br><h2 id="Clone-Coding-for-ReactJS-Challenge"><a href="#Clone-Coding-for-ReactJS-Challenge" class="headerlink" title="Clone Coding for ReactJS Challenge"></a>Clone Coding for ReactJS Challenge</h2><p><a href="https://academy.nomadcoders.co/courses/436641/lectures/8478733" rel="external nofollow noopener noreferrer" target="_blank">노마드코더 초보를 위한 React JS</a><br><a href="https://academy.nomadcoders.co/courses/436641/lectures/8478732" rel="external nofollow noopener noreferrer" target="_blank">ReactJS Challenge by Nomadcoders</a></p><br>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/27/log/react-challenge/react-challenge-start/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Halloween Sale</title>
      <link>https://alleyful.github.io/2019/08/26/algorithm/hackerrank/53_HalloweenSale/</link>
      <guid>https://alleyful.github.io/2019/08/26/algorithm/hackerrank/53_HalloweenSale/</guid>
      <pubDate>Sun, 25 Aug 2019 16:03:51 GMT</pubDate>
      <description>
      
        &lt;p&gt;You wish to buy video games from the famous online video game store Mist.&lt;/p&gt;
&lt;p&gt;Usually, all games are sold at the same price, &lt;strong&gt;p&lt;/strong&gt; dollars. However, they are planning to have the seasonal Halloween Sale next month in which you can buy games at a cheaper price. Specifically, the first game you buy during the sale will be sold at &lt;strong&gt;p&lt;/strong&gt; dollars, but every subsequent game you buy will be sold at exactly &lt;strong&gt;d&lt;/strong&gt; dollars less than the cost of the previous one you bought. This will continue until the cost becomes less than or equal to &lt;strong&gt;m&lt;/strong&gt; dollars, after which every game you buy will cost &lt;strong&gt;m&lt;/strong&gt; dollars each.&lt;/p&gt;
&lt;p&gt;For example, if &lt;strong&gt;p = 20&lt;/strong&gt;, &lt;strong&gt;d = 3&lt;/strong&gt; and &lt;strong&gt;m = 6&lt;/strong&gt;, then the following are the costs of the first &lt;strong&gt;11&lt;/strong&gt; games you buy, in order:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;20, 17, 14, 11, 8, 6, 6, 6, 6, 6, 6&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You have &lt;strong&gt;s&lt;/strong&gt; dollars in your Mist wallet. How many games can you buy during the Halloween Sale?&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>You wish to buy video games from the famous online video game store Mist.</p><p>Usually, all games are sold at the same price, <strong>p</strong> dollars. However, they are planning to have the seasonal Halloween Sale next month in which you can buy games at a cheaper price. Specifically, the first game you buy during the sale will be sold at <strong>p</strong> dollars, but every subsequent game you buy will be sold at exactly <strong>d</strong> dollars less than the cost of the previous one you bought. This will continue until the cost becomes less than or equal to <strong>m</strong> dollars, after which every game you buy will cost <strong>m</strong> dollars each.</p><p>For example, if <strong>p = 20</strong>, <strong>d = 3</strong> and <strong>m = 6</strong>, then the following are the costs of the first <strong>11</strong> games you buy, in order:</p><p><code>20, 17, 14, 11, 8, 6, 6, 6, 6, 6, 6</code></p><p>You have <strong>s</strong> dollars in your Mist wallet. How many games can you buy during the Halloween Sale?</p><br><a id="more"></a><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first and only line of input contains four space-separated integers <strong>p</strong>, <strong>d</strong>, <strong>m</strong> and <strong>s</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;m%5Cleq&space;p%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;d%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;s%5Cleq&space;10%5E%7B4%7D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single line containing a single integer denoting the maximum number of games you can buy.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 3 6 80</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>We have <strong>p = 20</strong>, <strong>d = 3</strong> and <strong>m = 6</strong>, the same as in the problem statement. We also have <strong>S = 80</strong> dollars. We can buy <strong>6</strong> games since they cost <code>20 + 17 + 14 + 11 + 8 + 6 = 76</code> dollars. However, we cannot buy a <strong>7</strong>th game. Thus, the answer is <code>6</code>.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 3 6 85</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>This is the same as the previous case, except this time we have <strong>s = 85</strong> dollars. This time, we can buy <strong>7</strong> games since they cost <code>20 + 17 + 14 + 11 + 8 + 6 + 6 = 82</code> dollars. However, we cannot buy an <strong>8</strong>th game. Thus, the answer is <code>7</code>.</p><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">howManyGames</span>(<span class="hljs-params">p, d, m, s</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> restMoney = s;</span><br><span class="line">  <span class="hljs-keyword">let</span> price = p;</span><br><span class="line">  <span class="hljs-keyword">let</span> isDiscount = p - d &gt;= m;</span><br><span class="line">  <span class="hljs-keyword">let</span> results = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span> (restMoney &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">    restMoney -= price;</span><br><span class="line">    restMoney &gt;= <span class="hljs-number">0</span> &amp;&amp; results++;</span><br><span class="line">    isDiscount = price - d &gt;= m;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">while</span> (restMoney &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">    price = isDiscount ? price - d : m;</span><br><span class="line">    restMoney = restMoney - price; </span><br><span class="line">    restMoney &gt;= <span class="hljs-number">0</span> &amp;&amp; results++;</span><br><span class="line">    isDiscount = price - d &gt;= m;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/26/algorithm/hackerrank/53_HalloweenSale/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Minimum Distances</title>
      <link>https://alleyful.github.io/2019/08/25/algorithm/hackerrank/52_MinimumDistances/</link>
      <guid>https://alleyful.github.io/2019/08/25/algorithm/hackerrank/52_MinimumDistances/</guid>
      <pubDate>Sat, 24 Aug 2019 15:03:19 GMT</pubDate>
      <description>
      
        &lt;p&gt;We define the distance between two array values as the number of indices between the two values. Given &lt;strong&gt;a&lt;/strong&gt;, find the minimum distance between any pair of equal elements in the array. If no such value exists, print &lt;strong&gt;-1&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, if &lt;strong&gt;a = [3, 2, 1, 2, 3]&lt;/strong&gt;, there are two matching pairs of values: &lt;strong&gt;3 and 2&lt;/strong&gt;. The indices of the &lt;strong&gt;3&lt;/strong&gt;‘s are &lt;strong&gt;i = 0&lt;/strong&gt; and &lt;strong&gt;j = 4&lt;/strong&gt;, so their distance is &lt;strong&gt;d[i, j] = |j - i| = 4&lt;/strong&gt;. The indices of the &lt;strong&gt;2&lt;/strong&gt;‘s are &lt;strong&gt;i = 1&lt;/strong&gt; and &lt;strong&gt;j = 3&lt;/strong&gt;, so their distance is &lt;strong&gt;d[i, j] = |j - i| = 2&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>We define the distance between two array values as the number of indices between the two values. Given <strong>a</strong>, find the minimum distance between any pair of equal elements in the array. If no such value exists, print <strong>-1</strong>.</p><p>For example, if <strong>a = [3, 2, 1, 2, 3]</strong>, there are two matching pairs of values: <strong>3 and 2</strong>. The indices of the <strong>3</strong>‘s are <strong>i = 0</strong> and <strong>j = 4</strong>, so their distance is <strong>d[i, j] = |j - i| = 4</strong>. The indices of the <strong>2</strong>‘s are <strong>i = 1</strong> and <strong>j = 3</strong>, so their distance is <strong>d[i, j] = |j - i| = 2</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the minimumDistances function in the editor below. It should return the minimum distance between any two matching elements.</p><p>minimumDistances has the following parameter(s):</p><ul><li>a: an array of integers</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>n</strong>, the size of array <strong>a</strong>. The second line contains <strong>n</strong> space-separated integers <strong>a[i]</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;10%5E%7B3%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;a%5Bi%5D%5Cleq&space;10%5E%7B5%7D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single integer denoting the minimum <strong>d[i, j]</strong> in . If no such value exists, print <strong>-1</strong>.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">7 1 3 4 1 7</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Here, we have two options:</p><p><strong>a[1]</strong> and <strong>a[4]</strong> are both <strong>1</strong>, so <strong>d[1, 4] = |1 - 4| = 3</strong>.<strong>a[0]</strong> and <strong>a[5]</strong> are both <strong>7</strong>, so <strong>d[0, 5] = |0 - 5| = 5</strong>.The answer is <code>min(3, 5) = 3</code>.</p><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">minimumDistances</span>(<span class="hljs-params">a</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> result = a.reduceRight(<span class="hljs-function">(<span class="hljs-params">target, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> pairIndex = a.findIndex(<span class="hljs-function">(<span class="hljs-params">v, i</span>) =&gt;</span> v === item &amp;&amp; i &lt; index);</span><br><span class="line">    pairIndex &gt;= <span class="hljs-number">0</span> &amp;&amp; target.push(</span><br><span class="line">      <span class="hljs-built_in">Math</span>.abs(index - pairIndex)</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> result.length &gt; <span class="hljs-number">0</span> ? <span class="hljs-built_in">Math</span>.min(...result) : <span class="hljs-number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/25/algorithm/hackerrank/52_MinimumDistances/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Beautiful Triplets</title>
      <link>https://alleyful.github.io/2019/08/24/algorithm/hackerrank/51_BeautifulTriplets/</link>
      <guid>https://alleyful.github.io/2019/08/24/algorithm/hackerrank/51_BeautifulTriplets/</guid>
      <pubDate>Fri, 23 Aug 2019 15:02:37 GMT</pubDate>
      <description>
      
        &lt;p&gt;Given a sequence of integers &lt;strong&gt;a&lt;/strong&gt;, a triplet &lt;strong&gt;(a[i], a[j], a[k])&lt;/strong&gt; is beautiful if:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;i &amp;lt; j &amp;lt; k&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a[j] - a[i] = a[k] - a[j] = d&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given an increasing sequenc of integers and the value of &lt;strong&gt;d&lt;/strong&gt;, count the number of beautiful triplets in the sequence.&lt;/p&gt;
&lt;p&gt;For example, the sequence &lt;strong&gt;arr = [2, 2, 3, 4, 5]&lt;/strong&gt; and &lt;strong&gt;d = 1&lt;/strong&gt;. There are three beautiful triplets, by index: &lt;strong&gt;[i, j, k] = [0, 2, 3], [1, 2, 3], [2, 3, 4]&lt;/strong&gt;. To test the first triplet, &lt;code&gt;arr[j] - arr[i] = 3 - 2 = 1&lt;/code&gt; and &lt;code&gt;arr[k] = arr[j] = 4 - 3 = 1&lt;/code&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Given a sequence of integers <strong>a</strong>, a triplet <strong>(a[i], a[j], a[k])</strong> is beautiful if:</p><ul><li>i &lt; j &lt; k</li><li><code>a[j] - a[i] = a[k] - a[j] = d</code></li></ul><p>Given an increasing sequenc of integers and the value of <strong>d</strong>, count the number of beautiful triplets in the sequence.</p><p>For example, the sequence <strong>arr = [2, 2, 3, 4, 5]</strong> and <strong>d = 1</strong>. There are three beautiful triplets, by index: <strong>[i, j, k] = [0, 2, 3], [1, 2, 3], [2, 3, 4]</strong>. To test the first triplet, <code>arr[j] - arr[i] = 3 - 2 = 1</code> and <code>arr[k] = arr[j] = 4 - 3 = 1</code>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the beautifulTriplets function in the editor below. It must return an integer that represents the number of beautiful triplets in the sequence.</p><p>beautifulTriplets has the following parameters:</p><ul><li>d: an integer</li><li>arr: an array of integers, sorted ascending</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains <strong>2</strong> space-separated integers <strong>n</strong> and <strong>d</strong>, the length of the sequence and the beautiful difference.<br>The second line contains <strong>n</strong> space-separated integers <strong>arr[i]</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;10%5E%7B4%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;d%5Cleq&space;20" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;arr%5Bi%5D%5Cleq&space;2%5Ctimes&space;10%5E%7B4%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?arr%5Bi%5D&space;%3E&space;arr%5Bi&space;-&space;1%5D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single line denoting the number of beautiful triplets in the sequence.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7 3</span><br><span class="line">1 2 4 5 7 8 10</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>The input sequence is <strong>1, 2, 4, 5, 6, 8, 10</strong>, and our beautiful difference <strong>d = 3</strong>. There are many possible triplets <strong>(arr[i], arr[j], arr[k])</strong>, but our only beautiful triplets are <strong>(1, 4, 7)</strong>, <strong>(4, 7, 10)</strong> and <strong>(2, 5, 8)</strong> by value not index. Please see the equations below:</p><ul><li><strong>7 - 4 = 4 - 1 = 3 = d</strong></li><li><strong>10 - 7 = 7 - 4 = 3 = d</strong></li><li><strong>8 - 5 = 5 - 2 = 3 = d</strong></li></ul><p>Recall that a beautiful triplet satisfies the following equivalence relation:<br><strong>arr[j] - arr[i] = arr[k] - arr[j] = d</strong> where <strong>i &lt; j &lt; k</strong>.</p><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">beautifulTriplets</span>(<span class="hljs-params">d, arr</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> arraySet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(arr);</span><br><span class="line">  <span class="hljs-keyword">const</span> array = [...arr];</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> array.reduce(<span class="hljs-function">(<span class="hljs-params">target, number</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">3</span>).fill(<span class="hljs-number">0</span>).reduce(<span class="hljs-function">(<span class="hljs-params">innerTarget, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">let</span> value = number + index * d;</span><br><span class="line">      arraySet.has(value) &amp;&amp; innerTarget++;</span><br><span class="line">      <span class="hljs-keyword">return</span> innerTarget;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>) === <span class="hljs-number">3</span> &amp;&amp; target++;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, <span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/24/algorithm/hackerrank/51_BeautifulTriplets/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Modified Kaprekar Numbers</title>
      <link>https://alleyful.github.io/2019/08/23/algorithm/hackerrank/50_ModifiedKaprekarNumbers/</link>
      <guid>https://alleyful.github.io/2019/08/23/algorithm/hackerrank/50_ModifiedKaprekarNumbers/</guid>
      <pubDate>Thu, 22 Aug 2019 15:06:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;A modified Kaprekar number is a positive whole number with a special property. If you square it, then split the number into two integers and sum those integers, you have the same value you started with.&lt;/p&gt;
&lt;p&gt;Consider a positive whole number &lt;strong&gt;n&lt;/strong&gt; with &lt;strong&gt;d&lt;/strong&gt; digits. We square &lt;strong&gt;n&lt;/strong&gt; to arrive at a number that is either &lt;strong&gt;2 x d&lt;/strong&gt; digits long or &lt;strong&gt;(2 x d) - 1&lt;/strong&gt; digits long. Split the string representation of the square into two parts, &lt;strong&gt;l&lt;/strong&gt; and &lt;strong&gt;r&lt;/strong&gt;. The right hand part, &lt;strong&gt;r&lt;/strong&gt; must be &lt;strong&gt;d&lt;/strong&gt; digits long. The left is the remaining substring. Convert those two substrings back to integers, add them and see if you get &lt;strong&gt;n&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, if &lt;strong&gt;n = 5&lt;/strong&gt;, &lt;strong&gt;d = 1&lt;/strong&gt; then &lt;img src=&quot;https://latex.codecogs.com/gif.latex?n%5E%7B2%7D&amp;space;=&amp;space;25&quot; alt&gt;. We split that into two strings and convert them back to integers &lt;strong&gt;2&lt;/strong&gt; and &lt;strong&gt;5&lt;/strong&gt;. We test &lt;img src=&quot;https://latex.codecogs.com/gif.latex?2&amp;space;&amp;plus;&amp;space;5&amp;space;=&amp;space;7%5Cneq&amp;space;5&quot; alt&gt;, so this is not a modified Kaprekar number. If &lt;strong&gt;n = 9&lt;/strong&gt;, still &lt;strong&gt;d = 1&lt;/strong&gt;, and &lt;img src=&quot;https://latex.codecogs.com/gif.latex?n%5E%7B2%7D&amp;space;=&amp;space;81&quot; alt&gt;. This gives us &lt;strong&gt;1 + 8 = 9&lt;/strong&gt;, the original &lt;strong&gt;n&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: r may have leading zeros.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>A modified Kaprekar number is a positive whole number with a special property. If you square it, then split the number into two integers and sum those integers, you have the same value you started with.</p><p>Consider a positive whole number <strong>n</strong> with <strong>d</strong> digits. We square <strong>n</strong> to arrive at a number that is either <strong>2 x d</strong> digits long or <strong>(2 x d) - 1</strong> digits long. Split the string representation of the square into two parts, <strong>l</strong> and <strong>r</strong>. The right hand part, <strong>r</strong> must be <strong>d</strong> digits long. The left is the remaining substring. Convert those two substrings back to integers, add them and see if you get <strong>n</strong>.</p><p>For example, if <strong>n = 5</strong>, <strong>d = 1</strong> then <img src="https://latex.codecogs.com/gif.latex?n%5E%7B2%7D&space;=&space;25" alt>. We split that into two strings and convert them back to integers <strong>2</strong> and <strong>5</strong>. We test <img src="https://latex.codecogs.com/gif.latex?2&space;&plus;&space;5&space;=&space;7%5Cneq&space;5" alt>, so this is not a modified Kaprekar number. If <strong>n = 9</strong>, still <strong>d = 1</strong>, and <img src="https://latex.codecogs.com/gif.latex?n%5E%7B2%7D&space;=&space;81" alt>. This gives us <strong>1 + 8 = 9</strong>, the original <strong>n</strong>.</p><p><strong>Note</strong>: r may have leading zeros.</p><a id="more"></a><p>Here’s an explanation from Wikipedia about the ORIGINAL Kaprekar Number (spot the difference!):</p><blockquote><p>In mathematics, a Kaprekar number for a given base is a non-negative integer, the representation of whose square in that base can be split into two parts that add up to the original number again.<br>For instance, 45 is a Kaprekar number, because 45² = 2025 and 20+25 = 45.</p></blockquote><p>Given two positive integers <strong>p</strong> and <strong>q</strong> where <strong>p</strong> is lower than <strong>q</strong>, write a program to print the modified Kaprekar numbers in the range between <strong>p</strong> and <strong>q</strong>, inclusive.</p><br><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the kaprekarNumbers function in the editor below. It should print the list of modified Kaprekar numbers in ascending order.</p><p>kaprekarNumbers has the following parameter(s):</p><ul><li>p: an integer</li><li>q: an integer</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains the lower integer limit <strong>p</strong>. The second line contains the upper integer limit <strong>q</strong>.</p><p><strong>Note</strong>: Your range should be inclusive of the limits.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><p>0 &lt; p &lt; q &lt; 100000</p><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Output each modified Kaprekar number in the given range, space-separated on a single line. If no modified Kaprekar numbers exist in the given range, print INVALID RANGE.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">100</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 9 45 55 99</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p><strong>1</strong>, <strong>9</strong>, <strong>45</strong>, <strong>55</strong>, and <strong>99</strong> are the Kaprekar Numbers in the given range.</p><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">kaprekarNumbers</span>(<span class="hljs-params">p, q</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = p; i &lt;= q; i++)&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> numbers = [...String(<span class="hljs-built_in">Math</span>.pow(i, <span class="hljs-number">2</span>))];</span><br><span class="line">    <span class="hljs-keyword">let</span> length = numbers.length;</span><br><span class="line">    <span class="hljs-keyword">let</span> firstValue = numbers.splice(<span class="hljs-number">0</span>, <span class="hljs-built_in">Math</span>.floor(length / <span class="hljs-number">2</span>));</span><br><span class="line">    (<span class="hljs-built_in">Number</span>(firstValue.join(<span class="hljs-string">''</span>)) + <span class="hljs-built_in">Number</span>(numbers.join(<span class="hljs-string">''</span>))) === i &amp;&amp; result.push(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">//console.log(result.length &gt; 0 ? result.join(' ') : 'INVALID RANGE');</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> result.length &gt; <span class="hljs-number">0</span> ? result.join(<span class="hljs-string">' '</span>) : <span class="hljs-string">'INVALID RANGE'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/23/algorithm/hackerrank/50_ModifiedKaprekarNumbers/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
