<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ALLEY</title>
    <link>https://alleyful.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>alley&#39;s blog for study</description>
    <pubDate>Thu, 22 Aug 2019 01:31:22 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Encryption</title>
      <link>https://alleyful.github.io/2019/08/22/algorithm/hackerrank/49_Encryption/</link>
      <guid>https://alleyful.github.io/2019/08/22/algorithm/hackerrank/49_Encryption/</guid>
      <pubDate>Thu, 22 Aug 2019 01:30:19 GMT</pubDate>
      <description>
      
        &lt;p&gt;An English text needs to be encrypted using the following encryption scheme.&lt;br&gt;First, the spaces are removed from the text. Let &lt;strong&gt;L&lt;/strong&gt; be the length of this text.&lt;br&gt;Then, characters are written into a grid, whose rows and columns have the following constraints:  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://latex.codecogs.com/gif.latex?%5Cleft&amp;space;%5Clfloor&amp;space;%5Csqrt%7BL%7D&amp;space;%5Cright&amp;space;%5Crfloor%5Cleq&amp;space;row%5Cleq&amp;space;column%5Cleq&amp;space;%5Cleft&amp;space;%5Clceil&amp;space;%5Csqrt%7BL%7D&amp;space;%5Cright&amp;space;%5Crceil,&amp;space;where&amp;space;%5Cleft&amp;space;%5Clfloor&amp;space;x&amp;space;%5Cright&amp;space;%5Crfloor&amp;space;is&amp;space;floor&amp;space;function,&amp;space;and&amp;space;%5Cleft&amp;space;%5Clceil&amp;space;x&amp;space;%5Cright&amp;space;%5Crceil&amp;space;is&amp;space;,&amp;space;ceil&amp;space;function&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;For example, the sentence&lt;br&gt;&lt;code&gt;s = if man was meant to stay on the ground god would have given us roots&lt;/code&gt;,   
after removing spaces is &lt;strong&gt;54&lt;/strong&gt; characters long. &lt;img src=&quot;https://latex.codecogs.com/gif.latex?%5Csqrt%7B54%7D&quot; alt&gt; is between &lt;strong&gt;7&lt;/strong&gt; and &lt;strong&gt;8&lt;/strong&gt;, so it is written in the form of a grid with 7 rows and 8 columns.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>An English text needs to be encrypted using the following encryption scheme.<br>First, the spaces are removed from the text. Let <strong>L</strong> be the length of this text.<br>Then, characters are written into a grid, whose rows and columns have the following constraints:  </p><p><img src="https://latex.codecogs.com/gif.latex?%5Cleft&space;%5Clfloor&space;%5Csqrt%7BL%7D&space;%5Cright&space;%5Crfloor%5Cleq&space;row%5Cleq&space;column%5Cleq&space;%5Cleft&space;%5Clceil&space;%5Csqrt%7BL%7D&space;%5Cright&space;%5Crceil,&space;where&space;%5Cleft&space;%5Clfloor&space;x&space;%5Cright&space;%5Crfloor&space;is&space;floor&space;function,&space;and&space;%5Cleft&space;%5Clceil&space;x&space;%5Cright&space;%5Crceil&space;is&space;,&space;ceil&space;function" alt></p><p>For example, the sentence<br><code>s = if man was meant to stay on the ground god would have given us roots</code>,   after removing spaces is <strong>54</strong> characters long. <img src="https://latex.codecogs.com/gif.latex?%5Csqrt%7B54%7D" alt> is between <strong>7</strong> and <strong>8</strong>, so it is written in the form of a grid with 7 rows and 8 columns.</p><br><a id="more"></a><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ifmanwas  </span><br><span class="line">meanttos          </span><br><span class="line">tayonthe  </span><br><span class="line">groundgo  </span><br><span class="line">dwouldha  </span><br><span class="line">vegivenu  </span><br><span class="line">sroots</span><br></pre></td></tr></table></figure><ul><li>Ensure that <img src="https://latex.codecogs.com/gif.latex?rows&space;%5Ctimes&space;columns%5Cgeq&space;L" alt>  </li><li>If multiple grids satisfy the above conditions, choose the one with the minimum area, i.e.<br><img src="https://latex.codecogs.com/gif.latex?rows&space;%5Ctimes&space;columns" alt>.   </li></ul><p>The encoded message is obtained by displaying the characters in a column, inserting a space, and then displaying the next column and inserting a space, and so on. For example, the encoded message for the above rectangle is:   </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imtgdvs fearwer mayoogo anouuio ntnnlvt wttddes aohghn sseoau</span><br></pre></td></tr></table></figure><p>You will be given a message to encode and print.</p><br><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the encryption function in the editor below. It should return a single string composed as described.</p><p>encryption has the following parameter(s):</p><ul><li>s: a string to encrypt</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>One line of text, the string <strong>S</strong></p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><p><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;%5Cleft&space;%7C&space;s&space;%5Cright&space;%7C%5Cleq&space;81" alt><br><strong>s</strong> is comprised only of characters in the range ascii[a-z].</p><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the encoded message on one line as described.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">haveaniceday</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hae and via ecy</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p><strong>L = 12</strong>, <img src="https://latex.codecogs.com/gif.latex?%5Csqrt%7B12%7D" alt> is between <strong>3</strong> and <strong>4</strong>. Rewritten with <strong>3</strong> rows and <strong>4</strong> columns:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">have</span><br><span class="line">anic</span><br><span class="line">eday</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feedthedog</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fto ehg ee dd</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p><strong>L = 10</strong>, <img src="https://latex.codecogs.com/gif.latex?%5Csqrt%7B10%7D" alt> is between <strong>3</strong> and <strong>4</strong>. Rewritten with <strong>3</strong> rows and <strong>4</strong> columns:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">feed</span><br><span class="line">thed</span><br><span class="line">og</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2"></a>Sample Input 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chillout</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2"></a>Sample Output 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clu hlt io</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-2"><a href="#Explanation-2" class="headerlink" title="Explanation 2"></a>Explanation 2</h2><p><strong>L = 8</strong>, <img src="https://latex.codecogs.com/gif.latex?%5Csqrt%7B8%7D" alt> is between <strong>2</strong> and <strong>3</strong>. Rewritten with <strong>3</strong> columns and <strong>3</strong> rows (<strong>2 * 3 = 6 &lt; 8</strong> so we have to use <strong>3 x 3</strong>.)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chi</span><br><span class="line">llo</span><br><span class="line">ut</span><br></pre></td></tr></table></figure><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encryption</span>(<span class="hljs-params">s</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> sqrt = <span class="hljs-built_in">Math</span>.sqrt([...s].length);</span><br><span class="line">  <span class="hljs-keyword">const</span> high = <span class="hljs-built_in">Math</span>.ceil(sqrt);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> [...s].reduce(<span class="hljs-function">(<span class="hljs-params">target, string, index</span>) =&gt;</span> &#123;</span><br><span class="line">    target[index % high] += string;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(high).fill(<span class="hljs-string">''</span>)).join(<span class="hljs-string">' '</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/22/algorithm/hackerrank/49_Encryption/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Taum and B&#39;day</title>
      <link>https://alleyful.github.io/2019/08/21/algorithm/hackerrank/48_TaumAndBDay/</link>
      <guid>https://alleyful.github.io/2019/08/21/algorithm/hackerrank/48_TaumAndBDay/</guid>
      <pubDate>Tue, 20 Aug 2019 15:02:49 GMT</pubDate>
      <description>
      
        &lt;p&gt;Taum is planning to celebrate the birthday of his friend, Diksha. There are two types of gifts that Diksha wants from Taum: one is black and the other is white. To make her happy, Taum has to buy &lt;strong&gt;b&lt;/strong&gt; black gifts and &lt;strong&gt;w&lt;/strong&gt; white gifts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The cost of each black gift is &lt;strong&gt;bc&lt;/strong&gt; units.&lt;/li&gt;
&lt;li&gt;The cost of every white gift is &lt;strong&gt;wc&lt;/strong&gt; units.&lt;/li&gt;
&lt;li&gt;The cost of converting each black gift into white gift or vice versa is &lt;strong&gt;z&lt;/strong&gt; units.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Help Taum by deducing the minimum amount he needs to spend on Diksha’s gifts.&lt;/p&gt;
&lt;p&gt;For example, if Taum wants to buy &lt;strong&gt;b = 3&lt;/strong&gt; black gifts and &lt;strong&gt;w = 5&lt;/strong&gt; white gifts at a cost of &lt;strong&gt;bc = 3, wc = 4&lt;/strong&gt; and conversion cost &lt;strong&gt;z = 1&lt;/strong&gt;, we see that he can buy a black gift for &lt;strong&gt;3&lt;/strong&gt; and convert it to a white gift for &lt;strong&gt;1&lt;/strong&gt;, making the total cost of each white gift &lt;strong&gt;4&lt;/strong&gt;. That matches the cost of a white gift, so he can do that or just buy black gifts and white gifts. Either way, the overall cost is &lt;code&gt;3 * 3 + 5 * 4 = 29&lt;/code&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Taum is planning to celebrate the birthday of his friend, Diksha. There are two types of gifts that Diksha wants from Taum: one is black and the other is white. To make her happy, Taum has to buy <strong>b</strong> black gifts and <strong>w</strong> white gifts.</p><ul><li>The cost of each black gift is <strong>bc</strong> units.</li><li>The cost of every white gift is <strong>wc</strong> units.</li><li>The cost of converting each black gift into white gift or vice versa is <strong>z</strong> units.</li></ul><p>Help Taum by deducing the minimum amount he needs to spend on Diksha’s gifts.</p><p>For example, if Taum wants to buy <strong>b = 3</strong> black gifts and <strong>w = 5</strong> white gifts at a cost of <strong>bc = 3, wc = 4</strong> and conversion cost <strong>z = 1</strong>, we see that he can buy a black gift for <strong>3</strong> and convert it to a white gift for <strong>1</strong>, making the total cost of each white gift <strong>4</strong>. That matches the cost of a white gift, so he can do that or just buy black gifts and white gifts. Either way, the overall cost is <code>3 * 3 + 5 * 4 = 29</code>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the function taumBday in the editor below. It should return the minimal cost of obtaining the desired gifts.</p><p>taumBday has the following parameter(s):</p><ul><li>b: the number of black gifts</li><li>w: the number of white gifts</li><li>bc: the cost of a black gift</li><li>wc: the cost of a white gift</li><li>z: the cost to convert one color gift to the other color</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line will contain an integer <strong>t</strong>, the number of test cases.</p><p>The next <strong>t</strong> pairs of lines are as follows: </p><ul><li>The first line contains the values of integers <strong>b</strong> and <strong>w</strong>. </li><li>The next line contains the values of integers <strong>bc</strong>, <strong>wc</strong>, and <strong>z</strong>.</li></ul><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;t%5Cleq&space;10" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;b,&space;w,&space;bc,&space;wc,&space;z%5Cleq&space;10%5E%7B9%7D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p><strong>t</strong> lines, each containing an integer: the minimum amount of units Taum needs to spend on gifts.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">10 10</span><br><span class="line">1 1 1</span><br><span class="line">5 9</span><br><span class="line">2 3 4</span><br><span class="line">3 6</span><br><span class="line">9 1 1</span><br><span class="line">7 7</span><br><span class="line">4 2 1</span><br><span class="line">3 3</span><br><span class="line">1 9 2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">20</span><br><span class="line">37</span><br><span class="line">12</span><br><span class="line">35</span><br><span class="line">12</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><ul><li><strong>Test Case #01</strong>:  Since black gifts cost the same as white, there is no benefit to converting the gifts. Taum will have to buy each gift for 1 unit. The cost of buying all gifts will be:<br><code>b * bc + w * wc = 10 * 1 + 10 * 1 = 20</code>.</li></ul><ul><li><strong>Test Case #02</strong>:  Again, we can’t decrease the cost of black or white gifts by converting colors. <strong>z</strong> is too high. We will buy gifts at their original prices, so the cost of buying all gifts will be:<br><code>b * bc + w * wc = 5 * 2 + 9 * 3 = 10 + 27 = 37</code>.</li></ul><ul><li><strong>Test Case #03</strong>:  Since <strong>bc &gt; wc + z</strong>, we will buy <code>b + w = 3 + 6 = 9</code> white gifts at their original price of <strong>1</strong>. <strong>b = 3</strong> of the gifts must be black, and the cost per conversion, <strong>z = 1</strong>.   Total cost is <code>9 * 1 + 3 * 1 = 12</code>.</li></ul><ul><li><strong>Test Case #04</strong>:  Similarly, we will buy <strong>w = 7</strong> white gifts at their original price, <strong>wc = 2</strong>. For black gifts, we will first buy white ones and color them to black, so that their cost will be reduced to <code>wc + z = 2 + 1 = 3</code>. So cost of buying all gifts will be:<br><code>7 * 3 + 7 * 2 = 35</code>.</li></ul><ul><li><strong>Test Case #05</strong>:  We will buy black gifts at their original price, <strong>bc = 1</strong>. For white gifts, we will first black gifts worth <strong>bc = 1</strong> unit and color them to white for <strong>z = 2</strong> units. The cost for white gifts is reduced to <code>wc = bc + z = 2 + 1 = 3</code> units. The cost of buying all gifts will be:<br><code>3 * 1 + 3 * 3 = 3 + 9 = 12</code>.</li></ul><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">taumBday</span>(<span class="hljs-params">b, w, bc, wc, z</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> bigB = BigInt(b);</span><br><span class="line">  <span class="hljs-keyword">const</span> bigW = BigInt(w);</span><br><span class="line">  <span class="hljs-keyword">const</span> bigBc = BigInt(bc);</span><br><span class="line">  <span class="hljs-keyword">const</span> bigWc = BigInt(wc);</span><br><span class="line">  <span class="hljs-keyword">const</span> bigZ = BigInt(z);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> bigBc &gt; bigWc + bigZ</span><br><span class="line">    ? (bigB * (bigWc + bigZ) + bigW * bigWc)</span><br><span class="line">    : (bigWc &gt; bigBc + bigZ</span><br><span class="line">      ? (bigB * bigBc + bigW * (bigBc + bigZ))</span><br><span class="line">      : (bigB * bigBc + bigW * bigWc));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="Solution-Wrong-Answer"><a href="#Solution-Wrong-Answer" class="headerlink" title="Solution Wrong Answer"></a>Solution <code>Wrong Answer</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">taumBday</span>(<span class="hljs-params">b, w, bc, wc, z</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.min((b + w) * wc + b * z, (b + w) * bc + w * z, b * bc + w * wc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="Solution-Wrong-Answer-1"><a href="#Solution-Wrong-Answer-1" class="headerlink" title="Solution Wrong Answer"></a>Solution <code>Wrong Answer</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">taumBday</span>(<span class="hljs-params">b, w, bc, wc, z</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> bc &gt; wc + z</span><br><span class="line">    ? ((b + w) * wc + b * z)</span><br><span class="line">    : (wc &gt; bc + z</span><br><span class="line">      ? ((b + w) * bc + w * z)</span><br><span class="line">      : (b * bc + w * wc));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/21/algorithm/hackerrank/48_TaumAndBDay/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Cut the sticks</title>
      <link>https://alleyful.github.io/2019/08/20/algorithm/hackerrank/47_CutTheSticks/</link>
      <guid>https://alleyful.github.io/2019/08/20/algorithm/hackerrank/47_CutTheSticks/</guid>
      <pubDate>Tue, 20 Aug 2019 01:18:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;You are given a number of sticks of varying lengths. You will iteratively cut the sticks into smaller sticks, discarding the shortest pieces until there are none left. At each iteration you will determine the length of the shortest stick remaining, cut that length from each of the longer sticks and then discard all the pieces of that shortest length. When all the remaining sticks are the same length, they cannot be shortened so discard them.&lt;/p&gt;
&lt;p&gt;Given the lengths of &lt;strong&gt;n&lt;/strong&gt; sticks, print the number of sticks that are left before each iteration until there are none left.&lt;/p&gt;
&lt;p&gt;For example, there are &lt;strong&gt;n = 3&lt;/strong&gt; sticks of lengths &lt;strong&gt;arr = [1, 2, 3]&lt;/strong&gt;. The shortest stick length is &lt;strong&gt;1&lt;/strong&gt;, so we cut that length from the longer two and discard the pieces of length &lt;strong&gt;1&lt;/strong&gt;. Now our lengths are &lt;strong&gt;arr = [1, 2]&lt;/strong&gt;. Again, the shortest stick is of length &lt;strong&gt;1&lt;/strong&gt;, so we cut that amount from the longer stick and discard those pieces. There is only one stick left, &lt;strong&gt;arr = [1]&lt;/strong&gt;, so we discard that stick. Our lengths are &lt;code&gt;answer = [3, 2, 1]&lt;/code&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>You are given a number of sticks of varying lengths. You will iteratively cut the sticks into smaller sticks, discarding the shortest pieces until there are none left. At each iteration you will determine the length of the shortest stick remaining, cut that length from each of the longer sticks and then discard all the pieces of that shortest length. When all the remaining sticks are the same length, they cannot be shortened so discard them.</p><p>Given the lengths of <strong>n</strong> sticks, print the number of sticks that are left before each iteration until there are none left.</p><p>For example, there are <strong>n = 3</strong> sticks of lengths <strong>arr = [1, 2, 3]</strong>. The shortest stick length is <strong>1</strong>, so we cut that length from the longer two and discard the pieces of length <strong>1</strong>. Now our lengths are <strong>arr = [1, 2]</strong>. Again, the shortest stick is of length <strong>1</strong>, so we cut that amount from the longer stick and discard those pieces. There is only one stick left, <strong>arr = [1]</strong>, so we discard that stick. Our lengths are <code>answer = [3, 2, 1]</code>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the cutTheSticks function in the editor below. It should return an array of integers representing the number of sticks before each cut operation is performed.</p><p>cutTheSticks has the following parameter(s):</p><ul><li>arr: an array of integers representing the length of each stick</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains a single integer <strong>n</strong>, the size of <strong>arr</strong>. The next line contains <strong>n</strong> space-separated integers, each an <strong>arr[i]</strong> where each value represents the length of the <strong>i</strong>th stick.</p><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each operation, print the number of sticks that are present before the operation on separate lines.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;1000" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;arr%5Bi%5D%5Cleq&space;1000" alt></li></ul><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">5 4 4 2 2 8</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sticks-length        length-of-cut   sticks-cut</span><br><span class="line">5 4 4 2 2 8             2               6</span><br><span class="line">3 2 2 _ _ 6             2               4</span><br><span class="line">1 _ _ _ _ 4             1               2</span><br><span class="line">_ _ _ _ _ 3             3               1</span><br><span class="line">_ _ _ _ _ _           DONE            DONE</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">1 2 3 4 3 3 2 1</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">6</span><br><span class="line">4</span><br><span class="line">1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sticks-length         length-of-cut   sticks-cut</span><br><span class="line">1 2 3 4 3 3 2 1         1               8</span><br><span class="line">_ 1 2 3 2 2 1 _         1               6</span><br><span class="line">_ _ 1 2 1 1 _ _         1               4</span><br><span class="line">_ _ _ 1 _ _ _ _         1               1</span><br><span class="line">_ _ _ _ _ _ _ _       DONE            DONE</span><br></pre></td></tr></table></figure><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cutTheSticks</span>(<span class="hljs-params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> sticks = [...arr];</span><br><span class="line">  <span class="hljs-keyword">const</span> result = [sticks.length];</span><br><span class="line">  <span class="hljs-keyword">while</span> (sticks.length &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> smallValue = <span class="hljs-built_in">Math</span>.min(...sticks);</span><br><span class="line">    sticks = sticks.reduce(<span class="hljs-function">(<span class="hljs-params">target, stick</span>) =&gt;</span> &#123;</span><br><span class="line">      stick &gt; smallValue &amp;&amp; target.push(stick - smallValue);</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []);</span><br><span class="line">    sticks.length &gt; <span class="hljs-number">0</span> &amp;&amp; result.push(sticks.length);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/20/algorithm/hackerrank/47_CutTheSticks/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Jumping on the Clouds</title>
      <link>https://alleyful.github.io/2019/08/19/algorithm/hackerrank/46_JumpingOnTheClouds/</link>
      <guid>https://alleyful.github.io/2019/08/19/algorithm/hackerrank/46_JumpingOnTheClouds/</guid>
      <pubDate>Sun, 18 Aug 2019 15:05:31 GMT</pubDate>
      <description>
      
        &lt;p&gt;Emma is playing a new mobile game that starts with consecutively numbered clouds. Some of the clouds are thunderheads and others are cumulus. She can jump on any cumulus cloud having a number that is equal to the number of the current cloud plus &lt;strong&gt;1&lt;/strong&gt; or &lt;strong&gt;2&lt;/strong&gt;. She must avoid the thunderheads. Determine the minimum number of jumps it will take Emma to jump from her starting postion to the last cloud. It is always possible to win the game.&lt;/p&gt;
&lt;p&gt;For each game, Emma will get an array of clouds numbered &lt;strong&gt;0&lt;/strong&gt; if they are safe or &lt;strong&gt;1&lt;/strong&gt; if they must be avoided. For example, &lt;code&gt;c = [0, 1, 0, 0, 0, 1, 0]&lt;/code&gt; indexed from &lt;strong&gt;0 … 6&lt;/strong&gt;. The number on each cloud is its index in the list so she must avoid the clouds at indexes &lt;strong&gt;1&lt;/strong&gt; and &lt;strong&gt;5&lt;/strong&gt;. She could follow the following two paths: &lt;code&gt;0 -&amp;gt; 2 -&amp;gt; 4 -&amp;gt; 6&lt;/code&gt; or &lt;code&gt;0 -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; 4 -&amp;gt; 6&lt;/code&gt;. The first path takes &lt;strong&gt;3&lt;/strong&gt; jumps while the second takes &lt;strong&gt;4&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Emma is playing a new mobile game that starts with consecutively numbered clouds. Some of the clouds are thunderheads and others are cumulus. She can jump on any cumulus cloud having a number that is equal to the number of the current cloud plus <strong>1</strong> or <strong>2</strong>. She must avoid the thunderheads. Determine the minimum number of jumps it will take Emma to jump from her starting postion to the last cloud. It is always possible to win the game.</p><p>For each game, Emma will get an array of clouds numbered <strong>0</strong> if they are safe or <strong>1</strong> if they must be avoided. For example, <code>c = [0, 1, 0, 0, 0, 1, 0]</code> indexed from <strong>0 … 6</strong>. The number on each cloud is its index in the list so she must avoid the clouds at indexes <strong>1</strong> and <strong>5</strong>. She could follow the following two paths: <code>0 -&gt; 2 -&gt; 4 -&gt; 6</code> or <code>0 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 6</code>. The first path takes <strong>3</strong> jumps while the second takes <strong>4</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the jumpingOnClouds function in the editor below. It should return the minimum number of jumps required, as an integer.</p><p>jumpingOnClouds has the following parameter(s):</p><ul><li>c: an array of binary integers</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>n</strong>, the total number of clouds. The second line contains <strong>n</strong> space-separated binary integers describing clouds <strong>c[i]</strong> where <img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;i&space;%3C&space;n" alt>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;n%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?c%5Bi%5D%5Cin&space;%5Cleft&space;%7B&space;0,&space;1&space;%5Cright&space;%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?c%5B0%5D&space;=&space;c%5Bn&space;-&space;1%5D&space;=&space;0" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the minimum number of jumps needed to win the game.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">0 0 1 0 0 1 0</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0:"></a>Explanation 0:</h2><p>Emma must avoid <strong>c[2]</strong> and <strong>c[5]</strong>. She can win the game with a minimum of <strong>4</strong> jumps:</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/jumping-cloud-01.png" alt></p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">0 0 0 0 1 0</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1:"></a>Explanation 1:</h2><p>The only thundercloud to avoid is <strong>c[4]</strong>. Emma can win the game in <strong>3</strong> jumps:</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/jumping-cloud-02.png" alt></p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jumpingOnClouds</span>(<span class="hljs-params">c</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> prevItem = <span class="hljs-number">-1</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> isSecond = <span class="hljs-literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> c.reduce(<span class="hljs-function">(<span class="hljs-params">target, item</span>) =&gt;</span> &#123;</span><br><span class="line">        target = item === <span class="hljs-number">0</span></span><br><span class="line">            ? (prevItem === <span class="hljs-number">0</span></span><br><span class="line">                ? (isSecond ? (isSecond = <span class="hljs-literal">false</span>, target) : (isSecond = <span class="hljs-literal">true</span>, target + <span class="hljs-number">1</span>))</span><br><span class="line">                : target)</span><br><span class="line">            : (prevItem === <span class="hljs-number">0</span></span><br><span class="line">                ? (isSecond = <span class="hljs-literal">false</span>, target + <span class="hljs-number">1</span>)</span><br><span class="line">                : target);</span><br><span class="line">        </span><br><span class="line">        prevItem = item;</span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/19/algorithm/hackerrank/46_JumpingOnTheClouds/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ACM ICPC Team</title>
      <link>https://alleyful.github.io/2019/08/18/algorithm/hackerrank/45_ACM_ICPC_Team/</link>
      <guid>https://alleyful.github.io/2019/08/18/algorithm/hackerrank/45_ACM_ICPC_Team/</guid>
      <pubDate>Sat, 17 Aug 2019 15:02:10 GMT</pubDate>
      <description>
      
        &lt;p&gt;There are a number of people who will be attending ACM-ICPC World Finals. Each of them may be well versed in a number of topics. Given a list of topics known by each attendee, you must determine the maximum number of topics a 2-person team can know. Also find out how many ways a team can be formed to know that many topics. Lists will be in the form of bit strings, where each string represents an attendee and each position in that string represents a field of knowledge, 1 if its a known field or 0 if not.&lt;/p&gt;
&lt;p&gt;For example, given three attendees’ data as follows:&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;10101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00010&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;These are all possible teams that can be formed:&lt;/p&gt;
&lt;p&gt;Members Subjects&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(1,2)   [1,2,3,4,5]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(1,3)   [1,3,4,5]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(2,3)   [1,2,3,4]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;In this case, the first team will know all 5 subjects. They are the only team that can be created knowing that many subjects.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>There are a number of people who will be attending ACM-ICPC World Finals. Each of them may be well versed in a number of topics. Given a list of topics known by each attendee, you must determine the maximum number of topics a 2-person team can know. Also find out how many ways a team can be formed to know that many topics. Lists will be in the form of bit strings, where each string represents an attendee and each position in that string represents a field of knowledge, 1 if its a known field or 0 if not.</p><p>For example, given three attendees’ data as follows:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10101</span><br><span class="line">11110</span><br><span class="line">00010</span><br></pre></td></tr></table></figure><p>These are all possible teams that can be formed:</p><p>Members Subjects</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1,2)   [1,2,3,4,5]</span><br><span class="line">(1,3)   [1,3,4,5]</span><br><span class="line">(2,3)   [1,2,3,4]</span><br></pre></td></tr></table></figure><p>In this case, the first team will know all 5 subjects. They are the only team that can be created knowing that many subjects.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the acmTeam function in the editor below. It should return an integer array with two elements: the maximum number of topics any team can know and the number of teams that can be formed that know that maximum number of topics.</p><p>acmTeam has the following parameter(s):</p><ul><li>topic: a string of binary digits</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains two space-separated integers <strong>n</strong> and <strong>m</strong>, where <strong>n</strong> represents the number of attendees and <strong>m</strong> represents the number of topics.</p><p>Each of the next <strong>n</strong> lines contains a binary string of length <strong>n</strong>. If the <strong>i</strong>th line’s <strong>j</strong>th character is <strong>1</strong>, then the <strong>i</strong>th person knows the <strong>j</strong>th topic.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;n%5Cleq&space;500" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;m%5Cleq&space;500" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>On the first line, print the maximum number of topics a 2-person team can know.<br>On the second line, print the number of ways to form a 2-person team that knows the maximum number of topics.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 5</span><br><span class="line">10101</span><br><span class="line">11100</span><br><span class="line">11010</span><br><span class="line">00101</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">2</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Calculating topics known for all permutations of 2 attendees we get:</p><ul><li>(1, 2) -&gt; 4</li><li>(1, 3) -&gt; 5</li><li>(1, 4) -&gt; 3</li><li>(2, 3) -&gt; 4</li><li>(2, 4) -&gt; 4</li><li>(3, 4) -&gt; 5</li></ul><p><code>The 2 teams (1, 3) and (3, 4) know all 5 topics which is maximal.</code></p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">acmTeam</span>(<span class="hljs-params">topic</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> topicLength = topic.length - <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(topic[<span class="hljs-number">0</span>].length).fill(<span class="hljs-number">0</span>);</span><br><span class="line">    <span class="hljs-keyword">let</span> maxValue = <span class="hljs-number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">const</span> getTopics = <span class="hljs-function">(<span class="hljs-params">s1, s2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> s2Array = [...s2];</span><br><span class="line">        <span class="hljs-keyword">return</span> [...s1].reduce(<span class="hljs-function">(<span class="hljs-params">target, item, index</span>) =&gt;</span> &#123; </span><br><span class="line">            item | s2Array[index] &amp;&amp; target++;</span><br><span class="line">            <span class="hljs-keyword">return</span> target;</span><br><span class="line">        &#125;, <span class="hljs-number">0</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    topic.reduce(<span class="hljs-function">(<span class="hljs-params">target, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        (index !== topicLength) &amp;&amp; target.push(</span><br><span class="line">            <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(topicLength - index).fill(<span class="hljs-number">0</span>).reduce(<span class="hljs-function">(<span class="hljs-params">innerTarget, innerItem, innerIndex</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="hljs-keyword">let</span> value = getTopics(item, topic[topicLength - innerIndex]);</span><br><span class="line">                result[value - <span class="hljs-number">1</span>]++;</span><br><span class="line">                maxValue = value &gt; maxValue ? value : maxValue;</span><br><span class="line">                innerTarget.push(value);</span><br><span class="line">                <span class="hljs-keyword">return</span> innerTarget;</span><br><span class="line">            &#125;, [])</span><br><span class="line">        );</span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []);</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">return</span> [maxValue, result[maxValue - <span class="hljs-number">1</span>]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/18/algorithm/hackerrank/45_ACM_ICPC_Team/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Equalize the Array</title>
      <link>https://alleyful.github.io/2019/08/17/algorithm/hackerrank/44_EqualizeTheArray/</link>
      <guid>https://alleyful.github.io/2019/08/17/algorithm/hackerrank/44_EqualizeTheArray/</guid>
      <pubDate>Fri, 16 Aug 2019 16:26:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;Karl has an array of integers. He wants to reduce the array until all remaining elements are equal. Determine the minimum number of elements to delete to reach his goal.&lt;/p&gt;
&lt;p&gt;For example, if his array is &lt;code&gt;arr = [1, 2, 2, 3]&lt;/code&gt;, we see that he can delete the &lt;strong&gt;2&lt;/strong&gt; elements &lt;strong&gt;1&lt;/strong&gt; and &lt;strong&gt;3&lt;/strong&gt; leaving &lt;strong&gt;arr = [2, 2]&lt;/strong&gt;. He could also delete both twos and either the &lt;strong&gt;1&lt;/strong&gt; or the &lt;strong&gt;3&lt;/strong&gt;, but that would take &lt;strong&gt;3&lt;/strong&gt; deletions. The minimum number of deletions is &lt;strong&gt;2&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Karl has an array of integers. He wants to reduce the array until all remaining elements are equal. Determine the minimum number of elements to delete to reach his goal.</p><p>For example, if his array is <code>arr = [1, 2, 2, 3]</code>, we see that he can delete the <strong>2</strong> elements <strong>1</strong> and <strong>3</strong> leaving <strong>arr = [2, 2]</strong>. He could also delete both twos and either the <strong>1</strong> or the <strong>3</strong>, but that would take <strong>3</strong> deletions. The minimum number of deletions is <strong>2</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the equalizeArray function in the editor below. It must return an integer that denotes the minimum number of deletions required.</p><p>equalizeArray has the following parameter(s):</p><ul><li>arr: an array of integers</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>n</strong>, the number of elements in <strong>arr</strong>. The next line contains <strong>n</strong> space-separated integers <strong>arr[i]</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;arr%5Bi%5D%5Cleq&space;100" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single integer that denotes the minimum number of elements Karl must delete for all elements in the array to be equal.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">3 3 2 1 3</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Array <strong>arr = [3, 3, 2, 1, 3]</strong>. If we delete <strong>arr[2] = 2</strong> and <strong>arr[3] = 1</strong>, all of the elements in the resulting array, <strong>A’ = [3, 3, 3]</strong>, will be equal. Deleting these <strong>2</strong> elements is minimal. Our only other options would be to delete <strong>4</strong> elements to get an array of either <strong>[1]</strong> or <strong>[2]</strong>.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">equalizeArray</span>(<span class="hljs-params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> result = arr.reduce(<span class="hljs-function">(<span class="hljs-params">target, item</span>) =&gt;</span> &#123;</span><br><span class="line">        target[item] = target[item] ? target[item] + <span class="hljs-number">1</span> : <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> arr.length - result.reduce(<span class="hljs-function">(<span class="hljs-params">target, item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-built_in">Number</span>.isInteger(item) &amp;&amp; (target = target &gt; item ? target : item);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/17/algorithm/hackerrank/44_EqualizeTheArray/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Repeated String</title>
      <link>https://alleyful.github.io/2019/08/16/algorithm/hackerrank/43_RepeatedString/</link>
      <guid>https://alleyful.github.io/2019/08/16/algorithm/hackerrank/43_RepeatedString/</guid>
      <pubDate>Thu, 15 Aug 2019 15:06:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;Lilah has a string, &lt;strong&gt;s&lt;/strong&gt;, of lowercase English letters that she repeated infinitely many times.&lt;/p&gt;
&lt;p&gt;Given an integer, &lt;strong&gt;n&lt;/strong&gt;, find and print the number of letter a’s in the first &lt;strong&gt;n&lt;/strong&gt; letters of Lilah’s infinite string.&lt;/p&gt;
&lt;p&gt;For example, if the string &lt;strong&gt;s = ‘abcac’&lt;/strong&gt; and &lt;strong&gt;n = 10&lt;/strong&gt;, the substring we consider is &lt;strong&gt;abcacabcac&lt;/strong&gt;, the first &lt;strong&gt;10&lt;/strong&gt; characters of her infinite string. There are &lt;strong&gt;4&lt;/strong&gt; occurrences of a in the substring.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Lilah has a string, <strong>s</strong>, of lowercase English letters that she repeated infinitely many times.</p><p>Given an integer, <strong>n</strong>, find and print the number of letter a’s in the first <strong>n</strong> letters of Lilah’s infinite string.</p><p>For example, if the string <strong>s = ‘abcac’</strong> and <strong>n = 10</strong>, the substring we consider is <strong>abcacabcac</strong>, the first <strong>10</strong> characters of her infinite string. There are <strong>4</strong> occurrences of a in the substring.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the repeatedString function in the editor below. It should return an integer representing the number of occurrences of a in the prefix of length <strong>n</strong> in the infinitely repeating string.</p><p>repeatedString has the following parameter(s):</p><ul><li>s: a string to repeat</li><li>n: the number of characters to consider</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains a single string, <strong>s</strong>. The second line contains an integer, <strong>n</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;%7Cs%7C%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;10%5E%7B12%7D" alt></li><li>For <strong>25%</strong> of the test cases, <img src="https://latex.codecogs.com/gif.latex?n&space;%5Cleq&space;10%5E%7B6%7D" alt>.</li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single integer denoting the number of letter a’s in the first <strong>s</strong> letters of the infinite string created by repeating  infinitely many times.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aba</span><br><span class="line">10</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>The first <strong>n = 10</strong> letters of the infinite string are abaabaabaa. Because there are <strong>7</strong> a’s, we print <strong>7</strong> on a new line.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">1000000000000</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1000000000000</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>Because all of the first <code>n = 1000000000000</code> letters of the infinite string are a, we print <strong>1000000000000</strong> on a new line.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">repeatedString</span>(<span class="hljs-params">s, n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> strings = [...s];</span><br><span class="line">    <span class="hljs-keyword">let</span> multiNum = <span class="hljs-built_in">Math</span>.floor(n / strings.length);</span><br><span class="line">    <span class="hljs-keyword">let</span> restNum = n % strings.length;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">let</span> setNum = strings.reduce(<span class="hljs-function">(<span class="hljs-params">target, s, index</span>) =&gt;</span> &#123;</span><br><span class="line">        s === <span class="hljs-string">'a'</span> &amp;&amp; target[<span class="hljs-string">'multi'</span>]++;</span><br><span class="line">        s === <span class="hljs-string">'a'</span> &amp;&amp; index &lt; restNum &amp;&amp; target[<span class="hljs-string">'rest'</span>]++;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, &#123; <span class="hljs-attr">multi</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">rest</span>: <span class="hljs-number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> multiNum * setNum[<span class="hljs-string">'multi'</span>] + setNum[<span class="hljs-string">'rest'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/16/algorithm/hackerrank/43_RepeatedString/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Library Fine</title>
      <link>https://alleyful.github.io/2019/08/15/algorithm/hackerrank/42_LibraryFine/</link>
      <guid>https://alleyful.github.io/2019/08/15/algorithm/hackerrank/42_LibraryFine/</guid>
      <pubDate>Wed, 14 Aug 2019 16:04:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;Your local library needs your help! Given the expected and actual return dates for a library book, create a program that calculates the fine (if any). The fee structure is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If the book is returned on or before the expected return date, no fine will be charged (i.e.: &lt;code&gt;fine = 0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the book is returned after the expected return day but still within the same calendar month and year as the expected return date, &lt;code&gt;fine = 15 Hackos x (the number of days late)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the book is returned after the expected return month but still within the same calendar year as the expected return date, the &lt;code&gt;fine = 500 Hackos x (the number months late)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the book is returned after the calendar year in which it was expected, there is a fixed fine of &lt;code&gt;10000 Hackos&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Charges are based only on the least precise measure of lateness. For example, whether a book is due January 1, 2017 or December 31, 2017, if it is returned January 1, 2018, that is a year late and the fine would be &lt;code&gt;10000 Hackos&lt;/code&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Your local library needs your help! Given the expected and actual return dates for a library book, create a program that calculates the fine (if any). The fee structure is as follows:</p><ol><li>If the book is returned on or before the expected return date, no fine will be charged (i.e.: <code>fine = 0</code>.</li><li>If the book is returned after the expected return day but still within the same calendar month and year as the expected return date, <code>fine = 15 Hackos x (the number of days late)</code>.</li><li>If the book is returned after the expected return month but still within the same calendar year as the expected return date, the <code>fine = 500 Hackos x (the number months late)</code>.</li><li>If the book is returned after the calendar year in which it was expected, there is a fixed fine of <code>10000 Hackos</code>.</li></ol><p>Charges are based only on the least precise measure of lateness. For example, whether a book is due January 1, 2017 or December 31, 2017, if it is returned January 1, 2018, that is a year late and the fine would be <code>10000 Hackos</code>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the libraryFine function in the editor below. It must return an integer representing the fine due.</p><p>libraryFine has the following parameter(s):</p><ul><li>d1, m1, y1: returned date day, month and year</li><li>d2, m2, y2: due date day, month and year</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains <strong>3</strong> space-separated integers, <strong>d1, m1, y1</strong>, denoting the respective <strong>day</strong>, <strong>month</strong>, and <strong>year</strong> on which the book was returned.<br>The second line contains <strong>3</strong> space-separated integers, <strong>d2, m2, y2</strong>, denoting the respective <strong>day</strong>, <strong>month</strong>, and <strong>year</strong> on which the book was due to be returned.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;d1,&space;d2%5Cleq&space;31" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;dm1,&space;m2%5Cleq&space;12" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;dy1,&space;y2%5Cleq&space;3000" alt></li><li><strong>It is guaranteed that the dates will be valid Gregorian calendar dates.</strong></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single integer denoting the library fine for the book received as input.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9 6 2015</span><br><span class="line">6 6 2015</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">45</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Given the following dates:<br>Returned: <code>d1 = 9, m1 = 6, y = 2015</code><br>Due: <code>d2 = 6, m2 = 6, y = 2015</code></p><p>Because <img src="https://latex.codecogs.com/gif.latex?y2&space;%5Cequiv&space;y1" alt>, we know it is less than a year late.<br>Because <img src="https://latex.codecogs.com/gif.latex?m2&space;%5Cequiv&space;m1" alt>, we know it’s less than a month late.<br>Because <img src="https://latex.codecogs.com/gif.latex?d2%3C&space;d1" alt>, we know that it was returned late (but still within the same month and year).</p><p>Per the library’s fee structure, we know that our fine will be <code>15 Hackos x (# days late)</code>. We then print the result of <code>15 x (d2 - d1) = 15 x (9 - 6) = 45</code> as our output.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">libraryFine</span>(<span class="hljs-params">d1, m1, y1, d2, m2, y2</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> y1 === y2</span><br><span class="line">    ? (m1 === m2</span><br><span class="line">      ? (d1 &lt;= d2 ? <span class="hljs-number">0</span> : (d1 - d2) * <span class="hljs-number">15</span>)</span><br><span class="line">      : (m1 &gt; m2 ? (m1 - m2) * <span class="hljs-number">500</span> : <span class="hljs-number">0</span>))</span><br><span class="line">    : (y1 &lt; y2 ? <span class="hljs-number">0</span> : <span class="hljs-number">10000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/15/algorithm/hackerrank/42_LibraryFine/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sherlock and Squares</title>
      <link>https://alleyful.github.io/2019/08/14/algorithm/hackerrank/41_SherlockAndSquares/</link>
      <guid>https://alleyful.github.io/2019/08/14/algorithm/hackerrank/41_SherlockAndSquares/</guid>
      <pubDate>Tue, 13 Aug 2019 15:13:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;Watson likes to challenge Sherlock’s math ability. He will provide a starting and ending value describing a range of integers. Sherlock must determine the number of square integers within that range, inclusive of the endpoints.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: A square integer is an integer which is the square of an integer, e.g. &lt;strong&gt;1, 4, 9, 16, 25&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, the range is &lt;strong&gt;a = 24&lt;/strong&gt; and &lt;strong&gt;b = 49&lt;/strong&gt;, inclusive. There are three square integers in the range: &lt;strong&gt;25, 36&lt;/strong&gt; and &lt;strong&gt;49&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Watson likes to challenge Sherlock’s math ability. He will provide a starting and ending value describing a range of integers. Sherlock must determine the number of square integers within that range, inclusive of the endpoints.</p><p><strong>Note</strong>: A square integer is an integer which is the square of an integer, e.g. <strong>1, 4, 9, 16, 25</strong>.</p><p>For example, the range is <strong>a = 24</strong> and <strong>b = 49</strong>, inclusive. There are three square integers in the range: <strong>25, 36</strong> and <strong>49</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the squares function in the editor below. It should return an integer representing the number of square integers in the inclusive range from <strong>a</strong> to <strong>b</strong>.</p><p>squares has the following parameter(s):</p><ul><li>a: an integer, the lower range boundary  </li><li>b: an integer, the uppere range boundary  </li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains <strong>q</strong>, the number of test cases.<br>Each of the next <strong>q</strong> lines contains two space-separated integers denoting <strong>a</strong> and <strong>b</strong>, the starting and ending integers in the ranges.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;q%5Cleq&space;100" alt> </li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;a%5Cleq&space;b%5Cleq&space;10%5E%7B9%7D" alt> </li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each test case, print the number of square integers in the range on a new line.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3 9</span><br><span class="line">17 24</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">0</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Test Case #00: In range <strong>[3, 9], 4</strong>, <strong>9</strong> and  are the two square integers.<br>Test Case #01: In range <strong>[17, 24]</strong>, there are no square integers.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">squares</span>(<span class="hljs-params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.sqrt(b)) - <span class="hljs-built_in">Math</span>.ceil(<span class="hljs-built_in">Math</span>.sqrt(a)) + <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/14/algorithm/hackerrank/41_SherlockAndSquares/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Append and Delete</title>
      <link>https://alleyful.github.io/2019/08/13/algorithm/hackerrank/40_AppendAndDelete/</link>
      <guid>https://alleyful.github.io/2019/08/13/algorithm/hackerrank/40_AppendAndDelete/</guid>
      <pubDate>Mon, 12 Aug 2019 15:02:31 GMT</pubDate>
      <description>
      
        &lt;p&gt;You have a string of lowercase English alphabetic letters. You can perform two types of operations on the string:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Append a lowercase English alphabetic letter to the end of the string.  &lt;/li&gt;
&lt;li&gt;Delete the last character in the string. Performing this operation on an empty string results in an empty string.  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Given an integer, &lt;strong&gt;k&lt;/strong&gt;, and two strings, &lt;strong&gt;s&lt;/strong&gt; and &lt;strong&gt;t&lt;/strong&gt;, determine whether or not you can convert &lt;strong&gt;s&lt;/strong&gt; to &lt;strong&gt;t&lt;/strong&gt; by performing exactly &lt;strong&gt;k&lt;/strong&gt; of the above operations on &lt;strong&gt;s&lt;/strong&gt;. If it’s possible, print &lt;code&gt;Yes&lt;/code&gt;. Otherwise, print &lt;code&gt;No&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, strings &lt;code&gt;s = [a, b, c]&lt;/code&gt; and &lt;code&gt;t = [d, e, f]&lt;/code&gt;. Our number of moves, &lt;strong&gt;k = 6&lt;/strong&gt;. To convert &lt;strong&gt;s&lt;/strong&gt; to &lt;strong&gt;t&lt;/strong&gt;, we first delete all of the characters in &lt;strong&gt;3&lt;/strong&gt; moves. Next we add each of the characters of &lt;strong&gt;t&lt;/strong&gt; in order. On the &lt;img src=&quot;https://latex.codecogs.com/gif.latex?6%5E%7Bth%7D&quot; alt&gt; move, you will have the matching string. If there had been more moves available, they could have been eliminated by performing multiple deletions on an empty string. If there were fewer than &lt;strong&gt;6&lt;/strong&gt; moves, we would not have succeeded in creating the new string.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>You have a string of lowercase English alphabetic letters. You can perform two types of operations on the string:</p><ol><li>Append a lowercase English alphabetic letter to the end of the string.  </li><li>Delete the last character in the string. Performing this operation on an empty string results in an empty string.  </li></ol><p>Given an integer, <strong>k</strong>, and two strings, <strong>s</strong> and <strong>t</strong>, determine whether or not you can convert <strong>s</strong> to <strong>t</strong> by performing exactly <strong>k</strong> of the above operations on <strong>s</strong>. If it’s possible, print <code>Yes</code>. Otherwise, print <code>No</code>.</p><p>For example, strings <code>s = [a, b, c]</code> and <code>t = [d, e, f]</code>. Our number of moves, <strong>k = 6</strong>. To convert <strong>s</strong> to <strong>t</strong>, we first delete all of the characters in <strong>3</strong> moves. Next we add each of the characters of <strong>t</strong> in order. On the <img src="https://latex.codecogs.com/gif.latex?6%5E%7Bth%7D" alt> move, you will have the matching string. If there had been more moves available, they could have been eliminated by performing multiple deletions on an empty string. If there were fewer than <strong>6</strong> moves, we would not have succeeded in creating the new string.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the appendAndDelete function in the editor below. It should return a string, either Yes or No.</p><p>appendAndDelete has the following parameter(s):</p><ul><li>s: the initial string</li><li>t: the desired string</li><li>k: an integer that represents the number of operations</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains a string <strong>s</strong>, the initial string.<br>The second line contains a string <strong>t</strong>, the desired final string.<br>The third line contains an integer <strong>k</strong>, the number of operations.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;%7Cs%7C%5Cleq&space;100" alt>  </li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;%7Ct%7C%5Cleq&space;100" alt>  </li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;k%5Cleq&space;100" alt>  </li><li><strong>s</strong> and <strong>t</strong> consist of lowercase English alphabetic letters, <strong>ascii[a-z]</strong>.</li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print Yes if you can obtain string <strong>t</strong> by performing exactly <strong>k</strong> operations on <strong>s</strong>. Otherwise, print <code>No</code>.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hackerhappy</span><br><span class="line">hackerrank</span><br><span class="line">9</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>We perform <strong>5</strong> delete operations to reduce string <strong>s</strong> to hacker. Next, we perform <strong>4</strong> append operations (i.e., r, a, n, and k), to get hackerrank. Because we were able to convert <strong>s</strong> to <strong>t</strong> by performing exactly <strong>k = 9</strong> operations, we print <code>Yes</code>.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aba</span><br><span class="line">aba</span><br><span class="line">7</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>We perform <strong>4</strong> delete operations to reduce string <strong>s</strong> to the empty string (recall that, though the string will be empty after <strong>3</strong>deletions, we can still perform a delete operation on an empty string to get the empty string). Next, we perform <strong>3</strong> append operations (i.e., a, b, and a). Because we were able to convert <strong>s</strong> to <strong>t</strong> by performing exactly <strong>k = 7</strong> operations, we print <code>Yes</code>.</p><br><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2"></a>Sample Input 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ashley</span><br><span class="line">ash</span><br><span class="line">2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2"></a>Sample Output 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-2"><a href="#Explanation-2" class="headerlink" title="Explanation 2"></a>Explanation 2</h2><p>To convert ashley to ash a minimum of <strong>#</strong> steps are needed. Hence we print <code>No</code> as answer.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">appendAndDelete</span>(<span class="hljs-params">s, t, k</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> sArray = [...s];</span><br><span class="line">  <span class="hljs-keyword">let</span> tArray = [...t];</span><br><span class="line">  <span class="hljs-keyword">let</span> totalLength = sArray.length + tArray.length;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">let</span> sameString = tArray.reduce(<span class="hljs-function">(<span class="hljs-params">target, string, index</span>) =&gt;</span> &#123;</span><br><span class="line">    (target[<span class="hljs-string">'isContinue'</span>] &amp;&amp; string === sArray[index]) ? ++target[<span class="hljs-string">'length'</span>] : (target[<span class="hljs-string">'isContinue'</span>] = <span class="hljs-literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, &#123;<span class="hljs-attr">length</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">isContinue</span>: <span class="hljs-literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">let</span> result = totalLength - <span class="hljs-number">2</span> * sameString[<span class="hljs-string">'length'</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">return</span> totalLength &lt;= k</span><br><span class="line">    ? <span class="hljs-string">'Yes'</span></span><br><span class="line">    : k &gt;= result &amp;&amp; ((k - result) % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>)</span><br><span class="line">      ? <span class="hljs-string">'Yes'</span></span><br><span class="line">      : <span class="hljs-string">'No'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/13/algorithm/hackerrank/40_AppendAndDelete/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Find Digits</title>
      <link>https://alleyful.github.io/2019/08/12/algorithm/hackerrank/39_FindDigits/</link>
      <guid>https://alleyful.github.io/2019/08/12/algorithm/hackerrank/39_FindDigits/</guid>
      <pubDate>Sun, 11 Aug 2019 16:01:10 GMT</pubDate>
      <description>
      
        &lt;p&gt;An integer &lt;strong&gt;d&lt;/strong&gt; is a divisor of an integer &lt;strong&gt;n&lt;/strong&gt; if the remainder of &lt;strong&gt;n / d = 0&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Given an integer, for each digit that makes up the integer determine whether it is a divisor. Count the number of divisors occurring within the integer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Each digit is considered to be unique, so each occurrence of the same digit should be counted (e.g. for &lt;strong&gt;n = 111, 1&lt;/strong&gt; is a divisor of &lt;strong&gt;111&lt;/strong&gt; each time it occurs so the answer is &lt;strong&gt;3&lt;/strong&gt;).&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>An integer <strong>d</strong> is a divisor of an integer <strong>n</strong> if the remainder of <strong>n / d = 0</strong>.</p><p>Given an integer, for each digit that makes up the integer determine whether it is a divisor. Count the number of divisors occurring within the integer.</p><p><strong>Note</strong>: Each digit is considered to be unique, so each occurrence of the same digit should be counted (e.g. for <strong>n = 111, 1</strong> is a divisor of <strong>111</strong> each time it occurs so the answer is <strong>3</strong>).</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the findDigits function in the editor below. It should return an integer representing the number of digits of <strong>d</strong> that are divisors of <strong>d</strong>.</p><p>findDigits has the following parameter(s):</p><ul><li>n: an integer to analyze</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line is an integer, <strong>t</strong>, indicating the number of test cases.<br>The  subsequent lines each contain an integer, <strong>n</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;t%5Cleq&space;15" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%3C&space;n%3C&space;10%5E%7B9%7D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For every test case, count the number of digits in <strong>n</strong> that are divisors of <strong>n</strong>. Print each answer on a new line.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">12</span><br><span class="line">1012</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>The number <strong>12</strong> is broken into two digits, <strong>1</strong> and <strong>2</strong>. When <strong>12</strong> is divided by either of those two digits, the remainder is <strong>0</strong> so they are both divisors.</p><p>The number <strong>1012</strong> is broken into four digits, <strong>1</strong>, <strong>0</strong>, <strong>1</strong>, and <strong>2</strong>. <strong>1012</strong> is evenly divisible by its digits <strong>1</strong>, <strong>1</strong>, and <strong>2</strong>, but it is not divisible by <strong>0</strong> as division by zero is undefined.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findDigits</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> [...String(n)].reduce(<span class="hljs-function">(<span class="hljs-params">target, number</span>) =&gt;</span> &#123;</span><br><span class="line">        (n % number === <span class="hljs-number">0</span> &amp;&amp; number !== <span class="hljs-number">0</span>) &amp;&amp; ++target;</span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/12/algorithm/hackerrank/39_FindDigits/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Extra Long Factorials</title>
      <link>https://alleyful.github.io/2019/08/11/algorithm/hackerrank/38_ExtraLongFactorials/</link>
      <guid>https://alleyful.github.io/2019/08/11/algorithm/hackerrank/38_ExtraLongFactorials/</guid>
      <pubDate>Sun, 11 Aug 2019 00:15:29 GMT</pubDate>
      <description>
      
        &lt;p&gt;The factorial of the integer &lt;strong&gt;n&lt;/strong&gt;, written &lt;strong&gt;n!&lt;/strong&gt;, is defined as:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;n! = n x (n - 1) x (n - 2) x ... x 3 x 2 x 1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Calculate and print the factorial of a given integer.&lt;/p&gt;
&lt;p&gt;For example, if &lt;strong&gt;n = 3&lt;/strong&gt;, we calculate &lt;code&gt;30 x 29 x 28 x ... x 3 x 2 x 1&lt;/code&gt; and get &lt;strong&gt;265252859812191058636308480000000&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>The factorial of the integer <strong>n</strong>, written <strong>n!</strong>, is defined as:</p><p><code>n! = n x (n - 1) x (n - 2) x ... x 3 x 2 x 1</code></p><p>Calculate and print the factorial of a given integer.</p><p>For example, if <strong>n = 3</strong>, we calculate <code>30 x 29 x 28 x ... x 3 x 2 x 1</code> and get <strong>265252859812191058636308480000000</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the extraLongFactorials function in the editor below. It should print the result and return.</p><p>extraLongFactorials has the following parameter(s):</p><ul><li>n: an integer</li></ul><p><strong>Note</strong>: Factorials of <strong>n &gt; 20</strong> can’t be stored even in a <strong>64-bit</strong> long long variable. Big integers must be used for such calculations. Languages like Java, Python, Ruby etc. can handle big integers, but we need to write additional code in C/C++ to handle huge values.</p><p>We recommend solving this challenge using BigIntegers.</p><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>Input consists of a single integer <strong>n</strong></p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><p><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;100" alt></p><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the factorial of <strong>n</strong>.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15511210043330985984000000</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p><code>25! = 25 x 24 x 23 x ... x 3 x 2 x 1</code></p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">extraLongFactorials</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> factorial = <span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> number &lt; BigInt(<span class="hljs-number">2</span>) ? BigInt(<span class="hljs-number">1</span>) : number * factorial(number - BigInt(<span class="hljs-number">1</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">String</span>(factorial(BigInt(n))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/11/algorithm/hackerrank/38_ExtraLongFactorials/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HEXO - 검색 엔진 최적화(SEO)</title>
      <link>https://alleyful.github.io/2019/08/10/tools/hexo/hexo-guide-03/</link>
      <guid>https://alleyful.github.io/2019/08/10/tools/hexo/hexo-guide-03/</guid>
      <pubDate>Sat, 10 Aug 2019 01:20:22 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;검색-엔진-최적화-SEO&quot;&gt;&lt;a href=&quot;#검색-엔진-최적화-SEO&quot; class=&quot;headerlink&quot; title=&quot;검색 엔진 최적화(SEO)&quot;&gt;&lt;/a&gt;검색 엔진 최적화(SEO)&lt;/h2&gt;&lt;p&gt;블로그 생성 후 내가 작성한 포스트가 검색에 노출되기 위해서는 검색엔진에 노출 될 수 있도록 검색 엔진 최적화 작업을 진행해 주어야 합니다.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;code&gt;검색 엔진 최적화(search engine optimization, SEO)&lt;/code&gt;는 웹 페이지 검색엔진이 자료를 수집하고 순위를 매기는 방식에 맞게 웹 페이지를 구성해서 검색 결과의 상위에 나올 수 있도록 하는 작업을 말한다. 웹 페이지와 관련된 검색어로 검색한 검색 결과 상위에 나오게 된다면 방문 트래픽이 늘어나기 때문에 효과적인 인터넷 마케팅 방법 중의 하나라고 할 수 있다. 기본적인 작업 방식은 특정한 검색어를 웹 페이지에 적절하게 배치하고 다른 웹 페이지에서 링크가 많이 연결되도록 하는 것이다. 구글 등장 이후 검색 엔진들이 콘텐츠의 신뢰도를 파악하는 기초적인 지표로 다른 웹사이트에 얼마나 인용되었나를 사용하기 때문에 타 사이트에 인용되는 횟수를 늘리는 방향으로 최적화 한다.&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;위키백과&lt;/strong&gt;&lt;cite&gt;검색 엔진 최적화&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;

&lt;br&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="검색-엔진-최적화-SEO"><a href="#검색-엔진-최적화-SEO" class="headerlink" title="검색 엔진 최적화(SEO)"></a>검색 엔진 최적화(SEO)</h2><p>블로그 생성 후 내가 작성한 포스트가 검색에 노출되기 위해서는 검색엔진에 노출 될 수 있도록 검색 엔진 최적화 작업을 진행해 주어야 합니다.</p><blockquote><p><code>검색 엔진 최적화(search engine optimization, SEO)</code>는 웹 페이지 검색엔진이 자료를 수집하고 순위를 매기는 방식에 맞게 웹 페이지를 구성해서 검색 결과의 상위에 나올 수 있도록 하는 작업을 말한다. 웹 페이지와 관련된 검색어로 검색한 검색 결과 상위에 나오게 된다면 방문 트래픽이 늘어나기 때문에 효과적인 인터넷 마케팅 방법 중의 하나라고 할 수 있다. 기본적인 작업 방식은 특정한 검색어를 웹 페이지에 적절하게 배치하고 다른 웹 페이지에서 링크가 많이 연결되도록 하는 것이다. 구글 등장 이후 검색 엔진들이 콘텐츠의 신뢰도를 파악하는 기초적인 지표로 다른 웹사이트에 얼마나 인용되었나를 사용하기 때문에 타 사이트에 인용되는 횟수를 늘리는 방향으로 최적화 한다.</p><footer><strong>위키백과</strong><cite>검색 엔진 최적화</cite></footer></blockquote><br><br><a id="more"></a><h2 id="검색엔진-최적화-SEO-에-유용한-플러그인-설치하기"><a href="#검색엔진-최적화-SEO-에-유용한-플러그인-설치하기" class="headerlink" title="검색엔진 최적화(SEO)에 유용한 플러그인 설치하기"></a>검색엔진 최적화(SEO)에 유용한 플러그인 설치하기</h2><p>HEXO에서는 SEO와 관련된 다양한 플로그인들이 있으며 그 중 몇 가지를 이용할 수 있도록 정리해 보겠습니다.</p><ul><li>hexo-auto-canonical</li><li>hexo-generator-robotstxt</li><li>hexo-autonofollow</li><li>hexo-generator-feed</li><li>hexo-generator-seo-friendly-sitemap</li></ul><br><br><h3 id="hexo-auto-canonical"><a href="#hexo-auto-canonical" class="headerlink" title="hexo-auto-canonical"></a>hexo-auto-canonical</h3><ul><li>대표 URL(표준 링크)을 자동으로 생성해주는 플러그인입니다. </li><li>설치     <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal-1" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal-1')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`npm install --save hexo-auto-canonical`, {onCompleteDelay: 500})          .respond(``)          .end();    </script> </li></ul><br><ul><li><p>사용</p><ul><li><p>설치한 테마 내 HEAD 태그 내 삽입해서 사용합니다.</p></li><li><p>icarus의 경우에는 themes &gt; icarus &gt; layout &gt; common &gt; head 파일 내 <code>&lt;%- meta(page) %&gt;</code> 아래에 다음 코드를 넣어줍니다.  </p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//.ejs</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">%-</span> <span class="hljs-attr">autoCanonical</span>(<span class="hljs-attr">config</span>, <span class="hljs-attr">page</span>) %&gt;</span></span><br><span class="line"></span><br><span class="line">//.jade</span><br><span class="line">| !&#123; autoCanonical(config, page) &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><figcaption><span>head.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- meta(page) %&gt;</span><br><span class="line">&lt;%- autoCanonical(config, page) %&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><br><br><h3 id="hexo-generator-robotstxt"><a href="#hexo-generator-robotstxt" class="headerlink" title="hexo-generator-robotstxt"></a>hexo-generator-robotstxt</h3><ul><li><p>자동으로 robot.txt 파일을 생성해주는 플러그인 입니다.</p><blockquote><p>로봇 배제 표준은 웹 사이트에 로봇이 접근하는 것을 방지하기 위한 규약으로, 일반적으로 접근 제한에 대한 설명을 robots.txt에 기술한다. 이 규약은 권고안이며, 로봇이 robots.txt 파일을 읽고 접근을 중지하는 것을 목적으로 한다. 따라서, 접근 방지 설정을 하였다고 해도, 다른 사람들이 그 파일에 접근할 수 있다. robots.txt 파일은 항상 사이트의 루트 디렉토리에 위치해야 한다.</p><footer><strong>위키백과</strong><cite>로봇 배제 표준</cite></footer></blockquote></li><li><p>설치</p>  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal-4" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal-4')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`npm install hexo-generator-robotstxt --save`, {onCompleteDelay: 500})          .respond(`  `)          .end();    </script> <br></li><li><p>사용</p>  <figure class="highlight plain hljs"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">robotstxt:</span><br><span class="line">  useragent: &quot;*&quot;</span><br><span class="line">  allow:</span><br><span class="line">    - /</span><br><span class="line">  sitemap: https://username.github.io/sitemap.xml</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><br><br><h3 id="hexo-autonofollow"><a href="#hexo-autonofollow" class="headerlink" title="hexo-autonofollow"></a>hexo-autonofollow</h3><ul><li><p>외부 링크에 <code>rel=&quot;external nofollow</code> 속성을 자동으로 추가해주는 기능을 하는 플러그인입니다.</p></li><li><p>설치</p>  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal-2" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal-2')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`npm install hexo-autonofollow --save`, {onCompleteDelay: 500})          .respond(`  `)          .end();    </script> <br></li><li><p>사용</p>  <figure class="highlight plain hljs"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nofollow:</span><br><span class="line">    enable: true</span><br><span class="line">    exclude:</span><br><span class="line">    - exclude1.com</span><br><span class="line">    - exclude2.com</span><br><span class="line">  </span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">옵션</th><th align="center">내용</th></tr></thead><tbody><tr><td align="center">enable</td><td align="center">플러그인 활성화 여부 (true, false)</td></tr><tr><td align="center">exclude</td><td align="center">제외시킬 host</td></tr></tbody></table></li></ul><br><br><h3 id="hexo-generator-feed"><a href="#hexo-generator-feed" class="headerlink" title="hexo-generator-feed"></a>hexo-generator-feed</h3><ul><li><p>자동으로 RSS feed를 생성해주는 플러그인 입니다.  </p><blockquote><p>어떤 사이트가 있을 때, 그 사이트를 매일 방문해서 재미있는 새로운 기사가 있는지 확인하는 것은 번거롭습니다. 특히 새 기사가 매일 또는 정기적으로 올라오는 것이 아니라 불규칙할 때는 더욱 그렇습니다.<br>그 사이트를 직접 방문하지 않고, 새 기사들만 자신의 컴퓨터로 “배달”이 된다면 편리할 것입니다.<br>RSS(Really Simple Syndication 의 약자) 같은 “사이트 피드”란, 새 기사들의 제목만, 또는 새 기사들 전체를 뽑아서 하나의 파일로 만들어 놓은 것입니다.<br>이제 각 사이트들에서 제공하는 RSS파일 주소만 수집하여 확인하면, 자신의 취향에 맞는 새로운 읽을거리를 쉽게 찾아서 읽을 수 있습니다.<br>그러나 모든 사이트에서 RSS피드를 제공하는 것은 아닙니다. 1년 내내 새로운 내용이 없는 정적인 사이트에서는 제공하지 않는 것이 보통입니다. 새로운 읽을거리가 자주 올라오는 “뉴스형”, “블로그형” 사이트에서 주로 제공됩니다.</p><footer><strong>RSS Feed</strong></footer></blockquote></li><li><p>설치</p>  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal-3" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal-3')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`npm install hexo-generator-feed --save`, {onCompleteDelay: 500})          .respond(`  `)          .end();    </script> <br></li><li><p>사용</p>  <figure class="highlight plain hljs"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  type: rss2</span><br><span class="line">  path: rss2.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  </span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">옵션</th><th align="center">내용</th></tr></thead><tbody><tr><td align="center">type</td><td align="center">feed의 종류 (atom/rss2) - * 네이버는 atom을 지원하지 않음</td></tr><tr><td align="center">path</td><td align="center">feed가 생성될 경로(default : atom.xml, rss2.xml)</td></tr><tr><td align="center">limit</td><td align="center">최신 포스트 수 설정 (0 또는 false - 전체 포스트)</td></tr></tbody></table></li></ul><br><br><h3 id="hexo-generator-seo-friendly-sitemap"><a href="#hexo-generator-seo-friendly-sitemap" class="headerlink" title="hexo-generator-seo-friendly-sitemap"></a>hexo-generator-seo-friendly-sitemap</h3><ul><li><p>크롤러가 블로그를 더욱 효율적으로 클롤링 할 수 있도록 사이트맵 xml 파일을 자동으로 생생해 줍니다.</p></li><li><p>설치</p>  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal-5" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal-5')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`npm install hexo-generator-seo-friendly-sitemap --save`, {onCompleteDelay: 500})          .respond(`  `)          .end();    </script> <br></li><li><p>사용</p>  <figure class="highlight plain hljs"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">  tag: false</span><br><span class="line">  category: false</span><br><span class="line">  </span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">옵션</th><th align="center">내용</th></tr></thead><tbody><tr><td align="center">type</td><td align="center">sitemap이 생성될 경로</td></tr><tr><td align="center">path</td><td align="center">sitemap에 tag 포함 여부</td></tr><tr><td align="center">limit</td><td align="center">sitemap에 category 포함 여부</td></tr></tbody></table></li></ul><br><br><h2 id="검색엔진-등록하기"><a href="#검색엔진-등록하기" class="headerlink" title="검색엔진 등록하기"></a>검색엔진 등록하기</h2><h3 id="구글"><a href="#구글" class="headerlink" title="구글"></a>구글</h3><ul><li><p><a href="https://accounts.google.com" rel="external nofollow noopener noreferrer" target="_blank">구글 애널리틱스</a>(Google Analytic)</p><ul><li><p>가입 후 사이트 이름과 URL 등을 입력하고 추적 ID를 발급 받습니다. 이 아이디는 themes의 <code>_config.yml</code> 내 <code>google_analytics</code>에 넣어 줍니다.</p></li><li><p>사용</p><figure class="highlight plain hljs"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins:</span><br><span class="line">    google-analytics:</span><br><span class="line">        # Google Analytics tracking id</span><br><span class="line">        tracking_id: UA-*********-1</span><br><span class="line">  </span><br></pre></td></tr></table></figure><br></li></ul></li><li><p><a href="https://search.google.com/search-console" rel="external nofollow noopener noreferrer" target="_blank">google search console</a> </p><ul><li><p>구글 웹 마스터 도구가 Search Console로 변경되었습니다. 가입 후 속성을 추가해 줍니다. 생성된 html파일을 루트에 올린 후 확인 하는 방법과 애널리스틱 가입을 확인하는 방법으로 인증을 하는데, 저는 전자로 인증을 했습니다.</p></li><li><p>Sitemaps 메뉴에 위에서 생성한 <code>sitemap.xml</code>과 <code>rss2.xml</code>을 추가해 주세요.<br><img src="/images/tools/search-console-sitemap.png" alt>  </p></li><li><p>사이드 등록 후 확인하기까지 시간이 걸릴 수 있습니다. Search Console에서 해당 사이트의 데이터를 수집 후 처리하는데 시간이 좀 걸리는 것 같습니다. 보통 2~3일 정도 예싱을 해야하며, 제 블로그 같은 경우 주말 포함 약 5일 정도의 시간이 지난 후 확인 할 수 있었습니다. </p></li></ul></li></ul><br><br><h3 id="네이버"><a href="#네이버" class="headerlink" title="네이버"></a>네이버</h3><ul><li><p><a href="https://webmastertool.naver.com/" rel="external nofollow noopener noreferrer" target="_blank">NAVER 웹마스터도구</a></p><ul><li><p>네이버 웹마스터 도구 페이지에서 <code>사이트 간단 체크하기</code> 메뉴를 통해 현재 블로그의 최적화 상태를 알아볼 수 있습니다.<br><img src="/images/tools/naver-webmaster-01.png" alt></p><br></li><li><p>연동 사이트 목록 페이지 내 사이트 추가에 블로그 주소를 추가해 줍니다.<br><img src="/images/tools/naver-webmaster-02.png" alt></p><br></li><li><p>추가 된 블로그를 클릭 후 요청 메뉴 내 사이트맵 RSS를 제출해 줍니다.<br><img src="/images/tools/naver-webmaster-03.png" alt></p></li></ul></li></ul><br><br><h3 id="다음"><a href="#다음" class="headerlink" title="다음"></a>다음</h3><ul><li><a href="https://register.search.daum.net" rel="external nofollow noopener noreferrer" target="_blank">다음 검색 등록</a> <ul><li>다음 검색 등록에서 신규등을 하면 됩니다. 등록한 이메일 접수완료 메일을 받을 수 있습니다.<br><img src="/images/tools/daum-search.png" alt></li></ul></li></ul><br><hr><br><h2 id="Refenence"><a href="#Refenence" class="headerlink" title="Refenence"></a>Refenence</h2><ul><li><a href="https://iseongho.github.io/posts/hexo-seo/" rel="external nofollow noopener noreferrer" target="_blank">https://iseongho.github.io/posts/hexo-seo/</a></li><li><a href="https://futurecreator.github.io/2016/06/23/search-engine-optimization-hexo-plugins/" rel="external nofollow noopener noreferrer" target="_blank">https://futurecreator.github.io/2016/06/23/search-engine-optimization-hexo-plugins/</a></li><li><a href="http://mwultong.blogspot.com/2007/10/rss-rss-feed.html" rel="external nofollow noopener noreferrer" target="_blank">http://mwultong.blogspot.com/2007/10/rss-rss-feed.html</a></li></ul>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/10/tools/hexo/hexo-guide-03/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Jumping on the Clouds(Revisited)</title>
      <link>https://alleyful.github.io/2019/08/10/algorithm/hackerrank/37_JumpingOnTheClouds/</link>
      <guid>https://alleyful.github.io/2019/08/10/algorithm/hackerrank/37_JumpingOnTheClouds/</guid>
      <pubDate>Fri, 09 Aug 2019 15:14:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;Aerith is playing a cloud hopping game. In this game, there are sequentially numbered clouds that can be thunderheads or cumulus clouds. Her character must jump from cloud to cloud until it reaches the start again.&lt;/p&gt;
&lt;p&gt;To play, Aerith is given an array of clouds, &lt;strong&gt;c&lt;/strong&gt; and an energy level &lt;strong&gt;e = 100&lt;/strong&gt;. She starts from &lt;strong&gt;c[0]&lt;/strong&gt; and uses &lt;strong&gt;1&lt;/strong&gt; unit of energy to make a jump of size &lt;strong&gt;k&lt;/strong&gt; to cloud &lt;strong&gt;c[(i + k) % n]&lt;/strong&gt;. If Aerith lands on a thundercloud, &lt;strong&gt;c[i] = 1&lt;/strong&gt;, her energy (e) decreases by &lt;strong&gt;2&lt;/strong&gt; additional units. The game ends when Aerith lands back on cloud &lt;strong&gt;0&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Given the values of &lt;strong&gt;n&lt;/strong&gt;, &lt;strong&gt;k&lt;/strong&gt;, and the configuration of the clouds as an array &lt;strong&gt;c&lt;/strong&gt;, can you determine the final value of &lt;strong&gt;e&lt;/strong&gt; after the game ends?&lt;/p&gt;
&lt;p&gt;For example, give &lt;strong&gt;c = [0, 0, 1, 0]&lt;/strong&gt; and &lt;strong&gt;k = 2&lt;/strong&gt;, the indices of her path are &lt;strong&gt;0 -&amp;gt; 2 -&amp;gt; 0&lt;/strong&gt;. Her energy level reduces by &lt;strong&gt;1&lt;/strong&gt; for each jump to &lt;strong&gt;98&lt;/strong&gt;. She landed on one thunderhead at an additional cost of &lt;strong&gt;2&lt;/strong&gt; energy units. Her final energy level is &lt;strong&gt;96&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Recall that &lt;strong&gt;%&lt;/strong&gt; refers to the modulo operation. In this case, it serves to make the route circular. If Aerith is at &lt;strong&gt;c[n -1]&lt;/strong&gt; and jumps &lt;strong&gt;1&lt;/strong&gt;, she will arrive at &lt;strong&gt;c[0]&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Aerith is playing a cloud hopping game. In this game, there are sequentially numbered clouds that can be thunderheads or cumulus clouds. Her character must jump from cloud to cloud until it reaches the start again.</p><p>To play, Aerith is given an array of clouds, <strong>c</strong> and an energy level <strong>e = 100</strong>. She starts from <strong>c[0]</strong> and uses <strong>1</strong> unit of energy to make a jump of size <strong>k</strong> to cloud <strong>c[(i + k) % n]</strong>. If Aerith lands on a thundercloud, <strong>c[i] = 1</strong>, her energy (e) decreases by <strong>2</strong> additional units. The game ends when Aerith lands back on cloud <strong>0</strong>.</p><p>Given the values of <strong>n</strong>, <strong>k</strong>, and the configuration of the clouds as an array <strong>c</strong>, can you determine the final value of <strong>e</strong> after the game ends?</p><p>For example, give <strong>c = [0, 0, 1, 0]</strong> and <strong>k = 2</strong>, the indices of her path are <strong>0 -&gt; 2 -&gt; 0</strong>. Her energy level reduces by <strong>1</strong> for each jump to <strong>98</strong>. She landed on one thunderhead at an additional cost of <strong>2</strong> energy units. Her final energy level is <strong>96</strong>.</p><p><strong>Note</strong>: Recall that <strong>%</strong> refers to the modulo operation. In this case, it serves to make the route circular. If Aerith is at <strong>c[n -1]</strong> and jumps <strong>1</strong>, she will arrive at <strong>c[0]</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the jumpingOnClouds function in the editor below. It should return an integer representing the energy level remaining after the game.</p><p>jumpingOnClouds has the following parameter(s):</p><ul><li>c: an array of integers representing cloud types</li><li>k: an integer representing the length of one jump</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains two space-separated integers, <strong>n</strong> and <strong>k</strong>, the number of clouds and the jump distance.<br>The second line contains <strong>n</strong> space-separated integers <strong>c[i]</strong> where <img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;i%3C&space;n" alt>. Each cloud is described as follows:</p><ul><li>If <strong>c[i] = 0</strong>, then cloud <strong>i</strong> is a cumulus cloud.</li><li>If <strong>c[i] = 1</strong>, then cloud <strong>i</strong> is a thunderhead.</li></ul><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;n%5Cleq&space;25" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;k%5Cleq&space;n" alt></li><li>n % k = 0</li><li><img src="https://latex.codecogs.com/gif.latex?c%5Bi%5D%5Cin&space;%5Cleft&space;%7B&space;0,&space;1&space;%5Cright&space;%7D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the final value of <strong>e</strong> on a new line.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8 2</span><br><span class="line">0 0 1 0 0 1 1 0</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">92</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>In the diagram below, red clouds are thunderheads and purple clouds are cumulus clouds:</p><p><img src="https://raw.githubusercontent.com/alleyful/algorithm-solutions/master/HackerRank/ProblemSolving/images/jumping-clods.png" alt></p><p>Observe that our thunderheads are the clouds numbered <strong>2</strong>, <strong>5</strong>, and <strong>6</strong>. Aerith makes the following sequence of moves:</p><ol><li>Move: <strong>0 -&gt; 2</strong>, Energy: <strong>e = 100 - 1 - 2 = 97</strong>.</li><li>Move: <strong>2 -&gt; 4</strong>, Energy: <strong>e = 97 - 1 = 96</strong>.</li><li>Move: <strong>4 -&gt; 6</strong>, Energy: <strong>e = 96 - 1 - 2 = 93</strong>.</li><li>Move: <strong>6 -&gt; 0</strong>, Energy: <strong>e = 93 - 1 = 92</strong>.</li></ol><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jumpingOnClouds</span>(<span class="hljs-params">c, k</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> energy = <span class="hljs-number">100</span>;</span><br><span class="line">  <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">let</span> index;</span><br><span class="line">  <span class="hljs-keyword">while</span> (index !== <span class="hljs-number">0</span> &amp;&amp; energy &gt;= <span class="hljs-number">0</span>) &#123;</span><br><span class="line">    count === <span class="hljs-number">0</span> &amp;&amp; (index = <span class="hljs-number">0</span>);</span><br><span class="line">    index = (index + k) % c.length;</span><br><span class="line">    energy = c[index] &gt; <span class="hljs-number">0</span> ? energy - <span class="hljs-number">3</span> : energy - <span class="hljs-number">1</span>;</span><br><span class="line">    count++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> energy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/10/algorithm/hackerrank/37_JumpingOnTheClouds/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Climbing the Leaderboard</title>
      <link>https://alleyful.github.io/2019/08/09/algorithm/hackerrank/36_ClimbingTheLeaderboard/</link>
      <guid>https://alleyful.github.io/2019/08/09/algorithm/hackerrank/36_ClimbingTheLeaderboard/</guid>
      <pubDate>Fri, 09 Aug 2019 02:14:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;Alice is playing an arcade game and wants to climb to the top of the leaderboard and wants to track her ranking. The game uses Dense Ranking, so its leaderboard works like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The player with the highest score is ranked number  on the leaderboard.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Players who have equal scores receive the same ranking number, and the next player(s) receive the immediately following ranking number.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, the four players on the leaderboard have high scores of &lt;strong&gt;100&lt;/strong&gt;, &lt;strong&gt;90&lt;/strong&gt;, &lt;strong&gt;90&lt;/strong&gt;, and &lt;strong&gt;80&lt;/strong&gt;. Those players will have ranks &lt;strong&gt;1&lt;/strong&gt;, &lt;strong&gt;2&lt;/strong&gt;, &lt;strong&gt;2&lt;/strong&gt;, and &lt;strong&gt;3&lt;/strong&gt;, respectively. If Alice’s scores are &lt;strong&gt;70&lt;/strong&gt;, &lt;strong&gt;80&lt;/strong&gt; and &lt;strong&gt;105&lt;/strong&gt;, her rankings after each game are &lt;img src=&quot;https://latex.codecogs.com/gif.latex?4%5E%7Bth%7D,&amp;space;3%5E%7Bth%7D&quot; alt&gt; and &lt;img src=&quot;https://latex.codecogs.com/gif.latex?1%5E%7Bst%7D&quot; alt&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Alice is playing an arcade game and wants to climb to the top of the leaderboard and wants to track her ranking. The game uses Dense Ranking, so its leaderboard works like this:</p><ul><li><p>The player with the highest score is ranked number  on the leaderboard.</p></li><li><p>Players who have equal scores receive the same ranking number, and the next player(s) receive the immediately following ranking number.</p></li></ul><p>For example, the four players on the leaderboard have high scores of <strong>100</strong>, <strong>90</strong>, <strong>90</strong>, and <strong>80</strong>. Those players will have ranks <strong>1</strong>, <strong>2</strong>, <strong>2</strong>, and <strong>3</strong>, respectively. If Alice’s scores are <strong>70</strong>, <strong>80</strong> and <strong>105</strong>, her rankings after each game are <img src="https://latex.codecogs.com/gif.latex?4%5E%7Bth%7D,&space;3%5E%7Bth%7D" alt> and <img src="https://latex.codecogs.com/gif.latex?1%5E%7Bst%7D" alt>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the climbingLeaderboard function in the editor below. It should return an integer array where each element <strong>res[j]</strong> represents Alice’s rank after the <img src="https://latex.codecogs.com/gif.latex?j%5E%7Bth%7D" alt> game.</p><p>climbingLeaderboard has the following parameter(s):</p><ul><li>scores: an array of integers that represent leaderboard scores</li><li>alice: an array of integers that represent Alice’s scores</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>n</strong>, the number of players on the leaderboard.<br>The next line contains <strong>n</strong> space-separated integers <strong>scores[i]</strong>, the leaderboard scores in decreasing order.<br>The next line contains an integer, , denoting the number games Alice plays.<br>The last line contains <strong>m</strong> space-separated integers <strong>alice[j]</strong>, the game scores. </p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;2%5Ctimes&space;10%5E%7B5%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;m%5Cleq&space;2%5Ctimes&space;10%5E%7B5%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;scores%5Bi%5D%5Cleq&space;10%5E%7B9%7D&space;for&space;0%5Cleq&space;i%3C&space;n" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;alice%5Bj%5D%5Cleq&space;10%5E%7B9%7D&space;for&space;0%5Cleq&space;j%3C&space;n" alt></li><li>The existing leaderboard, <strong>scores</strong>, is in descending order.</li><li>Alice’s scores, <strong>alice</strong>, are in ascending order.</li></ul><br><h2 id="Subtask"><a href="#Subtask" class="headerlink" title="Subtask"></a>Subtask</h2><p>For <code>60%</code> of the maximum score:</p><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;200" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;m%5Cleq&space;200" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print <strong>m</strong> integers. The <img src="https://latex.codecogs.com/gif.latex?j%5E%7Bth%7D" alt> integer should indicate Alice’s rank after playing the <img src="https://latex.codecogs.com/gif.latex?j%5E%7Bth%7D" alt> game.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><p><img src="https://raw.githubusercontent.com/alleyful/algorithm-solutions/master/HackerRank/ProblemSolving/images/leader-board-06.png" alt></p><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>Alice starts playing with <strong>7</strong> players already on the leaderboard, which looks like this:</p><p><img src="https://raw.githubusercontent.com/alleyful/algorithm-solutions/master/HackerRank/ProblemSolving/images/leader-board-01.png" alt></p><p>After Alice finishes game <strong>0</strong>, her score is <strong>5</strong> and her ranking is <strong>6</strong>:</p><p><img src="https://raw.githubusercontent.com/alleyful/algorithm-solutions/master/HackerRank/ProblemSolving/images/leader-board-02.png" alt></p><p>After Alice finishes game <strong>1</strong>, her score is <strong>25</strong> and her ranking is <strong>4</strong>:</p><p><img src="https://raw.githubusercontent.com/alleyful/algorithm-solutions/master/HackerRank/ProblemSolving/images/leader-board-03.png" alt></p><p>After Alice finishes game <strong>2</strong>, her score is <strong>50</strong> and her ranking is tied with Caroline at <strong>2</strong>:</p><p><img src="https://raw.githubusercontent.com/alleyful/algorithm-solutions/master/HackerRank/ProblemSolving/images/leader-board-04.png" alt></p><p>After Alice finishes game <strong>3</strong>, her score is <strong>120</strong> and her ranking is <strong>1</strong>:</p><p><img src="https://raw.githubusercontent.com/alleyful/algorithm-solutions/master/HackerRank/ProblemSolving/images/leader-board-05.png" alt></p><br><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2"></a>Sample Input 2</h2><p><img src="https://raw.githubusercontent.com/alleyful/algorithm-solutions/master/HackerRank/ProblemSolving/images/leader-board-07.png" alt></p><br> <h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2"></a>Sample Output 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution (Accepted)"></a><code>Solution (Accepted)</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">climbingLeaderboard</span>(<span class="hljs-params">scores, alice</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> values = [...new <span class="hljs-built_in">Set</span>(scores)];</span><br><span class="line">  <span class="hljs-keyword">let</span> ranking = values.length - <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> alice.reduce(<span class="hljs-function">(<span class="hljs-params">target, score</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">while</span> (ranking &gt; <span class="hljs-number">0</span> &amp;&amp; score &gt; values[ranking]) --ranking;</span><br><span class="line">    target.push((values[ranking] &gt; score) ? ranking + <span class="hljs-number">2</span> : ranking + <span class="hljs-number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="Solution-Terminated-due-to-timeout"><a href="#Solution-Terminated-due-to-timeout" class="headerlink" title="Solution (Terminated due to timeout)"></a>Solution (Terminated due to timeout)</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">climbingLeaderboard</span>(<span class="hljs-params">scores, alice</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> scoreSet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(scores);</span><br><span class="line">  <span class="hljs-keyword">let</span> iter = scoreSet[<span class="hljs-built_in">Symbol</span>.iterator]();</span><br><span class="line">  <span class="hljs-keyword">let</span> result = scoreSet.size + <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> alice.reduce(<span class="hljs-function">(<span class="hljs-params">target, a, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> count = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> score <span class="hljs-keyword">of</span> scoreSet.values()) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span> (score &gt; a) &#123;</span><br><span class="line">        iter.next()</span><br><span class="line">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        result = count;</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    target.push(result);</span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="Solution-Terminated-due-to-timeout-1"><a href="#Solution-Terminated-due-to-timeout-1" class="headerlink" title="Solution (Terminated due to timeout)"></a>Solution (Terminated due to timeout)</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">climbingLeaderboard</span>(<span class="hljs-params">scores, alice</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> scoreSet = [...(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(scores))];</span><br><span class="line">    <span class="hljs-keyword">let</span> isAssign = <span class="hljs-literal">false</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> result = <span class="hljs-number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> alice.reduce(<span class="hljs-function">(<span class="hljs-params">target, score</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> currentIndex = scoreSet.findIndex(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v === score);</span><br><span class="line">        currentIndex &gt;= <span class="hljs-number">0</span></span><br><span class="line">            ? (result = currentIndex)</span><br><span class="line">            : (isAssign = <span class="hljs-literal">true</span>);</span><br><span class="line"></span><br><span class="line">        isAssign &amp;&amp; (</span><br><span class="line">            scoreSet.push(score),</span><br><span class="line">            result = scoreSet.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> b - a).findIndex(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v === score),</span><br><span class="line">            scoreSet.splice(result, <span class="hljs-number">1</span>),</span><br><span class="line">            isAssign = <span class="hljs-literal">false</span></span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        target.push(result + <span class="hljs-number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="Solution-Terminated-due-to-timeout-2"><a href="#Solution-Terminated-due-to-timeout-2" class="headerlink" title="Solution (Terminated due to timeout)"></a>Solution (Terminated due to timeout)</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">climbingLeaderboard</span>(<span class="hljs-params">scores, alice</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> scoreSet = [...(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(scores))];</span><br><span class="line">    <span class="hljs-keyword">let</span> isAssign = <span class="hljs-literal">false</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> result = <span class="hljs-number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> alice.reduce(<span class="hljs-function">(<span class="hljs-params">target, score</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> scoreSet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(scores);</span><br><span class="line">        scoreSet.add(score);</span><br><span class="line">        target.push([...scoreSet].sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> b - a).findIndex(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v === score) + <span class="hljs-number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/09/algorithm/hackerrank/36_ClimbingTheLeaderboard/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sequence Equation</title>
      <link>https://alleyful.github.io/2019/08/08/algorithm/hackerrank/35_SequenceEquation/</link>
      <guid>https://alleyful.github.io/2019/08/08/algorithm/hackerrank/35_SequenceEquation/</guid>
      <pubDate>Wed, 07 Aug 2019 15:03:16 GMT</pubDate>
      <description>
      
        &lt;p&gt;Given a sequence of &lt;strong&gt;n&lt;/strong&gt; integers, &lt;code&gt;p(1), p(2), ..., p(n)&lt;/code&gt; where each element is distinct and satisfies &lt;img src=&quot;https://latex.codecogs.com/gif.latex?1%5Cleq&amp;space;p(x)%5Cleq&amp;space;n&quot; alt&gt;. For each &lt;strong&gt;x&lt;/strong&gt; where &lt;img src=&quot;https://latex.codecogs.com/gif.latex?1%5Cleq&amp;space;x%5Cleq&amp;space;n&quot; alt&gt;, find any integer &lt;strong&gt;y&lt;/strong&gt; such that p(p(y)) &lt;img src=&quot;https://latex.codecogs.com/gif.latex?%5Cequiv&amp;space;x&quot; alt&gt; and print the value of &lt;strong&gt;y&lt;/strong&gt; on a new line.&lt;/p&gt;
&lt;p&gt;For example, assume the sequence &lt;strong&gt;p = [5, 2, 1, 3, 4]&lt;/strong&gt;. Each value of &lt;strong&gt;x&lt;/strong&gt; between &lt;strong&gt;1&lt;/strong&gt; and &lt;strong&gt;5&lt;/strong&gt;, the length of the sequence, is analyzed as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;x = 1 &lt;img src=&quot;https://latex.codecogs.com/gif.latex?%5Cequiv&quot; alt&gt; p[3], p[4] = 3, so p[p[4]] = 1&lt;/li&gt;
&lt;li&gt;x = 2 &lt;img src=&quot;https://latex.codecogs.com/gif.latex?%5Cequiv&quot; alt&gt; p[2], p[2] = 2, so p[p[2]] = 2&lt;/li&gt;
&lt;li&gt;x = 3 &lt;img src=&quot;https://latex.codecogs.com/gif.latex?%5Cequiv&quot; alt&gt; p[3], p[5] = 4, so p[p[5]] = 3&lt;/li&gt;
&lt;li&gt;x = 4 &lt;img src=&quot;https://latex.codecogs.com/gif.latex?%5Cequiv&quot; alt&gt; p[5], p[1] = 5, so p[p[1]] = 4&lt;/li&gt;
&lt;li&gt;x = 5 &lt;img src=&quot;https://latex.codecogs.com/gif.latex?%5Cequiv&quot; alt&gt; p[1], p[3] = 1, so p[p[3]] = 5&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The values for &lt;strong&gt;y&lt;/strong&gt;are &lt;strong&gt;[4, 2, 5, 1, 3]&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Given a sequence of <strong>n</strong> integers, <code>p(1), p(2), ..., p(n)</code> where each element is distinct and satisfies <img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;p(x)%5Cleq&space;n" alt>. For each <strong>x</strong> where <img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;x%5Cleq&space;n" alt>, find any integer <strong>y</strong> such that p(p(y)) <img src="https://latex.codecogs.com/gif.latex?%5Cequiv&space;x" alt> and print the value of <strong>y</strong> on a new line.</p><p>For example, assume the sequence <strong>p = [5, 2, 1, 3, 4]</strong>. Each value of <strong>x</strong> between <strong>1</strong> and <strong>5</strong>, the length of the sequence, is analyzed as follows:</p><ol><li>x = 1 <img src="https://latex.codecogs.com/gif.latex?%5Cequiv" alt> p[3], p[4] = 3, so p[p[4]] = 1</li><li>x = 2 <img src="https://latex.codecogs.com/gif.latex?%5Cequiv" alt> p[2], p[2] = 2, so p[p[2]] = 2</li><li>x = 3 <img src="https://latex.codecogs.com/gif.latex?%5Cequiv" alt> p[3], p[5] = 4, so p[p[5]] = 3</li><li>x = 4 <img src="https://latex.codecogs.com/gif.latex?%5Cequiv" alt> p[5], p[1] = 5, so p[p[1]] = 4</li><li>x = 5 <img src="https://latex.codecogs.com/gif.latex?%5Cequiv" alt> p[1], p[3] = 1, so p[p[3]] = 5</li></ol><p>The values for <strong>y</strong>are <strong>[4, 2, 5, 1, 3]</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the permutationEquation function in the editor below. It should return an array of integers that represent the values of <strong>y</strong>.</p><p>permutationEquation has the following parameter(s):</p><ul><li>p: an array of integers</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>n</strong>, the number of elements in the sequence.<br>The second line contains <strong>n</strong> space-separated integers <strong>p[i]</strong> where <img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;i%5Cleq&space;n" alt>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;50" alt>)</li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;p%5Bi%5D%5Cleq&space;50" alt>), where <img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;i%5Cleq&space;n" alt>).</li><li>Each element in the sequence is distinct.</li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each <strong>x</strong> from <strong>1</strong> to <strong>n</strong>, print an integer denoting any valid <strong>y</strong> satisfying the equation p(p(y)) <img src="https://latex.codecogs.com/gif.latex?%5Cequiv&space;x" alt> on a new line.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2 3 1</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>Given the values of <strong>p(1) = 2</strong>, <strong>p(2) = 3</strong>, and <strong>p(3) = 1</strong>, we calculate and print the following values for each <strong>x</strong> from <strong>1</strong> to <strong>n</strong>:</p><ol><li>x = 1 <img src="https://latex.codecogs.com/gif.latex?%5Cequiv" alt> p(3) = p(p(2)) = p(p(y)), so we print the value of <strong>y = 2</strong> on a new line.</li><li>x = 2 <img src="https://latex.codecogs.com/gif.latex?%5Cequiv" alt> p(1) = p(p(3)) = p(p(y)), so we print the value of <strong>y = 3</strong> on a new line.</li><li>x = 3 <img src="https://latex.codecogs.com/gif.latex?%5Cequiv" alt> p(2) = p(p(1)) = p(p(y)), so we print the value of <strong>y = 1</strong> on a new line.</li></ol><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">4 3 5 1 2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">2</span><br></pre></td></tr></table></figure><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">permutationEquation</span>(<span class="hljs-params">p</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> findCurrentIndex = <span class="hljs-function"><span class="hljs-params">arr</span> =&gt;</span> arr.map(<span class="hljs-function">(<span class="hljs-params">v, i</span>) =&gt;</span> p.findIndex(<span class="hljs-function"><span class="hljs-params">innerV</span> =&gt;</span> innerV === v) + <span class="hljs-number">1</span>);</span><br><span class="line">  <span class="hljs-keyword">return</span> findCurrentIndex(findCurrentIndex(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(p.length).fill(<span class="hljs-number">0</span>).map(<span class="hljs-function">(<span class="hljs-params">v, i</span>) =&gt;</span> i + <span class="hljs-number">1</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/08/algorithm/hackerrank/35_SequenceEquation/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Circular Array Rotation</title>
      <link>https://alleyful.github.io/2019/08/07/algorithm/hackerrank/34_CircularArrayRotation/</link>
      <guid>https://alleyful.github.io/2019/08/07/algorithm/hackerrank/34_CircularArrayRotation/</guid>
      <pubDate>Tue, 06 Aug 2019 16:01:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;John Watson knows of an operation called a right circular rotation on an array of integers. One rotation operation moves the last array element to the first position and shifts all remaining elements right one. To test Sherlock’s abilities, Watson provides Sherlock with an array of integers. Sherlock is to perform the rotation operation a number of times then determine the value of the element at a given position.&lt;/p&gt;
&lt;p&gt;For each array, perform a number of right circular rotations and return the value of the element at a given index.&lt;/p&gt;
&lt;p&gt;For example, array &lt;code&gt;a = [3, 4, 5]&lt;/code&gt;, number of rotations, &lt;code&gt;k = 2&lt;/code&gt; and indices to check, &lt;code&gt;m = [1, 2]&lt;/code&gt;. 
First we perform the two rotations:&lt;br&gt;&lt;code&gt;[3, 4, 5] -&amp;gt; [5, 3, 4] -&amp;gt; [4, 5, 3]&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;Now return the values from the zero-based indices &lt;strong&gt;1&lt;/strong&gt; and &lt;strong&gt;2&lt;/strong&gt; as indicated in the &lt;strong&gt;m&lt;/strong&gt; array.&lt;br&gt;&lt;strong&gt;a[1] = 5&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;a[2] = 3&lt;/strong&gt;&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>John Watson knows of an operation called a right circular rotation on an array of integers. One rotation operation moves the last array element to the first position and shifts all remaining elements right one. To test Sherlock’s abilities, Watson provides Sherlock with an array of integers. Sherlock is to perform the rotation operation a number of times then determine the value of the element at a given position.</p><p>For each array, perform a number of right circular rotations and return the value of the element at a given index.</p><p>For example, array <code>a = [3, 4, 5]</code>, number of rotations, <code>k = 2</code> and indices to check, <code>m = [1, 2]</code>. First we perform the two rotations:<br><code>[3, 4, 5] -&gt; [5, 3, 4] -&gt; [4, 5, 3]</code>  </p><p>Now return the values from the zero-based indices <strong>1</strong> and <strong>2</strong> as indicated in the <strong>m</strong> array.<br><strong>a[1] = 5</strong><br><strong>a[2] = 3</strong></p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the circularArrayRotation function in the editor below. It should return an array of integers representing the values at the specified indices.</p><p>circularArrayRotation has the following parameter(s):</p><ul><li>a: an array of integers to rotate</li><li>k: an integer, the rotation count</li><li>queries: an array of integers, the indices to report</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains <strong>3</strong> space-separated integers, <strong>n</strong>, <strong>k</strong>, and <strong>q</strong>, the number of elements in the integer array, the rotation count and the number of queries.<br>The second line contains <strong>n</strong> space-separated integers, where each integer <strong>k</strong> describes array element <strong>a[i]</strong> (where <img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;i%3C&space;n" alt>).<br>Each of the <strong>q</strong> subsequent lines contains a single integer denoting <strong>m</strong>, the index of the element to return from <strong>a</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;10%5E%7B5%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;a%5Bi%5D%5Cleq&space;10%5E%7B5%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;k%5Cleq&space;10%5E%7B5%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;q%5Cleq&space;500%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;m%3C&space;n" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each query, print the value of the element at index <strong>m</strong> of the rotated array on a new line.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3 2 3</span><br><span class="line">1 2 3</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>After the first rotation, the array becomes <code>[3, 1, 2]</code>. After the second (and final) rotation, the array becomes <code>[2, 3, 1]</code>.</p><p>Let’s refer to the array’s final state as array <code>b = [2, 3, 1]</code>. For each query, we just have to print the value of <img src="https://latex.codecogs.com/gif.latex?b_%7Bm%7D" alt> on a new line:</p><ol><li><img src="https://latex.codecogs.com/gif.latex?m=0,&space;b_%7B0%7D=2." alt></li><li><img src="https://latex.codecogs.com/gif.latex?m=1,&space;b_%7B1%7D=3." alt></li><li><img src="https://latex.codecogs.com/gif.latex?m=2,&space;b_%7B2%7D=1." alt></li></ol><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">circularArrayRotation</span>(<span class="hljs-params">a, k, queries</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> results = a.reduce(<span class="hljs-function">(<span class="hljs-params">target, number, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> currentIndex = (index + k) % a.length;</span><br><span class="line">        target[currentIndex] = number;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> queries.map(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> results[v]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/07/algorithm/hackerrank/34_CircularArrayRotation/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Save the Prisoner!</title>
      <link>https://alleyful.github.io/2019/08/06/algorithm/hackerrank/33_SaveThePrisoner/</link>
      <guid>https://alleyful.github.io/2019/08/06/algorithm/hackerrank/33_SaveThePrisoner/</guid>
      <pubDate>Mon, 05 Aug 2019 15:07:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;A jail has a number of prisoners and a number of treats to pass out to them. Their jailer decides the fairest way to divide the treats is to seat the prisoners around a circular table in sequentially numbered chairs. A chair number will be drawn from a hat. Beginning with the prisoner in that chair, one candy will be handed to each prisoner sequentially around the table until all have been distributed.&lt;/p&gt;
&lt;p&gt;The jailer is playing a little joke, though. The last piece of candy looks like all the others, but it tastes awful. Determine the chair number occupied by the prisoner who will receive that candy.&lt;/p&gt;
&lt;p&gt;For example, there are &lt;strong&gt;4&lt;/strong&gt; prisoners and &lt;strong&gt;6&lt;/strong&gt; pieces of candy. The prisoners arrange themselves in seats numbered &lt;strong&gt;1&lt;/strong&gt; to &lt;strong&gt;4&lt;/strong&gt;. Let’s suppose two is drawn from the hat. Prisoners receive candy at positions &lt;strong&gt;2, 3, 4, 1, 2, 3&lt;/strong&gt;. The prisoner to be warned sits in chair number &lt;strong&gt;3&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>A jail has a number of prisoners and a number of treats to pass out to them. Their jailer decides the fairest way to divide the treats is to seat the prisoners around a circular table in sequentially numbered chairs. A chair number will be drawn from a hat. Beginning with the prisoner in that chair, one candy will be handed to each prisoner sequentially around the table until all have been distributed.</p><p>The jailer is playing a little joke, though. The last piece of candy looks like all the others, but it tastes awful. Determine the chair number occupied by the prisoner who will receive that candy.</p><p>For example, there are <strong>4</strong> prisoners and <strong>6</strong> pieces of candy. The prisoners arrange themselves in seats numbered <strong>1</strong> to <strong>4</strong>. Let’s suppose two is drawn from the hat. Prisoners receive candy at positions <strong>2, 3, 4, 1, 2, 3</strong>. The prisoner to be warned sits in chair number <strong>3</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the saveThePrisoner function in the editor below. It should return an integer representing the chair number of the prisoner to warn.</p><p>saveThePrisoner has the following parameter(s):</p><ul><li>n: an integer, the number of prisoners</li><li>m: an integer, the number of sweets</li><li>s: an integer, the chair number to begin passing out sweets from</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer, <strong>t</strong>, denoting the number of test cases.<br>The next <strong>t</strong> lines each contain <strong>3</strong> space-separated integers: </p><ul><li><strong>n</strong>: the number of prisoners </li><li><strong>m</strong>: the number of sweets </li><li><strong>s</strong>: the chair number to start passing out treats at</li></ul><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;t%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;10%5E%7B9%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;m%5Cleq&space;10%5E%7B9%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;s%5Cleq&space;n" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each test case, print the chair number of the prisoner who receives the awful treat on a new line.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">5 2 1</span><br><span class="line">5 2 2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>In first query, there are <code>n = 5</code> prisoners and <code>m = 2</code> sweets. Distribution starts at seat number <code>s = 1</code>. Prisoners in seats numbered <strong>1</strong> and <strong>2</strong> get sweets. Warn prisoner <strong>2</strong>. In the second query, distribution starts at seat <strong>2</strong> so prisoners in seats <strong>2</strong> and <strong>3</strong> get sweets. Warn prisoner <strong>3</strong>.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">7 19 2</span><br><span class="line">3 7 3</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>In the first test case, there are <code>n = 7</code> prisoners, <code>m = 19</code> sweets and they are passed out starting at chair <code>s = 2</code>. The candies go all around twice and there are <strong>5</strong> more candies passed to each prisoner from seat <strong>2</strong> to seat <strong>6</strong>.</p><p>In the second test case, there are <code>n = 3</code> prisoners, <code>m = 7</code> candies and they are passed out starting at seat <code>s = 3</code>. They go around twice, and there is one more to pass out to the prisoner at seat <strong>3</strong>.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">saveThePrisoner</span>(<span class="hljs-params">n, m, s</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> result = (m - <span class="hljs-number">1</span> + s) % n;</span><br><span class="line">    <span class="hljs-keyword">return</span> result === <span class="hljs-number">0</span> ? n : result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/06/algorithm/hackerrank/33_SaveThePrisoner/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Viral Advertising</title>
      <link>https://alleyful.github.io/2019/08/05/algorithm/hackerrank/32_ViralAdvertising/</link>
      <guid>https://alleyful.github.io/2019/08/05/algorithm/hackerrank/32_ViralAdvertising/</guid>
      <pubDate>Sun, 04 Aug 2019 15:03:29 GMT</pubDate>
      <description>
      
        &lt;p&gt;HackerLand Enterprise is adopting a new viral advertising strategy. When they launch a new product, they advertise it to exactly &lt;strong&gt;5&lt;/strong&gt; people on social media.&lt;/p&gt;
&lt;p&gt;On the first day, half of those &lt;strong&gt;5&lt;/strong&gt; people (i.e., &lt;img src=&quot;https://latex.codecogs.com/gif.latex?floor(%5Cfrac%7B5%7D%7B2%7D)&amp;space;=&amp;space;2&quot; alt&gt;) like the advertisement and each shares it with &lt;strong&gt;3&lt;/strong&gt; of their friends. At the beginning of the second day, &lt;img src=&quot;https://latex.codecogs.com/gif.latex?floor(%5Cfrac%7B5%7D%7B2%7D)%5Ctimes&amp;space;3&amp;space;=&amp;space;2%5Ctimes&amp;space;3=6&quot; alt&gt; people receive the advertisement.&lt;/p&gt;
&lt;p&gt;Each day, &lt;img src=&quot;https://latex.codecogs.com/gif.latex?floor(%5Cfrac%7Brecipients%7D%7B2%7D)&quot; alt&gt; of the recipients like the advertisement and will share it with &lt;strong&gt;3&lt;/strong&gt; friends on the following day. Assuming nobody receives the advertisement twice, determine how many people have liked the ad by the end of a given day, beginning with launch day as day &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, assume you want to know how many have liked the ad by the end of the &lt;img src=&quot;https://latex.codecogs.com/gif.latex?5%5E%7Bth%7D&quot; alt&gt; day.&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Day Shared Liked Cumulative&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1      5     2       2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2      6     3       5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3      9     4       9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4     12     6      15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5     18     9      24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The cumulative number of likes is &lt;strong&gt;24&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>HackerLand Enterprise is adopting a new viral advertising strategy. When they launch a new product, they advertise it to exactly <strong>5</strong> people on social media.</p><p>On the first day, half of those <strong>5</strong> people (i.e., <img src="https://latex.codecogs.com/gif.latex?floor(%5Cfrac%7B5%7D%7B2%7D)&space;=&space;2" alt>) like the advertisement and each shares it with <strong>3</strong> of their friends. At the beginning of the second day, <img src="https://latex.codecogs.com/gif.latex?floor(%5Cfrac%7B5%7D%7B2%7D)%5Ctimes&space;3&space;=&space;2%5Ctimes&space;3=6" alt> people receive the advertisement.</p><p>Each day, <img src="https://latex.codecogs.com/gif.latex?floor(%5Cfrac%7Brecipients%7D%7B2%7D)" alt> of the recipients like the advertisement and will share it with <strong>3</strong> friends on the following day. Assuming nobody receives the advertisement twice, determine how many people have liked the ad by the end of a given day, beginning with launch day as day <strong>1</strong>.</p><p>For example, assume you want to know how many have liked the ad by the end of the <img src="https://latex.codecogs.com/gif.latex?5%5E%7Bth%7D" alt> day.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Day Shared Liked Cumulative</span><br><span class="line">1      5     2       2</span><br><span class="line">2      6     3       5</span><br><span class="line">3      9     4       9</span><br><span class="line">4     12     6      15</span><br><span class="line">5     18     9      24</span><br></pre></td></tr></table></figure><p>The cumulative number of likes is <strong>24</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the viralAdvertising function in the editor below. It should return the cumulative number of people who have liked the ad at a given time.</p><p>viralAdvertising has the following parameter(s):</p><ul><li>n: the integer number of days</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>A single integer, <strong>n</strong>, denoting a number of days.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the number of people who liked the advertisement during the first <strong>n</strong> days.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>This example is depicted in the following diagram:</p><p><img src="./images/viralAdvertising.png" alt></p><p><strong>2</strong> people liked the advertisement on the first day, <strong>3</strong> people liked the advertisement on the second day and <strong>4</strong> people liked the advertisement on the third day, so the answer is <code>2 + 3 + 4 = 9</code>.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">viralAdvertising</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(n).fill(<span class="hljs-built_in">Math</span>.floor(<span class="hljs-number">5</span> / <span class="hljs-number">2</span>)).reduce(<span class="hljs-function">(<span class="hljs-params">target, day, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> number = index === <span class="hljs-number">0</span> ? day : <span class="hljs-built_in">Math</span>.floor(target[<span class="hljs-string">'prev'</span>] * <span class="hljs-number">3</span> / <span class="hljs-number">2</span>);</span><br><span class="line">        target[<span class="hljs-string">'prev'</span>] = number;</span><br><span class="line">        target[<span class="hljs-string">'Cumulative'</span>] += number;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, &#123;<span class="hljs-attr">Cumulative</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">prev</span>: <span class="hljs-number">0</span>&#125;)[<span class="hljs-string">'Cumulative'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/05/algorithm/hackerrank/32_ViralAdvertising/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Beautiful Days at the Movies</title>
      <link>https://alleyful.github.io/2019/08/04/algorithm/hackerrank/31_BeautifulDaysAtTheMovies/</link>
      <guid>https://alleyful.github.io/2019/08/04/algorithm/hackerrank/31_BeautifulDaysAtTheMovies/</guid>
      <pubDate>Sat, 03 Aug 2019 15:15:29 GMT</pubDate>
      <description>
      
        &lt;p&gt;Lily likes to play games with integers. She has created a new game where she determines the difference between a number and its reverse. For instance, given the number &lt;strong&gt;12&lt;/strong&gt;, its reverse is &lt;strong&gt;21&lt;/strong&gt;. Their difference is &lt;strong&gt;9&lt;/strong&gt;. The number &lt;strong&gt;120&lt;/strong&gt; reversed is &lt;strong&gt;21&lt;/strong&gt;, and their difference is &lt;strong&gt;99&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;She decides to apply her game to decision making. She will look at a numbered range of days and will only go to a movie on a beautiful day.&lt;/p&gt;
&lt;p&gt;Given a range of numbered days, &lt;strong&gt;[i … j]&lt;/strong&gt; and a number &lt;strong&gt;k&lt;/strong&gt;, determine the number of days in the range that are beautiful.&lt;br&gt;Beautiful numbers are defined as numbers where &lt;code&gt;|i - reverse(i)|&lt;/code&gt; is evenly divisible by &lt;strong&gt;k&lt;/strong&gt;. If a day’s value is a beautiful number, it is a beautiful day. Print the number of beautiful days in the range.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Lily likes to play games with integers. She has created a new game where she determines the difference between a number and its reverse. For instance, given the number <strong>12</strong>, its reverse is <strong>21</strong>. Their difference is <strong>9</strong>. The number <strong>120</strong> reversed is <strong>21</strong>, and their difference is <strong>99</strong>.</p><p>She decides to apply her game to decision making. She will look at a numbered range of days and will only go to a movie on a beautiful day.</p><p>Given a range of numbered days, <strong>[i … j]</strong> and a number <strong>k</strong>, determine the number of days in the range that are beautiful.<br>Beautiful numbers are defined as numbers where <code>|i - reverse(i)|</code> is evenly divisible by <strong>k</strong>. If a day’s value is a beautiful number, it is a beautiful day. Print the number of beautiful days in the range.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the beautifulDays function in the editor below. It must return the number of beautiful days in the range.</p><p>beautifulDays has the following parameter(s):</p><ul><li>i: the starting day number</li><li>j: the ending day number</li><li>k: the divisor</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>A single line of three space-separated integers describing the respective values of <strong>i</strong>, <strong>j</strong>, and <strong>k</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;i%5Cleq&space;j%5Cleq&space;2%5Ctimes&space;10%5E%7B6%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;k%5Cleq&space;2%5Ctimes&space;10%5E%7B9%7D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the number of beautiful days in the inclusive range between <strong>i</strong> and <strong>j</strong>.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 23 6</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Lily may go to the movies on days <strong>20</strong>, <strong>21</strong>, <strong>22</strong>, and <strong>23</strong>. We perform the following calculations to determine which days are beautiful:</p><ul><li>Day <strong>20</strong> is beautiful because the following evaluates to a whole number: <img src="https://latex.codecogs.com/gif.latex?%5Cfrac%7B%7C20-02%7C%7D%7B6%7D=%5Cfrac%7B18%7D%7B6%7D=3" alt></li><li>Day <strong>21</strong> is not beautiful because the following doesn’t evaluate to a whole number: <img src="https://latex.codecogs.com/gif.latex?%5Cfrac%7B%7C21-12%7C%7D%7B6%7D=%5Cfrac%7B9%7D%7B6%7D=1.5" alt></li><li>Day <strong>22</strong> is beautiful because the following evaluates to a whole number: <img src="https://latex.codecogs.com/gif.latex?%5Cfrac%7B%7C22-22%7C%7D%7B6%7D=%5Cfrac%7B0%7D%7B6%7D=0" alt></li><li>Day <strong>23</strong> is not beautiful because the following doesn’t evaluate to a whole number: <img src="https://latex.codecogs.com/gif.latex?%5Cfrac%7B%7C23-32%7C%7D%7B6%7D=%5Cfrac%7B9%7D%7B6%7D=1.5" alt></li></ul><p>Only two days, <strong>20</strong> and <strong>22</strong>, in this interval are beautiful. Thus, we print <strong>2</strong> as our answer.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">beautifulDays</span>(<span class="hljs-params">i, j, k</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(j - i + <span class="hljs-number">1</span>).fill(<span class="hljs-number">0</span>).reduce(<span class="hljs-function">(<span class="hljs-params">target, number, index</span>) =&gt;</span> &#123; </span><br><span class="line">        (<span class="hljs-built_in">Number</span>([...String(index + i)].reverse().join(<span class="hljs-string">''</span>)) - (index + i)) % k === <span class="hljs-number">0</span> &amp;&amp; ++target;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/04/algorithm/hackerrank/31_BeautifulDaysAtTheMovies/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
