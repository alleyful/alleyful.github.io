<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ALLEY</title>
    <link>https://alleyful.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>alley&#39;s blog for study</description>
    <pubDate>Wed, 04 Sep 2019 05:09:46 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Lisa&#39;s Workbook</title>
      <link>https://alleyful.github.io/2019/09/04/algorithm/hackerrank/56_LisasWorkbook/</link>
      <guid>https://alleyful.github.io/2019/09/04/algorithm/hackerrank/56_LisasWorkbook/</guid>
      <pubDate>Wed, 04 Sep 2019 05:09:09 GMT</pubDate>
      <description>
      
        &lt;p&gt;Lisa just got a new math workbook. A workbook contains exercise problems, grouped into chapters. Lisa believes a problem to be special if its index (within a chapter) is the same as the page number where it’s located. The format of Lisa’s book is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are &lt;strong&gt;n&lt;/strong&gt; chapters in Lisa’s workbook, numbered from &lt;strong&gt;1&lt;/strong&gt; to &lt;strong&gt;n&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;img src=&quot;https://latex.codecogs.com/gif.latex?i%5E%7Bth%7D&quot; alt&gt; chapter has &lt;strong&gt;arr[i]&lt;/strong&gt; problems, numbered from &lt;strong&gt;1&lt;/strong&gt; to &lt;strong&gt;arr[i]&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Each page can hold up to &lt;strong&gt;k&lt;/strong&gt; problems. Only a chapter’s last page of exercises may contain fewer than &lt;strong&gt;k&lt;/strong&gt; problems.&lt;/li&gt;
&lt;li&gt;Each new chapter starts on a new page, so a page will never contain problems from more than one chapter.&lt;/li&gt;
&lt;li&gt;The page number indexing starts at &lt;strong&gt;1&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Lisa just got a new math workbook. A workbook contains exercise problems, grouped into chapters. Lisa believes a problem to be special if its index (within a chapter) is the same as the page number where it’s located. The format of Lisa’s book is as follows:</p><ul><li>There are <strong>n</strong> chapters in Lisa’s workbook, numbered from <strong>1</strong> to <strong>n</strong>.</li><li>The <img src="https://latex.codecogs.com/gif.latex?i%5E%7Bth%7D" alt> chapter has <strong>arr[i]</strong> problems, numbered from <strong>1</strong> to <strong>arr[i]</strong>.</li><li>Each page can hold up to <strong>k</strong> problems. Only a chapter’s last page of exercises may contain fewer than <strong>k</strong> problems.</li><li>Each new chapter starts on a new page, so a page will never contain problems from more than one chapter.</li><li>The page number indexing starts at <strong>1</strong>.</li></ul><a id="more"></a><p>Given the details for Lisa’s workbook, can you count its number of special problems?</p><p>For example, Lisa’s workbook contains <strong>arr[1] = 4</strong> problems for chapter <strong>1</strong>, and <strong>arr[2] = 2</strong> problems for chapter <strong>2</strong>. Each page can hold <strong>k = 3</strong> problems. The first page will hold <strong>3</strong> problems for chapter <strong>1</strong>. Problem <strong>1</strong> is on page <strong>1</strong>, so it is special. Page <strong>2</strong> contains only Chapter <strong>1</strong>, Problem <strong>4</strong>, so no special problem is on page <strong>2</strong>. Chapter <strong>2</strong> problems start on page <strong>3</strong> and there are <strong>2</strong> problems. Since there is no problem <strong>3</strong> on page <strong>3</strong>, there is no special problem on that page either. There is <strong>1</strong> special problem in her workbook.</p><p><strong>Note</strong>: See the diagram in the Explanation section for more details.</p><br><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the workbook function in the editor below. It should return an integer that represents the number of special problems in the workbook.</p><p>workbook has the following parameter(s):</p><ul><li>n: an integer that denotes the number of chapters</li><li>k: an integer that denotes the maximum number of problems per page</li><li>arr: an array of integers that denote the number of problems in each chapter</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains two integers <strong>n</strong> and <strong>k</strong>, the number of chapters and the maximum number of problems per page.<br>The second line contains <strong>n</strong> space-separated integers <strong>arr[i]</strong> where <strong>arr[i]</strong> denotes the number of problems in the <img src="https://latex.codecogs.com/gif.latex?i%5E%7Bth%7D" alt> chapter.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n,&space;k,&space;arr%5Bi%5D%5Cleq&space;100" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the number of special problems in Lisa’s workbook.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 3  </span><br><span class="line">4 2 6 1 10</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>The diagram below depicts Lisa’s workbook with <strong>n = 5</strong> chapters and a maximum of <strong>k = 3</strong> problems per page. Special problems are outlined in red, and page numbers are in yellow squares.</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/lisa-workbook.png" alt></p><p>There are <strong>4</strong> special problems and thus we print the number <strong>4</strong> on a new line.</p><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">workbook</span>(<span class="hljs-params">n, k, arr</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> currentPage = <span class="hljs-number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">return</span> arr.reduce(<span class="hljs-function">(<span class="hljs-params">target, pages, index</span>) =&gt;</span> &#123; </span><br><span class="line">    target += <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(pages).fill(index).reduce(<span class="hljs-function">(<span class="hljs-params">innerTarget, page, innerIndex</span>) =&gt;</span> &#123; </span><br><span class="line">      ((innerIndex) % k === <span class="hljs-number">0</span>) &amp;&amp; currentPage++;</span><br><span class="line">      ((innerIndex + <span class="hljs-number">1</span>) === currentPage) &amp;&amp; ++innerTarget;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(innerIndex + <span class="hljs-number">1</span>, innerTarget, currentPage);</span><br><span class="line">      <span class="hljs-keyword">return</span> innerTarget;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, <span class="hljs-number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/04/algorithm/hackerrank/56_LisasWorkbook/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS ReactJS Challenge - Day4</title>
      <link>https://alleyful.github.io/2019/09/03/develop/react/react-challenge-day4/</link>
      <guid>https://alleyful.github.io/2019/09/03/develop/react/react-challenge-day4/</guid>
      <pubDate>Mon, 02 Sep 2019 15:10:29 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;오늘의 강의: #3.0 ~ #3.4&lt;br&gt;오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/courses/436641/lectures/8467057&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;[노마드 코더] 초보를 위한 React JS&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3.0 CSS in React part One&lt;/li&gt;
&lt;li&gt;3.1 CSS in React part Two&lt;/li&gt;
&lt;li&gt;3.2 CSS in React part Three&lt;/li&gt;
&lt;li&gt;3.3 GlobalStyles and Header&lt;/li&gt;
&lt;li&gt;3.4 Location Aware Header&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>오늘의 강의: #3.0 ~ #3.4<br>오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.</p></blockquote><br><p><a href="https://academy.nomadcoders.co/courses/436641/lectures/8467057" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 초보를 위한 React JS</a></p><ul><li>3.0 CSS in React part One</li><li>3.1 CSS in React part Two</li><li>3.2 CSS in React part Three</li><li>3.3 GlobalStyles and Header</li><li>3.4 Location Aware Header</li></ul><br><a id="more"></a><hr><br><h2 id="Lecture-Summery"><a href="#Lecture-Summery" class="headerlink" title="Lecture Summery"></a>Lecture Summery</h2><br><h3 id="CSS-in-React"><a href="#CSS-in-React" class="headerlink" title="CSS in React"></a>CSS in React</h3><h4 id="styles-css"><a href="#styles-css" class="headerlink" title="styles.css"></a>styles.css</h4><ul><li>styles.css 생성 후 index.js에서 import</li><li>장점 : 사용방법이 쉬움</li><li>단점 : 컴포넌트와 css 파일이 분리되어 있음   <figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">my-app</span><br><span class="line">└── src</span><br><span class="line">    ├── index.js    // import &quot;styles.css&quot;;</span><br><span class="line">    ├── styles.css</span><br><span class="line">    ├── Router</span><br><span class="line">    └── Components</span><br></pre></td></tr></table></figure></li></ul><br><h4 id="폴더에-정리"><a href="#폴더에-정리" class="headerlink" title="폴더에 정리"></a>폴더에 정리</h4><ul><li>components폴더 안에 js 파일과 css 파일을 함께 생성하여 js 파일에서 import</li><li>장점 : 파일이 한 폴더에 모여있어 찾기 쉬움.</li><li>단점 : 사용할때마다 import 해줘야 함. className을 기억해서 반복되지 않도록 해야함.</li><li>사용 : <code>&lt;header className=&quot;nav&quot;&gt;</code><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">my-app</span><br><span class="line">└── src</span><br><span class="line">    ├── App.js</span><br><span class="line">    ├── Router.js</span><br><span class="line">    └── Components</span><br><span class="line">        └── Header</span><br><span class="line">            ├── Header.css   // className을 사</span><br><span class="line">            ├── Header.js    // import &quot;./Header.css&quot;;</span><br><span class="line">            └── index.js</span><br></pre></td></tr></table></figure></li></ul><br> <h4 id="css모듈-사용"><a href="#css모듈-사용" class="headerlink" title="css모듈 사용"></a>css모듈 사용</h4><ul><li>css가 global이 아닌 local이 되게 함.</li><li>사용 : <code>&lt;ul className={styles.navList}&gt;</code></li><li>렌더시 랜덤한 className이 생성.</li><li>sass 사용시 node-sass 설</li><li>단점 : 여전히 css모듈에서 사용된 className을 기억해야함.<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">my-app</span><br><span class="line">└── src</span><br><span class="line">    ├── App.js</span><br><span class="line">    ├── Router.js</span><br><span class="line">    └── Components</span><br><span class="line">        └── Header</span><br><span class="line">            ├── Header.module.css 또는 Header.module.sass  </span><br><span class="line">            ├── Header.js    // import styles from &quot;./Header.module.css&quot;;</span><br><span class="line">            └── index.js</span><br></pre></td></tr></table></figure></li></ul><br>  <h4 id="styled-components-사용"><a href="#styled-components-사용" class="headerlink" title="styled-components 사용"></a>styled-components 사용</h4><ul><li>설치<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add styled-components</span><br></pre></td></tr></table></figure></li></ul><br><ul><li>사용<figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Link &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react-router-dom"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">"styled-components"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Header = styled.header<span class="hljs-string">``</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> List = styled.ul<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  display: flex;</span></span><br><span class="line"><span class="hljs-string">  &amp;:hover &#123;</span></span><br><span class="line"><span class="hljs-string">    background-color: blue;</span></span><br><span class="line"><span class="hljs-string">  &#125;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Item = styled.li<span class="hljs-string">``</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> SLink = styled(Link)<span class="hljs-string">``</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Header&gt;</span><br><span class="line">    &lt;List&gt;</span><br><span class="line">      &lt;Item&gt;</span><br><span class="line">        &lt;SLink to=<span class="hljs-string">"/"</span>&gt;Movies&lt;<span class="hljs-regexp">/SLink&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>Item&gt;</span><br><span class="line">      &lt;Item&gt;</span><br><span class="line">        &lt;SLink to=<span class="hljs-string">"/tv"</span>&gt;TV&lt;<span class="hljs-regexp">/SLink&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>Item&gt;</span><br><span class="line">      &lt;Item&gt;</span><br><span class="line">        &lt;SLink to=<span class="hljs-string">"/search"</span>&gt;Search&lt;<span class="hljs-regexp">/SLink&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>Item&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/List&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>Header&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><br><ul><li><code>styled-components</code> 을 사용해서 스타일링 할 수 있다.</li><li><code>this -&gt; &amp;</code> 로 내부에서 사용가능</li><li><code>props</code> 도 사용 가능하다.</li><li><code>GlobalStyle</code> 적용시 전체 스타일을 설정할 수 있다. <code>reset</code> 사용</li></ul><br><br><h3 id="GlobalStyles-and-Header"><a href="#GlobalStyles-and-Header" class="headerlink" title="GlobalStyles and Header"></a>GlobalStyles and Header</h3><h4 id="global-설정"><a href="#global-설정" class="headerlink" title="global 설정"></a>global 설정</h4><ul><li>설치<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add styled-reset</span><br></pre></td></tr></table></figure></li></ul><br><ul><li>사용<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my-app</span><br><span class="line">└── src</span><br><span class="line">    ├── Routes</span><br><span class="line">    └── Components</span><br><span class="line">        ├── GlobalStyles.js</span><br><span class="line">        ├── App.js</span><br><span class="line">        ├── Header.js</span><br><span class="line">        └── Router.js</span><br></pre></td></tr></table></figure></li></ul><p><code>GlobalStyles.js</code></p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> &#123; createGlobalStyle &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"styled-components"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> reset <span class="hljs-keyword">from</span> <span class="hljs-string">"styled-reset"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> globalStyles = createGlobalStyle<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">    <span class="hljs-subst">$&#123;reset&#125;</span>;</span></span><br><span class="line"><span class="hljs-string">    a&#123;</span></span><br><span class="line"><span class="hljs-string">        text-decoration:none;</span></span><br><span class="line"><span class="hljs-string">        color:inherit;</span></span><br><span class="line"><span class="hljs-string">    &#125;</span></span><br><span class="line"><span class="hljs-string">    *&#123;</span></span><br><span class="line"><span class="hljs-string">        box-sizing:border-box;</span></span><br><span class="line"><span class="hljs-string">    &#125;</span></span><br><span class="line"><span class="hljs-string">    body&#123;</span></span><br><span class="line"><span class="hljs-string">        font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;</span></span><br><span class="line"><span class="hljs-string">        font-size:12px;</span></span><br><span class="line"><span class="hljs-string">        background-color:rgba(20, 20, 20, 1);</span></span><br><span class="line"><span class="hljs-string">        color:white;</span></span><br><span class="line"><span class="hljs-string">        padding-top:50px;</span></span><br><span class="line"><span class="hljs-string">    &#125;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> globalStyles;</span><br></pre></td></tr></table></figure><br><h3 id="Location-Aware-Header"><a href="#Location-Aware-Header" class="headerlink" title="Location Aware Header"></a>Location Aware Header</h3><ul><li>withRouter를 이용하여 현재의 location정보를 이용   </li></ul><p><code>Header.js</code></p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Link, withRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react-router-dom"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">"styled-components"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Header = styled.header<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  color: white;</span></span><br><span class="line"><span class="hljs-string">  position: fixed;</span></span><br><span class="line"><span class="hljs-string">  top: 0;</span></span><br><span class="line"><span class="hljs-string">  left: 0;</span></span><br><span class="line"><span class="hljs-string">  width: 100%;</span></span><br><span class="line"><span class="hljs-string">  height: 50px;</span></span><br><span class="line"><span class="hljs-string">  display: flex;</span></span><br><span class="line"><span class="hljs-string">  align-items: center;</span></span><br><span class="line"><span class="hljs-string">  background-color: rgba(20, 20, 20, 0.8);</span></span><br><span class="line"><span class="hljs-string">  z-index: 10;</span></span><br><span class="line"><span class="hljs-string">  box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> List = styled.ul<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  display: flex;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Item = styled.li<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  width: 80px;</span></span><br><span class="line"><span class="hljs-string">  height: 50px;</span></span><br><span class="line"><span class="hljs-string">  text-align: center;</span></span><br><span class="line"><span class="hljs-string">  border-bottom: 3px solid</span></span><br><span class="line"><span class="hljs-string">    <span class="hljs-subst">$&#123;props =&gt; (props.current ? <span class="hljs-string">"#3498db"</span> : <span class="hljs-string">"transparent"</span>)&#125;</span>;</span></span><br><span class="line"><span class="hljs-string">  transition: border-bottom 0.5s ease-in-out;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> SLink = styled(Link)<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  height: 50px;</span></span><br><span class="line"><span class="hljs-string">  display: flex;</span></span><br><span class="line"><span class="hljs-string">  align-items: center;</span></span><br><span class="line"><span class="hljs-string">  justify-content: center;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> withRouter(<span class="hljs-function">(<span class="hljs-params">&#123; location: &#123; pathname &#125; &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;Header&gt;</span><br><span class="line">    &lt;List&gt;</span><br><span class="line">      &lt;Item current=&#123;pathname === <span class="hljs-string">"/"</span>&#125;&gt;</span><br><span class="line">        &lt;SLink to=<span class="hljs-string">"/"</span>&gt;Movies&lt;<span class="hljs-regexp">/SLink&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>Item&gt;</span><br><span class="line">      &lt;Item current=&#123;pathname === <span class="hljs-string">"/tv"</span>&#125;&gt;</span><br><span class="line">        &lt;SLink to=<span class="hljs-string">"/tv"</span>&gt;TV&lt;<span class="hljs-regexp">/SLink&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>Item&gt;</span><br><span class="line">      &lt;Item current=&#123;pathname === <span class="hljs-string">"/search"</span>&#125;&gt;</span><br><span class="line">        &lt;SLink to=<span class="hljs-string">"/search"</span>&gt;Search&lt;<span class="hljs-regexp">/SLink&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>Item&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/List&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>Header&gt;</span><br><span class="line">));</span><br></pre></td></tr></table></figure><br><br><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://velog.io/@velopert/react-component-styling" rel="external nofollow noopener noreferrer" target="_blank">다양한 방식의 리액트 컴포넌트 스타일링 방식</a></li><li><a href="https://velopert.com/1712" rel="external nofollow noopener noreferrer" target="_blank">Sass 강좌 – 한 눈에 보기</a></li><li><a href="https://sass-guidelin.es/ko/" rel="external nofollow noopener noreferrer" target="_blank">Sass 작성을 위한 주관적인 스타일가이드.</a></li><li><a href="https://velog.io/@taewo/%EB%A6%AC%EC%95%A1%ED%8A%B8-Styled-Components-76jsolbaf8" rel="external nofollow noopener noreferrer" target="_blank">리액트 Styled Components - 1편</a></li><li><a href="https://velog.io/@taewo/%EB%A6%AC%EC%95%A1%ED%8A%B8-Styled-Componets-2%ED%8E%B8" rel="external nofollow noopener noreferrer" target="_blank">리액트 Styled Components - 2편</a></li><li><a href="https://javaexpert.tistory.com/1020" rel="external nofollow noopener noreferrer" target="_blank">React Styled-Component 공부</a></li></ul><hr><br><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><p><a href="https://codesandbox.io/s/day-four-boilerplate-jxch9" rel="external nofollow noopener noreferrer" target="_blank">Day4 템플릿</a></p><p><img src="https://github.com/alleyful/nomflix/raw/master/note/images/day4.gif" alt></p><br><h3 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h3><ul><li>Use <strong>‘styled-components’</strong> , <strong>‘styled-reset’</strong> and <strong>‘createGlobalStyle’</strong></li><li>The header must be location aware and the links should reflect that.</li><li><strong>DO NOT</strong> use <strong>ANY .css</strong> file or <strong>‘className’</strong> attribute.</li></ul><br><h3 id="Submit"><a href="#Submit" class="headerlink" title="Submit"></a>Submit</h3><p><code>My Answer</code><br><a href="https://codesandbox.io/s/day-four-boilerplate-tddjh" rel="external nofollow noopener noreferrer" target="_blank">Day4 Answer</a></p><p><code>Header.js</code></p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Link, withRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react-router-dom"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">"styled-components"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Header = styled.header<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  padding: 30px 0;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> List = styled.ul<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  display: flex;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> Item = styled.li<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  font-size: 15px;</span></span><br><span class="line"><span class="hljs-string">  font-weight: bold;</span></span><br><span class="line"><span class="hljs-string">  margin: 0 20px 0 0;</span></span><br><span class="line"><span class="hljs-string">  background: <span class="hljs-subst">$&#123;props =&gt; (props.current ? <span class="hljs-string">"#faa"</span> : <span class="hljs-string">"#fff"</span>)&#125;</span>;</span></span><br><span class="line"><span class="hljs-string">  color: <span class="hljs-subst">$&#123;props =&gt; (props.current ? <span class="hljs-string">"#fff"</span> : <span class="hljs-string">"#000"</span>)&#125;</span>;</span></span><br><span class="line"><span class="hljs-string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> withRouter(<span class="hljs-function">(<span class="hljs-params">&#123; location: &#123; pathname &#125; &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;Header&gt;</span><br><span class="line">    &lt;List&gt;</span><br><span class="line">      &lt;Item current=&#123;pathname === <span class="hljs-string">"/"</span>&#125;&gt;</span><br><span class="line">        &lt;Link to=<span class="hljs-string">"/"</span>&gt;PRICES&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>Item&gt;</span><br><span class="line">      &lt;Item current=&#123;pathname === <span class="hljs-string">"/exchanges"</span>&#125;&gt;</span><br><span class="line">        &lt;Link to=<span class="hljs-string">"/exchanges"</span>&gt;EXCHANGES&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>Item&gt;</span><br><span class="line">      &lt;Item current=&#123;pathname === <span class="hljs-string">"/coins"</span>&#125;&gt;</span><br><span class="line">        &lt;Link to=<span class="hljs-string">"/coins"</span>&gt;COINS&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>Item&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/List&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>Header&gt;</span><br><span class="line">));</span><br></pre></td></tr></table></figure><br><p><code>correct</code><br><a href="https://codesandbox.io/s/day-four-solution-3j7gi" rel="external nofollow noopener noreferrer" target="_blank">Day4 Currect</a></p><br><hr><br><h2 id="Day4-정리"><a href="#Day4-정리" class="headerlink" title="Day4 정리"></a>Day4 정리</h2><ul><li>오늘의 강의 : <a href="https://academy.nomadcoders.co/courses/436641/lectures/8467057" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 초보를 위한 React JS</a><ul><li>3.0 CSS in React part One</li><li>3.1 CSS in React part Two</li><li>3.2 CSS in React part Three</li><li>3.3 GlobalStyles and Header</li><li>3.4 Location Aware Header</li></ul></li><li>강의노트: <a href="./note/day4.md">Day4 Note</a></li><li>오늘의 과제: <a href="https://codesandbox.io/s/day-four-boilerplate-jxch9" rel="external nofollow noopener noreferrer" target="_blank">Day4 Question</a></li><li>제출: <a href="https://codesandbox.io/s/day-four-boilerplate-tddjh" rel="external nofollow noopener noreferrer" target="_blank">Day4 Answer</a></li><li>정답: <a href="https://codesandbox.io/s/day-four-solution-3j7gi" rel="external nofollow noopener noreferrer" target="_blank">Day4 Current</a></li></ul><br>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/03/develop/react/react-challenge-day4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Service Lane</title>
      <link>https://alleyful.github.io/2019/09/02/algorithm/hackerrank/55_ServiceLane/</link>
      <guid>https://alleyful.github.io/2019/09/02/algorithm/hackerrank/55_ServiceLane/</guid>
      <pubDate>Mon, 02 Sep 2019 05:24:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;Calvin is driving his favorite vehicle on the 101 freeway. He notices that the check engine light of his vehicle is on, and he wants to service it immediately to avoid any risks. Luckily, a service lane runs parallel to the highway. The service lane varies in width along its length.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/serviceLane.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;You will be given an array of widths at points along the road (indices), then a list of the indices of entry and exit points. Considering each entry and exit point pair, calculate the maximum size vehicle that can travel that segment of the service lane safely.&lt;/p&gt;
&lt;p&gt;For example, there are &lt;strong&gt;n = 4&lt;/strong&gt; measurements yielding &lt;strong&gt;width = [2, 3, 2, 1]&lt;/strong&gt;. If our entry index, &lt;strong&gt;i = 1&lt;/strong&gt; and our exit, &lt;strong&gt;j = 2&lt;/strong&gt;, there are two segment widths of &lt;strong&gt;2&lt;/strong&gt; and &lt;strong&gt;3&lt;/strong&gt; respectively. The widest vehicle that can fit through both is &lt;strong&gt;2&lt;/strong&gt;. If &lt;strong&gt;i = 2&lt;/strong&gt; and &lt;strong&gt;j = 4&lt;/strong&gt;, our widths are &lt;strong&gt;[3, 2, 1]&lt;/strong&gt; which limits vehicle width to &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Calvin is driving his favorite vehicle on the 101 freeway. He notices that the check engine light of his vehicle is on, and he wants to service it immediately to avoid any risks. Luckily, a service lane runs parallel to the highway. The service lane varies in width along its length.</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/serviceLane.png" alt></p><p>You will be given an array of widths at points along the road (indices), then a list of the indices of entry and exit points. Considering each entry and exit point pair, calculate the maximum size vehicle that can travel that segment of the service lane safely.</p><p>For example, there are <strong>n = 4</strong> measurements yielding <strong>width = [2, 3, 2, 1]</strong>. If our entry index, <strong>i = 1</strong> and our exit, <strong>j = 2</strong>, there are two segment widths of <strong>2</strong> and <strong>3</strong> respectively. The widest vehicle that can fit through both is <strong>2</strong>. If <strong>i = 2</strong> and <strong>j = 4</strong>, our widths are <strong>[3, 2, 1]</strong> which limits vehicle width to <strong>1</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the serviceLane function in the editor below. It should return an array of integers representing the maximum width vehicle that can pass through each segment of the highway described.</p><p>serviceLane has the following parameter(s):</p><ul><li>n: an integer denoting the size of the <strong>cases</strong> array</li><li>cases: a two dimensional array of integers where each element is an array of two integers representing starting and ending indices for a segment to consider .</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line of input contains two integers, <strong>n</strong> and <strong>t</strong>, where <strong>n</strong> denotes the number of width measurements you will receive and <strong>t</strong> the number of test cases. The next line has <strong>n</strong> space-separated integers which represent the array <img src="https://latex.codecogs.com/gif.latex?width%5Bw_%7B0%7D,&space;w_%7B1%7D&space;...&space;,&space;w_%7Bn-1%7D%5D" alt>.</p><p>The next <strong>t</strong> lines contain two integers, <strong>i</strong> and <strong>j</strong>, where <strong>i</strong> is the start index and <strong>j</strong> is the end index of the segment being considered.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;n%5Cleq&space;100000" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;t%5Cleq&space;1000" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;i%3C&space;j%3C&space;n" alt></li><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;j&space;-&space;i&space;&plus;&space;1%5Cleq&space;min(n,&space;1000)" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;width%5Bk%5D%5Cleq&space;3,&space;where&space;,&space;0%5Cleq&space;k%3C&space;n" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each test case, print the number that represents the largest vehicle type that can pass through the entire segment of the service lane between indexes <strong>i</strong> and <strong>j</strong> inclusive.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">8 5</span><br><span class="line">2 3 1 2 3 2 3 3</span><br><span class="line">0 3</span><br><span class="line">4 6</span><br><span class="line">6 7</span><br><span class="line">3 5</span><br><span class="line">0 7</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Below is the representation of the lane:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   |HIGHWAY|Lane|    -&gt;    Width</span><br><span class="line"></span><br><span class="line">0: |       |--|            2</span><br><span class="line">1: |       |---|           3</span><br><span class="line">2: |       |-|             1</span><br><span class="line">3: |       |--|            2</span><br><span class="line">4: |       |---|           3</span><br><span class="line">5: |       |--|            2</span><br><span class="line">6: |       |---|           3</span><br><span class="line">7: |       |---|           3</span><br></pre></td></tr></table></figure><ol><li><strong>(0, 3)</strong>: From index <strong>0</strong> through <strong>3</strong> we have widths <strong>2, 3, 1</strong> and . Nothing wider than <strong>1</strong> can pass all segments.</li><li><strong>(4, 6)</strong>: From index <strong>4</strong> through <strong>6</strong> we have width <strong>3, 2</strong> and <strong>3</strong>. Nothing wider than <strong>2</strong> can pass all segments.</li><li><strong>(6, 7)</strong>: <strong>3, 3 -&gt; 3</strong> .</li><li><strong>(3, 5)</strong>: <strong>2, 3, 2 -&gt; 2</strong></li><li><strong>(0, 7)</strong>: <strong>2, 3, 1, 2, 3, 2, 3, 3 -&gt; 1</strong>.</li></ol><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">serviceLane</span>(<span class="hljs-params">width, cases</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> cases.reduce(<span class="hljs-function">(<span class="hljs-params">target, item</span>) =&gt;</span> &#123;</span><br><span class="line">    target.push(<span class="hljs-built_in">Math</span>.min(...width.slice(item[<span class="hljs-number">0</span>], item[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>)));</span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/02/algorithm/hackerrank/55_ServiceLane/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS ReactJS Challenge - Day3</title>
      <link>https://alleyful.github.io/2019/09/01/develop/react/react-challenge-day3/</link>
      <guid>https://alleyful.github.io/2019/09/01/develop/react/react-challenge-day3/</guid>
      <pubDate>Sun, 01 Sep 2019 05:12:04 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;오늘의 강의: #2.1 ~ #2.2&lt;br&gt;오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/courses/436641/lectures/8467057&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;[노마드 코더] 초보를 위한 React JS&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.0 Setting Up the Project&lt;/li&gt;
&lt;li&gt;2.1 React Router Part One&lt;/li&gt;
&lt;li&gt;2.2 React Router Part Two&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>오늘의 강의: #2.1 ~ #2.2<br>오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.</p></blockquote><br><p><a href="https://academy.nomadcoders.co/courses/436641/lectures/8467057" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 초보를 위한 React JS</a></p><ul><li>2.0 Setting Up the Project</li><li>2.1 React Router Part One</li><li>2.2 React Router Part Two</li></ul><br><a id="more"></a><hr><br><h2 id="Lecture-Summery"><a href="#Lecture-Summery" class="headerlink" title="Lecture Summery"></a>Lecture Summery</h2><br><h3 id="2-0-Setting-Up-the-Project"><a href="#2-0-Setting-Up-the-Project" class="headerlink" title="2.0 Setting Up the Project"></a>2.0 Setting Up the Project</h3><br><h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><p>React는 사용자 인터페이스를 구축하기 위한 선언적이고 효율적이며 유연한 JavaScript 라이브러리다.  </p><br><h4 id="create-react-app"><a href="#create-react-app" class="headerlink" title="create-react-app"></a>create-react-app</h4><p>create-react-app은 페이스북에서 만든 react 웹 개발용 boilerplate이다.</p><ul><li>설치 및 사용<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-react-app my-app</span><br><span class="line">$ cd my-app</span><br><span class="line">$ yarn start</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>주의</strong><br>첫 번째 줄의 ‘npx’는 실수가 아니며 npm 5.2+ 버전의 패키지 실행 도구.</p></blockquote><br><ul><li>Output<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">my-app</span><br><span class="line">├── README.md</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── .gitignore</span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── manifest.json</span><br><span class="line">└── src</span><br><span class="line">    ├── App.css</span><br><span class="line">    ├── App.js</span><br><span class="line">    ├── App.test.js</span><br><span class="line">    ├── index.css</span><br><span class="line">    ├── index.js</span><br><span class="line">    ├── logo.svg</span><br><span class="line">    └── serviceWorker.js</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>사용하지 않는 파일 및 내용을 삭제하여 기본적인 설치를 완료합니다.</p></blockquote><br><h3 id="React-Router"><a href="#React-Router" class="headerlink" title="React Router"></a>React Router</h3><p>React는 페이지 이동을 하며 사이트를 보여주는 기존의 웹사이트와 달리 <code>SPA</code>다. 즉 페이지가 1개로 이루어져 있다.<br>하지만 여러가지 정보를 보여주기 위해 주소에 따라 다양한 뷰를 보여줘야 하는데 이럴때 사용할 수 있는게 <code>React Router</code>이다.</p><ul><li>라우팅 : 다른 주소에 따라 다른 뷰를 보여주는 것</li><li>SPA : Single Page Application 말 그대로, 페이지가 1개인 어플리케이션</li></ul><br><h4 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h4><p><a href="https://reacttraining.com/react-router" rel="external nofollow noopener noreferrer" target="_blank">React Router</a>에 보면 Web, Native, Core에 대한 설치 및 사용방법이 자세히 나와 있다.<br>그중 web에서 사용할 수 있는 <code>react-router-dom</code>에 대해 알아보자.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-router-dom</span><br></pre></td></tr></table></figure><br><h4 id="사용"><a href="#사용" class="headerlink" title="사용"></a>사용</h4><p><code>App.js</code></p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Router <span class="hljs-keyword">from</span> <span class="hljs-string">"Components/Router"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Header <span class="hljs-keyword">from</span> <span class="hljs-string">"Components/Header"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;&gt;</span><br><span class="line">        &lt;Header /&gt;</span><br><span class="line">        &lt;Router /&gt;</span><br><span class="line">      &lt;<span class="hljs-regexp">/&gt;</span></span><br><span class="line"><span class="hljs-regexp">    );</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">export default App;</span></span><br></pre></td></tr></table></figure><br><p><code>Router.js</code></p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123;</span><br><span class="line">  BrowserRouter <span class="hljs-keyword">as</span> Router,</span><br><span class="line">  Route,</span><br><span class="line">  Redirect,</span><br><span class="line">  Switch</span><br><span class="line">&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react-router-dom"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">"Routes/Home"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> TV <span class="hljs-keyword">from</span> <span class="hljs-string">"Routes/TV"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Search <span class="hljs-keyword">from</span> <span class="hljs-string">"Routes/Search"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;Switch&gt;</span><br><span class="line">      &lt;Route path=<span class="hljs-string">"/"</span> exact component=&#123;Home&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="hljs-string">"/tv"</span> component=&#123;TV&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="hljs-string">"/search"</span> component=&#123;Search&#125; /&gt;</span><br><span class="line">      &lt;Redirect <span class="hljs-keyword">from</span>=<span class="hljs-string">"*"</span> to=<span class="hljs-string">"/"</span> /&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/Switch&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>Router&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><code>React Router</code>을 사용하기 위해 다음과 같이 import 해준다. as 를 이용하여 Router 라는 이름으로 쓸것이다.</li><li>각각 url로 들어 갔을 때 보여줄 컴포넌트들을 import 해준다.</li><li>Route를 Router로 감싸준다. Switch를 사용하면 해당하는 url을 찾아 그 컴포넌트를 그려주고 빠져나온다.</li><li>exact 또는 exact={true} 는 / 가 포함된 url이 아니라 정확히/ 로 들어왔을 때만 해당 컴포넌트를 그려주게 해주는 것이다. 이것을 안해주면 /search /tv 등등 다른 url에서도 / 을 포함하고 있기 때문에 의도치 않게 함께 그려지는 것을 방지해야 한다.</li></ul><br><p><code>Header.js</code></p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;Link to=<span class="hljs-string">"/"</span>&gt;Movies&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>li&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;Link to=<span class="hljs-string">"/tv"</span>&gt;TV&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>li&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;Link to=<span class="hljs-string">"/search"</span>&gt;Search&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>li&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>header&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>URL 이동시키기</p><ul><li>Link : a 태그와 같다. 하지만 SPA 특성상 a태그 처럼 새로고침이 발생하면 안되기에, a 태그를 기반으로 기능상의 개선을 통해 새로고침없이 다른 뷰를 렌더 하기위해 사용하는 것이다.</li><li>history.push : Route는 컴포넌트에 기본적으로 match, history, location 이라는 것을 넘겨준다. 이때 histroy.push(‘/인자’) 함수에 인자를 넣어주면 해당 인자로 url을 새로고침 없이 이동시켜준다.</li></ul><br><h4 id="match-history-location"><a href="#match-history-location" class="headerlink" title="match, history, location"></a>match, history, location</h4><p>Component에 별도로 설정을 안해주었음에 불구하고, Route의 컴포넌트에 기본적으로 props로 match, history, location을 넘겨준다.</p><ul><li><code>history</code><ul><li>브라우저의 window.history 와 유사</li><li>주소를 임의로 변경하거나 되돌아 갈 수 있도록 한다.</li><li>주소 변경시, SPA 특성을 지키기 위해 페이지 전체를 리로드 하지 않는다.</li><li>location 이 포함되어 있다.</li></ul></li></ul><br><ul><li><p><code>location</code></p><ul><li>브라우저의 window.location 와 유사</li><li>현재 페이지 정보를 지니고 있다.</li><li>url의 query 정보를 search라는 프로퍼티에 가지고 있다.</li></ul><br></li><li><p><code>match</code></p><ul><li>Route의 path에 정의한 것과 매칭된 정보를 가지고 있다.</li><li>params 에 설정한 파라미터를 담고 있다.</li></ul></li></ul><br>    <br><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://ko.reactjs.org/docs/create-a-new-react-app.html" rel="external nofollow noopener noreferrer" target="_blank">새로운 React 앱 만들기</a></li><li><a href="https://kingname.tistory.com/105" rel="external nofollow noopener noreferrer" target="_blank">간단 리엑트 소개와 앱 실행하기</a></li><li><a href="https://github.com/facebook/create-react-app/releases/tag/v3.0.0" rel="external nofollow noopener noreferrer" target="_blank">facebook/create-react-app</a></li><li><a href="https://reacttraining.com/react-router/" rel="external nofollow noopener noreferrer" target="_blank">React Router</a></li><li><a href="https://medium.com/@han7096/react-router-v4-정리-e9931b63dcae" rel="external nofollow noopener noreferrer" target="_blank">React Router V4 정리</a></li></ul><hr><br><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><p><a href="https://codesandbox.io/s/day-three-blueprint-hdx6m" rel="external nofollow noopener noreferrer" target="_blank">Day3 템플릿</a></p><p><img src="https://github.com/alleyful/nomflix/raw/master/note/images/day3.gif" alt></p><br><h3 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h3><ul><li>DO NOT create or delete ANY file.</li><li>DO NOT use <a></a></li></ul><br><h3 id="Submit"><a href="#Submit" class="headerlink" title="Submit"></a>Submit</h3><p><code>My Answer</code><br><a href="https://codesandbox.io/s/day-three-blueprint-nplo3" rel="external nofollow noopener noreferrer" target="_blank">Day3 CodeSandbox</a></p><p><code>Components/Header.js</code></p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Link &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;Link to=<span class="hljs-string">"/prices"</span>&gt;Prices&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>li&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;Link to=<span class="hljs-string">"/exchanges"</span>&gt;Exchanges&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>li&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;Link to=<span class="hljs-string">"/coins"</span>&gt;Coins&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>li&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>header&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><p><code>Components/Router.js</code></p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; HashRouter <span class="hljs-keyword">as</span> Router, Route &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react-router-dom"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Header <span class="hljs-keyword">from</span> <span class="hljs-string">"./Header"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Coins <span class="hljs-keyword">from</span> <span class="hljs-string">"../Screens/Coins"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Exchanges <span class="hljs-keyword">from</span> <span class="hljs-string">"../Screens/Exchanges"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Prices <span class="hljs-keyword">from</span> <span class="hljs-string">"../Screens/Prices"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &lt;Route path=<span class="hljs-string">"/coins"</span> component=&#123;Coins&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="hljs-string">"/exchanges"</span> component=&#123;Exchanges&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="hljs-string">"/prices"</span> component=&#123;Prices&#125; /&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/Router&gt;</span></span><br><span class="line"><span class="hljs-regexp">  );</span></span><br><span class="line"><span class="hljs-regexp">&#125;;</span></span><br></pre></td></tr></table></figure><br><p><code>Correct</code><br><a href="https://codesandbox.io/s/day-three-solution-o4vol" rel="external nofollow noopener noreferrer" target="_blank">Day3 Correct</a></p><p><code>Components/Router.js</code></p><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; HashRouter <span class="hljs-keyword">as</span> Router, Route &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react-router-dom"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Header <span class="hljs-keyword">from</span> <span class="hljs-string">"./Header"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Coins <span class="hljs-keyword">from</span> <span class="hljs-string">"../Screens/Coins"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Exchanges <span class="hljs-keyword">from</span> <span class="hljs-string">"../Screens/Exchanges"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Prices <span class="hljs-keyword">from</span> <span class="hljs-string">"../Screens/Prices"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &lt;Route path=<span class="hljs-string">"/"</span> exact component=&#123;Prices&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="hljs-string">"/exchanges"</span> component=&#123;Exchanges&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="hljs-string">"/coins"</span> exact component=&#123;Coins&#125; /&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/Router&gt;</span></span><br><span class="line"><span class="hljs-regexp">  );</span></span><br><span class="line"><span class="hljs-regexp">&#125;;</span></span><br></pre></td></tr></table></figure><br><hr><br><h2 id="Day3-정리"><a href="#Day3-정리" class="headerlink" title="Day3 정리"></a>Day3 정리</h2><ul><li>오늘의 강의 : <a href="https://academy.nomadcoders.co/courses/436641/lectures/8467057" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 초보를 위한 React JS</a><ul><li>2.1 React Router Part One</li><li>2.2 React Router Part Two</li></ul></li><li>강의노트: <a href="https://github.com/alleyful/nomflix" rel="external nofollow noopener noreferrer" target="_blank">Day3 Note</a></li><li>오늘의 과제: <a href="https://codesandbox.io/s/day-two-blueprint-kfv4j" rel="external nofollow noopener noreferrer" target="_blank">Day3 Question</a></li><li>제출: <a href="https://codesandbox.io/s/day-two-blueprint-8zzqh" rel="external nofollow noopener noreferrer" target="_blank">Day3 Answer</a></li><li>정답: <a href="https://codesandbox.io/s/day-three-solution-o4vol" rel="external nofollow noopener noreferrer" target="_blank">Day3 Correct</a></li></ul><br>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/01/develop/react/react-challenge-day3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS ReactJS Challenge - Day2</title>
      <link>https://alleyful.github.io/2019/08/31/develop/react/react-challenge-day2/</link>
      <guid>https://alleyful.github.io/2019/08/31/develop/react/react-challenge-day2/</guid>
      <pubDate>Sat, 31 Aug 2019 09:28:07 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;오늘의 강의: #1.6 ~ #1.8&lt;br&gt;오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/courses/436641/lectures/8467057&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;[노마드 코더] 초보를 위한 React JS&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.6 Array.map&lt;/li&gt;
&lt;li&gt;1.7 Array.filter&lt;/li&gt;
&lt;li&gt;1.8 .forEach .includes .push&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>오늘의 강의: #1.6 ~ #1.8<br>오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.</p></blockquote><br><p><a href="https://academy.nomadcoders.co/courses/436641/lectures/8467057" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 초보를 위한 React JS</a></p><ul><li>1.6 Array.map</li><li>1.7 Array.filter</li><li>1.8 .forEach .includes .push</li></ul><br><a id="more"></a><hr><br><h2 id="Lecture-Summery"><a href="#Lecture-Summery" class="headerlink" title="Lecture Summery"></a>Lecture Summery</h2><p>강의에서 소개된 Array 메소드를 간단히 정리한 후 소개되지 않은 메소드들도 함께 정리해보자.</p><br><h3 id="1-6-Array-map"><a href="#1-6-Array-map" class="headerlink" title="1.6 Array.map"></a>1.6 Array.map</h3><p><code>map()</code> 메서드는 배열 내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 <strong>새로운 배열을 반환</strong>합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> days = [ <span class="hljs-string">'Mon'</span>, <span class="hljs-string">'Tue'</span>, <span class="hljs-string">'Wed'</span>, <span class="hljs-string">'Thu'</span>, <span class="hljs-string">'Fri'</span> ];</span><br><span class="line"><span class="hljs-keyword">const</span> addNumber = <span class="hljs-function">(<span class="hljs-params">day, index</span>) =&gt;</span> <span class="hljs-string">`#<span class="hljs-subst">$&#123;index + <span class="hljs-number">1</span>&#125;</span> <span class="hljs-subst">$&#123;day&#125;</span>`</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> smileDays = days.map(addNumber);</span><br></pre></td></tr></table></figure><br><h3 id="1-7-Array-filter"><a href="#1-7-Array-filter" class="headerlink" title="1.7 Array.filter"></a>1.7 Array.filter</h3><p><code>filter()</code> 메서드는 주어진 함수의 테스트를 통과하는 모든 요소를 모아 <strong>새로운 배열로 반환</strong>합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> posts = [ <span class="hljs-string">'Hi'</span>, <span class="hljs-string">'Hello'</span>, <span class="hljs-string">'Bye'</span> ];</span><br><span class="line"></span><br><span class="line">posts = posts.filter(<span class="hljs-function"><span class="hljs-params">post</span> =&gt;</span> post !== <span class="hljs-string">'Bye'</span>);</span><br></pre></td></tr></table></figure><br><h3 id="1-8-forEach-includes-push"><a href="#1-8-forEach-includes-push" class="headerlink" title="1.8 .forEach .includes .push"></a>1.8 .forEach .includes .push</h3><p><code>forEach()</code> 메서드는 주어진 함수를 배열 요소 <strong>각각에 대해 실행</strong>합니다.<br><code>includes()</code> 메서드는 배열이 특정 요소를 포함하고 있는지 판별 후 <strong>boolean</strong>값을 반환합니다.<br><code>push()</code> 메서드는 <strong>배열의 끝에 하나 이상의 요소를 추가</strong>하고, 배열의 새로운 <strong>길이를 반환</strong>합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> posts = [ <span class="hljs-string">'Hi'</span>, <span class="hljs-string">'Hello'</span>, <span class="hljs-string">'Bye'</span> ];</span><br><span class="line"></span><br><span class="line">posts.forEach(<span class="hljs-function"><span class="hljs-params">post</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(post));</span><br><span class="line"></span><br><span class="line">posts.push(<span class="hljs-string">'new'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span>(posts.includes(<span class="hljs-string">'Howdy'</span>))&#123;</span><br><span class="line">  posts.push(<span class="hljs-string">'Howdy'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><hr><br><h2 id="JavaScript-배열-메소드-Array-method"><a href="#JavaScript-배열-메소드-Array-method" class="headerlink" title="JavaScript 배열 메소드 ( Array method )"></a>JavaScript 배열 메소드 ( Array method )</h2><br><h3 id="변경자-메서드"><a href="#변경자-메서드" class="headerlink" title="변경자 메서드"></a>변경자 메서드</h3><p>변경자 메서드는 <strong>배열을 수정</strong>합니다.</p><br><h4 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin()"></a>copyWithin()</h4><p>배열의 일부를 얕게 복사한 뒤, 동일한 배열의 다른 위치에 덮어쓰고 그 배열을 반환합니다. 이 때, 크기(배열의 길이)를 수정하지 않고 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// copy to index 0 the element at index 3</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1.copyWithin(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: Array ["d", "b", "c", "d", "e"]</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// copy to index 1 all elements from index 3 to the end</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1.copyWithin(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: Array ["d", "d", "e", "d", "e"]</span></span><br></pre></td></tr></table></figure><br><h4 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h4><p>배열 안의 시작 인덱스부터 끝 인덱스까지의 요소값을 지정된 정적 값으로 채웁니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// fill with 0 from position 2 until position 4</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1.fill(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: [1, 2, 0, 0]</span></span><br></pre></td></tr></table></figure><br><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p>배열에서 마지막 요소를 뽑아내고, 그 요소를 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> plants = [<span class="hljs-string">'broccoli'</span>, <span class="hljs-string">'cauliflower'</span>, <span class="hljs-string">'cabbage'</span>, <span class="hljs-string">'kale'</span>, <span class="hljs-string">'tomato'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(plants.pop());</span><br><span class="line"><span class="hljs-comment">// expected output: "tomato"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(plants);</span><br><span class="line"><span class="hljs-comment">// expected output: Array ["broccoli", "cauliflower", "cabbage", "kale"]</span></span><br></pre></td></tr></table></figure><br><h4 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h4><p>배열의 끝에 하나 이상의 요소를 추가하고, 변경된 배열의 길이를 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> animals = [<span class="hljs-string">'pigs'</span>, <span class="hljs-string">'goats'</span>, <span class="hljs-string">'sheep'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(animals.push(<span class="hljs-string">'cows'</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: 4</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(animals);</span><br><span class="line"><span class="hljs-comment">// expected output: Array ["pigs", "goats", "sheep", "cows"]</span></span><br></pre></td></tr></table></figure><br><h4 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h4><p>배열에서 첫 번째 요소를 삭제하고 그 요소를 반환합니다. 이 메서드는 배열의 길이를 변하게 합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> firstElement = array1.shift();</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1);</span><br><span class="line"><span class="hljs-comment">// expected output: Array [2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(firstElement);</span><br><span class="line"><span class="hljs-comment">// expected output: 1</span></span><br></pre></td></tr></table></figure><br><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h4><p>배열의 앞에 하나 이상의 요소를 추가하고 새로운 길이를 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1.unshift(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: 5</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1);</span><br><span class="line"><span class="hljs-comment">// expected output: Array [4, 5, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><br><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><p>배열의 요소 순서를 반전시킵니다. - 첫 번째가 마지막이 되고 마지막이 첫 번째가 됩니다. 원본 배열도 변경됩니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-string">'one'</span>, <span class="hljs-string">'two'</span>, <span class="hljs-string">'three'</span>];</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'array1: '</span>, array1);</span><br><span class="line"><span class="hljs-comment">// expected output: Array ['one', 'two', 'three']</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> reversed = array1.reverse(); </span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'reversed: '</span>, reversed);</span><br><span class="line"><span class="hljs-comment">// expected output: Array ['three', 'two', 'one']</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* Careful: reverse is destructive. It also changes</span></span><br><span class="line"><span class="hljs-comment">the original array */</span> </span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'array1: '</span>, array1);</span><br><span class="line"><span class="hljs-comment">// expected output: Array ['three', 'two', 'one']</span></span><br></pre></td></tr></table></figure><br><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p>배열의 요소를 정렬하고 그 배열을 반환합니다. 기본 정렬 순서는 문자열의 유니코드 코드 포인트를 따릅니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">30</span>, <span class="hljs-number">4</span>, <span class="hljs-number">21</span>, <span class="hljs-number">100000</span>];</span><br><span class="line">array1.sort();</span><br><span class="line"><span class="hljs-comment">// expected output: Array [1, 100000, 21, 30, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>];</span><br><span class="line">numbers.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b);  <span class="hljs-comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line">numbers.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> b - a);  <span class="hljs-comment">// [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><br><h4 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h4><p>메서드는 배열의 기존 요소를 삭제 또는 교체하거나 새 요소를 추가하여 배열의 내용을 변경합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> months = [<span class="hljs-string">'Jan'</span>, <span class="hljs-string">'March'</span>, <span class="hljs-string">'April'</span>, <span class="hljs-string">'June'</span>];</span><br><span class="line">months.splice(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">'Feb'</span>);</span><br><span class="line"><span class="hljs-comment">// inserts at index 1</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(months);</span><br><span class="line"><span class="hljs-comment">// expected output: Array ['Jan', 'Feb', 'March', 'April', 'June']</span></span><br><span class="line"></span><br><span class="line">months.splice(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'May'</span>);</span><br><span class="line"><span class="hljs-comment">// replaces 1 element at index 4</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(months);</span><br><span class="line"><span class="hljs-comment">// expected output: Array ['Jan', 'Feb', 'March', 'April', 'May']</span></span><br></pre></td></tr></table></figure><br><br><br><h3 id="접근자-메서드"><a href="#접근자-메서드" class="headerlink" title="접근자 메서드"></a>접근자 메서드</h3><p>접근자 메서드는 <strong>배열을 수정하지 않고 배열 일부를 반환</strong>합니다.</p><br><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>배열과, 인자로 주어진 배열/값을 결합해 새로운 배열을 만들고, 이 새 배열을 반환합니다.</p><ul><li>기존배열을 변경하지 않습니다. </li><li>추가된 새로운 배열을 반환합니다.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>];</span><br><span class="line"><span class="hljs-keyword">const</span> array2 = [<span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>, <span class="hljs-string">'f'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1.concat(array2));</span><br><span class="line"><span class="hljs-comment">// expected output: Array ["a", "b", "c", "d", "e", "f"]</span></span><br></pre></td></tr></table></figure><br><h4 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h4><p>배열에 특정 요소가 포함돼있는지 알아내어 true 또는 false를 적절히 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1.includes(<span class="hljs-number">2</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: true</span></span><br></pre></td></tr></table></figure><br><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h4><p>배열에서 지정한 값과 같은 요소의 첫 인덱스를 반환합니다. 없으면 -1을 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> beasts = [<span class="hljs-string">'ant'</span>, <span class="hljs-string">'bison'</span>, <span class="hljs-string">'camel'</span>, <span class="hljs-string">'duck'</span>, <span class="hljs-string">'bison'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(beasts.indexOf(<span class="hljs-string">'bison'</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: 1</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// start from index 2</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(beasts.indexOf(<span class="hljs-string">'bison'</span>, <span class="hljs-number">2</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: 4</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(beasts.indexOf(<span class="hljs-string">'giraffe'</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: -1</span></span><br></pre></td></tr></table></figure><br><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p>배열의 모든 요소를 문자열로 변환하여 합칩니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> elements = [<span class="hljs-string">'Fire'</span>, <span class="hljs-string">'Air'</span>, <span class="hljs-string">'Water'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(elements.join());</span><br><span class="line"><span class="hljs-comment">// expected output: "Fire,Air,Water"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(elements.join(<span class="hljs-string">''</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: "FireAirWater"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(elements.join(<span class="hljs-string">'-'</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: "Fire-Air-Water"</span></span><br></pre></td></tr></table></figure><br><h4 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h4><p>배열에서 지정한 값과 같은 요소의 마지막 인덱스를 반환합니다. 없으면 -1을 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> animals = [<span class="hljs-string">'Dodo'</span>, <span class="hljs-string">'Tiger'</span>, <span class="hljs-string">'Penguin'</span>, <span class="hljs-string">'Dodo'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(animals.lastIndexOf(<span class="hljs-string">'Dodo'</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: 3</span></span><br></pre></td></tr></table></figure><br><h4 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h4><p>메서드는 어떤 배열의 begin부터 end까지(end 미포함)에 대한 얕은 복사본을 새로운 배열 객체로 반환합니다. 원본 배열은 수정되지 않습니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> animals = [<span class="hljs-string">'ant'</span>, <span class="hljs-string">'bison'</span>, <span class="hljs-string">'camel'</span>, <span class="hljs-string">'duck'</span>, <span class="hljs-string">'elephant'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(animals.slice(<span class="hljs-number">2</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: Array ["camel", "duck", "elephant"]</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(animals.slice(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: Array ["bison", "camel", "duck", "elephant"]</span></span><br></pre></td></tr></table></figure><br><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><p>배열과 요소를 반환하는 문자열을 반환합니다. Object.prototype.toString() 메서드를 재정의합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">'a'</span>, <span class="hljs-string">'1a'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1.toString());</span><br><span class="line"><span class="hljs-comment">// expected output: "1,2,a,1a"</span></span><br></pre></td></tr></table></figure><br><br><br><h3 id="순회-메서드"><a href="#순회-메서드" class="headerlink" title="순회 메서드"></a>순회 메서드</h3><p>배열을 처리하는 동안, 각각의 배열요소에 대해 (인자로 주어진) 콜백 함수를 호출하는 메서드가 몇 개 있습니다.<br>이러한 메서드들은 메서드의 호출시점에 배열의 길이를 확인한 후, 그 길이까지의 배열요소에 대해서만 콜백을 수행하며, 콜백 중에 추가된 배열 요소(메서드 호출시점에 확인된 길이보다 더 큰 인덱스값을 갖는 요소들)에 대해서는 콜백을 수행하지 않습니다.<br>만약 이런 메서드를 이용해 배열을 변경해야한다면, 원본 배열 대신 새로운 배열로 값을 복사하는 방식으로 처리하세요.</p><br><h4 id="entries"><a href="#entries" class="headerlink" title="entries()"></a>entries()</h4><p>메서드는 배열의 각 인덱스에 대한 키/값 쌍을 가지는 새로운 <code>Array Iterator</code> 객체를 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> iterator1 = array1.entries();</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(iterator1.next().value);</span><br><span class="line"><span class="hljs-comment">// expected output: Array [0, "a"]</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(iterator1.next().value);</span><br><span class="line"><span class="hljs-comment">// expected output: Array [1, "b"]</span></span><br></pre></td></tr></table></figure><br><h4 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h4><p>만약 배열의 모든 요소가 제공된 검사 함수를 만족하면 true를 반환합니다.(빈배열에서 호출하면 무조건 true 반환)</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isBelowThreshold</span>(<span class="hljs-params">currentValue</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> currentValue &lt; <span class="hljs-number">40</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">30</span>, <span class="hljs-number">39</span>, <span class="hljs-number">29</span>, <span class="hljs-number">10</span>, <span class="hljs-number">13</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1.every(isBelowThreshold));</span><br><span class="line"><span class="hljs-comment">// expected output: true</span></span><br></pre></td></tr></table></figure><br><h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><p>주어진 필터링 함수의 값의 결과가 참인 경우의 배열 요소들만으로 새로운 배열을 생성하여 반환합니다</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> words = [<span class="hljs-string">'spray'</span>, <span class="hljs-string">'limit'</span>, <span class="hljs-string">'elite'</span>, <span class="hljs-string">'exuberant'</span>, <span class="hljs-string">'destruction'</span>, <span class="hljs-string">'present'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> result = words.filter(<span class="hljs-function"><span class="hljs-params">word</span> =&gt;</span> word.length &gt; <span class="hljs-number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(result);</span><br><span class="line"><span class="hljs-comment">// expected output: Array ["exuberant", "destruction", "present"]</span></span><br></pre></td></tr></table></figure><br><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>주어진 테스팅 함수의 요구조건을 만족하는 배열 요소를 반환합니다. 그러한 배열 요소가 없으면  undefined를 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">130</span>, <span class="hljs-number">44</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> found = array1.find(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">element</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> element &gt; <span class="hljs-number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(found);</span><br><span class="line"><span class="hljs-comment">// expected output: 12</span></span><br></pre></td></tr></table></figure><br><h4 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a>findIndex()</h4><p>주어진 테스트 함수를 만족하는 배열의 첫 번째 요소에 대한 인덱스를 반환합니다. 그렇지 않으면 -1이 리턴됩니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">130</span>, <span class="hljs-number">44</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isLargeNumber</span>(<span class="hljs-params">element</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> element &gt; <span class="hljs-number">13</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1.findIndex(isLargeNumber));</span><br><span class="line"><span class="hljs-comment">// expected output: 3</span></span><br></pre></td></tr></table></figure><br><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><p>메서드는 주어진 함수를 배열 요소 각각에 대해 실행합니다.배열의 각각의 요소에 함수를 호출합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>];</span><br><span class="line"></span><br><span class="line">array1.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">element</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(element);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// expected output: "a"</span></span><br><span class="line"><span class="hljs-comment">// expected output: "b"</span></span><br><span class="line"><span class="hljs-comment">// expected output: "c"</span></span><br></pre></td></tr></table></figure><br><h4 id="keys"><a href="#keys" class="headerlink" title="keys()"></a>keys()</h4><p>배열의 각 인덱스에 대한 key들을 가지는 새로운 <code>Array Iterator</code> 객체를 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>];</span><br><span class="line"><span class="hljs-keyword">const</span> iterator = array1.keys(); </span><br><span class="line">  </span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> iterator) &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(key); <span class="hljs-comment">// expected output: 0 1 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><p>배열 내의 모든 요소 각각에 대하여  제공된 함수(callback)를 호출하고, 그 결과를 모아서  만든 새로운 배열을 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// pass a function to map</span></span><br><span class="line"><span class="hljs-keyword">const</span> map1 = array1.map(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x * <span class="hljs-number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(map1);</span><br><span class="line"><span class="hljs-comment">// expected output: Array [2, 8, 18, 32]</span></span><br></pre></td></tr></table></figure><br><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h4><p>메서드는 배열의 각 요소에 대해 주어진 리듀서(reducer) 함수를 실행하고, 하나의 결과값을 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];</span><br><span class="line"><span class="hljs-keyword">const</span> reducer = <span class="hljs-function">(<span class="hljs-params">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 1 + 2 + 3 + 4</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1.reduce(reducer));</span><br><span class="line"><span class="hljs-comment">// expected output: 10</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 5 + 1 + 2 + 3 + 4</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1.reduce(reducer, <span class="hljs-number">5</span>));</span><br><span class="line"><span class="hljs-comment">// expected output: 15</span></span><br></pre></td></tr></table></figure><br><h4 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight()"></a>reduceRight()</h4><p>메서드는 누적기에 대해 함수를 적용하고 배열의 각 값 (오른쪽에서 왼쪽으로)은 값을 단일 값으로 줄여야합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]].reduceRight(</span><br><span class="line">  (accumulator, currentValue) =&gt; accumulator.concat(currentValue)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array1);</span><br><span class="line"><span class="hljs-comment">// expected output: Array [4, 5, 2, 3, 0, 1]</span></span><br></pre></td></tr></table></figure><br><h4 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h4><p>배열중의 적어도 한 요소가 테스팅 함수를 만족시킨 다면 true를 반환합니다.(빈배열에서 호출시 무조건 false 반)</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> even = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">element</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// checks whether an element is even</span></span><br><span class="line">  <span class="hljs-keyword">return</span> element % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(array.some(even));</span><br><span class="line"><span class="hljs-comment">// expected output: true</span></span><br></pre></td></tr></table></figure><br><h4 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h4><p>배열의 요소값들에 대한 Array Iterator 객체를 반환합니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>];</span><br><span class="line"><span class="hljs-keyword">const</span> iterator = array1.values();</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> value <span class="hljs-keyword">of</span> iterator) &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(value); <span class="hljs-comment">// expected output: "a" "b" "c"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>    <br><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array" rel="external nofollow noopener noreferrer" target="_blank">MDN Array</a></li></ul><hr><br><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayUtilities</span> </span>&#123;</span><br><span class="line">  <span class="hljs-comment">/* Your magic here */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> addZeros = ArrayUtilities.addZeros(numbers);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(addZeros);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> moreThanFifty = ArrayUtilities.moreThanFifty(addZeros);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(moreThanFifty);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> noFirst = ArrayUtilities.removeFirst(moreThanFifty);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(noFirst);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> sumAll = ArrayUtilities.sumAll(noFirst);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(sumAll);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> divided = ArrayUtilities.divide(sumAll);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(divided);</span><br></pre></td></tr></table></figure><br><h3 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h3><p>Complete the “ArrayUtilities” class with the following functions:</p><ul><li><strong>addZeros</strong>: Add zeros to all the numbers. Return an array of <strong>numbers</strong>.</li><li><strong>moreThanFifty</strong>: Remove the numbers that are <strong>not</strong> more than 50. Return an array of <strong>numbers</strong>.</li><li><strong>removeFirst</strong>: Remove the first element of the array. Return an array of <strong>numbers</strong>.</li><li><strong>sumAll</strong>: Sum all the elements of the array. Return <strong>ONE</strong> number.</li><li><strong>divide</strong>: Take a number and divide it into an array.</li></ul><br><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>This is the desired output.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">▶ [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]</span><br><span class="line">▶ [60, 70, 80, 90, 100]</span><br><span class="line">▶ [70, 80, 90, 100]</span><br><span class="line">340</span><br><span class="line">▶ [&quot;3&quot;, &quot;4&quot;, &quot;0&quot;]</span><br></pre></td></tr></table></figure><br><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><ul><li>Use arrow functions</li><li>Not everything is on the videos, research!</li></ul><br><h3 id="Submit"><a href="#Submit" class="headerlink" title="Submit"></a>Submit</h3><p><code>My Answer</code><br><a href="https://codesandbox.io/s/day-two-blueprint-8zzqh" rel="external nofollow noopener noreferrer" target="_blank">Day2 CodeSandbox</a></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayUtilities</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">static</span> addZeros = <span class="hljs-function"><span class="hljs-params">numbers</span> =&gt;</span> numbers.map(<span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> <span class="hljs-built_in">Number</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;number&#125;</span>0`</span>));</span><br><span class="line">  <span class="hljs-keyword">static</span> moreThanFifty = <span class="hljs-function"><span class="hljs-params">numbers</span> =&gt;</span> numbers.filter(<span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> number &gt; <span class="hljs-number">50</span>);</span><br><span class="line">  <span class="hljs-keyword">static</span> removeFirst = <span class="hljs-function"><span class="hljs-params">numbers</span> =&gt;</span> numbers.slice(<span class="hljs-number">1</span>);</span><br><span class="line">  <span class="hljs-keyword">static</span> sumAll = <span class="hljs-function"><span class="hljs-params">numbers</span> =&gt;</span></span><br><span class="line">    numbers.reduce(<span class="hljs-function">(<span class="hljs-params">target, number</span>) =&gt;</span> target + number, <span class="hljs-number">0</span>);</span><br><span class="line">  <span class="hljs-keyword">static</span> divide = <span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> [...String(number)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><code>Correct</code><br><a href="https://codesandbox.io/s/day-two-solution-t0g38" rel="external nofollow noopener noreferrer" target="_blank">Day3 Correct</a></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayUtilities</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">static</span> addZeros = <span class="hljs-function"><span class="hljs-params">arr</span> =&gt;</span> arr.map(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> n * <span class="hljs-number">10</span>);</span><br><span class="line">  <span class="hljs-keyword">static</span> moreThanFifty = <span class="hljs-function"><span class="hljs-params">arr</span> =&gt;</span> arr.filter(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> n &gt; <span class="hljs-number">50</span>);</span><br><span class="line">  <span class="hljs-keyword">static</span> removeFirst = <span class="hljs-function"><span class="hljs-params">arr</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> [, ...rest] = arr;</span><br><span class="line">    <span class="hljs-keyword">return</span> rest;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="hljs-keyword">static</span> sumAll = <span class="hljs-function"><span class="hljs-params">arr</span> =&gt;</span> arr.reduce(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b, <span class="hljs-number">0</span>);</span><br><span class="line">  <span class="hljs-keyword">static</span> divide = <span class="hljs-function"><span class="hljs-params">payload</span> =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;payload&#125;</span>`</span>.split(<span class="hljs-string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><hr><br><h2 id="Day2-정리"><a href="#Day2-정리" class="headerlink" title="Day2 정리"></a>Day2 정리</h2><ul><li>오늘의 강의 : <a href="https://academy.nomadcoders.co/courses/436641/lectures/8467057" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 초보를 위한 React JS</a><ul><li>1.6 Array.map</li><li>1.7 Array.filter</li><li>1.8 .forEach .includes .push</li></ul></li><li>강의노트: <a href="https://github.com/alleyful/nomflix" rel="external nofollow noopener noreferrer" target="_blank">Day2 Note</a></li><li>오늘의 과제: <a href="https://codesandbox.io/s/day-two-blueprint-kfv4j" rel="external nofollow noopener noreferrer" target="_blank">Day2 Question</a></li><li>제출: <a href="https://codesandbox.io/s/day-two-blueprint-8zzqh" rel="external nofollow noopener noreferrer" target="_blank">Day2 Answer</a></li><li>정답: <a href="https://codesandbox.io/s/day-two-solution-t0g38" rel="external nofollow noopener noreferrer" target="_blank">Day2 Correct</a></li><li>회고<br>  대부분 API를 통해서 얻어진 데이터들은 배열과 객체로 이루어져 있다.<br>  이러한 데이터들을 잘 다루기 위해 javascript에서 제공하는 메소드들을 잘 활용할 수 있도록 다양한 Array 메소드들을 살펴보았다.<br>  이전부터 사용하던 메소드들도 있지만 ES6이후 생겨난 메소드들은 더욱 가독성이 좋으며 직관적으로 코드를 짤 수 있도록 도와준다.<br>  혼자만 작업하는 1인 개발자 회사가 아닌 이상 협업은 필수이며, 가독성 좋게 잘 짜여진 코드 한줄을 위한 노력이 더 좋은 코드를 향해 함께 할 수 있도록 해주는 기본중에 하나가 아닐까 생각해본다.</li></ul><br>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/31/develop/react/react-challenge-day2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS ReactJS Challenge - Day1</title>
      <link>https://alleyful.github.io/2019/08/30/develop/react/react-challenge-day1/</link>
      <guid>https://alleyful.github.io/2019/08/30/develop/react/react-challenge-day1/</guid>
      <pubDate>Thu, 29 Aug 2019 15:48:44 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;오늘의 강의: #1.0 ~ #1.5&lt;br&gt;오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href=&quot;https://academy.nomadcoders.co/courses/436641/lectures/8467057&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;[노마드 코더] 초보를 위한 React JS&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.1 Arrow Functions&lt;/li&gt;
&lt;li&gt;1.2 Template Literals&lt;/li&gt;
&lt;li&gt;1.3 Object Destructuring&lt;/li&gt;
&lt;li&gt;1.4 Spread Operator&lt;/li&gt;
&lt;li&gt;1.5 Classes&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>오늘의 강의: #1.0 ~ #1.5<br>오늘의 과제: 위의 강의들을 시청하신 후, 아래 코드 챌린지를 제출하면 됩니다.</p></blockquote><br><p><a href="https://academy.nomadcoders.co/courses/436641/lectures/8467057" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 초보를 위한 React JS</a></p><ul><li>1.1 Arrow Functions</li><li>1.2 Template Literals</li><li>1.3 Object Destructuring</li><li>1.4 Spread Operator</li><li>1.5 Classes</li></ul><br><a id="more"></a><hr><br><h2 id="Lecture-Summery"><a href="#Lecture-Summery" class="headerlink" title="Lecture Summery"></a>Lecture Summery</h2><h3 id="Arrow-Functions"><a href="#Arrow-Functions" class="headerlink" title="Arrow Functions"></a>Arrow Functions</h3><p>화살표 함수(Arrow function)는 function 키워드 대신 (=&gt;)를 사용하여 보다 간략한 함수를 선언할 수 있다.</p><ul><li>기본 문법   </li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 매개변수 지정 방법</span><br><span class="line">    () =&gt; &#123; ... &#125; // 매개변수가 없을 경우</span><br><span class="line">     x =&gt; &#123; ... &#125; // 매개변수가 한 개인 경우, 소괄호를 생략할 수 있다.</span><br><span class="line">(x, y) =&gt; &#123; ... &#125; // 매개변수가 여러 개인 경우, 소괄호를 생략할 수 없다.</span><br><span class="line"></span><br><span class="line">// 함수 몸체 지정 방법</span><br><span class="line">x =&gt; &#123; return x * x &#125;  // single line block</span><br><span class="line">x =&gt; x * x             // 함수 몸체가 한줄의 구문이라면 중괄호를 생략할 수 있으며 암묵적으로 return된다. 위 표현과 동일하다.</span><br><span class="line"></span><br><span class="line">() =&gt; &#123; return &#123; a: 1 &#125;; &#125;</span><br><span class="line">() =&gt; (&#123; a: 1 &#125;)  // 위 표현과 동일하다. 객체 반환시 소괄호를 사용한다.</span><br><span class="line"></span><br><span class="line">() =&gt; &#123;           // multi line block.</span><br><span class="line">  const x = 10;</span><br><span class="line">  return x * x;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><ul><li>사용 방법   </li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params">name = <span class="hljs-string">"Alley"</span></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-string">"Hello"</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// arrow Function</span></span><br><span class="line"><span class="hljs-keyword">const</span> sayHello = <span class="hljs-function">(<span class="hljs-params">name = <span class="hljs-string">"Alley"</span></span>) =&gt;</span> <span class="hljs-string">"Hello"</span> + name;</span><br></pre></td></tr></table></figure><br><ul><li>화살표 함수 Vs 일반함수  <ol><li>화살표 함수는 항상 바인딩 된 this를 갖는다.(Lexical this)</li><li>화살표 함수는 생성자로 사용할 수 없다(constructor, prototype 없음)</li><li>arguments를 지원하지 않음.</li></ol></li></ul><br><ul><li>화살표 함수를 사용해서는 안되는 경우<ol><li>메소드: 메소드를 호출한 객체를 가리키지 않고 상위 컨택스트를 가리킨다. =&gt; ES6 축약 메소드 표현 사용</li><li>prototype: 위와 같은 문제가 발생하여 일반 함수를 할당하게 된다. </li><li>생성자 함수: 화살표 함수는 prototype 프로퍼티를 가지고 있지 않기때문에 프로토타입 객제의 constructor를 사용할 수 없다.</li></ol></li></ul><br><ul><li>Reference<ul><li><a href="https://academy.nomadcoders.co/courses/436641/lectures/8467057" rel="external nofollow noopener noreferrer" target="_blank">#1.1 Arrow Functions</a></li><li><a href="https://poiemaweb.com/es6-arrow-function" rel="external nofollow noopener noreferrer" target="_blank">화살표 함수</a></li><li><a href="http://webframeworks.kr/tutorials/translate/arrow-function/" rel="external nofollow noopener noreferrer" target="_blank">화살표 함수와 메소드 정의</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/%EC%95%A0%EB%A1%9C%EC%9A%B0_%ED%8E%91%EC%85%98" rel="external nofollow noopener noreferrer" target="_blank">MDN 화살표 함수와</a></li></ul></li></ul><br><br><br><h3 id="Template-Literals"><a href="#Template-Literals" class="headerlink" title="Template Literals"></a>Template Literals</h3><p>ES6의 새로운 문자열 표기이다. 일반적인 문자열과 달리 여러 줄에 걸쳐 문자열을 작성할 수 있으며 템플릿 리터럴 내의 모든 white-space는 있는 그대로 적용된다.<br>템플릿 리터럴은 + 연산자를 사용하지 않아도 간단한 방법으로 새로운 문자열을 삽입할 수 있는 기능을 제공한다. 이를 문자열 인터폴레이션(String Interpolation)이라 한다.<br>문자열 인터폴레이션은 ${ … }으로 표현식을 감싼다. 문자열 인터폴레이션 내의 표현식은 문자열로 강제 타입 변환된다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> sayHello = <span class="hljs-function">(<span class="hljs-params">name = <span class="hljs-string">"Alley"</span></span>) =&gt;</span> <span class="hljs-string">`Hello <span class="hljs-subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`1 + 1 = <span class="hljs-subst">$&#123;<span class="hljs-number">1</span> + <span class="hljs-number">1</span>&#125;</span>`</span>); <span class="hljs-comment">// "1 + 1 = 2"</span></span><br></pre></td></tr></table></figure><br><ul><li>Reference<ul><li><a href="https://poiemaweb.com/es6-template-literals" rel="external nofollow noopener noreferrer" target="_blank">템플릿 리터럴</a></li></ul></li></ul><br><br><br><h3 id="Object-Destructuring"><a href="#Object-Destructuring" class="headerlink" title="Object Destructuring"></a>Object Destructuring</h3><p>디스트럭처링(Destructuring)은 구조화된 배열 또는 객체를 Destructuring(비구조화, 파괴)하여 개별적인 변수에 할당하는 것이다.<br>배열 또는 객체 리터럴에서 필요한 값만을 추출하여 변수에 할당하거나 반환할 때 유용하다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> human = &#123;</span><br><span class="line">  name: <span class="hljs-string">"Alley"</span>,</span><br><span class="line">  lastName: <span class="hljs-string">"Kim"</span>,</span><br><span class="line">  nation: <span class="hljs-string">"Korea"</span>,</span><br><span class="line">  favFood: &#123;</span><br><span class="line">    breakfast: <span class="hljs-string">"egg"</span>,</span><br><span class="line">    lunch: <span class="hljs-string">"bread"</span>,</span><br><span class="line">    dinner: <span class="hljs-string">"meat"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> name = human.name;</span><br><span class="line"><span class="hljs-keyword">const</span> lastName = human.lastName;</span><br><span class="line"><span class="hljs-keyword">const</span> difNation = human.nation;</span><br><span class="line"><span class="hljs-keyword">const</span> dinner = human.favFood.dinner;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//Destructuring</span></span><br><span class="line"><span class="hljs-keyword">const</span> &#123; name, lastName, <span class="hljs-attr">nation</span>: difNation, <span class="hljs-attr">favFood</span>: &#123; dinner &#125; &#125; = human;</span><br></pre></td></tr></table></figure><br><br><br><h3 id="Spread-Operator"><a href="#Spread-Operator" class="headerlink" title="Spread Operator"></a>Spread Operator</h3><p>Spread 연산자는 연산자의 대상 배열 또는 이터러블(iterable)을 “개별” 요소로 분리한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Array</span></span><br><span class="line"><span class="hljs-keyword">const</span> days = [ <span class="hljs-string">'Mon'</span>, <span class="hljs-string">'Tues'</span>, <span class="hljs-string">'Wed'</span> ];</span><br><span class="line"><span class="hljs-keyword">const</span> otherDays = [ <span class="hljs-string">'Thu'</span>, <span class="hljs-string">'Fri'</span>, <span class="hljs-string">'Sat'</span> ];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> allDays = [ ...days, ...otherDays, <span class="hljs-string">'Sun'</span> ];</span><br></pre></td></tr></table></figure><br><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Obj</span></span><br><span class="line"><span class="hljs-keyword">const</span> ob = &#123;</span><br><span class="line">  first: <span class="hljs-string">'hi'</span>,</span><br><span class="line">  second: <span class="hljs-string">'hello'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> ab = &#123;</span><br><span class="line">  thrid: <span class="hljs-string">'bye bye'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> two = &#123; ...ob, ...ab &#125;</span><br></pre></td></tr></table></figure><br><br><br><h3 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h3><p>자바스크립트는 프로토타입 기반(prototype-based) 객체지향 언어다. 비록 다른 객체지향 언어들과의 차이점에 대한 논쟁이 있긴 하지만, 자바스크립트는 강력한 객체지향 프로그래밍 능력을 지니고 있다.</p><p>프로토타입 기반 프로그래밍은 클래스가 필요없는(class-free) 객체지향 프로그래밍 스타일로 프로토타입 체인과 클로저 등으로 객체 지향 언어의 상속, 캡슐화(정보 은닉) 등의 개념을 구현할 수 있다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Human</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(name, lastName) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">    <span class="hljs-keyword">this</span>.lastName = lastName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Baby</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Human</span> </span>&#123;</span><br><span class="line">  cry() &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Waaaaaa'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`My Name is <span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>.name&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> myBaby = <span class="hljs-keyword">new</span> Baby(<span class="hljs-string">'mini'</span>, <span class="hljs-string">'me'</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(myBaby.cry(), myBaby.sayName());</span><br></pre></td></tr></table></figure><p>ES6 클래스는 class 키워드를 사용하여 정의하며, new 연산자와 함께 클래스 이름을 호출하면 클래스의 인스턴스가 생성된다.  </p><p>constructor는 인스턴스를 생성하고 클래스 필드를 초기화하기 위한 특수한 메소드이다. constructor는 클래스 내에 한 개만 존재할 수 있으며 만약 클래스가 2개 이상의 constructor를 포함하면 문법 에러(SyntaxError)가 발생한다. constructor는 인스턴스의 생성과 동시에 클래스 필드의 생성과 초기화를 실행한다. 따라서 클래스 필드를 초기화해야 한다면 constructor를 생략해서는 안된다.</p><p>클래스의 정적(static) 메소드를 정의할 때 static 키워드를 사용한다. 정적 메소드는 클래스의 인스턴스가 아닌 클래스 이름으로 호출한다. 따라서 클래스의 인스턴스를 생성하지 않아도 호출할 수 있다. 정적 메소드는 클래스 이름으로 호출하기 때문에 클래스의 인스턴스를 생성하지 않아도 사용할 수 있다. 단, 정적 메소드는 this를 사용할 수 없다. 달리 말하면 메소드 내부에서 this를 사용할 필요가 없는 메소드는 정적 메소드로 만들 수 있다. 정적 메소드는 Math 객체의 메소드처럼 애플리케이션 전역에서 사용할 유틸리티(utility) 함수를 생성할 때 주로 사용한다.</p><br><ul><li>Reference<ul><li><a href="https://poiemaweb.com/es6-class" rel="external nofollow noopener noreferrer" target="_blank">클래스</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes/static" rel="external nofollow noopener noreferrer" target="_blank">static</a></li></ul></li></ul><br><br><hr><br><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectUtilities</span> </span>&#123;</span><br><span class="line">  <span class="hljs-comment">/* Your magic here */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> objA = &#123;</span><br><span class="line">  name: <span class="hljs-string">"Nicolas"</span>,</span><br><span class="line">  favFood: <span class="hljs-string">"Kimchi"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> objB = &#123;</span><br><span class="line">  password: <span class="hljs-string">"12345"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> user = ObjectUtilities.mergeObjects(objA, objB);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(user);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> cleanUser = ObjectUtilities.removePassword(user);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(cleanUser);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> frozenUser = ObjectUtilities.freezeObj(cleanUser);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> onlyValues = ObjectUtilities.getOnlyValues(frozenUser);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(onlyValues);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> onlyProperties = ObjectUtilities.getOnlyProperties(frozenUser);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(onlyProperties);</span><br><span class="line"></span><br><span class="line">frozenUser.name = <span class="hljs-string">"Hello!"</span>; <span class="hljs-comment">// This should show an error</span></span><br></pre></td></tr></table></figure><br><h3 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h3><p>Complete the “<strong>ObjectUtilities</strong>“ class with the following functions.</p><ul><li><strong>mergeObjects</strong>: Merge two objects. Return an object.</li><li><strong>removePassword</strong>: Remove the ‘password’ key on an object. Return an object.</li><li><strong>freezeObj</strong>: Freezes an object. Returns the frozen object.</li><li><strong>getOnlyValues</strong>: Returns an array of all the values inside of an object.</li><li><strong>getOnlyProperties</strong>: Returns an array of all the properties inside of an object.<br>Changing the ‘<strong>name</strong>‘ of the ‘<strong>frozenUser</strong>‘ SHOULD throw an error.</li></ul><br><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>This is the desired output.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">▶ Object &#123;name: &quot;Nicolas&quot;, favFood: &quot;Kimchi&quot;, password: &quot;12345&quot;&#125;</span><br><span class="line">▶ Object &#123;name: &quot;Nicolas&quot;, favFood: &quot;Kimchi&quot;&#125;</span><br><span class="line">▶ [&quot;Nicolas&quot;, &quot;Kimchi&quot;]</span><br><span class="line">▶ [&quot;name&quot;, &quot;favFood&quot;]</span><br><span class="line">Error in sandbox: </span><br><span class="line">▶ TypeError: Cannot assign to read only property &apos;name&apos; of object &apos;#&lt;Object&gt;&apos;</span><br></pre></td></tr></table></figure><br><h3 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h3><ul><li>The output of the program must be EXACTLY like on the image above.</li><li>Place your functions INSIDE of ‘ObjectUtilities’</li><li>DO NOT edit ANYTHING OUTSIDE of ‘ObjectUtiliies’.</li><li>Don’t give up!</li></ul><br><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><ul><li>Use arrow functions</li><li>Use spread and rest operators</li></ul><br><h3 id="Submit"><a href="#Submit" class="headerlink" title="Submit"></a>Submit</h3><p><code>My Answer</code><br><a href="https://codesandbox.io/s/day-one-blueprint-hrvg2" rel="external nofollow noopener noreferrer" target="_blank">Day1 CodeSandbox</a></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectUtilities</span> </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 주어진 조건에서 instance 생성을 하지 않으므로 static methid 이용.</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">static</span> mergeObjects = <span class="hljs-function">(<span class="hljs-params">objA, objB</span>) =&gt;</span> (&#123; ...objA, ...objB &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">static</span> removePassword = <span class="hljs-function">(<span class="hljs-params">&#123; password, ...user &#125;</span>) =&gt;</span> (&#123; ...user &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">static</span> freezeObj = <span class="hljs-function"><span class="hljs-params">cleanUser</span> =&gt;</span> <span class="hljs-built_in">Object</span>.freeze(cleanUser);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">static</span> getOnlyValues = <span class="hljs-function"><span class="hljs-params">frozenUser</span> =&gt;</span> <span class="hljs-built_in">Object</span>.keys(frozenUser).map(<span class="hljs-function"><span class="hljs-params">k</span> =&gt;</span> frozenUser[k]);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">static</span> getOnlyProperties = <span class="hljs-function"><span class="hljs-params">frozenUser</span> =&gt;</span> <span class="hljs-built_in">Object</span>.keys(frozenUser).map(<span class="hljs-function"><span class="hljs-params">k</span> =&gt;</span> k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><code>Correct</code><br><a href="https://codesandbox.io/s/day-one-solution-qsule" rel="external nofollow noopener noreferrer" target="_blank">Day1 Correct</a></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectUtilities</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">static</span> mergeObjects = <span class="hljs-function">(<span class="hljs-params">objectA, objectB</span>) =&gt;</span> (&#123; ...objectA, ...objectB &#125;);</span><br><span class="line">  <span class="hljs-keyword">static</span> removePassword = <span class="hljs-function">(<span class="hljs-params">&#123; password, ...rest &#125;</span>) =&gt;</span> rest;</span><br><span class="line">  <span class="hljs-keyword">static</span> getOnlyProperties = <span class="hljs-function"><span class="hljs-params">obj</span> =&gt;</span> <span class="hljs-built_in">Object</span>.keys(obj);</span><br><span class="line">  <span class="hljs-keyword">static</span> getOnlyValues = <span class="hljs-function"><span class="hljs-params">obj</span> =&gt;</span> <span class="hljs-built_in">Object</span>.values(obj);</span><br><span class="line">  <span class="hljs-keyword">static</span> freezeObj = <span class="hljs-function"><span class="hljs-params">obj</span> =&gt;</span> <span class="hljs-built_in">Object</span>.freeze(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><hr><br><h2 id="Day1-정리"><a href="#Day1-정리" class="headerlink" title="Day1 정리"></a>Day1 정리</h2><ul><li><p>오늘의 강의 : <a href="https://academy.nomadcoders.co/courses/436641/lectures/8467057" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 초보를 위한 React JS</a></p><ul><li>1.1 Arrow Functions</li><li>1.2 Template Literals</li><li>1.3 Object Destructuring</li><li>1.4 Spread Operator</li><li>1.5 Classes</li></ul></li><li><p>강의노트: <a href="https://github.com/alleyful/nomflix" rel="external nofollow noopener noreferrer" target="_blank">Note</a></p></li><li><p>오늘의 과제: <a href="https://codesandbox.io/s/day-one-blueprint-fdmk3" rel="external nofollow noopener noreferrer" target="_blank">Day1 Question</a></p></li><li><p>제출: <a href="https://codesandbox.io/s/day-one-blueprint-hrvg2" rel="external nofollow noopener noreferrer" target="_blank">Day1 Answer</a></p></li><li><p>정답: <a href="https://codesandbox.io/s/day-one-solution-qsule" rel="external nofollow noopener noreferrer" target="_blank">Day1 Correct</a></p></li><li><p>회고<br>  오늘의 강의는 arrow function, templeate literals 등 ES6를 접하게 되면 처음 배우는 내용이었다.<br>  이미 머리로는 알고 있는 내용이었지만, 정작 인스턴스를 만들지 않고 함수를 호출하는 부분에서부터 막힐줄은 몰랐다. ‘해당 메소드를 찾을 수…..’<br>  모르는 것보다 <strong>알고 있다고 착각</strong>하는 것을 더욱 조심하자.</p><blockquote><p>정적 메서드는 클래스의 인스턴스 없이 호출이 가능하며 클래스가 인스턴스화되면 호출할 수 없다. 정적 메서드는 종종 어플리케이션의 유틸리티 함수를 만드는데 사용된다.</p></blockquote></li></ul><br>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/30/develop/react/react-challenge-day1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Chocolate Feast</title>
      <link>https://alleyful.github.io/2019/08/28/algorithm/hackerrank/54_ChocolateFeast/</link>
      <guid>https://alleyful.github.io/2019/08/28/algorithm/hackerrank/54_ChocolateFeast/</guid>
      <pubDate>Tue, 27 Aug 2019 16:03:51 GMT</pubDate>
      <description>
      
        &lt;p&gt;Little Bobby loves chocolate. He frequently goes to his favorite &lt;strong&gt;5 &amp;amp; 10&lt;/strong&gt; store, Penny Auntie, to buy them. They are having a promotion at Penny Auntie. If Bobby saves enough wrappers, he can turn them in for a free chocolate.&lt;/p&gt;
&lt;p&gt;For example, Bobby has &lt;strong&gt;n = 15&lt;/strong&gt; to spend on bars of chocolate that cost &lt;strong&gt;c = 3&lt;/strong&gt; each. He can turn in &lt;strong&gt;m = 2&lt;/strong&gt; wrappers to receive another bar. Initially, he buys &lt;strong&gt;5&lt;/strong&gt; bars and has &lt;strong&gt;5&lt;/strong&gt; wrappers after eating them. He turns in &lt;strong&gt;4&lt;/strong&gt; of them, leaving him with &lt;strong&gt;1&lt;/strong&gt;, for &lt;strong&gt;2&lt;/strong&gt; more bars. After eating those two, he has &lt;strong&gt;3&lt;/strong&gt; wrappers, turns in &lt;strong&gt;2&lt;/strong&gt; leaving him with &lt;strong&gt;1&lt;/strong&gt; wrapper and his new bar. Once he eats that one, he has &lt;strong&gt;2&lt;/strong&gt; wrappers and turns them in for another bar. After eating that one, he only has &lt;strong&gt;1&lt;/strong&gt; wrapper, and his feast ends. Overall, he has eaten &lt;code&gt;5 + 2 + 1 + 2 = 9&lt;/code&gt; bars.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Little Bobby loves chocolate. He frequently goes to his favorite <strong>5 &amp; 10</strong> store, Penny Auntie, to buy them. They are having a promotion at Penny Auntie. If Bobby saves enough wrappers, he can turn them in for a free chocolate.</p><p>For example, Bobby has <strong>n = 15</strong> to spend on bars of chocolate that cost <strong>c = 3</strong> each. He can turn in <strong>m = 2</strong> wrappers to receive another bar. Initially, he buys <strong>5</strong> bars and has <strong>5</strong> wrappers after eating them. He turns in <strong>4</strong> of them, leaving him with <strong>1</strong>, for <strong>2</strong> more bars. After eating those two, he has <strong>3</strong> wrappers, turns in <strong>2</strong> leaving him with <strong>1</strong> wrapper and his new bar. Once he eats that one, he has <strong>2</strong> wrappers and turns them in for another bar. After eating that one, he only has <strong>1</strong> wrapper, and his feast ends. Overall, he has eaten <code>5 + 2 + 1 + 2 = 9</code> bars.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the chocolateFeast function in the editor below. It must return the number of chocolates Bobby can eat after taking full advantage of the promotion.</p><p>chocolateFeast has the following parameter(s):</p><ul><li>n: an integer representing Bobby’s initial amount of money</li><li>c: an integer representing the cost of a chocolate bar</li><li>m: an integer representing the number of wrappers he can turn in for a free bar   </li></ul><p><strong>Note</strong>: Little Bobby will always turn in his wrappers if he has enough to get a free chocolate.</p><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer, <strong>t</strong>, denoting the number of test cases to analyze.<br>Each of the next <strong>t</strong> lines contains three space-separated integers: <strong>n</strong>, <strong>c</strong>, and <strong>m</strong>. They represent money to spend, cost of a chocolate, and the number of wrappers he can turn in for a free chocolate.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;t%5Cleq&space;1000" alt></li><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;n%5Cleq&space;10%5E%7B5%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;c%5Cleq&space;n" alt></li><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;m%5Cleq&space;n" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each trip to Penny Auntie, print the total number of chocolates Bobby eats on a new line.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">10 2 5</span><br><span class="line">12 4 4</span><br><span class="line">6 2 2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Bobby makes the following <strong>3</strong> trips to the store:</p><ol><li>He spends his <strong>10</strong> dollars on <strong>5</strong> chocolates at <strong>2</strong> dollars apiece. He then eats them and exchanges all <strong>5</strong> wrappers to get <strong>1</strong> more. He eats <strong>6</strong> chocolates.   </li><li>He spends his <strong>12</strong> dollars on <strong>3</strong> chocolates at <strong>4</strong> dollars apiece. He has <strong>3</strong> wrappers, but needs <strong>4</strong> to trade for his next chocolate. He eats <strong>3</strong> chocolates.   </li><li>He spends <strong>6</strong> dollars on <strong>3</strong> chocolates at <strong>2</strong> dollars apiece. He then exchanges <strong>2</strong> of the <strong>3</strong> wrappers for <strong>1</strong> additional piece. Next, he uses his third leftover chocolate wrapper from his initial purchase with the wrapper from his trade-in to do a second trade-in for <strong>1</strong> more piece. At this point he has <strong>1</strong> wrapper left, which is not enough to perform another trade-in. He eats <strong>5</strong> chocolates.   </li></ol><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">chocolateFeast</span>(<span class="hljs-params">n, c, m</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> result = <span class="hljs-built_in">Math</span>.floor(n / c);</span><br><span class="line">  <span class="hljs-keyword">let</span> wrapper = result;</span><br><span class="line">  <span class="hljs-keyword">let</span> rest = <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">let</span> total = result + rest;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">while</span> (total / m &gt;= <span class="hljs-number">1</span>) &#123;</span><br><span class="line">    total = wrapper + rest;</span><br><span class="line">    wrapper = <span class="hljs-built_in">Math</span>.floor(total / m);</span><br><span class="line">    rest = total % m;</span><br><span class="line">    result += wrapper;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/28/algorithm/hackerrank/54_ChocolateFeast/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS ReactJS Challenge - 시작하기</title>
      <link>https://alleyful.github.io/2019/08/27/develop/react/react-challenge-start/</link>
      <guid>https://alleyful.github.io/2019/08/27/develop/react/react-challenge-start/</guid>
      <pubDate>Tue, 27 Aug 2019 11:28:44 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;code&gt;2019. 8. 26 ~ 2019. 9. 9&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;노마드 코더의 &lt;code&gt;초보를 위한 React JS&lt;/code&gt; 강좌는 이미 한번 완강을 했지만 항상 강의만 듣고 기록을 남기지 않아서, 나중에 필요한경우 다시
        
      
      </description>
      
      <content:encoded><![CDATA[<p><code>2019. 8. 26 ~ 2019. 9. 9</code>  </p><p>노마드 코더의 <code>초보를 위한 React JS</code> 강좌는 이미 한번 완강을 했지만 항상 강의만 듣고 기록을 남기지 않아서, 나중에 필요한경우 다시 검색을 하거나 그 부분의 강의를 찾아 보는 경우가 많았던것 같습니다.<br>다시한번 강의를 들으면서 필요한 부분에 대한 내용을 덧붙여 강의노트를 만들어 보고자 기록을 남기기 시작했습니다.<br>이번 챌린지를 통해서 기록을 남기는 습관을 갖을 수 있게 되기를 바랍니다. </p><br><h2 id="Clone-Coding-for-ReactJS-Challenge"><a href="#Clone-Coding-for-ReactJS-Challenge" class="headerlink" title="Clone Coding for ReactJS Challenge"></a>Clone Coding for ReactJS Challenge</h2><p><a href="https://academy.nomadcoders.co/courses/436641/lectures/8478733" rel="external nofollow noopener noreferrer" target="_blank">노마드코더 초보를 위한 React JS</a><br><a href="https://academy.nomadcoders.co/courses/436641/lectures/8478732" rel="external nofollow noopener noreferrer" target="_blank">ReactJS Challenge by Nomadcoders</a></p><br>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/27/develop/react/react-challenge-start/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Halloween Sale</title>
      <link>https://alleyful.github.io/2019/08/26/algorithm/hackerrank/53_HalloweenSale/</link>
      <guid>https://alleyful.github.io/2019/08/26/algorithm/hackerrank/53_HalloweenSale/</guid>
      <pubDate>Sun, 25 Aug 2019 16:03:51 GMT</pubDate>
      <description>
      
        &lt;p&gt;You wish to buy video games from the famous online video game store Mist.&lt;/p&gt;
&lt;p&gt;Usually, all games are sold at the same price, &lt;strong&gt;p&lt;/strong&gt; dollars. However, they are planning to have the seasonal Halloween Sale next month in which you can buy games at a cheaper price. Specifically, the first game you buy during the sale will be sold at &lt;strong&gt;p&lt;/strong&gt; dollars, but every subsequent game you buy will be sold at exactly &lt;strong&gt;d&lt;/strong&gt; dollars less than the cost of the previous one you bought. This will continue until the cost becomes less than or equal to &lt;strong&gt;m&lt;/strong&gt; dollars, after which every game you buy will cost &lt;strong&gt;m&lt;/strong&gt; dollars each.&lt;/p&gt;
&lt;p&gt;For example, if &lt;strong&gt;p = 20&lt;/strong&gt;, &lt;strong&gt;d = 3&lt;/strong&gt; and &lt;strong&gt;m = 6&lt;/strong&gt;, then the following are the costs of the first &lt;strong&gt;11&lt;/strong&gt; games you buy, in order:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;20, 17, 14, 11, 8, 6, 6, 6, 6, 6, 6&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You have &lt;strong&gt;s&lt;/strong&gt; dollars in your Mist wallet. How many games can you buy during the Halloween Sale?&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>You wish to buy video games from the famous online video game store Mist.</p><p>Usually, all games are sold at the same price, <strong>p</strong> dollars. However, they are planning to have the seasonal Halloween Sale next month in which you can buy games at a cheaper price. Specifically, the first game you buy during the sale will be sold at <strong>p</strong> dollars, but every subsequent game you buy will be sold at exactly <strong>d</strong> dollars less than the cost of the previous one you bought. This will continue until the cost becomes less than or equal to <strong>m</strong> dollars, after which every game you buy will cost <strong>m</strong> dollars each.</p><p>For example, if <strong>p = 20</strong>, <strong>d = 3</strong> and <strong>m = 6</strong>, then the following are the costs of the first <strong>11</strong> games you buy, in order:</p><p><code>20, 17, 14, 11, 8, 6, 6, 6, 6, 6, 6</code></p><p>You have <strong>s</strong> dollars in your Mist wallet. How many games can you buy during the Halloween Sale?</p><br><a id="more"></a><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first and only line of input contains four space-separated integers <strong>p</strong>, <strong>d</strong>, <strong>m</strong> and <strong>s</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;m%5Cleq&space;p%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;d%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;s%5Cleq&space;10%5E%7B4%7D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single line containing a single integer denoting the maximum number of games you can buy.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 3 6 80</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>We have <strong>p = 20</strong>, <strong>d = 3</strong> and <strong>m = 6</strong>, the same as in the problem statement. We also have <strong>S = 80</strong> dollars. We can buy <strong>6</strong> games since they cost <code>20 + 17 + 14 + 11 + 8 + 6 = 76</code> dollars. However, we cannot buy a <strong>7</strong>th game. Thus, the answer is <code>6</code>.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 3 6 85</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>This is the same as the previous case, except this time we have <strong>s = 85</strong> dollars. This time, we can buy <strong>7</strong> games since they cost <code>20 + 17 + 14 + 11 + 8 + 6 + 6 = 82</code> dollars. However, we cannot buy an <strong>8</strong>th game. Thus, the answer is <code>7</code>.</p><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">howManyGames</span>(<span class="hljs-params">p, d, m, s</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> restMoney = s;</span><br><span class="line">  <span class="hljs-keyword">let</span> price = p;</span><br><span class="line">  <span class="hljs-keyword">let</span> isDiscount = p - d &gt;= m;</span><br><span class="line">  <span class="hljs-keyword">let</span> results = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span> (restMoney &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">    restMoney -= price;</span><br><span class="line">    restMoney &gt;= <span class="hljs-number">0</span> &amp;&amp; results++;</span><br><span class="line">    isDiscount = price - d &gt;= m;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">while</span> (restMoney &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">    price = isDiscount ? price - d : m;</span><br><span class="line">    restMoney = restMoney - price; </span><br><span class="line">    restMoney &gt;= <span class="hljs-number">0</span> &amp;&amp; results++;</span><br><span class="line">    isDiscount = price - d &gt;= m;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/26/algorithm/hackerrank/53_HalloweenSale/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Minimum Distances</title>
      <link>https://alleyful.github.io/2019/08/25/algorithm/hackerrank/52_MinimumDistances/</link>
      <guid>https://alleyful.github.io/2019/08/25/algorithm/hackerrank/52_MinimumDistances/</guid>
      <pubDate>Sat, 24 Aug 2019 15:03:19 GMT</pubDate>
      <description>
      
        &lt;p&gt;We define the distance between two array values as the number of indices between the two values. Given &lt;strong&gt;a&lt;/strong&gt;, find the minimum distance between any pair of equal elements in the array. If no such value exists, print &lt;strong&gt;-1&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, if &lt;strong&gt;a = [3, 2, 1, 2, 3]&lt;/strong&gt;, there are two matching pairs of values: &lt;strong&gt;3 and 2&lt;/strong&gt;. The indices of the &lt;strong&gt;3&lt;/strong&gt;‘s are &lt;strong&gt;i = 0&lt;/strong&gt; and &lt;strong&gt;j = 4&lt;/strong&gt;, so their distance is &lt;strong&gt;d[i, j] = |j - i| = 4&lt;/strong&gt;. The indices of the &lt;strong&gt;2&lt;/strong&gt;‘s are &lt;strong&gt;i = 1&lt;/strong&gt; and &lt;strong&gt;j = 3&lt;/strong&gt;, so their distance is &lt;strong&gt;d[i, j] = |j - i| = 2&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>We define the distance between two array values as the number of indices between the two values. Given <strong>a</strong>, find the minimum distance between any pair of equal elements in the array. If no such value exists, print <strong>-1</strong>.</p><p>For example, if <strong>a = [3, 2, 1, 2, 3]</strong>, there are two matching pairs of values: <strong>3 and 2</strong>. The indices of the <strong>3</strong>‘s are <strong>i = 0</strong> and <strong>j = 4</strong>, so their distance is <strong>d[i, j] = |j - i| = 4</strong>. The indices of the <strong>2</strong>‘s are <strong>i = 1</strong> and <strong>j = 3</strong>, so their distance is <strong>d[i, j] = |j - i| = 2</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the minimumDistances function in the editor below. It should return the minimum distance between any two matching elements.</p><p>minimumDistances has the following parameter(s):</p><ul><li>a: an array of integers</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>n</strong>, the size of array <strong>a</strong>. The second line contains <strong>n</strong> space-separated integers <strong>a[i]</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;10%5E%7B3%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;a%5Bi%5D%5Cleq&space;10%5E%7B5%7D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single integer denoting the minimum <strong>d[i, j]</strong> in . If no such value exists, print <strong>-1</strong>.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">7 1 3 4 1 7</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Here, we have two options:</p><p><strong>a[1]</strong> and <strong>a[4]</strong> are both <strong>1</strong>, so <strong>d[1, 4] = |1 - 4| = 3</strong>.<strong>a[0]</strong> and <strong>a[5]</strong> are both <strong>7</strong>, so <strong>d[0, 5] = |0 - 5| = 5</strong>.The answer is <code>min(3, 5) = 3</code>.</p><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">minimumDistances</span>(<span class="hljs-params">a</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> result = a.reduceRight(<span class="hljs-function">(<span class="hljs-params">target, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> pairIndex = a.findIndex(<span class="hljs-function">(<span class="hljs-params">v, i</span>) =&gt;</span> v === item &amp;&amp; i &lt; index);</span><br><span class="line">    pairIndex &gt;= <span class="hljs-number">0</span> &amp;&amp; target.push(</span><br><span class="line">      <span class="hljs-built_in">Math</span>.abs(index - pairIndex)</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> result.length &gt; <span class="hljs-number">0</span> ? <span class="hljs-built_in">Math</span>.min(...result) : <span class="hljs-number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/25/algorithm/hackerrank/52_MinimumDistances/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Beautiful Triplets</title>
      <link>https://alleyful.github.io/2019/08/24/algorithm/hackerrank/51_BeautifulTriplets/</link>
      <guid>https://alleyful.github.io/2019/08/24/algorithm/hackerrank/51_BeautifulTriplets/</guid>
      <pubDate>Fri, 23 Aug 2019 15:02:37 GMT</pubDate>
      <description>
      
        &lt;p&gt;Given a sequence of integers &lt;strong&gt;a&lt;/strong&gt;, a triplet &lt;strong&gt;(a[i], a[j], a[k])&lt;/strong&gt; is beautiful if:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;i &amp;lt; j &amp;lt; k&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a[j] - a[i] = a[k] - a[j] = d&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given an increasing sequenc of integers and the value of &lt;strong&gt;d&lt;/strong&gt;, count the number of beautiful triplets in the sequence.&lt;/p&gt;
&lt;p&gt;For example, the sequence &lt;strong&gt;arr = [2, 2, 3, 4, 5]&lt;/strong&gt; and &lt;strong&gt;d = 1&lt;/strong&gt;. There are three beautiful triplets, by index: &lt;strong&gt;[i, j, k] = [0, 2, 3], [1, 2, 3], [2, 3, 4]&lt;/strong&gt;. To test the first triplet, &lt;code&gt;arr[j] - arr[i] = 3 - 2 = 1&lt;/code&gt; and &lt;code&gt;arr[k] = arr[j] = 4 - 3 = 1&lt;/code&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Given a sequence of integers <strong>a</strong>, a triplet <strong>(a[i], a[j], a[k])</strong> is beautiful if:</p><ul><li>i &lt; j &lt; k</li><li><code>a[j] - a[i] = a[k] - a[j] = d</code></li></ul><p>Given an increasing sequenc of integers and the value of <strong>d</strong>, count the number of beautiful triplets in the sequence.</p><p>For example, the sequence <strong>arr = [2, 2, 3, 4, 5]</strong> and <strong>d = 1</strong>. There are three beautiful triplets, by index: <strong>[i, j, k] = [0, 2, 3], [1, 2, 3], [2, 3, 4]</strong>. To test the first triplet, <code>arr[j] - arr[i] = 3 - 2 = 1</code> and <code>arr[k] = arr[j] = 4 - 3 = 1</code>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the beautifulTriplets function in the editor below. It must return an integer that represents the number of beautiful triplets in the sequence.</p><p>beautifulTriplets has the following parameters:</p><ul><li>d: an integer</li><li>arr: an array of integers, sorted ascending</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains <strong>2</strong> space-separated integers <strong>n</strong> and <strong>d</strong>, the length of the sequence and the beautiful difference.<br>The second line contains <strong>n</strong> space-separated integers <strong>arr[i]</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;10%5E%7B4%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;d%5Cleq&space;20" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;arr%5Bi%5D%5Cleq&space;2%5Ctimes&space;10%5E%7B4%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?arr%5Bi%5D&space;%3E&space;arr%5Bi&space;-&space;1%5D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single line denoting the number of beautiful triplets in the sequence.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7 3</span><br><span class="line">1 2 4 5 7 8 10</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>The input sequence is <strong>1, 2, 4, 5, 6, 8, 10</strong>, and our beautiful difference <strong>d = 3</strong>. There are many possible triplets <strong>(arr[i], arr[j], arr[k])</strong>, but our only beautiful triplets are <strong>(1, 4, 7)</strong>, <strong>(4, 7, 10)</strong> and <strong>(2, 5, 8)</strong> by value not index. Please see the equations below:</p><ul><li><strong>7 - 4 = 4 - 1 = 3 = d</strong></li><li><strong>10 - 7 = 7 - 4 = 3 = d</strong></li><li><strong>8 - 5 = 5 - 2 = 3 = d</strong></li></ul><p>Recall that a beautiful triplet satisfies the following equivalence relation:<br><strong>arr[j] - arr[i] = arr[k] - arr[j] = d</strong> where <strong>i &lt; j &lt; k</strong>.</p><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">beautifulTriplets</span>(<span class="hljs-params">d, arr</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> arraySet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(arr);</span><br><span class="line">  <span class="hljs-keyword">const</span> array = [...arr];</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> array.reduce(<span class="hljs-function">(<span class="hljs-params">target, number</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">3</span>).fill(<span class="hljs-number">0</span>).reduce(<span class="hljs-function">(<span class="hljs-params">innerTarget, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">let</span> value = number + index * d;</span><br><span class="line">      arraySet.has(value) &amp;&amp; innerTarget++;</span><br><span class="line">      <span class="hljs-keyword">return</span> innerTarget;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>) === <span class="hljs-number">3</span> &amp;&amp; target++;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, <span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/24/algorithm/hackerrank/51_BeautifulTriplets/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Modified Kaprekar Numbers</title>
      <link>https://alleyful.github.io/2019/08/23/algorithm/hackerrank/50_ModifiedKaprekarNumbers/</link>
      <guid>https://alleyful.github.io/2019/08/23/algorithm/hackerrank/50_ModifiedKaprekarNumbers/</guid>
      <pubDate>Thu, 22 Aug 2019 15:06:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;A modified Kaprekar number is a positive whole number with a special property. If you square it, then split the number into two integers and sum those integers, you have the same value you started with.&lt;/p&gt;
&lt;p&gt;Consider a positive whole number &lt;strong&gt;n&lt;/strong&gt; with &lt;strong&gt;d&lt;/strong&gt; digits. We square &lt;strong&gt;n&lt;/strong&gt; to arrive at a number that is either &lt;strong&gt;2 x d&lt;/strong&gt; digits long or &lt;strong&gt;(2 x d) - 1&lt;/strong&gt; digits long. Split the string representation of the square into two parts, &lt;strong&gt;l&lt;/strong&gt; and &lt;strong&gt;r&lt;/strong&gt;. The right hand part, &lt;strong&gt;r&lt;/strong&gt; must be &lt;strong&gt;d&lt;/strong&gt; digits long. The left is the remaining substring. Convert those two substrings back to integers, add them and see if you get &lt;strong&gt;n&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, if &lt;strong&gt;n = 5&lt;/strong&gt;, &lt;strong&gt;d = 1&lt;/strong&gt; then &lt;img src=&quot;https://latex.codecogs.com/gif.latex?n%5E%7B2%7D&amp;space;=&amp;space;25&quot; alt&gt;. We split that into two strings and convert them back to integers &lt;strong&gt;2&lt;/strong&gt; and &lt;strong&gt;5&lt;/strong&gt;. We test &lt;img src=&quot;https://latex.codecogs.com/gif.latex?2&amp;space;&amp;plus;&amp;space;5&amp;space;=&amp;space;7%5Cneq&amp;space;5&quot; alt&gt;, so this is not a modified Kaprekar number. If &lt;strong&gt;n = 9&lt;/strong&gt;, still &lt;strong&gt;d = 1&lt;/strong&gt;, and &lt;img src=&quot;https://latex.codecogs.com/gif.latex?n%5E%7B2%7D&amp;space;=&amp;space;81&quot; alt&gt;. This gives us &lt;strong&gt;1 + 8 = 9&lt;/strong&gt;, the original &lt;strong&gt;n&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: r may have leading zeros.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>A modified Kaprekar number is a positive whole number with a special property. If you square it, then split the number into two integers and sum those integers, you have the same value you started with.</p><p>Consider a positive whole number <strong>n</strong> with <strong>d</strong> digits. We square <strong>n</strong> to arrive at a number that is either <strong>2 x d</strong> digits long or <strong>(2 x d) - 1</strong> digits long. Split the string representation of the square into two parts, <strong>l</strong> and <strong>r</strong>. The right hand part, <strong>r</strong> must be <strong>d</strong> digits long. The left is the remaining substring. Convert those two substrings back to integers, add them and see if you get <strong>n</strong>.</p><p>For example, if <strong>n = 5</strong>, <strong>d = 1</strong> then <img src="https://latex.codecogs.com/gif.latex?n%5E%7B2%7D&space;=&space;25" alt>. We split that into two strings and convert them back to integers <strong>2</strong> and <strong>5</strong>. We test <img src="https://latex.codecogs.com/gif.latex?2&space;&plus;&space;5&space;=&space;7%5Cneq&space;5" alt>, so this is not a modified Kaprekar number. If <strong>n = 9</strong>, still <strong>d = 1</strong>, and <img src="https://latex.codecogs.com/gif.latex?n%5E%7B2%7D&space;=&space;81" alt>. This gives us <strong>1 + 8 = 9</strong>, the original <strong>n</strong>.</p><p><strong>Note</strong>: r may have leading zeros.</p><a id="more"></a><p>Here’s an explanation from Wikipedia about the ORIGINAL Kaprekar Number (spot the difference!):</p><blockquote><p>In mathematics, a Kaprekar number for a given base is a non-negative integer, the representation of whose square in that base can be split into two parts that add up to the original number again.<br>For instance, 45 is a Kaprekar number, because 45² = 2025 and 20+25 = 45.</p></blockquote><p>Given two positive integers <strong>p</strong> and <strong>q</strong> where <strong>p</strong> is lower than <strong>q</strong>, write a program to print the modified Kaprekar numbers in the range between <strong>p</strong> and <strong>q</strong>, inclusive.</p><br><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the kaprekarNumbers function in the editor below. It should print the list of modified Kaprekar numbers in ascending order.</p><p>kaprekarNumbers has the following parameter(s):</p><ul><li>p: an integer</li><li>q: an integer</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains the lower integer limit <strong>p</strong>. The second line contains the upper integer limit <strong>q</strong>.</p><p><strong>Note</strong>: Your range should be inclusive of the limits.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><p>0 &lt; p &lt; q &lt; 100000</p><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Output each modified Kaprekar number in the given range, space-separated on a single line. If no modified Kaprekar numbers exist in the given range, print INVALID RANGE.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">100</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 9 45 55 99</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p><strong>1</strong>, <strong>9</strong>, <strong>45</strong>, <strong>55</strong>, and <strong>99</strong> are the Kaprekar Numbers in the given range.</p><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">kaprekarNumbers</span>(<span class="hljs-params">p, q</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = p; i &lt;= q; i++)&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> numbers = [...String(<span class="hljs-built_in">Math</span>.pow(i, <span class="hljs-number">2</span>))];</span><br><span class="line">    <span class="hljs-keyword">let</span> length = numbers.length;</span><br><span class="line">    <span class="hljs-keyword">let</span> firstValue = numbers.splice(<span class="hljs-number">0</span>, <span class="hljs-built_in">Math</span>.floor(length / <span class="hljs-number">2</span>));</span><br><span class="line">    (<span class="hljs-built_in">Number</span>(firstValue.join(<span class="hljs-string">''</span>)) + <span class="hljs-built_in">Number</span>(numbers.join(<span class="hljs-string">''</span>))) === i &amp;&amp; result.push(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">//console.log(result.length &gt; 0 ? result.join(' ') : 'INVALID RANGE');</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> result.length &gt; <span class="hljs-number">0</span> ? result.join(<span class="hljs-string">' '</span>) : <span class="hljs-string">'INVALID RANGE'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/23/algorithm/hackerrank/50_ModifiedKaprekarNumbers/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Encryption</title>
      <link>https://alleyful.github.io/2019/08/22/algorithm/hackerrank/49_Encryption/</link>
      <guid>https://alleyful.github.io/2019/08/22/algorithm/hackerrank/49_Encryption/</guid>
      <pubDate>Thu, 22 Aug 2019 01:30:19 GMT</pubDate>
      <description>
      
        &lt;p&gt;An English text needs to be encrypted using the following encryption scheme.&lt;br&gt;First, the spaces are removed from the text. Let &lt;strong&gt;L&lt;/strong&gt; be the length of this text.&lt;br&gt;Then, characters are written into a grid, whose rows and columns have the following constraints:  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://latex.codecogs.com/gif.latex?%5Cleft&amp;space;%5Clfloor&amp;space;%5Csqrt%7BL%7D&amp;space;%5Cright&amp;space;%5Crfloor%5Cleq&amp;space;row%5Cleq&amp;space;column%5Cleq&amp;space;%5Cleft&amp;space;%5Clceil&amp;space;%5Csqrt%7BL%7D&amp;space;%5Cright&amp;space;%5Crceil,&amp;space;where&amp;space;%5Cleft&amp;space;%5Clfloor&amp;space;x&amp;space;%5Cright&amp;space;%5Crfloor&amp;space;is&amp;space;floor&amp;space;function,&amp;space;and&amp;space;%5Cleft&amp;space;%5Clceil&amp;space;x&amp;space;%5Cright&amp;space;%5Crceil&amp;space;is&amp;space;,&amp;space;ceil&amp;space;function&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;For example, the sentence&lt;br&gt;&lt;code&gt;s = if man was meant to stay on the ground god would have given us roots&lt;/code&gt;,   
after removing spaces is &lt;strong&gt;54&lt;/strong&gt; characters long. &lt;img src=&quot;https://latex.codecogs.com/gif.latex?%5Csqrt%7B54%7D&quot; alt&gt; is between &lt;strong&gt;7&lt;/strong&gt; and &lt;strong&gt;8&lt;/strong&gt;, so it is written in the form of a grid with 7 rows and 8 columns.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>An English text needs to be encrypted using the following encryption scheme.<br>First, the spaces are removed from the text. Let <strong>L</strong> be the length of this text.<br>Then, characters are written into a grid, whose rows and columns have the following constraints:  </p><p><img src="https://latex.codecogs.com/gif.latex?%5Cleft&space;%5Clfloor&space;%5Csqrt%7BL%7D&space;%5Cright&space;%5Crfloor%5Cleq&space;row%5Cleq&space;column%5Cleq&space;%5Cleft&space;%5Clceil&space;%5Csqrt%7BL%7D&space;%5Cright&space;%5Crceil,&space;where&space;%5Cleft&space;%5Clfloor&space;x&space;%5Cright&space;%5Crfloor&space;is&space;floor&space;function,&space;and&space;%5Cleft&space;%5Clceil&space;x&space;%5Cright&space;%5Crceil&space;is&space;,&space;ceil&space;function" alt></p><p>For example, the sentence<br><code>s = if man was meant to stay on the ground god would have given us roots</code>,   after removing spaces is <strong>54</strong> characters long. <img src="https://latex.codecogs.com/gif.latex?%5Csqrt%7B54%7D" alt> is between <strong>7</strong> and <strong>8</strong>, so it is written in the form of a grid with 7 rows and 8 columns.</p><br><a id="more"></a><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ifmanwas  </span><br><span class="line">meanttos          </span><br><span class="line">tayonthe  </span><br><span class="line">groundgo  </span><br><span class="line">dwouldha  </span><br><span class="line">vegivenu  </span><br><span class="line">sroots</span><br></pre></td></tr></table></figure><ul><li>Ensure that <img src="https://latex.codecogs.com/gif.latex?rows&space;%5Ctimes&space;columns%5Cgeq&space;L" alt>  </li><li>If multiple grids satisfy the above conditions, choose the one with the minimum area, i.e.<br><img src="https://latex.codecogs.com/gif.latex?rows&space;%5Ctimes&space;columns" alt>.   </li></ul><p>The encoded message is obtained by displaying the characters in a column, inserting a space, and then displaying the next column and inserting a space, and so on. For example, the encoded message for the above rectangle is:   </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imtgdvs fearwer mayoogo anouuio ntnnlvt wttddes aohghn sseoau</span><br></pre></td></tr></table></figure><p>You will be given a message to encode and print.</p><br><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the encryption function in the editor below. It should return a single string composed as described.</p><p>encryption has the following parameter(s):</p><ul><li>s: a string to encrypt</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>One line of text, the string <strong>S</strong></p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><p><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;%5Cleft&space;%7C&space;s&space;%5Cright&space;%7C%5Cleq&space;81" alt><br><strong>s</strong> is comprised only of characters in the range ascii[a-z].</p><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the encoded message on one line as described.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">haveaniceday</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hae and via ecy</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p><strong>L = 12</strong>, <img src="https://latex.codecogs.com/gif.latex?%5Csqrt%7B12%7D" alt> is between <strong>3</strong> and <strong>4</strong>. Rewritten with <strong>3</strong> rows and <strong>4</strong> columns:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">have</span><br><span class="line">anic</span><br><span class="line">eday</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feedthedog</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fto ehg ee dd</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p><strong>L = 10</strong>, <img src="https://latex.codecogs.com/gif.latex?%5Csqrt%7B10%7D" alt> is between <strong>3</strong> and <strong>4</strong>. Rewritten with <strong>3</strong> rows and <strong>4</strong> columns:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">feed</span><br><span class="line">thed</span><br><span class="line">og</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2"></a>Sample Input 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chillout</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2"></a>Sample Output 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clu hlt io</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-2"><a href="#Explanation-2" class="headerlink" title="Explanation 2"></a>Explanation 2</h2><p><strong>L = 8</strong>, <img src="https://latex.codecogs.com/gif.latex?%5Csqrt%7B8%7D" alt> is between <strong>2</strong> and <strong>3</strong>. Rewritten with <strong>3</strong> columns and <strong>3</strong> rows (<strong>2 * 3 = 6 &lt; 8</strong> so we have to use <strong>3 x 3</strong>.)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chi</span><br><span class="line">llo</span><br><span class="line">ut</span><br></pre></td></tr></table></figure><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encryption</span>(<span class="hljs-params">s</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> sqrt = <span class="hljs-built_in">Math</span>.sqrt([...s].length);</span><br><span class="line">  <span class="hljs-keyword">const</span> high = <span class="hljs-built_in">Math</span>.ceil(sqrt);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> [...s].reduce(<span class="hljs-function">(<span class="hljs-params">target, string, index</span>) =&gt;</span> &#123;</span><br><span class="line">    target[index % high] += string;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(high).fill(<span class="hljs-string">''</span>)).join(<span class="hljs-string">' '</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/22/algorithm/hackerrank/49_Encryption/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Taum and B&#39;day</title>
      <link>https://alleyful.github.io/2019/08/21/algorithm/hackerrank/48_TaumAndBDay/</link>
      <guid>https://alleyful.github.io/2019/08/21/algorithm/hackerrank/48_TaumAndBDay/</guid>
      <pubDate>Tue, 20 Aug 2019 15:02:49 GMT</pubDate>
      <description>
      
        &lt;p&gt;Taum is planning to celebrate the birthday of his friend, Diksha. There are two types of gifts that Diksha wants from Taum: one is black and the other is white. To make her happy, Taum has to buy &lt;strong&gt;b&lt;/strong&gt; black gifts and &lt;strong&gt;w&lt;/strong&gt; white gifts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The cost of each black gift is &lt;strong&gt;bc&lt;/strong&gt; units.&lt;/li&gt;
&lt;li&gt;The cost of every white gift is &lt;strong&gt;wc&lt;/strong&gt; units.&lt;/li&gt;
&lt;li&gt;The cost of converting each black gift into white gift or vice versa is &lt;strong&gt;z&lt;/strong&gt; units.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Help Taum by deducing the minimum amount he needs to spend on Diksha’s gifts.&lt;/p&gt;
&lt;p&gt;For example, if Taum wants to buy &lt;strong&gt;b = 3&lt;/strong&gt; black gifts and &lt;strong&gt;w = 5&lt;/strong&gt; white gifts at a cost of &lt;strong&gt;bc = 3, wc = 4&lt;/strong&gt; and conversion cost &lt;strong&gt;z = 1&lt;/strong&gt;, we see that he can buy a black gift for &lt;strong&gt;3&lt;/strong&gt; and convert it to a white gift for &lt;strong&gt;1&lt;/strong&gt;, making the total cost of each white gift &lt;strong&gt;4&lt;/strong&gt;. That matches the cost of a white gift, so he can do that or just buy black gifts and white gifts. Either way, the overall cost is &lt;code&gt;3 * 3 + 5 * 4 = 29&lt;/code&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Taum is planning to celebrate the birthday of his friend, Diksha. There are two types of gifts that Diksha wants from Taum: one is black and the other is white. To make her happy, Taum has to buy <strong>b</strong> black gifts and <strong>w</strong> white gifts.</p><ul><li>The cost of each black gift is <strong>bc</strong> units.</li><li>The cost of every white gift is <strong>wc</strong> units.</li><li>The cost of converting each black gift into white gift or vice versa is <strong>z</strong> units.</li></ul><p>Help Taum by deducing the minimum amount he needs to spend on Diksha’s gifts.</p><p>For example, if Taum wants to buy <strong>b = 3</strong> black gifts and <strong>w = 5</strong> white gifts at a cost of <strong>bc = 3, wc = 4</strong> and conversion cost <strong>z = 1</strong>, we see that he can buy a black gift for <strong>3</strong> and convert it to a white gift for <strong>1</strong>, making the total cost of each white gift <strong>4</strong>. That matches the cost of a white gift, so he can do that or just buy black gifts and white gifts. Either way, the overall cost is <code>3 * 3 + 5 * 4 = 29</code>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the function taumBday in the editor below. It should return the minimal cost of obtaining the desired gifts.</p><p>taumBday has the following parameter(s):</p><ul><li>b: the number of black gifts</li><li>w: the number of white gifts</li><li>bc: the cost of a black gift</li><li>wc: the cost of a white gift</li><li>z: the cost to convert one color gift to the other color</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line will contain an integer <strong>t</strong>, the number of test cases.</p><p>The next <strong>t</strong> pairs of lines are as follows: </p><ul><li>The first line contains the values of integers <strong>b</strong> and <strong>w</strong>. </li><li>The next line contains the values of integers <strong>bc</strong>, <strong>wc</strong>, and <strong>z</strong>.</li></ul><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;t%5Cleq&space;10" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;b,&space;w,&space;bc,&space;wc,&space;z%5Cleq&space;10%5E%7B9%7D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p><strong>t</strong> lines, each containing an integer: the minimum amount of units Taum needs to spend on gifts.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">10 10</span><br><span class="line">1 1 1</span><br><span class="line">5 9</span><br><span class="line">2 3 4</span><br><span class="line">3 6</span><br><span class="line">9 1 1</span><br><span class="line">7 7</span><br><span class="line">4 2 1</span><br><span class="line">3 3</span><br><span class="line">1 9 2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">20</span><br><span class="line">37</span><br><span class="line">12</span><br><span class="line">35</span><br><span class="line">12</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><ul><li><strong>Test Case #01</strong>:  Since black gifts cost the same as white, there is no benefit to converting the gifts. Taum will have to buy each gift for 1 unit. The cost of buying all gifts will be:<br><code>b * bc + w * wc = 10 * 1 + 10 * 1 = 20</code>.</li></ul><ul><li><strong>Test Case #02</strong>:  Again, we can’t decrease the cost of black or white gifts by converting colors. <strong>z</strong> is too high. We will buy gifts at their original prices, so the cost of buying all gifts will be:<br><code>b * bc + w * wc = 5 * 2 + 9 * 3 = 10 + 27 = 37</code>.</li></ul><ul><li><strong>Test Case #03</strong>:  Since <strong>bc &gt; wc + z</strong>, we will buy <code>b + w = 3 + 6 = 9</code> white gifts at their original price of <strong>1</strong>. <strong>b = 3</strong> of the gifts must be black, and the cost per conversion, <strong>z = 1</strong>.   Total cost is <code>9 * 1 + 3 * 1 = 12</code>.</li></ul><ul><li><strong>Test Case #04</strong>:  Similarly, we will buy <strong>w = 7</strong> white gifts at their original price, <strong>wc = 2</strong>. For black gifts, we will first buy white ones and color them to black, so that their cost will be reduced to <code>wc + z = 2 + 1 = 3</code>. So cost of buying all gifts will be:<br><code>7 * 3 + 7 * 2 = 35</code>.</li></ul><ul><li><strong>Test Case #05</strong>:  We will buy black gifts at their original price, <strong>bc = 1</strong>. For white gifts, we will first black gifts worth <strong>bc = 1</strong> unit and color them to white for <strong>z = 2</strong> units. The cost for white gifts is reduced to <code>wc = bc + z = 2 + 1 = 3</code> units. The cost of buying all gifts will be:<br><code>3 * 1 + 3 * 3 = 3 + 9 = 12</code>.</li></ul><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">taumBday</span>(<span class="hljs-params">b, w, bc, wc, z</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> bigB = BigInt(b);</span><br><span class="line">  <span class="hljs-keyword">const</span> bigW = BigInt(w);</span><br><span class="line">  <span class="hljs-keyword">const</span> bigBc = BigInt(bc);</span><br><span class="line">  <span class="hljs-keyword">const</span> bigWc = BigInt(wc);</span><br><span class="line">  <span class="hljs-keyword">const</span> bigZ = BigInt(z);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> bigBc &gt; bigWc + bigZ</span><br><span class="line">    ? (bigB * (bigWc + bigZ) + bigW * bigWc)</span><br><span class="line">    : (bigWc &gt; bigBc + bigZ</span><br><span class="line">      ? (bigB * bigBc + bigW * (bigBc + bigZ))</span><br><span class="line">      : (bigB * bigBc + bigW * bigWc));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="Solution-Wrong-Answer"><a href="#Solution-Wrong-Answer" class="headerlink" title="Solution Wrong Answer"></a>Solution <code>Wrong Answer</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">taumBday</span>(<span class="hljs-params">b, w, bc, wc, z</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.min((b + w) * wc + b * z, (b + w) * bc + w * z, b * bc + w * wc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="Solution-Wrong-Answer-1"><a href="#Solution-Wrong-Answer-1" class="headerlink" title="Solution Wrong Answer"></a>Solution <code>Wrong Answer</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">taumBday</span>(<span class="hljs-params">b, w, bc, wc, z</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> bc &gt; wc + z</span><br><span class="line">    ? ((b + w) * wc + b * z)</span><br><span class="line">    : (wc &gt; bc + z</span><br><span class="line">      ? ((b + w) * bc + w * z)</span><br><span class="line">      : (b * bc + w * wc));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/21/algorithm/hackerrank/48_TaumAndBDay/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Cut the sticks</title>
      <link>https://alleyful.github.io/2019/08/20/algorithm/hackerrank/47_CutTheSticks/</link>
      <guid>https://alleyful.github.io/2019/08/20/algorithm/hackerrank/47_CutTheSticks/</guid>
      <pubDate>Tue, 20 Aug 2019 01:18:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;You are given a number of sticks of varying lengths. You will iteratively cut the sticks into smaller sticks, discarding the shortest pieces until there are none left. At each iteration you will determine the length of the shortest stick remaining, cut that length from each of the longer sticks and then discard all the pieces of that shortest length. When all the remaining sticks are the same length, they cannot be shortened so discard them.&lt;/p&gt;
&lt;p&gt;Given the lengths of &lt;strong&gt;n&lt;/strong&gt; sticks, print the number of sticks that are left before each iteration until there are none left.&lt;/p&gt;
&lt;p&gt;For example, there are &lt;strong&gt;n = 3&lt;/strong&gt; sticks of lengths &lt;strong&gt;arr = [1, 2, 3]&lt;/strong&gt;. The shortest stick length is &lt;strong&gt;1&lt;/strong&gt;, so we cut that length from the longer two and discard the pieces of length &lt;strong&gt;1&lt;/strong&gt;. Now our lengths are &lt;strong&gt;arr = [1, 2]&lt;/strong&gt;. Again, the shortest stick is of length &lt;strong&gt;1&lt;/strong&gt;, so we cut that amount from the longer stick and discard those pieces. There is only one stick left, &lt;strong&gt;arr = [1]&lt;/strong&gt;, so we discard that stick. Our lengths are &lt;code&gt;answer = [3, 2, 1]&lt;/code&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>You are given a number of sticks of varying lengths. You will iteratively cut the sticks into smaller sticks, discarding the shortest pieces until there are none left. At each iteration you will determine the length of the shortest stick remaining, cut that length from each of the longer sticks and then discard all the pieces of that shortest length. When all the remaining sticks are the same length, they cannot be shortened so discard them.</p><p>Given the lengths of <strong>n</strong> sticks, print the number of sticks that are left before each iteration until there are none left.</p><p>For example, there are <strong>n = 3</strong> sticks of lengths <strong>arr = [1, 2, 3]</strong>. The shortest stick length is <strong>1</strong>, so we cut that length from the longer two and discard the pieces of length <strong>1</strong>. Now our lengths are <strong>arr = [1, 2]</strong>. Again, the shortest stick is of length <strong>1</strong>, so we cut that amount from the longer stick and discard those pieces. There is only one stick left, <strong>arr = [1]</strong>, so we discard that stick. Our lengths are <code>answer = [3, 2, 1]</code>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the cutTheSticks function in the editor below. It should return an array of integers representing the number of sticks before each cut operation is performed.</p><p>cutTheSticks has the following parameter(s):</p><ul><li>arr: an array of integers representing the length of each stick</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains a single integer <strong>n</strong>, the size of <strong>arr</strong>. The next line contains <strong>n</strong> space-separated integers, each an <strong>arr[i]</strong> where each value represents the length of the <strong>i</strong>th stick.</p><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each operation, print the number of sticks that are present before the operation on separate lines.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;1000" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;arr%5Bi%5D%5Cleq&space;1000" alt></li></ul><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">5 4 4 2 2 8</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sticks-length        length-of-cut   sticks-cut</span><br><span class="line">5 4 4 2 2 8             2               6</span><br><span class="line">3 2 2 _ _ 6             2               4</span><br><span class="line">1 _ _ _ _ 4             1               2</span><br><span class="line">_ _ _ _ _ 3             3               1</span><br><span class="line">_ _ _ _ _ _           DONE            DONE</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">1 2 3 4 3 3 2 1</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">6</span><br><span class="line">4</span><br><span class="line">1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sticks-length         length-of-cut   sticks-cut</span><br><span class="line">1 2 3 4 3 3 2 1         1               8</span><br><span class="line">_ 1 2 3 2 2 1 _         1               6</span><br><span class="line">_ _ 1 2 1 1 _ _         1               4</span><br><span class="line">_ _ _ 1 _ _ _ _         1               1</span><br><span class="line">_ _ _ _ _ _ _ _       DONE            DONE</span><br></pre></td></tr></table></figure><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cutTheSticks</span>(<span class="hljs-params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> sticks = [...arr];</span><br><span class="line">  <span class="hljs-keyword">const</span> result = [sticks.length];</span><br><span class="line">  <span class="hljs-keyword">while</span> (sticks.length &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> smallValue = <span class="hljs-built_in">Math</span>.min(...sticks);</span><br><span class="line">    sticks = sticks.reduce(<span class="hljs-function">(<span class="hljs-params">target, stick</span>) =&gt;</span> &#123;</span><br><span class="line">      stick &gt; smallValue &amp;&amp; target.push(stick - smallValue);</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []);</span><br><span class="line">    sticks.length &gt; <span class="hljs-number">0</span> &amp;&amp; result.push(sticks.length);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/20/algorithm/hackerrank/47_CutTheSticks/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Jumping on the Clouds</title>
      <link>https://alleyful.github.io/2019/08/19/algorithm/hackerrank/46_JumpingOnTheClouds/</link>
      <guid>https://alleyful.github.io/2019/08/19/algorithm/hackerrank/46_JumpingOnTheClouds/</guid>
      <pubDate>Sun, 18 Aug 2019 15:05:31 GMT</pubDate>
      <description>
      
        &lt;p&gt;Emma is playing a new mobile game that starts with consecutively numbered clouds. Some of the clouds are thunderheads and others are cumulus. She can jump on any cumulus cloud having a number that is equal to the number of the current cloud plus &lt;strong&gt;1&lt;/strong&gt; or &lt;strong&gt;2&lt;/strong&gt;. She must avoid the thunderheads. Determine the minimum number of jumps it will take Emma to jump from her starting postion to the last cloud. It is always possible to win the game.&lt;/p&gt;
&lt;p&gt;For each game, Emma will get an array of clouds numbered &lt;strong&gt;0&lt;/strong&gt; if they are safe or &lt;strong&gt;1&lt;/strong&gt; if they must be avoided. For example, &lt;code&gt;c = [0, 1, 0, 0, 0, 1, 0]&lt;/code&gt; indexed from &lt;strong&gt;0 … 6&lt;/strong&gt;. The number on each cloud is its index in the list so she must avoid the clouds at indexes &lt;strong&gt;1&lt;/strong&gt; and &lt;strong&gt;5&lt;/strong&gt;. She could follow the following two paths: &lt;code&gt;0 -&amp;gt; 2 -&amp;gt; 4 -&amp;gt; 6&lt;/code&gt; or &lt;code&gt;0 -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; 4 -&amp;gt; 6&lt;/code&gt;. The first path takes &lt;strong&gt;3&lt;/strong&gt; jumps while the second takes &lt;strong&gt;4&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Emma is playing a new mobile game that starts with consecutively numbered clouds. Some of the clouds are thunderheads and others are cumulus. She can jump on any cumulus cloud having a number that is equal to the number of the current cloud plus <strong>1</strong> or <strong>2</strong>. She must avoid the thunderheads. Determine the minimum number of jumps it will take Emma to jump from her starting postion to the last cloud. It is always possible to win the game.</p><p>For each game, Emma will get an array of clouds numbered <strong>0</strong> if they are safe or <strong>1</strong> if they must be avoided. For example, <code>c = [0, 1, 0, 0, 0, 1, 0]</code> indexed from <strong>0 … 6</strong>. The number on each cloud is its index in the list so she must avoid the clouds at indexes <strong>1</strong> and <strong>5</strong>. She could follow the following two paths: <code>0 -&gt; 2 -&gt; 4 -&gt; 6</code> or <code>0 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 6</code>. The first path takes <strong>3</strong> jumps while the second takes <strong>4</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the jumpingOnClouds function in the editor below. It should return the minimum number of jumps required, as an integer.</p><p>jumpingOnClouds has the following parameter(s):</p><ul><li>c: an array of binary integers</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>n</strong>, the total number of clouds. The second line contains <strong>n</strong> space-separated binary integers describing clouds <strong>c[i]</strong> where <img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;i&space;%3C&space;n" alt>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;n%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?c%5Bi%5D%5Cin&space;%5Cleft&space;%7B&space;0,&space;1&space;%5Cright&space;%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?c%5B0%5D&space;=&space;c%5Bn&space;-&space;1%5D&space;=&space;0" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the minimum number of jumps needed to win the game.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">0 0 1 0 0 1 0</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0:"></a>Explanation 0:</h2><p>Emma must avoid <strong>c[2]</strong> and <strong>c[5]</strong>. She can win the game with a minimum of <strong>4</strong> jumps:</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/jumping-cloud-01.png" alt></p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">0 0 0 0 1 0</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1:"></a>Explanation 1:</h2><p>The only thundercloud to avoid is <strong>c[4]</strong>. Emma can win the game in <strong>3</strong> jumps:</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/jumping-cloud-02.png" alt></p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jumpingOnClouds</span>(<span class="hljs-params">c</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> prevItem = <span class="hljs-number">-1</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> isSecond = <span class="hljs-literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> c.reduce(<span class="hljs-function">(<span class="hljs-params">target, item</span>) =&gt;</span> &#123;</span><br><span class="line">        target = item === <span class="hljs-number">0</span></span><br><span class="line">            ? (prevItem === <span class="hljs-number">0</span></span><br><span class="line">                ? (isSecond ? (isSecond = <span class="hljs-literal">false</span>, target) : (isSecond = <span class="hljs-literal">true</span>, target + <span class="hljs-number">1</span>))</span><br><span class="line">                : target)</span><br><span class="line">            : (prevItem === <span class="hljs-number">0</span></span><br><span class="line">                ? (isSecond = <span class="hljs-literal">false</span>, target + <span class="hljs-number">1</span>)</span><br><span class="line">                : target);</span><br><span class="line">        </span><br><span class="line">        prevItem = item;</span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/19/algorithm/hackerrank/46_JumpingOnTheClouds/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ACM ICPC Team</title>
      <link>https://alleyful.github.io/2019/08/18/algorithm/hackerrank/45_ACM_ICPC_Team/</link>
      <guid>https://alleyful.github.io/2019/08/18/algorithm/hackerrank/45_ACM_ICPC_Team/</guid>
      <pubDate>Sat, 17 Aug 2019 15:02:10 GMT</pubDate>
      <description>
      
        &lt;p&gt;There are a number of people who will be attending ACM-ICPC World Finals. Each of them may be well versed in a number of topics. Given a list of topics known by each attendee, you must determine the maximum number of topics a 2-person team can know. Also find out how many ways a team can be formed to know that many topics. Lists will be in the form of bit strings, where each string represents an attendee and each position in that string represents a field of knowledge, 1 if its a known field or 0 if not.&lt;/p&gt;
&lt;p&gt;For example, given three attendees’ data as follows:&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;10101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00010&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;These are all possible teams that can be formed:&lt;/p&gt;
&lt;p&gt;Members Subjects&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(1,2)   [1,2,3,4,5]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(1,3)   [1,3,4,5]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(2,3)   [1,2,3,4]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;In this case, the first team will know all 5 subjects. They are the only team that can be created knowing that many subjects.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>There are a number of people who will be attending ACM-ICPC World Finals. Each of them may be well versed in a number of topics. Given a list of topics known by each attendee, you must determine the maximum number of topics a 2-person team can know. Also find out how many ways a team can be formed to know that many topics. Lists will be in the form of bit strings, where each string represents an attendee and each position in that string represents a field of knowledge, 1 if its a known field or 0 if not.</p><p>For example, given three attendees’ data as follows:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10101</span><br><span class="line">11110</span><br><span class="line">00010</span><br></pre></td></tr></table></figure><p>These are all possible teams that can be formed:</p><p>Members Subjects</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1,2)   [1,2,3,4,5]</span><br><span class="line">(1,3)   [1,3,4,5]</span><br><span class="line">(2,3)   [1,2,3,4]</span><br></pre></td></tr></table></figure><p>In this case, the first team will know all 5 subjects. They are the only team that can be created knowing that many subjects.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the acmTeam function in the editor below. It should return an integer array with two elements: the maximum number of topics any team can know and the number of teams that can be formed that know that maximum number of topics.</p><p>acmTeam has the following parameter(s):</p><ul><li>topic: a string of binary digits</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains two space-separated integers <strong>n</strong> and <strong>m</strong>, where <strong>n</strong> represents the number of attendees and <strong>m</strong> represents the number of topics.</p><p>Each of the next <strong>n</strong> lines contains a binary string of length <strong>n</strong>. If the <strong>i</strong>th line’s <strong>j</strong>th character is <strong>1</strong>, then the <strong>i</strong>th person knows the <strong>j</strong>th topic.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;n%5Cleq&space;500" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;m%5Cleq&space;500" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>On the first line, print the maximum number of topics a 2-person team can know.<br>On the second line, print the number of ways to form a 2-person team that knows the maximum number of topics.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 5</span><br><span class="line">10101</span><br><span class="line">11100</span><br><span class="line">11010</span><br><span class="line">00101</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">2</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Calculating topics known for all permutations of 2 attendees we get:</p><ul><li>(1, 2) -&gt; 4</li><li>(1, 3) -&gt; 5</li><li>(1, 4) -&gt; 3</li><li>(2, 3) -&gt; 4</li><li>(2, 4) -&gt; 4</li><li>(3, 4) -&gt; 5</li></ul><p><code>The 2 teams (1, 3) and (3, 4) know all 5 topics which is maximal.</code></p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">acmTeam</span>(<span class="hljs-params">topic</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> topicLength = topic.length - <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(topic[<span class="hljs-number">0</span>].length).fill(<span class="hljs-number">0</span>);</span><br><span class="line">    <span class="hljs-keyword">let</span> maxValue = <span class="hljs-number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">const</span> getTopics = <span class="hljs-function">(<span class="hljs-params">s1, s2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> s2Array = [...s2];</span><br><span class="line">        <span class="hljs-keyword">return</span> [...s1].reduce(<span class="hljs-function">(<span class="hljs-params">target, item, index</span>) =&gt;</span> &#123; </span><br><span class="line">            item | s2Array[index] &amp;&amp; target++;</span><br><span class="line">            <span class="hljs-keyword">return</span> target;</span><br><span class="line">        &#125;, <span class="hljs-number">0</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    topic.reduce(<span class="hljs-function">(<span class="hljs-params">target, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        (index !== topicLength) &amp;&amp; target.push(</span><br><span class="line">            <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(topicLength - index).fill(<span class="hljs-number">0</span>).reduce(<span class="hljs-function">(<span class="hljs-params">innerTarget, innerItem, innerIndex</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="hljs-keyword">let</span> value = getTopics(item, topic[topicLength - innerIndex]);</span><br><span class="line">                result[value - <span class="hljs-number">1</span>]++;</span><br><span class="line">                maxValue = value &gt; maxValue ? value : maxValue;</span><br><span class="line">                innerTarget.push(value);</span><br><span class="line">                <span class="hljs-keyword">return</span> innerTarget;</span><br><span class="line">            &#125;, [])</span><br><span class="line">        );</span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []);</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">return</span> [maxValue, result[maxValue - <span class="hljs-number">1</span>]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/18/algorithm/hackerrank/45_ACM_ICPC_Team/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Equalize the Array</title>
      <link>https://alleyful.github.io/2019/08/17/algorithm/hackerrank/44_EqualizeTheArray/</link>
      <guid>https://alleyful.github.io/2019/08/17/algorithm/hackerrank/44_EqualizeTheArray/</guid>
      <pubDate>Fri, 16 Aug 2019 16:26:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;Karl has an array of integers. He wants to reduce the array until all remaining elements are equal. Determine the minimum number of elements to delete to reach his goal.&lt;/p&gt;
&lt;p&gt;For example, if his array is &lt;code&gt;arr = [1, 2, 2, 3]&lt;/code&gt;, we see that he can delete the &lt;strong&gt;2&lt;/strong&gt; elements &lt;strong&gt;1&lt;/strong&gt; and &lt;strong&gt;3&lt;/strong&gt; leaving &lt;strong&gt;arr = [2, 2]&lt;/strong&gt;. He could also delete both twos and either the &lt;strong&gt;1&lt;/strong&gt; or the &lt;strong&gt;3&lt;/strong&gt;, but that would take &lt;strong&gt;3&lt;/strong&gt; deletions. The minimum number of deletions is &lt;strong&gt;2&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Karl has an array of integers. He wants to reduce the array until all remaining elements are equal. Determine the minimum number of elements to delete to reach his goal.</p><p>For example, if his array is <code>arr = [1, 2, 2, 3]</code>, we see that he can delete the <strong>2</strong> elements <strong>1</strong> and <strong>3</strong> leaving <strong>arr = [2, 2]</strong>. He could also delete both twos and either the <strong>1</strong> or the <strong>3</strong>, but that would take <strong>3</strong> deletions. The minimum number of deletions is <strong>2</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the equalizeArray function in the editor below. It must return an integer that denotes the minimum number of deletions required.</p><p>equalizeArray has the following parameter(s):</p><ul><li>arr: an array of integers</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>n</strong>, the number of elements in <strong>arr</strong>. The next line contains <strong>n</strong> space-separated integers <strong>arr[i]</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;arr%5Bi%5D%5Cleq&space;100" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single integer that denotes the minimum number of elements Karl must delete for all elements in the array to be equal.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">3 3 2 1 3</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Array <strong>arr = [3, 3, 2, 1, 3]</strong>. If we delete <strong>arr[2] = 2</strong> and <strong>arr[3] = 1</strong>, all of the elements in the resulting array, <strong>A’ = [3, 3, 3]</strong>, will be equal. Deleting these <strong>2</strong> elements is minimal. Our only other options would be to delete <strong>4</strong> elements to get an array of either <strong>[1]</strong> or <strong>[2]</strong>.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">equalizeArray</span>(<span class="hljs-params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> result = arr.reduce(<span class="hljs-function">(<span class="hljs-params">target, item</span>) =&gt;</span> &#123;</span><br><span class="line">        target[item] = target[item] ? target[item] + <span class="hljs-number">1</span> : <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> arr.length - result.reduce(<span class="hljs-function">(<span class="hljs-params">target, item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-built_in">Number</span>.isInteger(item) &amp;&amp; (target = target &gt; item ? target : item);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/17/algorithm/hackerrank/44_EqualizeTheArray/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Repeated String</title>
      <link>https://alleyful.github.io/2019/08/16/algorithm/hackerrank/43_RepeatedString/</link>
      <guid>https://alleyful.github.io/2019/08/16/algorithm/hackerrank/43_RepeatedString/</guid>
      <pubDate>Thu, 15 Aug 2019 15:06:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;Lilah has a string, &lt;strong&gt;s&lt;/strong&gt;, of lowercase English letters that she repeated infinitely many times.&lt;/p&gt;
&lt;p&gt;Given an integer, &lt;strong&gt;n&lt;/strong&gt;, find and print the number of letter a’s in the first &lt;strong&gt;n&lt;/strong&gt; letters of Lilah’s infinite string.&lt;/p&gt;
&lt;p&gt;For example, if the string &lt;strong&gt;s = ‘abcac’&lt;/strong&gt; and &lt;strong&gt;n = 10&lt;/strong&gt;, the substring we consider is &lt;strong&gt;abcacabcac&lt;/strong&gt;, the first &lt;strong&gt;10&lt;/strong&gt; characters of her infinite string. There are &lt;strong&gt;4&lt;/strong&gt; occurrences of a in the substring.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Lilah has a string, <strong>s</strong>, of lowercase English letters that she repeated infinitely many times.</p><p>Given an integer, <strong>n</strong>, find and print the number of letter a’s in the first <strong>n</strong> letters of Lilah’s infinite string.</p><p>For example, if the string <strong>s = ‘abcac’</strong> and <strong>n = 10</strong>, the substring we consider is <strong>abcacabcac</strong>, the first <strong>10</strong> characters of her infinite string. There are <strong>4</strong> occurrences of a in the substring.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the repeatedString function in the editor below. It should return an integer representing the number of occurrences of a in the prefix of length <strong>n</strong> in the infinitely repeating string.</p><p>repeatedString has the following parameter(s):</p><ul><li>s: a string to repeat</li><li>n: the number of characters to consider</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains a single string, <strong>s</strong>. The second line contains an integer, <strong>n</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;%7Cs%7C%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;10%5E%7B12%7D" alt></li><li>For <strong>25%</strong> of the test cases, <img src="https://latex.codecogs.com/gif.latex?n&space;%5Cleq&space;10%5E%7B6%7D" alt>.</li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single integer denoting the number of letter a’s in the first <strong>s</strong> letters of the infinite string created by repeating  infinitely many times.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aba</span><br><span class="line">10</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>The first <strong>n = 10</strong> letters of the infinite string are abaabaabaa. Because there are <strong>7</strong> a’s, we print <strong>7</strong> on a new line.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">1000000000000</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1000000000000</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>Because all of the first <code>n = 1000000000000</code> letters of the infinite string are a, we print <strong>1000000000000</strong> on a new line.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">repeatedString</span>(<span class="hljs-params">s, n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> strings = [...s];</span><br><span class="line">    <span class="hljs-keyword">let</span> multiNum = <span class="hljs-built_in">Math</span>.floor(n / strings.length);</span><br><span class="line">    <span class="hljs-keyword">let</span> restNum = n % strings.length;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">let</span> setNum = strings.reduce(<span class="hljs-function">(<span class="hljs-params">target, s, index</span>) =&gt;</span> &#123;</span><br><span class="line">        s === <span class="hljs-string">'a'</span> &amp;&amp; target[<span class="hljs-string">'multi'</span>]++;</span><br><span class="line">        s === <span class="hljs-string">'a'</span> &amp;&amp; index &lt; restNum &amp;&amp; target[<span class="hljs-string">'rest'</span>]++;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, &#123; <span class="hljs-attr">multi</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">rest</span>: <span class="hljs-number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> multiNum * setNum[<span class="hljs-string">'multi'</span>] + setNum[<span class="hljs-string">'rest'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/16/algorithm/hackerrank/43_RepeatedString/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Library Fine</title>
      <link>https://alleyful.github.io/2019/08/15/algorithm/hackerrank/42_LibraryFine/</link>
      <guid>https://alleyful.github.io/2019/08/15/algorithm/hackerrank/42_LibraryFine/</guid>
      <pubDate>Wed, 14 Aug 2019 16:04:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;Your local library needs your help! Given the expected and actual return dates for a library book, create a program that calculates the fine (if any). The fee structure is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If the book is returned on or before the expected return date, no fine will be charged (i.e.: &lt;code&gt;fine = 0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the book is returned after the expected return day but still within the same calendar month and year as the expected return date, &lt;code&gt;fine = 15 Hackos x (the number of days late)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the book is returned after the expected return month but still within the same calendar year as the expected return date, the &lt;code&gt;fine = 500 Hackos x (the number months late)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the book is returned after the calendar year in which it was expected, there is a fixed fine of &lt;code&gt;10000 Hackos&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Charges are based only on the least precise measure of lateness. For example, whether a book is due January 1, 2017 or December 31, 2017, if it is returned January 1, 2018, that is a year late and the fine would be &lt;code&gt;10000 Hackos&lt;/code&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Your local library needs your help! Given the expected and actual return dates for a library book, create a program that calculates the fine (if any). The fee structure is as follows:</p><ol><li>If the book is returned on or before the expected return date, no fine will be charged (i.e.: <code>fine = 0</code>.</li><li>If the book is returned after the expected return day but still within the same calendar month and year as the expected return date, <code>fine = 15 Hackos x (the number of days late)</code>.</li><li>If the book is returned after the expected return month but still within the same calendar year as the expected return date, the <code>fine = 500 Hackos x (the number months late)</code>.</li><li>If the book is returned after the calendar year in which it was expected, there is a fixed fine of <code>10000 Hackos</code>.</li></ol><p>Charges are based only on the least precise measure of lateness. For example, whether a book is due January 1, 2017 or December 31, 2017, if it is returned January 1, 2018, that is a year late and the fine would be <code>10000 Hackos</code>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the libraryFine function in the editor below. It must return an integer representing the fine due.</p><p>libraryFine has the following parameter(s):</p><ul><li>d1, m1, y1: returned date day, month and year</li><li>d2, m2, y2: due date day, month and year</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains <strong>3</strong> space-separated integers, <strong>d1, m1, y1</strong>, denoting the respective <strong>day</strong>, <strong>month</strong>, and <strong>year</strong> on which the book was returned.<br>The second line contains <strong>3</strong> space-separated integers, <strong>d2, m2, y2</strong>, denoting the respective <strong>day</strong>, <strong>month</strong>, and <strong>year</strong> on which the book was due to be returned.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;d1,&space;d2%5Cleq&space;31" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;dm1,&space;m2%5Cleq&space;12" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;dy1,&space;y2%5Cleq&space;3000" alt></li><li><strong>It is guaranteed that the dates will be valid Gregorian calendar dates.</strong></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single integer denoting the library fine for the book received as input.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9 6 2015</span><br><span class="line">6 6 2015</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">45</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Given the following dates:<br>Returned: <code>d1 = 9, m1 = 6, y = 2015</code><br>Due: <code>d2 = 6, m2 = 6, y = 2015</code></p><p>Because <img src="https://latex.codecogs.com/gif.latex?y2&space;%5Cequiv&space;y1" alt>, we know it is less than a year late.<br>Because <img src="https://latex.codecogs.com/gif.latex?m2&space;%5Cequiv&space;m1" alt>, we know it’s less than a month late.<br>Because <img src="https://latex.codecogs.com/gif.latex?d2%3C&space;d1" alt>, we know that it was returned late (but still within the same month and year).</p><p>Per the library’s fee structure, we know that our fine will be <code>15 Hackos x (# days late)</code>. We then print the result of <code>15 x (d2 - d1) = 15 x (9 - 6) = 45</code> as our output.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">libraryFine</span>(<span class="hljs-params">d1, m1, y1, d2, m2, y2</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> y1 === y2</span><br><span class="line">    ? (m1 === m2</span><br><span class="line">      ? (d1 &lt;= d2 ? <span class="hljs-number">0</span> : (d1 - d2) * <span class="hljs-number">15</span>)</span><br><span class="line">      : (m1 &gt; m2 ? (m1 - m2) * <span class="hljs-number">500</span> : <span class="hljs-number">0</span>))</span><br><span class="line">    : (y1 &lt; y2 ? <span class="hljs-number">0</span> : <span class="hljs-number">10000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/15/algorithm/hackerrank/42_LibraryFine/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
