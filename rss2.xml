<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ALLEY</title>
    <link>https://alleyful.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>alley&#39;s blog for study</description>
    <pubDate>Sun, 11 Aug 2019 00:53:41 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Extra Long Factorials</title>
      <link>https://alleyful.github.io/2019/08/11/algorithm/hackerrank/38_ExtraLongFactorials/</link>
      <guid>https://alleyful.github.io/2019/08/11/algorithm/hackerrank/38_ExtraLongFactorials/</guid>
      <pubDate>Sun, 11 Aug 2019 00:15:29 GMT</pubDate>
      <description>
      
        &lt;p&gt;The factorial of the integer &lt;strong&gt;n&lt;/strong&gt;, written &lt;strong&gt;n!&lt;/strong&gt;, is defined as:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;n! = n x (n - 1) x (n - 2) x ... x 3 x 2 x 1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Calculate and print the factorial of a given integer.&lt;/p&gt;
&lt;p&gt;For example, if &lt;strong&gt;n = 3&lt;/strong&gt;, we calculate &lt;code&gt;30 x 29 x 28 x ... x 3 x 2 x 1&lt;/code&gt; and get &lt;strong&gt;265252859812191058636308480000000&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>The factorial of the integer <strong>n</strong>, written <strong>n!</strong>, is defined as:</p><p><code>n! = n x (n - 1) x (n - 2) x ... x 3 x 2 x 1</code></p><p>Calculate and print the factorial of a given integer.</p><p>For example, if <strong>n = 3</strong>, we calculate <code>30 x 29 x 28 x ... x 3 x 2 x 1</code> and get <strong>265252859812191058636308480000000</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the extraLongFactorials function in the editor below. It should print the result and return.</p><p>extraLongFactorials has the following parameter(s):</p><ul><li>n: an integer</li></ul><p><strong>Note</strong>: Factorials of <strong>n &gt; 20</strong> can’t be stored even in a <strong>64-bit</strong> long long variable. Big integers must be used for such calculations. Languages like Java, Python, Ruby etc. can handle big integers, but we need to write additional code in C/C++ to handle huge values.</p><p>We recommend solving this challenge using BigIntegers.</p><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>Input consists of a single integer <strong>n</strong></p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><p><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;100" alt></p><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the factorial of <strong>n</strong>.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15511210043330985984000000</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p><code>25! = 25 x 24 x 23 x ... x 3 x 2 x 1</code></p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">extraLongFactorials</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> factorial = <span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> number &lt; BigInt(<span class="hljs-number">2</span>) ? BigInt(<span class="hljs-number">1</span>) : number * factorial(number - BigInt(<span class="hljs-number">1</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">String</span>(factorial(BigInt(n))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/11/algorithm/hackerrank/38_ExtraLongFactorials/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HEXO - 검색 엔진 최적화(SEO)</title>
      <link>https://alleyful.github.io/2019/08/10/tools/hexo/hexo-guide-03/</link>
      <guid>https://alleyful.github.io/2019/08/10/tools/hexo/hexo-guide-03/</guid>
      <pubDate>Sat, 10 Aug 2019 01:20:22 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;검색-엔진-최적화-SEO&quot;&gt;&lt;a href=&quot;#검색-엔진-최적화-SEO&quot; class=&quot;headerlink&quot; title=&quot;검색 엔진 최적화(SEO)&quot;&gt;&lt;/a&gt;검색 엔진 최적화(SEO)&lt;/h2&gt;&lt;p&gt;블로그 생성 후 내가 작성한 포스트가 검색에 노출되기 위해서는 검색엔진에 노출 될 수 있도록 검색 엔진 최적화 작업을 진행해 주어야 합니다.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;code&gt;검색 엔진 최적화(search engine optimization, SEO)&lt;/code&gt;는 웹 페이지 검색엔진이 자료를 수집하고 순위를 매기는 방식에 맞게 웹 페이지를 구성해서 검색 결과의 상위에 나올 수 있도록 하는 작업을 말한다. 웹 페이지와 관련된 검색어로 검색한 검색 결과 상위에 나오게 된다면 방문 트래픽이 늘어나기 때문에 효과적인 인터넷 마케팅 방법 중의 하나라고 할 수 있다. 기본적인 작업 방식은 특정한 검색어를 웹 페이지에 적절하게 배치하고 다른 웹 페이지에서 링크가 많이 연결되도록 하는 것이다. 구글 등장 이후 검색 엔진들이 콘텐츠의 신뢰도를 파악하는 기초적인 지표로 다른 웹사이트에 얼마나 인용되었나를 사용하기 때문에 타 사이트에 인용되는 횟수를 늘리는 방향으로 최적화 한다.&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;위키백과&lt;/strong&gt;&lt;cite&gt;검색 엔진 최적화&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;

&lt;br&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="검색-엔진-최적화-SEO"><a href="#검색-엔진-최적화-SEO" class="headerlink" title="검색 엔진 최적화(SEO)"></a>검색 엔진 최적화(SEO)</h2><p>블로그 생성 후 내가 작성한 포스트가 검색에 노출되기 위해서는 검색엔진에 노출 될 수 있도록 검색 엔진 최적화 작업을 진행해 주어야 합니다.</p><blockquote><p><code>검색 엔진 최적화(search engine optimization, SEO)</code>는 웹 페이지 검색엔진이 자료를 수집하고 순위를 매기는 방식에 맞게 웹 페이지를 구성해서 검색 결과의 상위에 나올 수 있도록 하는 작업을 말한다. 웹 페이지와 관련된 검색어로 검색한 검색 결과 상위에 나오게 된다면 방문 트래픽이 늘어나기 때문에 효과적인 인터넷 마케팅 방법 중의 하나라고 할 수 있다. 기본적인 작업 방식은 특정한 검색어를 웹 페이지에 적절하게 배치하고 다른 웹 페이지에서 링크가 많이 연결되도록 하는 것이다. 구글 등장 이후 검색 엔진들이 콘텐츠의 신뢰도를 파악하는 기초적인 지표로 다른 웹사이트에 얼마나 인용되었나를 사용하기 때문에 타 사이트에 인용되는 횟수를 늘리는 방향으로 최적화 한다.</p><footer><strong>위키백과</strong><cite>검색 엔진 최적화</cite></footer></blockquote><br><br><a id="more"></a><h2 id="검색엔진-최적화-SEO-에-유용한-플러그인-설치하기"><a href="#검색엔진-최적화-SEO-에-유용한-플러그인-설치하기" class="headerlink" title="검색엔진 최적화(SEO)에 유용한 플러그인 설치하기"></a>검색엔진 최적화(SEO)에 유용한 플러그인 설치하기</h2><p>HEXO에서는 SEO와 관련된 다양한 플로그인들이 있으며 그 중 몇 가지를 이용할 수 있도록 정리해 보겠습니다.</p><ul><li>hexo-auto-canonical</li><li>hexo-generator-robotstxt</li><li>hexo-autonofollow</li><li>hexo-generator-feed</li><li>hexo-generator-seo-friendly-sitemap</li></ul><br><br><h3 id="hexo-auto-canonical"><a href="#hexo-auto-canonical" class="headerlink" title="hexo-auto-canonical"></a>hexo-auto-canonical</h3><ul><li>대표 URL(표준 링크)을 자동으로 생성해주는 플러그인입니다. </li><li>설치     <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal-1" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal-1')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`npm install --save hexo-auto-canonical`, {onCompleteDelay: 500})          .respond(``)          .end();    </script> </li></ul><br><ul><li><p>사용</p><ul><li><p>설치한 테마 내 HEAD 태그 내 삽입해서 사용합니다.</p></li><li><p>icarus의 경우에는 themes &gt; icarus &gt; layout &gt; common &gt; head 파일 내 <code>&lt;%- meta(page) %&gt;</code> 아래에 다음 코드를 넣어줍니다.  </p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//.ejs</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">%-</span> <span class="hljs-attr">autoCanonical</span>(<span class="hljs-attr">config</span>, <span class="hljs-attr">page</span>) %&gt;</span></span><br><span class="line"></span><br><span class="line">//.jade</span><br><span class="line">| !&#123; autoCanonical(config, page) &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><figcaption><span>head.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- meta(page) %&gt;</span><br><span class="line">&lt;%- autoCanonical(config, page) %&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><br><br><h3 id="hexo-generator-robotstxt"><a href="#hexo-generator-robotstxt" class="headerlink" title="hexo-generator-robotstxt"></a>hexo-generator-robotstxt</h3><ul><li><p>자동으로 robot.txt 파일을 생성해주는 플러그인 입니다.</p><blockquote><p>로봇 배제 표준은 웹 사이트에 로봇이 접근하는 것을 방지하기 위한 규약으로, 일반적으로 접근 제한에 대한 설명을 robots.txt에 기술한다. 이 규약은 권고안이며, 로봇이 robots.txt 파일을 읽고 접근을 중지하는 것을 목적으로 한다. 따라서, 접근 방지 설정을 하였다고 해도, 다른 사람들이 그 파일에 접근할 수 있다. robots.txt 파일은 항상 사이트의 루트 디렉토리에 위치해야 한다.</p><footer><strong>위키백과</strong><cite>로봇 배제 표준</cite></footer></blockquote></li><li><p>설치</p>  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal-4" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal-4')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`npm install hexo-generator-robotstxt --save`, {onCompleteDelay: 500})          .respond(`  `)          .end();    </script> <br></li><li><p>사용</p>  <figure class="highlight plain hljs"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">robotstxt:</span><br><span class="line">  useragent: &quot;*&quot;</span><br><span class="line">  allow:</span><br><span class="line">    - /</span><br><span class="line">  sitemap: https://username.github.io/sitemap.xml</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><br><br><h3 id="hexo-autonofollow"><a href="#hexo-autonofollow" class="headerlink" title="hexo-autonofollow"></a>hexo-autonofollow</h3><ul><li><p>외부 링크에 <code>rel=&quot;external nofollow</code> 속성을 자동으로 추가해주는 기능을 하는 플러그인입니다.</p></li><li><p>설치</p>  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal-2" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal-2')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`npm install hexo-autonofollow --save`, {onCompleteDelay: 500})          .respond(`  `)          .end();    </script> <br></li><li><p>사용</p>  <figure class="highlight plain hljs"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nofollow:</span><br><span class="line">    enable: true</span><br><span class="line">    exclude:</span><br><span class="line">    - exclude1.com</span><br><span class="line">    - exclude2.com</span><br><span class="line">  </span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">옵션</th><th align="center">내용</th></tr></thead><tbody><tr><td align="center">enable</td><td align="center">플러그인 활성화 여부 (true, false)</td></tr><tr><td align="center">exclude</td><td align="center">제외시킬 host</td></tr></tbody></table></li></ul><br><br><h3 id="hexo-generator-feed"><a href="#hexo-generator-feed" class="headerlink" title="hexo-generator-feed"></a>hexo-generator-feed</h3><ul><li><p>자동으로 RSS feed를 생성해주는 플러그인 입니다.  </p><blockquote><p>어떤 사이트가 있을 때, 그 사이트를 매일 방문해서 재미있는 새로운 기사가 있는지 확인하는 것은 번거롭습니다. 특히 새 기사가 매일 또는 정기적으로 올라오는 것이 아니라 불규칙할 때는 더욱 그렇습니다.<br>그 사이트를 직접 방문하지 않고, 새 기사들만 자신의 컴퓨터로 “배달”이 된다면 편리할 것입니다.<br>RSS(Really Simple Syndication 의 약자) 같은 “사이트 피드”란, 새 기사들의 제목만, 또는 새 기사들 전체를 뽑아서 하나의 파일로 만들어 놓은 것입니다.<br>이제 각 사이트들에서 제공하는 RSS파일 주소만 수집하여 확인하면, 자신의 취향에 맞는 새로운 읽을거리를 쉽게 찾아서 읽을 수 있습니다.<br>그러나 모든 사이트에서 RSS피드를 제공하는 것은 아닙니다. 1년 내내 새로운 내용이 없는 정적인 사이트에서는 제공하지 않는 것이 보통입니다. 새로운 읽을거리가 자주 올라오는 “뉴스형”, “블로그형” 사이트에서 주로 제공됩니다.</p><footer><strong>RSS Feed</strong></footer></blockquote></li><li><p>설치</p>  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal-3" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal-3')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`npm install hexo-generator-feed --save`, {onCompleteDelay: 500})          .respond(`  `)          .end();    </script> <br></li><li><p>사용</p>  <figure class="highlight plain hljs"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  type: rss2</span><br><span class="line">  path: rss2.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  </span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">옵션</th><th align="center">내용</th></tr></thead><tbody><tr><td align="center">type</td><td align="center">feed의 종류 (atom/rss2) - * 네이버는 atom을 지원하지 않음</td></tr><tr><td align="center">path</td><td align="center">feed가 생성될 경로(default : atom.xml, rss2.xml)</td></tr><tr><td align="center">limit</td><td align="center">최신 포스트 수 설정 (0 또는 false - 전체 포스트)</td></tr></tbody></table></li></ul><br><br><h3 id="hexo-generator-seo-friendly-sitemap"><a href="#hexo-generator-seo-friendly-sitemap" class="headerlink" title="hexo-generator-seo-friendly-sitemap"></a>hexo-generator-seo-friendly-sitemap</h3><ul><li><p>크롤러가 블로그를 더욱 효율적으로 클롤링 할 수 있도록 사이트맵 xml 파일을 자동으로 생생해 줍니다.</p></li><li><p>설치</p>  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal-5" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal-5')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`npm install hexo-generator-seo-friendly-sitemap --save`, {onCompleteDelay: 500})          .respond(`  `)          .end();    </script> <br></li><li><p>사용</p>  <figure class="highlight plain hljs"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">  tag: false</span><br><span class="line">  category: false</span><br><span class="line">  </span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">옵션</th><th align="center">내용</th></tr></thead><tbody><tr><td align="center">type</td><td align="center">sitemap이 생성될 경로</td></tr><tr><td align="center">path</td><td align="center">sitemap에 tag 포함 여부</td></tr><tr><td align="center">limit</td><td align="center">sitemap에 category 포함 여부</td></tr></tbody></table></li></ul><br><br><h2 id="검색엔진-등록하기"><a href="#검색엔진-등록하기" class="headerlink" title="검색엔진 등록하기"></a>검색엔진 등록하기</h2><h3 id="구글"><a href="#구글" class="headerlink" title="구글"></a>구글</h3><ul><li><p><a href="https://accounts.google.com" rel="external nofollow noopener noreferrer" target="_blank">구글 애널리틱스</a>(Google Analytic)</p><ul><li><p>가입 후 사이트 이름과 URL 등을 입력하고 추적 ID를 발급 받습니다. 이 아이디는 themes의 <code>_config.yml</code> 내 <code>google_analytics</code>에 넣어 줍니다.</p></li><li><p>사용</p><figure class="highlight plain hljs"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins:</span><br><span class="line">    google-analytics:</span><br><span class="line">        # Google Analytics tracking id</span><br><span class="line">        tracking_id: UA-*********-1</span><br><span class="line">  </span><br></pre></td></tr></table></figure><br></li></ul></li><li><p><a href="https://search.google.com/search-console" rel="external nofollow noopener noreferrer" target="_blank">google search console</a> </p><ul><li><p>구글 웹 마스터 도구가 Search Console로 변경되었습니다. 가입 후 속성을 추가해 줍니다. 생성된 html파일을 루트에 올린 후 확인 하는 방법과 애널리스틱 가입을 확인하는 방법으로 인증을 하는데, 저는 전자로 인증을 했습니다.</p></li><li><p>Sitemaps 메뉴에 위에서 생성한 <code>sitemap.xml</code>과 <code>rss2.xml</code>을 추가해 주세요.<br><img src="/images/tools/search-console-sitemap.png" alt>  </p></li><li><p>사이드 등록 후 확인하기까지 시간이 걸릴 수 있습니다. Search Console에서 해당 사이트의 데이터를 수집 후 처리하는데 시간이 좀 걸리는 것 같습니다. 보통 2~3일 정도 예싱을 해야하며, 제 블로그 같은 경우 주말 포함 약 5일 정도의 시간이 지난 후 확인 할 수 있었습니다. </p></li></ul></li></ul><br><br><h3 id="네이버"><a href="#네이버" class="headerlink" title="네이버"></a>네이버</h3><ul><li><p><a href="https://webmastertool.naver.com/" rel="external nofollow noopener noreferrer" target="_blank">NAVER 웹마스터도구</a></p><ul><li><p>네이버 웹마스터 도구 페이지에서 <code>사이트 간단 체크하기</code> 메뉴를 통해 현재 블로그의 최적화 상태를 알아볼 수 있습니다.<br><img src="/images/tools/naver-webmaster-01.png" alt></p><br></li><li><p>연동 사이트 목록 페이지 내 사이트 추가에 블로그 주소를 추가해 줍니다.<br><img src="/images/tools/naver-webmaster-02.png" alt></p><br></li><li><p>추가 된 블로그를 클릭 후 요청 메뉴 내 사이트맵 RSS를 제출해 줍니다.<br><img src="/images/tools/naver-webmaster-03.png" alt></p></li></ul></li></ul><br><br><h3 id="다음"><a href="#다음" class="headerlink" title="다음"></a>다음</h3><ul><li><a href="https://register.search.daum.net" rel="external nofollow noopener noreferrer" target="_blank">다음 검색 등록</a> <ul><li>다음 검색 등록에서 신규등을 하면 됩니다. 등록한 이메일 접수완료 메일을 받을 수 있습니다.<br><img src="/images/tools/daum-search.png" alt></li></ul></li></ul><br><hr><br><h2 id="Refenence"><a href="#Refenence" class="headerlink" title="Refenence"></a>Refenence</h2><ul><li><a href="https://iseongho.github.io/posts/hexo-seo/" rel="external nofollow noopener noreferrer" target="_blank">https://iseongho.github.io/posts/hexo-seo/</a></li><li><a href="https://futurecreator.github.io/2016/06/23/search-engine-optimization-hexo-plugins/" rel="external nofollow noopener noreferrer" target="_blank">https://futurecreator.github.io/2016/06/23/search-engine-optimization-hexo-plugins/</a></li><li><a href="http://mwultong.blogspot.com/2007/10/rss-rss-feed.html" rel="external nofollow noopener noreferrer" target="_blank">http://mwultong.blogspot.com/2007/10/rss-rss-feed.html</a></li></ul>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/10/tools/hexo/hexo-guide-03/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Jumping on the Clouds(Revisited)</title>
      <link>https://alleyful.github.io/2019/08/10/algorithm/hackerrank/37_JumpingOnTheClouds/</link>
      <guid>https://alleyful.github.io/2019/08/10/algorithm/hackerrank/37_JumpingOnTheClouds/</guid>
      <pubDate>Fri, 09 Aug 2019 15:14:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;Aerith is playing a cloud hopping game. In this game, there are sequentially numbered clouds that can be thunderheads or cumulus clouds. Her character must jump from cloud to cloud until it reaches the start again.&lt;/p&gt;
&lt;p&gt;To play, Aerith is given an array of clouds, &lt;strong&gt;c&lt;/strong&gt; and an energy level &lt;strong&gt;e = 100&lt;/strong&gt;. She starts from &lt;strong&gt;c[0]&lt;/strong&gt; and uses &lt;strong&gt;1&lt;/strong&gt; unit of energy to make a jump of size &lt;strong&gt;k&lt;/strong&gt; to cloud &lt;strong&gt;c[(i + k) % n]&lt;/strong&gt;. If Aerith lands on a thundercloud, &lt;strong&gt;c[i] = 1&lt;/strong&gt;, her energy (e) decreases by &lt;strong&gt;2&lt;/strong&gt; additional units. The game ends when Aerith lands back on cloud &lt;strong&gt;0&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Given the values of &lt;strong&gt;n&lt;/strong&gt;, &lt;strong&gt;k&lt;/strong&gt;, and the configuration of the clouds as an array &lt;strong&gt;c&lt;/strong&gt;, can you determine the final value of &lt;strong&gt;e&lt;/strong&gt; after the game ends?&lt;/p&gt;
&lt;p&gt;For example, give &lt;strong&gt;c = [0, 0, 1, 0]&lt;/strong&gt; and &lt;strong&gt;k = 2&lt;/strong&gt;, the indices of her path are &lt;strong&gt;0 -&amp;gt; 2 -&amp;gt; 0&lt;/strong&gt;. Her energy level reduces by &lt;strong&gt;1&lt;/strong&gt; for each jump to &lt;strong&gt;98&lt;/strong&gt;. She landed on one thunderhead at an additional cost of &lt;strong&gt;2&lt;/strong&gt; energy units. Her final energy level is &lt;strong&gt;96&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Recall that &lt;strong&gt;%&lt;/strong&gt; refers to the modulo operation. In this case, it serves to make the route circular. If Aerith is at &lt;strong&gt;c[n -1]&lt;/strong&gt; and jumps &lt;strong&gt;1&lt;/strong&gt;, she will arrive at &lt;strong&gt;c[0]&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Aerith is playing a cloud hopping game. In this game, there are sequentially numbered clouds that can be thunderheads or cumulus clouds. Her character must jump from cloud to cloud until it reaches the start again.</p><p>To play, Aerith is given an array of clouds, <strong>c</strong> and an energy level <strong>e = 100</strong>. She starts from <strong>c[0]</strong> and uses <strong>1</strong> unit of energy to make a jump of size <strong>k</strong> to cloud <strong>c[(i + k) % n]</strong>. If Aerith lands on a thundercloud, <strong>c[i] = 1</strong>, her energy (e) decreases by <strong>2</strong> additional units. The game ends when Aerith lands back on cloud <strong>0</strong>.</p><p>Given the values of <strong>n</strong>, <strong>k</strong>, and the configuration of the clouds as an array <strong>c</strong>, can you determine the final value of <strong>e</strong> after the game ends?</p><p>For example, give <strong>c = [0, 0, 1, 0]</strong> and <strong>k = 2</strong>, the indices of her path are <strong>0 -&gt; 2 -&gt; 0</strong>. Her energy level reduces by <strong>1</strong> for each jump to <strong>98</strong>. She landed on one thunderhead at an additional cost of <strong>2</strong> energy units. Her final energy level is <strong>96</strong>.</p><p><strong>Note</strong>: Recall that <strong>%</strong> refers to the modulo operation. In this case, it serves to make the route circular. If Aerith is at <strong>c[n -1]</strong> and jumps <strong>1</strong>, she will arrive at <strong>c[0]</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the jumpingOnClouds function in the editor below. It should return an integer representing the energy level remaining after the game.</p><p>jumpingOnClouds has the following parameter(s):</p><ul><li>c: an array of integers representing cloud types</li><li>k: an integer representing the length of one jump</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains two space-separated integers, <strong>n</strong> and <strong>k</strong>, the number of clouds and the jump distance.<br>The second line contains <strong>n</strong> space-separated integers <strong>c[i]</strong> where <img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;i%3C&space;n" alt>. Each cloud is described as follows:</p><ul><li>If <strong>c[i] = 0</strong>, then cloud <strong>i</strong> is a cumulus cloud.</li><li>If <strong>c[i] = 1</strong>, then cloud <strong>i</strong> is a thunderhead.</li></ul><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;n%5Cleq&space;25" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;k%5Cleq&space;n" alt></li><li>n % k = 0</li><li><img src="https://latex.codecogs.com/gif.latex?c%5Bi%5D%5Cin&space;%5Cleft&space;%7B&space;0,&space;1&space;%5Cright&space;%7D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the final value of <strong>e</strong> on a new line.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8 2</span><br><span class="line">0 0 1 0 0 1 1 0</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">92</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>In the diagram below, red clouds are thunderheads and purple clouds are cumulus clouds:</p><p><img src="https://raw.githubusercontent.com/alleyful/algorithm-solutions/master/HackerRank/ProblemSolving/images/jumping-clods.png" alt></p><p>Observe that our thunderheads are the clouds numbered <strong>2</strong>, <strong>5</strong>, and <strong>6</strong>. Aerith makes the following sequence of moves:</p><ol><li>Move: <strong>0 -&gt; 2</strong>, Energy: <strong>e = 100 - 1 - 2 = 97</strong>.</li><li>Move: <strong>2 -&gt; 4</strong>, Energy: <strong>e = 97 - 1 = 96</strong>.</li><li>Move: <strong>4 -&gt; 6</strong>, Energy: <strong>e = 96 - 1 - 2 = 93</strong>.</li><li>Move: <strong>6 -&gt; 0</strong>, Energy: <strong>e = 93 - 1 = 92</strong>.</li></ol><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jumpingOnClouds</span>(<span class="hljs-params">c, k</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> energy = <span class="hljs-number">100</span>;</span><br><span class="line">  <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">let</span> index;</span><br><span class="line">  <span class="hljs-keyword">while</span> (index !== <span class="hljs-number">0</span> &amp;&amp; energy &gt;= <span class="hljs-number">0</span>) &#123;</span><br><span class="line">    count === <span class="hljs-number">0</span> &amp;&amp; (index = <span class="hljs-number">0</span>);</span><br><span class="line">    index = (index + k) % c.length;</span><br><span class="line">    energy = c[index] &gt; <span class="hljs-number">0</span> ? energy - <span class="hljs-number">3</span> : energy - <span class="hljs-number">1</span>;</span><br><span class="line">    count++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> energy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/10/algorithm/hackerrank/37_JumpingOnTheClouds/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Climbing the Leaderboard</title>
      <link>https://alleyful.github.io/2019/08/09/algorithm/hackerrank/36_ClimbingTheLeaderboard/</link>
      <guid>https://alleyful.github.io/2019/08/09/algorithm/hackerrank/36_ClimbingTheLeaderboard/</guid>
      <pubDate>Fri, 09 Aug 2019 02:14:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;Alice is playing an arcade game and wants to climb to the top of the leaderboard and wants to track her ranking. The game uses Dense Ranking, so its leaderboard works like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The player with the highest score is ranked number  on the leaderboard.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Players who have equal scores receive the same ranking number, and the next player(s) receive the immediately following ranking number.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, the four players on the leaderboard have high scores of &lt;strong&gt;100&lt;/strong&gt;, &lt;strong&gt;90&lt;/strong&gt;, &lt;strong&gt;90&lt;/strong&gt;, and &lt;strong&gt;80&lt;/strong&gt;. Those players will have ranks &lt;strong&gt;1&lt;/strong&gt;, &lt;strong&gt;2&lt;/strong&gt;, &lt;strong&gt;2&lt;/strong&gt;, and &lt;strong&gt;3&lt;/strong&gt;, respectively. If Alice’s scores are &lt;strong&gt;70&lt;/strong&gt;, &lt;strong&gt;80&lt;/strong&gt; and &lt;strong&gt;105&lt;/strong&gt;, her rankings after each game are &lt;img src=&quot;https://latex.codecogs.com/gif.latex?4%5E%7Bth%7D,&amp;space;3%5E%7Bth%7D&quot; alt&gt; and &lt;img src=&quot;https://latex.codecogs.com/gif.latex?1%5E%7Bst%7D&quot; alt&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Alice is playing an arcade game and wants to climb to the top of the leaderboard and wants to track her ranking. The game uses Dense Ranking, so its leaderboard works like this:</p><ul><li><p>The player with the highest score is ranked number  on the leaderboard.</p></li><li><p>Players who have equal scores receive the same ranking number, and the next player(s) receive the immediately following ranking number.</p></li></ul><p>For example, the four players on the leaderboard have high scores of <strong>100</strong>, <strong>90</strong>, <strong>90</strong>, and <strong>80</strong>. Those players will have ranks <strong>1</strong>, <strong>2</strong>, <strong>2</strong>, and <strong>3</strong>, respectively. If Alice’s scores are <strong>70</strong>, <strong>80</strong> and <strong>105</strong>, her rankings after each game are <img src="https://latex.codecogs.com/gif.latex?4%5E%7Bth%7D,&space;3%5E%7Bth%7D" alt> and <img src="https://latex.codecogs.com/gif.latex?1%5E%7Bst%7D" alt>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the climbingLeaderboard function in the editor below. It should return an integer array where each element <strong>res[j]</strong> represents Alice’s rank after the <img src="https://latex.codecogs.com/gif.latex?j%5E%7Bth%7D" alt> game.</p><p>climbingLeaderboard has the following parameter(s):</p><ul><li>scores: an array of integers that represent leaderboard scores</li><li>alice: an array of integers that represent Alice’s scores</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>n</strong>, the number of players on the leaderboard.<br>The next line contains <strong>n</strong> space-separated integers <strong>scores[i]</strong>, the leaderboard scores in decreasing order.<br>The next line contains an integer, , denoting the number games Alice plays.<br>The last line contains <strong>m</strong> space-separated integers <strong>alice[j]</strong>, the game scores. </p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;2%5Ctimes&space;10%5E%7B5%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;m%5Cleq&space;2%5Ctimes&space;10%5E%7B5%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;scores%5Bi%5D%5Cleq&space;10%5E%7B9%7D&space;for&space;0%5Cleq&space;i%3C&space;n" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;alice%5Bj%5D%5Cleq&space;10%5E%7B9%7D&space;for&space;0%5Cleq&space;j%3C&space;n" alt></li><li>The existing leaderboard, <strong>scores</strong>, is in descending order.</li><li>Alice’s scores, <strong>alice</strong>, are in ascending order.</li></ul><br><h2 id="Subtask"><a href="#Subtask" class="headerlink" title="Subtask"></a>Subtask</h2><p>For <code>60%</code> of the maximum score:</p><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;200" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;m%5Cleq&space;200" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print <strong>m</strong> integers. The <img src="https://latex.codecogs.com/gif.latex?j%5E%7Bth%7D" alt> integer should indicate Alice’s rank after playing the <img src="https://latex.codecogs.com/gif.latex?j%5E%7Bth%7D" alt> game.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><p><img src="https://raw.githubusercontent.com/alleyful/algorithm-solutions/master/HackerRank/ProblemSolving/images/leader-board-06.png" alt></p><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>Alice starts playing with <strong>7</strong> players already on the leaderboard, which looks like this:</p><p><img src="https://raw.githubusercontent.com/alleyful/algorithm-solutions/master/HackerRank/ProblemSolving/images/leader-board-01.png" alt></p><p>After Alice finishes game <strong>0</strong>, her score is <strong>5</strong> and her ranking is <strong>6</strong>:</p><p><img src="https://raw.githubusercontent.com/alleyful/algorithm-solutions/master/HackerRank/ProblemSolving/images/leader-board-02.png" alt></p><p>After Alice finishes game <strong>1</strong>, her score is <strong>25</strong> and her ranking is <strong>4</strong>:</p><p><img src="https://raw.githubusercontent.com/alleyful/algorithm-solutions/master/HackerRank/ProblemSolving/images/leader-board-03.png" alt></p><p>After Alice finishes game <strong>2</strong>, her score is <strong>50</strong> and her ranking is tied with Caroline at <strong>2</strong>:</p><p><img src="https://raw.githubusercontent.com/alleyful/algorithm-solutions/master/HackerRank/ProblemSolving/images/leader-board-04.png" alt></p><p>After Alice finishes game <strong>3</strong>, her score is <strong>120</strong> and her ranking is <strong>1</strong>:</p><p><img src="https://raw.githubusercontent.com/alleyful/algorithm-solutions/master/HackerRank/ProblemSolving/images/leader-board-05.png" alt></p><br><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2"></a>Sample Input 2</h2><p><img src="https://raw.githubusercontent.com/alleyful/algorithm-solutions/master/HackerRank/ProblemSolving/images/leader-board-07.png" alt></p><br> <h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2"></a>Sample Output 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution (Accepted)"></a><code>Solution (Accepted)</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">climbingLeaderboard</span>(<span class="hljs-params">scores, alice</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> values = [...new <span class="hljs-built_in">Set</span>(scores)];</span><br><span class="line">  <span class="hljs-keyword">let</span> ranking = values.length - <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> alice.reduce(<span class="hljs-function">(<span class="hljs-params">target, score</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">while</span> (ranking &gt; <span class="hljs-number">0</span> &amp;&amp; score &gt; values[ranking]) --ranking;</span><br><span class="line">    target.push((values[ranking] &gt; score) ? ranking + <span class="hljs-number">2</span> : ranking + <span class="hljs-number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="Solution-Terminated-due-to-timeout"><a href="#Solution-Terminated-due-to-timeout" class="headerlink" title="Solution (Terminated due to timeout)"></a>Solution (Terminated due to timeout)</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">climbingLeaderboard</span>(<span class="hljs-params">scores, alice</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> scoreSet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(scores);</span><br><span class="line">  <span class="hljs-keyword">let</span> iter = scoreSet[<span class="hljs-built_in">Symbol</span>.iterator]();</span><br><span class="line">  <span class="hljs-keyword">let</span> result = scoreSet.size + <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> alice.reduce(<span class="hljs-function">(<span class="hljs-params">target, a, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> count = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> score <span class="hljs-keyword">of</span> scoreSet.values()) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span> (score &gt; a) &#123;</span><br><span class="line">        iter.next()</span><br><span class="line">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        result = count;</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    target.push(result);</span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="Solution-Terminated-due-to-timeout-1"><a href="#Solution-Terminated-due-to-timeout-1" class="headerlink" title="Solution (Terminated due to timeout)"></a>Solution (Terminated due to timeout)</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">climbingLeaderboard</span>(<span class="hljs-params">scores, alice</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> scoreSet = [...(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(scores))];</span><br><span class="line">    <span class="hljs-keyword">let</span> isAssign = <span class="hljs-literal">false</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> result = <span class="hljs-number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> alice.reduce(<span class="hljs-function">(<span class="hljs-params">target, score</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> currentIndex = scoreSet.findIndex(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v === score);</span><br><span class="line">        currentIndex &gt;= <span class="hljs-number">0</span></span><br><span class="line">            ? (result = currentIndex)</span><br><span class="line">            : (isAssign = <span class="hljs-literal">true</span>);</span><br><span class="line"></span><br><span class="line">        isAssign &amp;&amp; (</span><br><span class="line">            scoreSet.push(score),</span><br><span class="line">            result = scoreSet.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> b - a).findIndex(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v === score),</span><br><span class="line">            scoreSet.splice(result, <span class="hljs-number">1</span>),</span><br><span class="line">            isAssign = <span class="hljs-literal">false</span></span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        target.push(result + <span class="hljs-number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="Solution-Terminated-due-to-timeout-2"><a href="#Solution-Terminated-due-to-timeout-2" class="headerlink" title="Solution (Terminated due to timeout)"></a>Solution (Terminated due to timeout)</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">climbingLeaderboard</span>(<span class="hljs-params">scores, alice</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> scoreSet = [...(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(scores))];</span><br><span class="line">    <span class="hljs-keyword">let</span> isAssign = <span class="hljs-literal">false</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> result = <span class="hljs-number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> alice.reduce(<span class="hljs-function">(<span class="hljs-params">target, score</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> scoreSet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(scores);</span><br><span class="line">        scoreSet.add(score);</span><br><span class="line">        target.push([...scoreSet].sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> b - a).findIndex(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v === score) + <span class="hljs-number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/09/algorithm/hackerrank/36_ClimbingTheLeaderboard/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sequence Equation</title>
      <link>https://alleyful.github.io/2019/08/08/algorithm/hackerrank/35_SequenceEquation/</link>
      <guid>https://alleyful.github.io/2019/08/08/algorithm/hackerrank/35_SequenceEquation/</guid>
      <pubDate>Wed, 07 Aug 2019 15:03:16 GMT</pubDate>
      <description>
      
        &lt;p&gt;Given a sequence of &lt;strong&gt;n&lt;/strong&gt; integers, &lt;code&gt;p(1), p(2), ..., p(n)&lt;/code&gt; where each element is distinct and satisfies &lt;img src=&quot;https://latex.codecogs.com/gif.latex?1%5Cleq&amp;space;p(x)%5Cleq&amp;space;n&quot; alt&gt;. For each &lt;strong&gt;x&lt;/strong&gt; where &lt;img src=&quot;https://latex.codecogs.com/gif.latex?1%5Cleq&amp;space;x%5Cleq&amp;space;n&quot; alt&gt;, find any integer &lt;strong&gt;y&lt;/strong&gt; such that p(p(y)) &lt;img src=&quot;https://latex.codecogs.com/gif.latex?%5Cequiv&amp;space;x&quot; alt&gt; and print the value of &lt;strong&gt;y&lt;/strong&gt; on a new line.&lt;/p&gt;
&lt;p&gt;For example, assume the sequence &lt;strong&gt;p = [5, 2, 1, 3, 4]&lt;/strong&gt;. Each value of &lt;strong&gt;x&lt;/strong&gt; between &lt;strong&gt;1&lt;/strong&gt; and &lt;strong&gt;5&lt;/strong&gt;, the length of the sequence, is analyzed as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;x = 1 &lt;img src=&quot;https://latex.codecogs.com/gif.latex?%5Cequiv&quot; alt&gt; p[3], p[4] = 3, so p[p[4]] = 1&lt;/li&gt;
&lt;li&gt;x = 2 &lt;img src=&quot;https://latex.codecogs.com/gif.latex?%5Cequiv&quot; alt&gt; p[2], p[2] = 2, so p[p[2]] = 2&lt;/li&gt;
&lt;li&gt;x = 3 &lt;img src=&quot;https://latex.codecogs.com/gif.latex?%5Cequiv&quot; alt&gt; p[3], p[5] = 4, so p[p[5]] = 3&lt;/li&gt;
&lt;li&gt;x = 4 &lt;img src=&quot;https://latex.codecogs.com/gif.latex?%5Cequiv&quot; alt&gt; p[5], p[1] = 5, so p[p[1]] = 4&lt;/li&gt;
&lt;li&gt;x = 5 &lt;img src=&quot;https://latex.codecogs.com/gif.latex?%5Cequiv&quot; alt&gt; p[1], p[3] = 1, so p[p[3]] = 5&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The values for &lt;strong&gt;y&lt;/strong&gt;are &lt;strong&gt;[4, 2, 5, 1, 3]&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Given a sequence of <strong>n</strong> integers, <code>p(1), p(2), ..., p(n)</code> where each element is distinct and satisfies <img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;p(x)%5Cleq&space;n" alt>. For each <strong>x</strong> where <img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;x%5Cleq&space;n" alt>, find any integer <strong>y</strong> such that p(p(y)) <img src="https://latex.codecogs.com/gif.latex?%5Cequiv&space;x" alt> and print the value of <strong>y</strong> on a new line.</p><p>For example, assume the sequence <strong>p = [5, 2, 1, 3, 4]</strong>. Each value of <strong>x</strong> between <strong>1</strong> and <strong>5</strong>, the length of the sequence, is analyzed as follows:</p><ol><li>x = 1 <img src="https://latex.codecogs.com/gif.latex?%5Cequiv" alt> p[3], p[4] = 3, so p[p[4]] = 1</li><li>x = 2 <img src="https://latex.codecogs.com/gif.latex?%5Cequiv" alt> p[2], p[2] = 2, so p[p[2]] = 2</li><li>x = 3 <img src="https://latex.codecogs.com/gif.latex?%5Cequiv" alt> p[3], p[5] = 4, so p[p[5]] = 3</li><li>x = 4 <img src="https://latex.codecogs.com/gif.latex?%5Cequiv" alt> p[5], p[1] = 5, so p[p[1]] = 4</li><li>x = 5 <img src="https://latex.codecogs.com/gif.latex?%5Cequiv" alt> p[1], p[3] = 1, so p[p[3]] = 5</li></ol><p>The values for <strong>y</strong>are <strong>[4, 2, 5, 1, 3]</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the permutationEquation function in the editor below. It should return an array of integers that represent the values of <strong>y</strong>.</p><p>permutationEquation has the following parameter(s):</p><ul><li>p: an array of integers</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>n</strong>, the number of elements in the sequence.<br>The second line contains <strong>n</strong> space-separated integers <strong>p[i]</strong> where <img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;i%5Cleq&space;n" alt>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;50" alt>)</li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;p%5Bi%5D%5Cleq&space;50" alt>), where <img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;i%5Cleq&space;n" alt>).</li><li>Each element in the sequence is distinct.</li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each <strong>x</strong> from <strong>1</strong> to <strong>n</strong>, print an integer denoting any valid <strong>y</strong> satisfying the equation p(p(y)) <img src="https://latex.codecogs.com/gif.latex?%5Cequiv&space;x" alt> on a new line.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2 3 1</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>Given the values of <strong>p(1) = 2</strong>, <strong>p(2) = 3</strong>, and <strong>p(3) = 1</strong>, we calculate and print the following values for each <strong>x</strong> from <strong>1</strong> to <strong>n</strong>:</p><ol><li>x = 1 <img src="https://latex.codecogs.com/gif.latex?%5Cequiv" alt> p(3) = p(p(2)) = p(p(y)), so we print the value of <strong>y = 2</strong> on a new line.</li><li>x = 2 <img src="https://latex.codecogs.com/gif.latex?%5Cequiv" alt> p(1) = p(p(3)) = p(p(y)), so we print the value of <strong>y = 3</strong> on a new line.</li><li>x = 3 <img src="https://latex.codecogs.com/gif.latex?%5Cequiv" alt> p(2) = p(p(1)) = p(p(y)), so we print the value of <strong>y = 1</strong> on a new line.</li></ol><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">4 3 5 1 2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">2</span><br></pre></td></tr></table></figure><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">permutationEquation</span>(<span class="hljs-params">p</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> findCurrentIndex = <span class="hljs-function"><span class="hljs-params">arr</span> =&gt;</span> arr.map(<span class="hljs-function">(<span class="hljs-params">v, i</span>) =&gt;</span> p.findIndex(<span class="hljs-function"><span class="hljs-params">innerV</span> =&gt;</span> innerV === v) + <span class="hljs-number">1</span>);</span><br><span class="line">  <span class="hljs-keyword">return</span> findCurrentIndex(findCurrentIndex(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(p.length).fill(<span class="hljs-number">0</span>).map(<span class="hljs-function">(<span class="hljs-params">v, i</span>) =&gt;</span> i + <span class="hljs-number">1</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/08/algorithm/hackerrank/35_SequenceEquation/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Circular Array Rotation</title>
      <link>https://alleyful.github.io/2019/08/07/algorithm/hackerrank/34_CircularArrayRotation/</link>
      <guid>https://alleyful.github.io/2019/08/07/algorithm/hackerrank/34_CircularArrayRotation/</guid>
      <pubDate>Tue, 06 Aug 2019 16:01:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;John Watson knows of an operation called a right circular rotation on an array of integers. One rotation operation moves the last array element to the first position and shifts all remaining elements right one. To test Sherlock’s abilities, Watson provides Sherlock with an array of integers. Sherlock is to perform the rotation operation a number of times then determine the value of the element at a given position.&lt;/p&gt;
&lt;p&gt;For each array, perform a number of right circular rotations and return the value of the element at a given index.&lt;/p&gt;
&lt;p&gt;For example, array &lt;code&gt;a = [3, 4, 5]&lt;/code&gt;, number of rotations, &lt;code&gt;k = 2&lt;/code&gt; and indices to check, &lt;code&gt;m = [1, 2]&lt;/code&gt;. 
First we perform the two rotations:&lt;br&gt;&lt;code&gt;[3, 4, 5] -&amp;gt; [5, 3, 4] -&amp;gt; [4, 5, 3]&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;Now return the values from the zero-based indices &lt;strong&gt;1&lt;/strong&gt; and &lt;strong&gt;2&lt;/strong&gt; as indicated in the &lt;strong&gt;m&lt;/strong&gt; array.&lt;br&gt;&lt;strong&gt;a[1] = 5&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;a[2] = 3&lt;/strong&gt;&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>John Watson knows of an operation called a right circular rotation on an array of integers. One rotation operation moves the last array element to the first position and shifts all remaining elements right one. To test Sherlock’s abilities, Watson provides Sherlock with an array of integers. Sherlock is to perform the rotation operation a number of times then determine the value of the element at a given position.</p><p>For each array, perform a number of right circular rotations and return the value of the element at a given index.</p><p>For example, array <code>a = [3, 4, 5]</code>, number of rotations, <code>k = 2</code> and indices to check, <code>m = [1, 2]</code>. First we perform the two rotations:<br><code>[3, 4, 5] -&gt; [5, 3, 4] -&gt; [4, 5, 3]</code>  </p><p>Now return the values from the zero-based indices <strong>1</strong> and <strong>2</strong> as indicated in the <strong>m</strong> array.<br><strong>a[1] = 5</strong><br><strong>a[2] = 3</strong></p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the circularArrayRotation function in the editor below. It should return an array of integers representing the values at the specified indices.</p><p>circularArrayRotation has the following parameter(s):</p><ul><li>a: an array of integers to rotate</li><li>k: an integer, the rotation count</li><li>queries: an array of integers, the indices to report</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains <strong>3</strong> space-separated integers, <strong>n</strong>, <strong>k</strong>, and <strong>q</strong>, the number of elements in the integer array, the rotation count and the number of queries.<br>The second line contains <strong>n</strong> space-separated integers, where each integer <strong>k</strong> describes array element <strong>a[i]</strong> (where <img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;i%3C&space;n" alt>).<br>Each of the <strong>q</strong> subsequent lines contains a single integer denoting <strong>m</strong>, the index of the element to return from <strong>a</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;10%5E%7B5%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;a%5Bi%5D%5Cleq&space;10%5E%7B5%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;k%5Cleq&space;10%5E%7B5%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;q%5Cleq&space;500%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;m%3C&space;n" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each query, print the value of the element at index <strong>m</strong> of the rotated array on a new line.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3 2 3</span><br><span class="line">1 2 3</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>After the first rotation, the array becomes <code>[3, 1, 2]</code>. After the second (and final) rotation, the array becomes <code>[2, 3, 1]</code>.</p><p>Let’s refer to the array’s final state as array <code>b = [2, 3, 1]</code>. For each query, we just have to print the value of <img src="https://latex.codecogs.com/gif.latex?b_%7Bm%7D" alt> on a new line:</p><ol><li><img src="https://latex.codecogs.com/gif.latex?m=0,&space;b_%7B0%7D=2." alt></li><li><img src="https://latex.codecogs.com/gif.latex?m=1,&space;b_%7B1%7D=3." alt></li><li><img src="https://latex.codecogs.com/gif.latex?m=2,&space;b_%7B2%7D=1." alt></li></ol><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">circularArrayRotation</span>(<span class="hljs-params">a, k, queries</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> results = a.reduce(<span class="hljs-function">(<span class="hljs-params">target, number, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> currentIndex = (index + k) % a.length;</span><br><span class="line">        target[currentIndex] = number;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> queries.map(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> results[v]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/07/algorithm/hackerrank/34_CircularArrayRotation/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Save the Prisoner!</title>
      <link>https://alleyful.github.io/2019/08/06/algorithm/hackerrank/33_SaveThePrisoner/</link>
      <guid>https://alleyful.github.io/2019/08/06/algorithm/hackerrank/33_SaveThePrisoner/</guid>
      <pubDate>Mon, 05 Aug 2019 15:07:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;A jail has a number of prisoners and a number of treats to pass out to them. Their jailer decides the fairest way to divide the treats is to seat the prisoners around a circular table in sequentially numbered chairs. A chair number will be drawn from a hat. Beginning with the prisoner in that chair, one candy will be handed to each prisoner sequentially around the table until all have been distributed.&lt;/p&gt;
&lt;p&gt;The jailer is playing a little joke, though. The last piece of candy looks like all the others, but it tastes awful. Determine the chair number occupied by the prisoner who will receive that candy.&lt;/p&gt;
&lt;p&gt;For example, there are &lt;strong&gt;4&lt;/strong&gt; prisoners and &lt;strong&gt;6&lt;/strong&gt; pieces of candy. The prisoners arrange themselves in seats numbered &lt;strong&gt;1&lt;/strong&gt; to &lt;strong&gt;4&lt;/strong&gt;. Let’s suppose two is drawn from the hat. Prisoners receive candy at positions &lt;strong&gt;2, 3, 4, 1, 2, 3&lt;/strong&gt;. The prisoner to be warned sits in chair number &lt;strong&gt;3&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>A jail has a number of prisoners and a number of treats to pass out to them. Their jailer decides the fairest way to divide the treats is to seat the prisoners around a circular table in sequentially numbered chairs. A chair number will be drawn from a hat. Beginning with the prisoner in that chair, one candy will be handed to each prisoner sequentially around the table until all have been distributed.</p><p>The jailer is playing a little joke, though. The last piece of candy looks like all the others, but it tastes awful. Determine the chair number occupied by the prisoner who will receive that candy.</p><p>For example, there are <strong>4</strong> prisoners and <strong>6</strong> pieces of candy. The prisoners arrange themselves in seats numbered <strong>1</strong> to <strong>4</strong>. Let’s suppose two is drawn from the hat. Prisoners receive candy at positions <strong>2, 3, 4, 1, 2, 3</strong>. The prisoner to be warned sits in chair number <strong>3</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the saveThePrisoner function in the editor below. It should return an integer representing the chair number of the prisoner to warn.</p><p>saveThePrisoner has the following parameter(s):</p><ul><li>n: an integer, the number of prisoners</li><li>m: an integer, the number of sweets</li><li>s: an integer, the chair number to begin passing out sweets from</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer, <strong>t</strong>, denoting the number of test cases.<br>The next <strong>t</strong> lines each contain <strong>3</strong> space-separated integers: </p><ul><li><strong>n</strong>: the number of prisoners </li><li><strong>m</strong>: the number of sweets </li><li><strong>s</strong>: the chair number to start passing out treats at</li></ul><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;t%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;10%5E%7B9%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;m%5Cleq&space;10%5E%7B9%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;s%5Cleq&space;n" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each test case, print the chair number of the prisoner who receives the awful treat on a new line.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">5 2 1</span><br><span class="line">5 2 2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>In first query, there are <code>n = 5</code> prisoners and <code>m = 2</code> sweets. Distribution starts at seat number <code>s = 1</code>. Prisoners in seats numbered <strong>1</strong> and <strong>2</strong> get sweets. Warn prisoner <strong>2</strong>. In the second query, distribution starts at seat <strong>2</strong> so prisoners in seats <strong>2</strong> and <strong>3</strong> get sweets. Warn prisoner <strong>3</strong>.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">7 19 2</span><br><span class="line">3 7 3</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>In the first test case, there are <code>n = 7</code> prisoners, <code>m = 19</code> sweets and they are passed out starting at chair <code>s = 2</code>. The candies go all around twice and there are <strong>5</strong> more candies passed to each prisoner from seat <strong>2</strong> to seat <strong>6</strong>.</p><p>In the second test case, there are <code>n = 3</code> prisoners, <code>m = 7</code> candies and they are passed out starting at seat <code>s = 3</code>. They go around twice, and there is one more to pass out to the prisoner at seat <strong>3</strong>.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">saveThePrisoner</span>(<span class="hljs-params">n, m, s</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> result = (m - <span class="hljs-number">1</span> + s) % n;</span><br><span class="line">    <span class="hljs-keyword">return</span> result === <span class="hljs-number">0</span> ? n : result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/06/algorithm/hackerrank/33_SaveThePrisoner/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Viral Advertising</title>
      <link>https://alleyful.github.io/2019/08/05/algorithm/hackerrank/32_ViralAdvertising/</link>
      <guid>https://alleyful.github.io/2019/08/05/algorithm/hackerrank/32_ViralAdvertising/</guid>
      <pubDate>Sun, 04 Aug 2019 15:03:29 GMT</pubDate>
      <description>
      
        &lt;p&gt;HackerLand Enterprise is adopting a new viral advertising strategy. When they launch a new product, they advertise it to exactly &lt;strong&gt;5&lt;/strong&gt; people on social media.&lt;/p&gt;
&lt;p&gt;On the first day, half of those &lt;strong&gt;5&lt;/strong&gt; people (i.e., &lt;img src=&quot;https://latex.codecogs.com/gif.latex?floor(%5Cfrac%7B5%7D%7B2%7D)&amp;space;=&amp;space;2&quot; alt&gt;) like the advertisement and each shares it with &lt;strong&gt;3&lt;/strong&gt; of their friends. At the beginning of the second day, &lt;img src=&quot;https://latex.codecogs.com/gif.latex?floor(%5Cfrac%7B5%7D%7B2%7D)%5Ctimes&amp;space;3&amp;space;=&amp;space;2%5Ctimes&amp;space;3=6&quot; alt&gt; people receive the advertisement.&lt;/p&gt;
&lt;p&gt;Each day, &lt;img src=&quot;https://latex.codecogs.com/gif.latex?floor(%5Cfrac%7Brecipients%7D%7B2%7D)&quot; alt&gt; of the recipients like the advertisement and will share it with &lt;strong&gt;3&lt;/strong&gt; friends on the following day. Assuming nobody receives the advertisement twice, determine how many people have liked the ad by the end of a given day, beginning with launch day as day &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, assume you want to know how many have liked the ad by the end of the &lt;img src=&quot;https://latex.codecogs.com/gif.latex?5%5E%7Bth%7D&quot; alt&gt; day.&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Day Shared Liked Cumulative&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1      5     2       2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2      6     3       5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3      9     4       9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4     12     6      15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5     18     9      24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The cumulative number of likes is &lt;strong&gt;24&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>HackerLand Enterprise is adopting a new viral advertising strategy. When they launch a new product, they advertise it to exactly <strong>5</strong> people on social media.</p><p>On the first day, half of those <strong>5</strong> people (i.e., <img src="https://latex.codecogs.com/gif.latex?floor(%5Cfrac%7B5%7D%7B2%7D)&space;=&space;2" alt>) like the advertisement and each shares it with <strong>3</strong> of their friends. At the beginning of the second day, <img src="https://latex.codecogs.com/gif.latex?floor(%5Cfrac%7B5%7D%7B2%7D)%5Ctimes&space;3&space;=&space;2%5Ctimes&space;3=6" alt> people receive the advertisement.</p><p>Each day, <img src="https://latex.codecogs.com/gif.latex?floor(%5Cfrac%7Brecipients%7D%7B2%7D)" alt> of the recipients like the advertisement and will share it with <strong>3</strong> friends on the following day. Assuming nobody receives the advertisement twice, determine how many people have liked the ad by the end of a given day, beginning with launch day as day <strong>1</strong>.</p><p>For example, assume you want to know how many have liked the ad by the end of the <img src="https://latex.codecogs.com/gif.latex?5%5E%7Bth%7D" alt> day.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Day Shared Liked Cumulative</span><br><span class="line">1      5     2       2</span><br><span class="line">2      6     3       5</span><br><span class="line">3      9     4       9</span><br><span class="line">4     12     6      15</span><br><span class="line">5     18     9      24</span><br></pre></td></tr></table></figure><p>The cumulative number of likes is <strong>24</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the viralAdvertising function in the editor below. It should return the cumulative number of people who have liked the ad at a given time.</p><p>viralAdvertising has the following parameter(s):</p><ul><li>n: the integer number of days</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>A single integer, <strong>n</strong>, denoting a number of days.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the number of people who liked the advertisement during the first <strong>n</strong> days.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>This example is depicted in the following diagram:</p><p><img src="./images/viralAdvertising.png" alt></p><p><strong>2</strong> people liked the advertisement on the first day, <strong>3</strong> people liked the advertisement on the second day and <strong>4</strong> people liked the advertisement on the third day, so the answer is <code>2 + 3 + 4 = 9</code>.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">viralAdvertising</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(n).fill(<span class="hljs-built_in">Math</span>.floor(<span class="hljs-number">5</span> / <span class="hljs-number">2</span>)).reduce(<span class="hljs-function">(<span class="hljs-params">target, day, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> number = index === <span class="hljs-number">0</span> ? day : <span class="hljs-built_in">Math</span>.floor(target[<span class="hljs-string">'prev'</span>] * <span class="hljs-number">3</span> / <span class="hljs-number">2</span>);</span><br><span class="line">        target[<span class="hljs-string">'prev'</span>] = number;</span><br><span class="line">        target[<span class="hljs-string">'Cumulative'</span>] += number;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, &#123;<span class="hljs-attr">Cumulative</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">prev</span>: <span class="hljs-number">0</span>&#125;)[<span class="hljs-string">'Cumulative'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/05/algorithm/hackerrank/32_ViralAdvertising/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Beautiful Days at the Movies</title>
      <link>https://alleyful.github.io/2019/08/04/algorithm/hackerrank/31_BeautifulDaysAtTheMovies/</link>
      <guid>https://alleyful.github.io/2019/08/04/algorithm/hackerrank/31_BeautifulDaysAtTheMovies/</guid>
      <pubDate>Sat, 03 Aug 2019 15:15:29 GMT</pubDate>
      <description>
      
        &lt;p&gt;Lily likes to play games with integers. She has created a new game where she determines the difference between a number and its reverse. For instance, given the number &lt;strong&gt;12&lt;/strong&gt;, its reverse is &lt;strong&gt;21&lt;/strong&gt;. Their difference is &lt;strong&gt;9&lt;/strong&gt;. The number &lt;strong&gt;120&lt;/strong&gt; reversed is &lt;strong&gt;21&lt;/strong&gt;, and their difference is &lt;strong&gt;99&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;She decides to apply her game to decision making. She will look at a numbered range of days and will only go to a movie on a beautiful day.&lt;/p&gt;
&lt;p&gt;Given a range of numbered days, &lt;strong&gt;[i … j]&lt;/strong&gt; and a number &lt;strong&gt;k&lt;/strong&gt;, determine the number of days in the range that are beautiful.&lt;br&gt;Beautiful numbers are defined as numbers where &lt;code&gt;|i - reverse(i)|&lt;/code&gt; is evenly divisible by &lt;strong&gt;k&lt;/strong&gt;. If a day’s value is a beautiful number, it is a beautiful day. Print the number of beautiful days in the range.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Lily likes to play games with integers. She has created a new game where she determines the difference between a number and its reverse. For instance, given the number <strong>12</strong>, its reverse is <strong>21</strong>. Their difference is <strong>9</strong>. The number <strong>120</strong> reversed is <strong>21</strong>, and their difference is <strong>99</strong>.</p><p>She decides to apply her game to decision making. She will look at a numbered range of days and will only go to a movie on a beautiful day.</p><p>Given a range of numbered days, <strong>[i … j]</strong> and a number <strong>k</strong>, determine the number of days in the range that are beautiful.<br>Beautiful numbers are defined as numbers where <code>|i - reverse(i)|</code> is evenly divisible by <strong>k</strong>. If a day’s value is a beautiful number, it is a beautiful day. Print the number of beautiful days in the range.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the beautifulDays function in the editor below. It must return the number of beautiful days in the range.</p><p>beautifulDays has the following parameter(s):</p><ul><li>i: the starting day number</li><li>j: the ending day number</li><li>k: the divisor</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>A single line of three space-separated integers describing the respective values of <strong>i</strong>, <strong>j</strong>, and <strong>k</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;i%5Cleq&space;j%5Cleq&space;2%5Ctimes&space;10%5E%7B6%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;k%5Cleq&space;2%5Ctimes&space;10%5E%7B9%7D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the number of beautiful days in the inclusive range between <strong>i</strong> and <strong>j</strong>.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 23 6</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Lily may go to the movies on days <strong>20</strong>, <strong>21</strong>, <strong>22</strong>, and <strong>23</strong>. We perform the following calculations to determine which days are beautiful:</p><ul><li>Day <strong>20</strong> is beautiful because the following evaluates to a whole number: <img src="https://latex.codecogs.com/gif.latex?%5Cfrac%7B%7C20-02%7C%7D%7B6%7D=%5Cfrac%7B18%7D%7B6%7D=3" alt></li><li>Day <strong>21</strong> is not beautiful because the following doesn’t evaluate to a whole number: <img src="https://latex.codecogs.com/gif.latex?%5Cfrac%7B%7C21-12%7C%7D%7B6%7D=%5Cfrac%7B9%7D%7B6%7D=1.5" alt></li><li>Day <strong>22</strong> is beautiful because the following evaluates to a whole number: <img src="https://latex.codecogs.com/gif.latex?%5Cfrac%7B%7C22-22%7C%7D%7B6%7D=%5Cfrac%7B0%7D%7B6%7D=0" alt></li><li>Day <strong>23</strong> is not beautiful because the following doesn’t evaluate to a whole number: <img src="https://latex.codecogs.com/gif.latex?%5Cfrac%7B%7C23-32%7C%7D%7B6%7D=%5Cfrac%7B9%7D%7B6%7D=1.5" alt></li></ul><p>Only two days, <strong>20</strong> and <strong>22</strong>, in this interval are beautiful. Thus, we print <strong>2</strong> as our answer.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">beautifulDays</span>(<span class="hljs-params">i, j, k</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(j - i + <span class="hljs-number">1</span>).fill(<span class="hljs-number">0</span>).reduce(<span class="hljs-function">(<span class="hljs-params">target, number, index</span>) =&gt;</span> &#123; </span><br><span class="line">        (<span class="hljs-built_in">Number</span>([...String(index + i)].reverse().join(<span class="hljs-string">''</span>)) - (index + i)) % k === <span class="hljs-number">0</span> &amp;&amp; ++target;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/04/algorithm/hackerrank/31_BeautifulDaysAtTheMovies/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Angry Professor</title>
      <link>https://alleyful.github.io/2019/08/03/algorithm/hackerrank/30_AngryProfessor/</link>
      <guid>https://alleyful.github.io/2019/08/03/algorithm/hackerrank/30_AngryProfessor/</guid>
      <pubDate>Fri, 02 Aug 2019 15:30:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;A Discrete Mathematics professor has a class of students. Frustrated with their lack of discipline, he decides to cancel class if fewer than some number of students are present when class starts. Arrival times go from on time (&lt;img src=&quot;https://latex.codecogs.com/gif.latex?arrivalTime%5Cleq&amp;space;0&quot; alt&gt;) to arrived late (&lt;img src=&quot;https://latex.codecogs.com/gif.latex?arrivalTime%3E&amp;space;0&quot; alt&gt;).&lt;/p&gt;
&lt;p&gt;Given the arrival time of each student and a threshhold number of attendees, determine if the class is canceled.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>A Discrete Mathematics professor has a class of students. Frustrated with their lack of discipline, he decides to cancel class if fewer than some number of students are present when class starts. Arrival times go from on time (<img src="https://latex.codecogs.com/gif.latex?arrivalTime%5Cleq&space;0" alt>) to arrived late (<img src="https://latex.codecogs.com/gif.latex?arrivalTime%3E&space;0" alt>).</p><p>Given the arrival time of each student and a threshhold number of attendees, determine if the class is canceled.</p><br><a id="more"></a><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line of input contains <strong>t</strong>, the number of test cases.</p><p>Each test case consists of two lines.</p><p>The first line has two space-separated integers, <strong>n</strong> and <strong>k</strong>, the number of students (size of <strong>a</strong>) and the cancellation threshold.<br>The second line contains <strong>n</strong> space-separated integers (<strong>a[1], a[2], …, a[n]</strong>) describing the arrival times for each student.</p><p><strong>Note</strong>: Non-positive arrival times (<strong><img src="https://latex.codecogs.com/gif.latex?a%5Bi%5D%5Cleq&space;0" alt></strong>) indicate the student arrived early or on time; positive arrival times (<img src="https://latex.codecogs.com/gif.latex?a%5Bi%5D%3E&space;0" alt>) indicate the student arrived <strong>a[i]</strong> minutes late.</p><p>For example, there are <strong>n = 6</strong> students who arrive at times <strong>a = [-1, -1, 0, 0, 1, 1]</strong>. Four are there on time, and two arrive late. If there must be <strong>k = 4</strong> for class to go on, in this case the class will continue. If there must be <strong>k = 5</strong>, then class is cancelled.</p><br><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the angryProfessor function in the editor below. It must return YES if class is cancelled, or NO otherwise.</p><p>angryProfessor has the following parameter(s):</p><ul><li>k: the threshold number of students</li><li>a: an array of integers representing arrival times</li></ul><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;t%5Cleq&space;10" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;1000" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;k%5Cleq&space;n" alt></li><li><img src="https://latex.codecogs.com/gif.latex?-100%5Cleq&space;a%5Bi%5D%5Cleq&space;100,&space;where&space;i%5Cin&space;%5B1,&space;...n%5D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each test case, print the word YES if the class is canceled or NO if it is not.</p><br><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>If a student arrives exactly on time (<img src="https://latex.codecogs.com/gif.latex?a_%7Bi%7D&space;=&space;0" alt>), the student is considered to have entered before the class started.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4 3</span><br><span class="line">-1 -3 4 2</span><br><span class="line">4 2</span><br><span class="line">0 -1 2 1</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>For the first test case, <strong>k = 3</strong>. The professor wants at least <strong>3</strong> students in attendance, but only <strong>2</strong> have arrived on time (<strong>-3</strong> and <strong>-1</strong>) so the class is cancelled.</p><p>For the second test case, <strong>k = 2</strong>. The professor wants at least <strong>2</strong> students in attendance, and there are <strong>2</strong> who have arrived on time (<strong>0</strong> and <strong>-1</strong>) so the class is not cancelled.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">angryProfessor</span>(<span class="hljs-params">k, a</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> a.reduce(<span class="hljs-function">(<span class="hljs-params">target, time</span>) =&gt;</span> &#123; </span><br><span class="line">        <span class="hljs-keyword">return</span> time &lt;= <span class="hljs-number">0</span> ? ++target : target;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>) &gt;= k ? <span class="hljs-string">'NO'</span> : <span class="hljs-string">'YES'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/03/algorithm/hackerrank/30_AngryProfessor/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Utopian Tree</title>
      <link>https://alleyful.github.io/2019/08/02/algorithm/hackerrank/29_UtopianTree/</link>
      <guid>https://alleyful.github.io/2019/08/02/algorithm/hackerrank/29_UtopianTree/</guid>
      <pubDate>Fri, 02 Aug 2019 08:23:41 GMT</pubDate>
      <description>
      
        &lt;p&gt;The Utopian Tree goes through 2 cycles of growth every year. Each spring, it doubles in height. Each summer, its height increases by 1 meter.&lt;/p&gt;
&lt;p&gt;Laura plants a Utopian Tree sapling with a height of 1 meter at the onset of spring. How tall will her tree be after &lt;strong&gt;n&lt;/strong&gt; growth cycles?&lt;/p&gt;
&lt;p&gt;For example, if the number of growth cycles is &lt;strong&gt;n = 5&lt;/strong&gt;, the calculations are as follows:&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Period  Height&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0          1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1          2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2          3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3          6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4          7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5          14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>The Utopian Tree goes through 2 cycles of growth every year. Each spring, it doubles in height. Each summer, its height increases by 1 meter.</p><p>Laura plants a Utopian Tree sapling with a height of 1 meter at the onset of spring. How tall will her tree be after <strong>n</strong> growth cycles?</p><p>For example, if the number of growth cycles is <strong>n = 5</strong>, the calculations are as follows:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Period  Height</span><br><span class="line">0          1</span><br><span class="line">1          2</span><br><span class="line">2          3</span><br><span class="line">3          6</span><br><span class="line">4          7</span><br><span class="line">5          14</span><br></pre></td></tr></table></figure><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the utopianTree function in the editor below. It should return the integer height of the tree after the input number of growth cycles.</p><p>utopianTree has the following parameter(s):</p><ul><li>n: an integer, the number of growth cycles to simulate</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer, <strong>t</strong>, the number of test cases.<br><strong>t</strong> subsequent lines each contain an integer, <strong>n</strong>, denoting the number of cycles for that test case.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;t%5Cleq&space;10" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;n%5Cleq&space;60" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each test case, print the height of the Utopian Tree after  cycles. Each height must be printed on a new line.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">4</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">7</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>There are 3 test cases.</p><p>In the first case (<strong>n = 0</strong>), the initial height (<strong>H = 1</strong>) of the tree remains unchanged.</p><p>In the second case (<strong>n = 1</strong>), the tree doubles in height and is <strong>2</strong> meters tall after the spring cycle.</p><p>In the third case (<strong>n = 4</strong>), the tree doubles its height in spring (<strong>n = 1</strong>, <strong>H = 2</strong> ), then grows a meter in summer (<strong>n = 2</strong>, <strong>H = 3</strong>), then doubles after the next spring (<strong>n = 3</strong>, <strong>H = 6</strong>), and grows another meter after summer (<strong>n = 4</strong>, <strong>H = 7</strong>). Thus, at the end of 4 cycles, its height is <strong>7</strong> meters.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">utopianTree</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(n).fill(<span class="hljs-number">0</span>).reduce(<span class="hljs-function">(<span class="hljs-params">target, value, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> target = (index % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>) ? target * <span class="hljs-number">2</span> : target + <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;, <span class="hljs-number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/02/algorithm/hackerrank/29_UtopianTree/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Designer PDF Viewer</title>
      <link>https://alleyful.github.io/2019/08/01/algorithm/hackerrank/28_DesignerPDFViewer/</link>
      <guid>https://alleyful.github.io/2019/08/01/algorithm/hackerrank/28_DesignerPDFViewer/</guid>
      <pubDate>Wed, 31 Jul 2019 15:03:16 GMT</pubDate>
      <description>
      
        &lt;p&gt;When you select a contiguous block of text in a PDF viewer, the selection is highlighted with a blue rectangle. In this PDF viewer, each word is highlighted independently. For example:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/designerPDF.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;In this challenge, you will be given a list of letter heights in the alphabet and a string. Using the letter heights given, determine the area of the rectangle highlight in &lt;img src=&quot;https://latex.codecogs.com/gif.latex?mm%5E%7B2%7D&quot; alt&gt; assuming all letters are &lt;strong&gt;1mm&lt;/strong&gt; wide.&lt;/p&gt;
&lt;p&gt;For example, the highlighted &lt;code&gt;word = torn&lt;/code&gt;. Assume the heights of the letters are &lt;code&gt;t = 2, o = 1, r = 1&lt;/code&gt; and &lt;code&gt;n = 1&lt;/code&gt;. The tallest letter is &lt;strong&gt;2&lt;/strong&gt; high and there are &lt;strong&gt;4&lt;/strong&gt; letters. The hightlighted area will be &lt;strong&gt;2 * 4 = 8&lt;img src=&quot;https://latex.codecogs.com/gif.latex?mm%5E%7B2%7D&quot; alt&gt;&lt;/strong&gt; so the answer is &lt;strong&gt;8&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>When you select a contiguous block of text in a PDF viewer, the selection is highlighted with a blue rectangle. In this PDF viewer, each word is highlighted independently. For example:</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/designerPDF.png" alt></p><p>In this challenge, you will be given a list of letter heights in the alphabet and a string. Using the letter heights given, determine the area of the rectangle highlight in <img src="https://latex.codecogs.com/gif.latex?mm%5E%7B2%7D" alt> assuming all letters are <strong>1mm</strong> wide.</p><p>For example, the highlighted <code>word = torn</code>. Assume the heights of the letters are <code>t = 2, o = 1, r = 1</code> and <code>n = 1</code>. The tallest letter is <strong>2</strong> high and there are <strong>4</strong> letters. The hightlighted area will be <strong>2 * 4 = 8<img src="https://latex.codecogs.com/gif.latex?mm%5E%7B2%7D" alt></strong> so the answer is <strong>8</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the designerPdfViewer function in the editor below. It should return an integer representing the size of the highlighted area.</p><p>designerPdfViewer has the following parameter(s):</p><ul><li>h: an array of integers representing the heights of each letter</li><li>word: a string</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains <strong>26</strong> space-separated integers describing the respective heights of each consecutive lowercase English letter, ascii[a-z].<br>The second line contains a single word, consisting of lowercase English alphabetic letters.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;h%5B?%5D%5Cleq&space;7" alt>, where <strong>?</strong> is an English lowercase letter.</li><li><strong>word</strong> contains no more than <strong>10</strong> letters.</li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single integer denoting the area in <img src="https://latex.codecogs.com/gif.latex?mm%5E%7B2%7D" alt> of highlighted rectangle when the given word is selected. Do not print units of measure.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 3 1 3 1 4 1 3 2 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5</span><br><span class="line">abc</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>We are highlighting the word abc:</p><p>Letter heights are <strong>a = 1, b = 3</strong>, and <strong>c = 1</strong>. The tallest letter, b, is <strong>3mm</strong> high. The selection area for this word is <strong>3 x 1mm x 3mm = 9<img src="https://latex.codecogs.com/gif.latex?mm%5E%7B2%7D" alt></strong>.</p><p>Note: Recall that the width of each character is <strong>1mm</strong>.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 3 1 3 1 4 1 3 2 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 7</span><br><span class="line">zaba</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">28</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>The tallest letter in <strong>zaba</strong> is <strong>z</strong> at <strong>7mm</strong>. The selection area for this word is <strong>4 x 1mm x 7mm = 28<img src="https://latex.codecogs.com/gif.latex?mm%5E%7B2%7D" alt></strong>.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">designerPdfViewer</span>(<span class="hljs-params">h, word</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> words = [...word];</span><br><span class="line">    <span class="hljs-keyword">const</span> chatA = <span class="hljs-string">'a'</span>.charCodeAt();</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(...words.reduce(<span class="hljs-function">(<span class="hljs-params">target, string</span>) =&gt;</span> &#123; </span><br><span class="line">        target.push(h[string.charCodeAt() - chatA]);</span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, [])) * words.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/01/algorithm/hackerrank/28_DesignerPDFViewer/#disqus_thread</comments>
    </item>
    
    <item>
      <title>The Hurdle Race</title>
      <link>https://alleyful.github.io/2019/07/31/algorithm/hackerrank/27_TheHurdleRace/</link>
      <guid>https://alleyful.github.io/2019/07/31/algorithm/hackerrank/27_TheHurdleRace/</guid>
      <pubDate>Tue, 30 Jul 2019 15:31:58 GMT</pubDate>
      <description>
      
        &lt;p&gt;Dan is playing a video game in which his character competes in a hurdle race. Hurdles are of varying heights, and Dan has a maximum height he can jump. There is a magic potion he can take that will increase his maximum height by &lt;strong&gt;1&lt;/strong&gt; unit for each dose. How many doses of the potion must he take to be able to jump all of the hurdles.&lt;/p&gt;
&lt;p&gt;Given an array of hurdle heights &lt;strong&gt;height&lt;/strong&gt;, and an initial maximum height Dan can jump, &lt;strong&gt;k&lt;/strong&gt;, determine the minimum number of doses Dan must take to be able to clear all the hurdles in the race.&lt;/p&gt;
&lt;p&gt;For example, if &lt;code&gt;height = [1, 2, 3, 3, 2]&lt;/code&gt; and Dan can jump &lt;strong&gt;1&lt;/strong&gt; unit high naturally, he must take &lt;strong&gt;3 - 1 = 2&lt;/strong&gt; doses of potion to be able to jump all of the hurdles.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Dan is playing a video game in which his character competes in a hurdle race. Hurdles are of varying heights, and Dan has a maximum height he can jump. There is a magic potion he can take that will increase his maximum height by <strong>1</strong> unit for each dose. How many doses of the potion must he take to be able to jump all of the hurdles.</p><p>Given an array of hurdle heights <strong>height</strong>, and an initial maximum height Dan can jump, <strong>k</strong>, determine the minimum number of doses Dan must take to be able to clear all the hurdles in the race.</p><p>For example, if <code>height = [1, 2, 3, 3, 2]</code> and Dan can jump <strong>1</strong> unit high naturally, he must take <strong>3 - 1 = 2</strong> doses of potion to be able to jump all of the hurdles.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the hurdleRace function in the editor below. It should return the minimum units of potion Dan needs to drink to jump all of the hurdles.</p><p>hurdleRace has the following parameter(s):</p><ul><li>k: an integer denoting the height Dan can jump naturally</li><li>height: an array of integers denoting the heights of each hurdle</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains two space-separated integers <strong>n</strong> and <strong>k</strong>, the number of hurdles and the maximum height Dan can jump naturally.<br>The second line contains <strong>n</strong> space-separated integers <strong>height[i]</strong> where <img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;i%3C&space;n" alt>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n,&space;k%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;height%5Bi%5D%5Cleq&space;100" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print an integer denoting the minimum doses of magic potion Dan must drink to complete the hurdle race.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 4</span><br><span class="line">1 6 3 5 2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>Dan’s character can jump a maximum of <strong>k = 4</strong> units, but the tallest hurdle has a height of <img src="https://latex.codecogs.com/gif.latex?h_%7B1%7D&space;=&space;6" alt>:</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/hurdleRace-01.png" alt></p><p>To be able to jump all the hurdles, Dan must drink <strong><code>6 - 4 = 2</code></strong> doses.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 7</span><br><span class="line">2 5 4 5 2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>Dan’s character can jump a maximum of <strong>k = 7</strong> units, which is enough to cross all the hurdles:</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/hurdleRace-02.png" alt></p><p>Because he can already jump all the hurdles, Dan needs to drink <strong>0</strong> doses.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hurdleRace</span>(<span class="hljs-params">k, height</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(...height.reduce(<span class="hljs-function">(<span class="hljs-params">target, item</span>) =&gt;</span> &#123;</span><br><span class="line">        target.push(item - k &gt; <span class="hljs-number">0</span> ? item - k : <span class="hljs-number">0</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/07/31/algorithm/hackerrank/27_TheHurdleRace/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Picking Numbers</title>
      <link>https://alleyful.github.io/2019/07/30/algorithm/hackerrank/26_PickingNumbers/</link>
      <guid>https://alleyful.github.io/2019/07/30/algorithm/hackerrank/26_PickingNumbers/</guid>
      <pubDate>Tue, 30 Jul 2019 04:52:11 GMT</pubDate>
      <description>
      
        &lt;p&gt;Given an array of integers, find and print the maximum number of integers you can select from the array such that the absolute difference between any two of the chosen integers is less than or equal to &lt;strong&gt;1&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;For example, if your array is &lt;code&gt;a = [1, 1, 2, 2, 4, 4, 5, 5, 5]&lt;/code&gt;, you can create two subarrays meeting the criterion: &lt;code&gt;[1, 1, 2, 2]&lt;/code&gt; and &lt;code&gt;[4, 4, 5, 5, 5]&lt;/code&gt;. The maximum length subarray has &lt;strong&gt;5&lt;/strong&gt; elements.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Given an array of integers, find and print the maximum number of integers you can select from the array such that the absolute difference between any two of the chosen integers is less than or equal to <strong>1</strong>. </p><p>For example, if your array is <code>a = [1, 1, 2, 2, 4, 4, 5, 5, 5]</code>, you can create two subarrays meeting the criterion: <code>[1, 1, 2, 2]</code> and <code>[4, 4, 5, 5, 5]</code>. The maximum length subarray has <strong>5</strong> elements.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the pickingNumbers function in the editor below. It should return an integer that represents the length of the longest array that can be created.</p><p>pickingNumbers has the following parameter(s):</p><ul><li>a: an array of integers</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains a single integer <strong>n</strong>, the size of the array <strong>a</strong>. The second line contains <strong>n</strong> space-separated integers <strong>a[i]</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;n%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%3C&space;a%5Bi%5D%3C&space;100" alt></li><li>The answer will be <img src="https://latex.codecogs.com/gif.latex?%5Cgeq&space;2" alt>.</li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>A single integer denoting the maximum number of integers you can choose from the array such that the absolute difference between any two of the chosen integers is <img src="https://latex.codecogs.com/gif.latex?%5Cleq&space;1" alt>.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">4 6 5 3 3 1</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>We choose the following multiset of integers from the array: <strong>{4, 3, 3}</strong>. Each pair in the multiset has an absolute difference <img src="https://latex.codecogs.com/gif.latex?%5Cleq&space;1" alt>(i.e., <strong>|4 - 3| = 1</strong> and <strong>|3 - 3| = 0</strong>), so we print the number of chosen integers, <strong>3</strong>, as our answer.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">1 2 2 3 1 2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>We choose the following multiset of integers from the array: <strong>{1, 2, 2, 1, 2}</strong>. Each pair in the multiset has an absolute difference <img src="https://latex.codecogs.com/gif.latex?%5Cleq&space;1" alt> (i.e., <strong>|1 - 2| = 1</strong>, <strong>|1 - 1| = 0</strong>, and <strong>|2 - 2| = 0</strong>), so we print the number of chosen integers, <strong>5</strong>, as our answer.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pickingNumbers</span>(<span class="hljs-params">a</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> sorted = a.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="hljs-keyword">let</span> checkNumber = sorted[<span class="hljs-number">0</span>];</span><br><span class="line">    <span class="hljs-keyword">let</span> group = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(...sorted.reduce(<span class="hljs-function">(<span class="hljs-params">target, number</span>) =&gt;</span> &#123; </span><br><span class="line">        !(<span class="hljs-built_in">Math</span>.abs(number - checkNumber) &lt;= <span class="hljs-number">1</span>) &amp;&amp; (checkNumber = number, group++);</span><br><span class="line">            </span><br><span class="line">        target[group] ? target[group]++ : target.push(<span class="hljs-number">1</span>);     </span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/07/30/algorithm/hackerrank/26_PickingNumbers/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Forming a Magic Square</title>
      <link>https://alleyful.github.io/2019/07/29/algorithm/hackerrank/25_FormingAMagicSquare/</link>
      <guid>https://alleyful.github.io/2019/07/29/algorithm/hackerrank/25_FormingAMagicSquare/</guid>
      <pubDate>Mon, 29 Jul 2019 05:19:38 GMT</pubDate>
      <description>
      
        &lt;p&gt;We define a magic square to be an &lt;code&gt;n x m&lt;/code&gt; matrix of distinct positive integers from &lt;strong&gt;1&lt;/strong&gt; to &lt;strong&gt;&lt;img src=&quot;https://latex.codecogs.com/gif.latex?n%5E%7B2%7D&quot; alt&gt;&lt;/strong&gt; where the sum of any row, column, or diagonal of length &lt;strong&gt;n&lt;/strong&gt; is always equal to the same number: the magic constant.&lt;/p&gt;
&lt;p&gt;You will be given a &lt;code&gt;3 x 3&lt;/code&gt; matrix  of integers in the inclusive range &lt;strong&gt;[1, 9]&lt;/strong&gt;. We can convert any digit &lt;strong&gt;a&lt;/strong&gt; to any other digit &lt;strong&gt;b&lt;/strong&gt; in the range &lt;strong&gt;[1, 9]&lt;/strong&gt; at cost of &lt;strong&gt;|a - b|&lt;/strong&gt;. Given &lt;strong&gt;s&lt;/strong&gt;, convert it into a magic square at minimal cost. Print this cost on a new line.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The resulting magic square must contain distinct integers in the inclusive range &lt;strong&gt;[1, 9]&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, we start with the following matrix &lt;strong&gt;s&lt;/strong&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;5 3 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 5 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6 4 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We can convert it to the following magic square:&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;8 3 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 5 9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6 7 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This took three replacements at a cost of &lt;strong&gt;|5 - 8| + |8 - 9| + |4 - 7| = 7&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>We define a magic square to be an <code>n x m</code> matrix of distinct positive integers from <strong>1</strong> to <strong><img src="https://latex.codecogs.com/gif.latex?n%5E%7B2%7D" alt></strong> where the sum of any row, column, or diagonal of length <strong>n</strong> is always equal to the same number: the magic constant.</p><p>You will be given a <code>3 x 3</code> matrix  of integers in the inclusive range <strong>[1, 9]</strong>. We can convert any digit <strong>a</strong> to any other digit <strong>b</strong> in the range <strong>[1, 9]</strong> at cost of <strong>|a - b|</strong>. Given <strong>s</strong>, convert it into a magic square at minimal cost. Print this cost on a new line.</p><p><strong>Note</strong>: The resulting magic square must contain distinct integers in the inclusive range <strong>[1, 9]</strong>.</p><p>For example, we start with the following matrix <strong>s</strong>:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 3 4</span><br><span class="line">1 5 8</span><br><span class="line">6 4 2</span><br></pre></td></tr></table></figure><p>We can convert it to the following magic square:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">8 3 4</span><br><span class="line">1 5 9</span><br><span class="line">6 7 2</span><br></pre></td></tr></table></figure><p>This took three replacements at a cost of <strong>|5 - 8| + |8 - 9| + |4 - 7| = 7</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the formingMagicSquare function in the editor below. It should return an integer that represents the minimal total cost of converting the input square to a magic square.</p><p>formingMagicSquare has the following parameter(s):</p><ul><li>s: a <strong>3 x 3</strong> array of integers</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>Each of the lines contains three space-separated integers of row <strong>s[i]</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?s%5Bi%5D%5Bj%5D%5Cin&space;%5B1,&space;9%5D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print an integer denoting the minimum cost of turning matrix <strong>s</strong> into a magic square.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4 9 2</span><br><span class="line">3 5 7</span><br><span class="line">8 1 5</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>If we change the bottom right value, <strong>s[2][2]</strong>, from <strong>5</strong> to <strong>6</strong> at a cost of <strong>|6 - 5| = 1</strong>, <strong>s</strong> becomes a magic square at the minimum possible cost.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4 8 2</span><br><span class="line">4 5 7</span><br><span class="line">6 1 6</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>Using 0-based indexing, if we make</p><ul><li><strong>s[0][1]</strong> -&gt; <strong>9</strong> at a cost of <code>|9 - 8| = 1</code></li><li><strong>s[1][0]</strong> -&gt; <strong>3</strong> at a cost of <code>|3 - 4| = 1</code></li><li><strong>s[2][0]</strong> -&gt; <strong>8</strong> at a cost of <code>|8 - 6| = 2</code>  </li></ul><p>then the total cost will be <code>1 + 1 + 2 = 4</code>.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">formingMagicSquare</span>(<span class="hljs-params">s</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> magicSquare = [</span><br><span class="line">        [<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>],</span><br><span class="line">        [<span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>],</span><br><span class="line">        [<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>],</span><br><span class="line">        [<span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>],</span><br><span class="line">        [<span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>],</span><br><span class="line">        [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],</span><br><span class="line">        [<span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>],</span><br><span class="line">        [<span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>]    </span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> inputData = s.reduce(<span class="hljs-function">(<span class="hljs-params">target, array</span>) =&gt;</span> &#123; </span><br><span class="line">        target.push(...array);</span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.min(...magicSquare.reduce(<span class="hljs-function">(<span class="hljs-params">target, ms</span>) =&gt;</span> &#123; </span><br><span class="line">        target.push(ms.reduce(<span class="hljs-function">(<span class="hljs-params">innerTarget, number, innerIndex</span>) =&gt;</span> &#123; </span><br><span class="line">            innerTarget += <span class="hljs-built_in">Math</span>.abs(inputData[innerIndex] - number);</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">return</span> innerTarget;</span><br><span class="line">        &#125;, <span class="hljs-number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/07/29/algorithm/hackerrank/25_FormingAMagicSquare/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Cats and a Mouse</title>
      <link>https://alleyful.github.io/2019/07/27/algorithm/hackerrank/24_CatsAndAMouse/</link>
      <guid>https://alleyful.github.io/2019/07/27/algorithm/hackerrank/24_CatsAndAMouse/</guid>
      <pubDate>Fri, 26 Jul 2019 15:12:15 GMT</pubDate>
      <description>
      
        &lt;p&gt;Two cats and a mouse are at various positions on a line. You will be given their starting positions. Your task is to determine which cat will reach the mouse first, assuming the mouse doesn’t move and the cats travel at equal speed. If the cats arrive at the same time, the mouse will be allowed to move and it will escape while they fight.&lt;/p&gt;
&lt;p&gt;You are given &lt;strong&gt;q&lt;/strong&gt; queries in the form of &lt;strong&gt;x&lt;/strong&gt;, &lt;strong&gt;y&lt;/strong&gt;, and &lt;strong&gt;z&lt;/strong&gt; representing the respective positions for cats &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;B&lt;/strong&gt;, and for mouse &lt;strong&gt;C&lt;/strong&gt;. Complete the function &lt;code&gt;catAndMouse&lt;/code&gt; to return the appropriate answer to each query, which will be printed on a new line.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If cat &lt;strong&gt;A&lt;/strong&gt; catches the mouse first, print &lt;code&gt;Cat A&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If cat &lt;strong&gt;B&lt;/strong&gt; catches the mouse first, print &lt;code&gt;Cat B&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If both cats reach the mouse at the same time, print &lt;code&gt;Mouse C&lt;/code&gt; as the two cats fight and mouse escapes.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, cat &lt;strong&gt;A&lt;/strong&gt; is at position &lt;code&gt;x = 2&lt;/code&gt; and cat &lt;strong&gt;B&lt;/strong&gt; is at &lt;code&gt;y = 5&lt;/code&gt;. If mouse &lt;strong&gt;C&lt;/strong&gt; is at position &lt;code&gt;z = 4&lt;/code&gt;, it is &lt;strong&gt;2&lt;/strong&gt; units from cat &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;1&lt;/strong&gt;unit from cat &lt;strong&gt;B&lt;/strong&gt;. Cat &lt;strong&gt;B&lt;/strong&gt; will catch the mouse.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Two cats and a mouse are at various positions on a line. You will be given their starting positions. Your task is to determine which cat will reach the mouse first, assuming the mouse doesn’t move and the cats travel at equal speed. If the cats arrive at the same time, the mouse will be allowed to move and it will escape while they fight.</p><p>You are given <strong>q</strong> queries in the form of <strong>x</strong>, <strong>y</strong>, and <strong>z</strong> representing the respective positions for cats <strong>A</strong> and <strong>B</strong>, and for mouse <strong>C</strong>. Complete the function <code>catAndMouse</code> to return the appropriate answer to each query, which will be printed on a new line.</p><ul><li>If cat <strong>A</strong> catches the mouse first, print <code>Cat A</code>.</li><li>If cat <strong>B</strong> catches the mouse first, print <code>Cat B</code>.</li><li>If both cats reach the mouse at the same time, print <code>Mouse C</code> as the two cats fight and mouse escapes.  </li></ul><p>For example, cat <strong>A</strong> is at position <code>x = 2</code> and cat <strong>B</strong> is at <code>y = 5</code>. If mouse <strong>C</strong> is at position <code>z = 4</code>, it is <strong>2</strong> units from cat <strong>A</strong> and <strong>1</strong>unit from cat <strong>B</strong>. Cat <strong>B</strong> will catch the mouse.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the catAndMouse function in the editor below. It should return one of the three strings as described.</p><p>catAndMouse has the following parameter(s):</p><ul><li>x: an integer, Cat <strong>A</strong>‘s position</li><li>y: an integer, Cat <strong>B</strong>‘s position</li><li>z: an integer, Mouse <strong>C</strong>‘s position</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains a single integer, <strong>q</strong>, denoting the number of queries.<br>Each of the <strong>q</strong> subsequent lines contains three space-separated integers describing the respective values of <strong>x</strong> (cat <strong>A</strong>‘s location), <strong>y</strong> (cat <strong>B</strong>‘s location), and <strong>z</strong> (mouse <strong>C</strong>‘s location).</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;q%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;x,y,z%5Cleq&space;100" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each query, return <code>Cat A</code> if cat <strong>A</strong> catches the mouse first, <code>Cat B</code> if cat <strong>B</strong> catches the mouse first, or <code>Mouse C</code> if the mouse escapes.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1 2 3</span><br><span class="line">1 3 2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cat B</span><br><span class="line">Mouse C</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>Query 0: The positions of the cats and mouse are shown below: </p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/catsAndAMouse-01.png" alt></p><p>Cat <strong>B</strong> will catch the mouse first, so we print Cat B on a new line.</p><p>Query 1: In this query, cats <strong>A</strong> and <strong>B</strong> reach mouse <strong>C</strong> at the exact same time: </p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/catsAndAMouse-02.png" alt></p><p>Because the mouse escapes, we print <code>Mouse C</code> on a new line.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">catAndMouse</span>(<span class="hljs-params">x, y, z</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> catA = <span class="hljs-built_in">Math</span>.abs(z - x);</span><br><span class="line">    <span class="hljs-keyword">const</span> catB = <span class="hljs-built_in">Math</span>.abs(z - y);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> catA &gt; catB ? <span class="hljs-string">'Cat B'</span>: (catA &lt; catB ? <span class="hljs-string">'Cat A'</span> : <span class="hljs-string">'Mouse C'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/07/27/algorithm/hackerrank/24_CatsAndAMouse/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Electronics Shop</title>
      <link>https://alleyful.github.io/2019/07/26/algorithm/hackerrank/23_ElectronicsShop/</link>
      <guid>https://alleyful.github.io/2019/07/26/algorithm/hackerrank/23_ElectronicsShop/</guid>
      <pubDate>Thu, 25 Jul 2019 15:18:51 GMT</pubDate>
      <description>
      
        &lt;p&gt;Monica wants to buy a keyboard and a USB drive from her favorite electronics store. The store has several models of each. Monica wants to spend as much as possible for the &lt;strong&gt;2&lt;/strong&gt; items, given her budget.&lt;/p&gt;
&lt;p&gt;Given the price lists for the store’s keyboards and USB drives, and Monica’s budget, find and print the amount of money Monica will spend. If she doesn’t have enough money to both a keyboard and a USB drive, print -1 instead. She will buy only the two required items.&lt;/p&gt;
&lt;p&gt;For example, suppose she has &lt;code&gt;b = 60&lt;/code&gt; to spend. Three types of keyboards cost &lt;code&gt;keyboard = [40, 50, 60]&lt;/code&gt;. Two USB drives cost &lt;code&gt;drives = [5, 8, 12]&lt;/code&gt;. She could purchase a &lt;code&gt;40 keyboard + 12 USB drive = 52&lt;/code&gt;, or a &lt;code&gt;50 keyboard + 8 USB drive = 58&lt;/code&gt;. She chooses the latter. She can’t buy more than &lt;strong&gt;2&lt;/strong&gt; items so she can’t spend exactly &lt;strong&gt;60&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Monica wants to buy a keyboard and a USB drive from her favorite electronics store. The store has several models of each. Monica wants to spend as much as possible for the <strong>2</strong> items, given her budget.</p><p>Given the price lists for the store’s keyboards and USB drives, and Monica’s budget, find and print the amount of money Monica will spend. If she doesn’t have enough money to both a keyboard and a USB drive, print -1 instead. She will buy only the two required items.</p><p>For example, suppose she has <code>b = 60</code> to spend. Three types of keyboards cost <code>keyboard = [40, 50, 60]</code>. Two USB drives cost <code>drives = [5, 8, 12]</code>. She could purchase a <code>40 keyboard + 12 USB drive = 52</code>, or a <code>50 keyboard + 8 USB drive = 58</code>. She chooses the latter. She can’t buy more than <strong>2</strong> items so she can’t spend exactly <strong>60</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the getMoneySpent function in the editor below. It should return the maximum total price for the two items within Monica’s budget, or <strong>-1</strong> if she cannot afford both items.</p><p>getMoneySpent has the following parameter(s):</p><ul><li>keyboards: an array of integers representing keyboard prices</li><li>drives: an array of integers representing drive prices</li><li>b: the units of currency in Monica’s budget</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains three space-separated integers <strong>b</strong>, <strong>n</strong>, and <strong>m</strong>, her budget, the number of keyboard models and the number of USB drive models.<br>The second line contains <strong>n</strong> space-separated integers <strong>keyboard[i]</strong>, the prices of each keyboard model.<br>The third line contains <strong>m</strong> space-separated integers <strong>drives</strong>, the prices of the USB drives.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n,&space;m%5Cleq&space;1000" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;b%5Cleq&space;10%5E%7B6%7D" alt></li><li>The price of each item is in the inclusive range <img src="https://latex.codecogs.com/gif.latex?%5Cleft&space;%5B&space;1,&space;10%5E%7B6%7D&space;%5Cright&space;%5D" alt>.</li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single integer denoting the amount of money Monica will spend. If she doesn’t have enough money to buy one keyboard and one USB drive, print -1 instead.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10 2 3</span><br><span class="line">3 1</span><br><span class="line">5 2 8</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>She can buy the <img src="https://latex.codecogs.com/gif.latex?2%5E%7Bnd%7D" alt> keyboard and the <img src="https://latex.codecogs.com/gif.latex?3%5E%7Brd%7D" alt> USB drive for a total cost of <code>8 + 1 = 9</code>.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 1 1</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>There is no way to buy one keyboard and one USB drive because <code>4 + 5 &gt; 5</code>, so we print <strong>-1</strong>.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMoneySpent</span>(<span class="hljs-params">keyboards, drives, b</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> result = keyboards.reduce(<span class="hljs-function">(<span class="hljs-params">target, keyboard</span>) =&gt;</span> &#123; </span><br><span class="line">        target.push(</span><br><span class="line">            ...drives.reduce(<span class="hljs-function">(<span class="hljs-params">innerTarget, drive</span>) =&gt;</span> &#123; </span><br><span class="line">                innerTarget.push(keyboard + drive);</span><br><span class="line">                <span class="hljs-keyword">return</span> innerTarget;</span><br><span class="line">            &#125;, [])</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []).filter(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v &lt;= b);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> result.length &gt; <span class="hljs-number">0</span> ? <span class="hljs-built_in">Math</span>.max(...result) : <span class="hljs-number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/07/26/algorithm/hackerrank/23_ElectronicsShop/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Counting Valleys</title>
      <link>https://alleyful.github.io/2019/07/25/algorithm/hackerrank/22_CountingValleys/</link>
      <guid>https://alleyful.github.io/2019/07/25/algorithm/hackerrank/22_CountingValleys/</guid>
      <pubDate>Wed, 24 Jul 2019 15:03:27 GMT</pubDate>
      <description>
      
        &lt;p&gt;Gary is an avid hiker. He tracks his hikes meticulously, paying close attention to small details like topography. During his last hike he took exactly &lt;strong&gt;n&lt;/strong&gt; steps. For every step he took, he noted if it was an uphill, &lt;strong&gt;U&lt;/strong&gt;, or a downhill, &lt;strong&gt;D&lt;/strong&gt; step. Gary’s hikes start and end at sea level and each step up or down represents a &lt;strong&gt;1&lt;/strong&gt; unit change in altitude. We define the following terms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A mountain is a sequence of consecutive steps above sea level, starting with a step up from sea level and ending with a step down to sea level.  &lt;/li&gt;
&lt;li&gt;A valley is a sequence of consecutive steps below sea level, starting with a step down from sea level and ending with a step up to sea level.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given Gary’s sequence of up and down steps during his last hike, find and print the number of valleys he walked through.&lt;/p&gt;
&lt;p&gt;For example, if Gary’s path is &lt;code&gt;s = [DDUUUUDD]&lt;/code&gt;, he first enters a valley &lt;strong&gt;2&lt;/strong&gt; units deep. Then he climbs out an up onto a mountain &lt;strong&gt;2&lt;/strong&gt; units high. Finally, he returns to sea level and ends his hike.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Gary is an avid hiker. He tracks his hikes meticulously, paying close attention to small details like topography. During his last hike he took exactly <strong>n</strong> steps. For every step he took, he noted if it was an uphill, <strong>U</strong>, or a downhill, <strong>D</strong> step. Gary’s hikes start and end at sea level and each step up or down represents a <strong>1</strong> unit change in altitude. We define the following terms:</p><ul><li>A mountain is a sequence of consecutive steps above sea level, starting with a step up from sea level and ending with a step down to sea level.  </li><li>A valley is a sequence of consecutive steps below sea level, starting with a step down from sea level and ending with a step up to sea level.  </li></ul><p>Given Gary’s sequence of up and down steps during his last hike, find and print the number of valleys he walked through.</p><p>For example, if Gary’s path is <code>s = [DDUUUUDD]</code>, he first enters a valley <strong>2</strong> units deep. Then he climbs out an up onto a mountain <strong>2</strong> units high. Finally, he returns to sea level and ends his hike.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the countingValleys function in the editor below. It must return an integer that denotes the number of valleys Gary traversed.</p><p>countingValleys has the following parameter(s):</p><ul><li>n: the number of steps Gary takes</li><li>s: a string describing his path</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>n</strong>, the number of steps in Gary’s hike.<br>The second line contains a single string <strong>s</strong>, of <strong>n</strong> characters that describe his path.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;n%5Cleq&space;10%5E%7B6%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?s%5Bi%5D%5Cin&space;%5Cleft&space;%7B&space;UD&space;%5Cright&space;%7D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single integer that denotes the number of valleys Gary walked through during his hike.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">UDDDUDUU</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>If we represent _ as sea level, a step up as /, and a step down as , Gary’s hike can be drawn as:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_/\      _</span><br><span class="line">   \    /</span><br><span class="line">    \/\/</span><br></pre></td></tr></table></figure><p>He enters and leaves one valley.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">countingValleys</span>(<span class="hljs-params">n, s</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> level = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    [...s].reduce(<span class="hljs-function">(<span class="hljs-params">target, step</span>) =&gt;</span> &#123;</span><br><span class="line">        step.match(<span class="hljs-regexp">/u/i</span>) ? level++ : level--;</span><br><span class="line">        (!target &amp;&amp; level &gt;= <span class="hljs-number">0</span>) &amp;&amp; (result++);</span><br><span class="line">        target = !!(level &gt;= <span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, <span class="hljs-literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/07/25/algorithm/hackerrank/22_CountingValleys/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Drawing Book</title>
      <link>https://alleyful.github.io/2019/07/24/algorithm/hackerrank/21_DrawingBook/</link>
      <guid>https://alleyful.github.io/2019/07/24/algorithm/hackerrank/21_DrawingBook/</guid>
      <pubDate>Wed, 24 Jul 2019 02:48:45 GMT</pubDate>
      <description>
      
        &lt;p&gt;Brie’s Drawing teacher asks her class to open their books to a page number. Brie can either start turning pages from the front of the book or from the back of the book. She always turns pages one at a time. When she opens the book, page &lt;strong&gt;1&lt;/strong&gt; is always on the right side:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/drawingBook-01.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;When she flips page &lt;strong&gt;1&lt;/strong&gt;, she sees pages &lt;strong&gt;2&lt;/strong&gt; and &lt;strong&gt;3&lt;/strong&gt;. Each page except the last page will always be printed on both sides. The last page may only be printed on the front, given the length of the book. If the book is &lt;strong&gt;n&lt;/strong&gt; pages long, and she wants to turn to page &lt;strong&gt;p&lt;/strong&gt;, what is the minimum number of pages she will turn? She can start at the beginning or the end of the book.&lt;/p&gt;
&lt;p&gt;Given &lt;strong&gt;n&lt;/strong&gt; and &lt;strong&gt;p&lt;/strong&gt;, find and print the minimum number of pages Brie must turn in order to arrive at page &lt;strong&gt;p&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Brie’s Drawing teacher asks her class to open their books to a page number. Brie can either start turning pages from the front of the book or from the back of the book. She always turns pages one at a time. When she opens the book, page <strong>1</strong> is always on the right side:</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/drawingBook-01.png" alt></p><p>When she flips page <strong>1</strong>, she sees pages <strong>2</strong> and <strong>3</strong>. Each page except the last page will always be printed on both sides. The last page may only be printed on the front, given the length of the book. If the book is <strong>n</strong> pages long, and she wants to turn to page <strong>p</strong>, what is the minimum number of pages she will turn? She can start at the beginning or the end of the book.</p><p>Given <strong>n</strong> and <strong>p</strong>, find and print the minimum number of pages Brie must turn in order to arrive at page <strong>p</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the pageCount function in the editor below. It should return the minimum number of pages Brie must turn.</p><p>pageCount has the following parameter(s):</p><ul><li>n: the number of pages in the book</li><li>p: the page number to turn to</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>n</strong>, the number of pages in the book.<br>The second line contains an integer, <strong>p</strong>, the page that Brie’s teacher wants her to turn to.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;10%5E%7B5%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;p%5Cleq&space;n" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print an integer denoting the minimum number of pages Brie must turn to get to page <strong>p</strong>.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>If Brie starts turning from page <strong>1</strong>, she only needs to turn <strong>1</strong> page:</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/drawingBook-02.png" alt></p><p>If Brie starts turning from page <strong>6</strong>, she needs to turn <strong>2</strong> pages:</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/drawingBook-03.png" alt></p><p>Because we want to print the minumum number of page turns, we print <strong>1</strong> as our answer.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">4</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>If Brie starts turning from page <strong>1</strong>, she needs to turn <strong>2</strong> pages:</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/drawingBook-04.png" alt></p><p>If Brie starts turning from page <strong>5</strong>, she doesn’t need to turn any pages:</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/drawingBook-05.png" alt></p><p>Because we want to print the minimum number of page turns, we print <strong>0</strong> as our answer.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pageCount</span>(<span class="hljs-params">n, p</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> n / <span class="hljs-number">2</span> &lt; p ? <span class="hljs-built_in">Math</span>.floor(n / <span class="hljs-number">2</span>) - <span class="hljs-built_in">Math</span>.floor(p / <span class="hljs-number">2</span>) : <span class="hljs-built_in">Math</span>.floor(p / <span class="hljs-number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/07/24/algorithm/hackerrank/21_DrawingBook/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sock Merchant</title>
      <link>https://alleyful.github.io/2019/07/23/algorithm/hackerrank/20_SockMerchant/</link>
      <guid>https://alleyful.github.io/2019/07/23/algorithm/hackerrank/20_SockMerchant/</guid>
      <pubDate>Mon, 22 Jul 2019 15:13:45 GMT</pubDate>
      <description>
      
        &lt;p&gt;John works at a clothing store. He has a large pile of socks that he must pair by color for sale. Given an array of integers representing the color of each sock, determine how many pairs of socks with matching colors there are.&lt;/p&gt;
&lt;p&gt;For example, there are &lt;strong&gt;n = 7&lt;/strong&gt; socks with colors &lt;code&gt;ar = [1, 2, 1, 2, 1, 3, 2]&lt;/code&gt;. There is one pair of color &lt;em&gt;1&lt;/em&gt; and one of color &lt;em&gt;2&lt;/em&gt;. There are three odd socks left, one of each color. The number of pairs is &lt;em&gt;2&lt;/em&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>John works at a clothing store. He has a large pile of socks that he must pair by color for sale. Given an array of integers representing the color of each sock, determine how many pairs of socks with matching colors there are.</p><p>For example, there are <strong>n = 7</strong> socks with colors <code>ar = [1, 2, 1, 2, 1, 3, 2]</code>. There is one pair of color <em>1</em> and one of color <em>2</em>. There are three odd socks left, one of each color. The number of pairs is <em>2</em>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the sockMerchant function in the editor below. It must return an integer representing the number of matching pairs of socks that are available.</p><p>sockMerchant has the following parameter(s):</p><ul><li>n: the number of socks in the pile</li><li>ar: the colors of each sock</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>n</strong>, the number of socks represented in <em>ar</em>. The second line contains <em>n</em> space-separated integers describing the colors <em>ar[i]</em> of the socks in the pile.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;ar%5Bi%5D%5Cleq&space;100" alt> where <img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;i&space;%3C&space;n" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Return the total number of matching pairs of socks that John can sell.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">10 20 20 10 10 30 50 10 20</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/sock.png" alt></p><p>John can match three pairs of socks.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sockMerchant</span>(<span class="hljs-params">n, ar</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> socks = [];</span><br><span class="line">    <span class="hljs-keyword">return</span> ar.reduce(<span class="hljs-function">(<span class="hljs-params">target, sock</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> index = socks.findIndex(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v === sock);</span><br><span class="line">        index &gt;= <span class="hljs-number">0</span></span><br><span class="line">            ? (socks.splice(index, <span class="hljs-number">1</span>), target++)</span><br><span class="line">            : (socks.push(sock))</span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/07/23/algorithm/hackerrank/20_SockMerchant/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
