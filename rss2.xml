<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ALLEY</title>
    <link>https://alleyful.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>alley&#39;s blog for study</description>
    <pubDate>Wed, 19 Jun 2019 15:54:17 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>프로그래머스 - 이상한 문자 만들기</title>
      <link>https://alleyful.github.io/2019/06/20/algorithm/programmers/level1-17/</link>
      <guid>https://alleyful.github.io/2019/06/20/algorithm/programmers/level1-17/</guid>
      <pubDate>Wed, 19 Jun 2019 15:50:49 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;문자열 s는 한 개 이상의 단어로 구성되어 있습니다.&lt;br&gt;각 단어는 하나 이상의 공백문자로 구분되어 있습니다.&lt;br&gt;각 단어의 짝수번째 알파벳은 대문자로, 홀수번째 알파벳은 소문자로 바꾼 문자열을 리턴하는 함수, solution을 완성하세요.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>문자열 s는 한 개 이상의 단어로 구성되어 있습니다.<br>각 단어는 하나 이상의 공백문자로 구분되어 있습니다.<br>각 단어의 짝수번째 알파벳은 대문자로, 홀수번째 알파벳은 소문자로 바꾼 문자열을 리턴하는 함수, solution을 완성하세요.</p><a id="more"></a><br><h2 id="제한-사항"><a href="#제한-사항" class="headerlink" title="제한 사항"></a>제한 사항</h2><p>문자열 전체의 짝/홀수 인덱스가 아니라, 단어(공백을 기준)별로 짝/홀수 인덱스를 판단해야합니다.<br>첫 번째 글자는 0번째 인덱스로 보아 짝수번째 알파벳으로 처리해야 합니다.</p><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="left">s</th><th align="left">return</th></tr></thead><tbody><tr><td align="left">“try hello world”</td><td align="left">“TrY HeLlO WoRlD”</td></tr></tbody></table><h3 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h3><ul><li>“try hello world”는 세 단어 “try”, “hello”, “world”로 구성되어 있습니다. </li><li>각 단어의 짝수번째 문자를 대문자로, 홀수번째 문자를 소문자로 바꾸면 “TrY”, “HeLlO”, “WoRlD”입니다. </li><li>따라서 “TrY HeLlO WoRlD” 를 리턴합니다.</li></ul><br><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">s</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> s.split(<span class="hljs-string">' '</span>).reduce(<span class="hljs-function">(<span class="hljs-params">target, string</span>) =&gt;</span> &#123;</span><br><span class="line">        target.push(</span><br><span class="line">            [...string].reduce(<span class="hljs-function">(<span class="hljs-params">target, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">                target.push(index % <span class="hljs-number">2</span> === <span class="hljs-number">0</span> ? item.toUpperCase() : item.toLowerCase())</span><br><span class="line">                </span><br><span class="line">                <span class="hljs-keyword">return</span> target;</span><br><span class="line">            &#125;, []).join(<span class="hljs-string">''</span>)</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []).join(<span class="hljs-string">' '</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/06/20/algorithm/programmers/level1-17/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 약수의 합</title>
      <link>https://alleyful.github.io/2019/06/19/algorithm/programmers/level1-16/</link>
      <guid>https://alleyful.github.io/2019/06/19/algorithm/programmers/level1-16/</guid>
      <pubDate>Tue, 18 Jun 2019 15:52:49 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;자연수 n을 입력받아 n의 약수를 모두 더한 값을 리턴하는 함수, solution을 완성해주세요.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>자연수 n을 입력받아 n의 약수를 모두 더한 값을 리턴하는 함수, solution을 완성해주세요.</p><a id="more"></a><br><h2 id="제한-사항"><a href="#제한-사항" class="headerlink" title="제한 사항"></a>제한 사항</h2><p>n은 0 이상 3000이하인 자연수입니다.</p><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="center">n</th><th align="center">return</th></tr></thead><tbody><tr><td align="center">12</td><td align="center">28</td></tr><tr><td align="center">5</td><td align="center">6</td></tr></tbody></table><br><h2 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h2><ul><li><p>입출력 예 #1</p><ul><li>12의 약수는 1, 2, 3, 4, 6, 12입니다. 이를 모두 더하면 28입니다.</li></ul></li><li><p>입출력 예 #2</p><ul><li>5의 약수는 1, 5입니다. 이를 모두 더하면 6입니다.</li></ul></li></ul><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.sqrt(n))).fill(<span class="hljs-number">0</span>).reduce(<span class="hljs-function">(<span class="hljs-params">target, arr, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> number = index + <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">let</span> numberLast = n / number;</span><br><span class="line">        n % number === <span class="hljs-number">0</span> &amp;&amp; (target = target + (numberLast === number ? number : number + numberLast))</span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/06/19/algorithm/programmers/level1-16/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 시저 암호</title>
      <link>https://alleyful.github.io/2019/06/18/algorithm/programmers/level1-15/</link>
      <guid>https://alleyful.github.io/2019/06/18/algorithm/programmers/level1-15/</guid>
      <pubDate>Mon, 17 Jun 2019 15:52:18 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;어떤 문장의 각 알파벳을 일정한 거리만큼 밀어서 다른 알파벳으로 바꾸는 암호화 방식을 시저 암호라고 합니다.&lt;br&gt;예를 들어 AB는 1만큼 밀면 BC가 되고, 3만큼 밀면 DE가 됩니다.&lt;br&gt;z는 1만큼 밀면 a가 됩니다.&lt;br&gt;문자열 s와 거리 n을 입력받아 s를 n만큼 민 암호문을 만드는 함수, solution을 완성해 보세요.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>어떤 문장의 각 알파벳을 일정한 거리만큼 밀어서 다른 알파벳으로 바꾸는 암호화 방식을 시저 암호라고 합니다.<br>예를 들어 AB는 1만큼 밀면 BC가 되고, 3만큼 밀면 DE가 됩니다.<br>z는 1만큼 밀면 a가 됩니다.<br>문자열 s와 거리 n을 입력받아 s를 n만큼 민 암호문을 만드는 함수, solution을 완성해 보세요.</p><a id="more"></a><br><h2 id="제한-조건"><a href="#제한-조건" class="headerlink" title="제한 조건"></a>제한 조건</h2><ul><li>공백은 아무리 밀어도 공백입니다.</li><li>s는 알파벳 소문자, 대문자, 공백으로만 이루어져 있습니다.</li><li>s의 길이는 8000이하입니다.</li><li>n은 1 이상, 25이하인 자연수입니다.</li></ul><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="center">s</th><th align="center">n</th><th align="center">result</th></tr></thead><tbody><tr><td align="center">“AB”</td><td align="center">1</td><td align="center">“BC”</td></tr><tr><td align="center">“z”</td><td align="center">1</td><td align="center">“a”</td></tr><tr><td align="center">“a B z”</td><td align="center">4</td><td align="center">“e F d”</td></tr></tbody></table><br><hr><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">s, n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//ASCII : A~Z(65~90) , a~z(97~122)</span></span><br><span class="line">    <span class="hljs-keyword">return</span> [...s].reduce(<span class="hljs-function">(<span class="hljs-params">target, string, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> asciiCode = s.charCodeAt(index)</span><br><span class="line">        <span class="hljs-keyword">let</span> changedCode = asciiCode + n</span><br><span class="line">        <span class="hljs-keyword">let</span> sCode = asciiCode &lt; <span class="hljs-number">65</span> ? asciiCode : (</span><br><span class="line">            (asciiCode &gt;= <span class="hljs-number">65</span> &amp;&amp; asciiCode &lt;= <span class="hljs-number">90</span>) </span><br><span class="line">            ? (changedCode &gt; <span class="hljs-number">90</span> ? changedCode - <span class="hljs-number">26</span> : changedCode)</span><br><span class="line">            : (changedCode &gt; <span class="hljs-number">122</span> ? changedCode - <span class="hljs-number">26</span> : changedCode)</span><br><span class="line">        )</span><br><span class="line">        target.push(<span class="hljs-built_in">String</span>.fromCharCode(sCode))</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []).join(<span class="hljs-string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">s, n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">s || <span class="hljs-string">''</span></span>).<span class="hljs-params">split</span>(<span class="hljs-params"><span class="hljs-string">''</span></span>).<span class="hljs-params">reduce</span>(<span class="hljs-params">(target,item,index</span>) =&gt;</span> &#123;</span><br><span class="line">        target += (</span><br><span class="line">            item == <span class="hljs-string">' '</span> </span><br><span class="line">            ? <span class="hljs-string">' '</span> </span><br><span class="line">            : <span class="hljs-built_in">String</span>.fromCharCode((s.charCodeAt(index)&gt;<span class="hljs-number">90</span>)</span><br><span class="line">                    ? (s.charCodeAt(index)+n<span class="hljs-number">-97</span>)%<span class="hljs-number">26</span>+<span class="hljs-number">97</span> </span><br><span class="line">                    : (s.charCodeAt(index)+n<span class="hljs-number">-65</span>)%<span class="hljs-number">26</span>+<span class="hljs-number">65</span> )</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, <span class="hljs-string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/06/18/algorithm/programmers/level1-15/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 문자열을 정수로 바꾸기</title>
      <link>https://alleyful.github.io/2019/06/18/algorithm/programmers/level1-14/</link>
      <guid>https://alleyful.github.io/2019/06/18/algorithm/programmers/level1-14/</guid>
      <pubDate>Mon, 17 Jun 2019 15:01:38 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;문자열 s를 숫자로 변환한 결과를 반환하는 함수, solution을 완성하세요.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>문자열 s를 숫자로 변환한 결과를 반환하는 함수, solution을 완성하세요.</p><a id="more"></a><br><h2 id="제한-조건"><a href="#제한-조건" class="headerlink" title="제한 조건"></a>제한 조건</h2><ul><li>s의 길이는 1 이상 5이하입니다.</li><li>s의 맨앞에는 부호(+, -)가 올 수 있습니다.</li><li>s는 부호와 숫자로만 이루어져있습니다.</li><li>s는 0으로 시작하지 않습니다.</li></ul><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><p>예를들어 str이 1234이면 1234를 반환하고, -1234이면 -1234를 반환하면 됩니다.<br>str은 부호(+,-)와 숫자로만 구성되어 있고, 잘못된 값이 입력되는 경우는 없습니다.</p><br><hr><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">s</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Number</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">s</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> +s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/06/18/algorithm/programmers/level1-14/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 문자열 다루기 기본</title>
      <link>https://alleyful.github.io/2019/06/17/algorithm/programmers/level1-13/</link>
      <guid>https://alleyful.github.io/2019/06/17/algorithm/programmers/level1-13/</guid>
      <pubDate>Mon, 17 Jun 2019 14:48:38 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;문자열 s의 길이가 4 혹은 6이고, 숫자로만 구성돼있는지 확인해주는 함수, solution을 완성하세요. 예를 들어 s가 a234이면 False를 리턴하고 1234라면 True를 리턴하면 됩니다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>문자열 s의 길이가 4 혹은 6이고, 숫자로만 구성돼있는지 확인해주는 함수, solution을 완성하세요. 예를 들어 s가 a234이면 False를 리턴하고 1234라면 True를 리턴하면 됩니다.</p><a id="more"></a><br><h2 id="제한-사항"><a href="#제한-사항" class="headerlink" title="제한 사항"></a>제한 사항</h2><p>s는 길이 1 이상, 길이 8 이하인 문자열입니다.</p><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="center">s</th><th align="center">return</th></tr></thead><tbody><tr><td align="center">“a234”</td><td align="center">false</td></tr><tr><td align="center">“1234”</td><td align="center">true</td></tr></tbody></table><br><hr><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">s</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> !(s.match(<span class="hljs-regexp">/\D/g</span>)) &amp;&amp; (s.length === <span class="hljs-number">4</span> || s.length === <span class="hljs-number">6</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">s</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-regexp">/^\d&#123;6&#125;$|^\d&#123;4&#125;$/</span>.test(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/06/17/algorithm/programmers/level1-13/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 문자열 내림차순으로 배치하기</title>
      <link>https://alleyful.github.io/2019/06/17/algorithm/programmers/level1-12/</link>
      <guid>https://alleyful.github.io/2019/06/17/algorithm/programmers/level1-12/</guid>
      <pubDate>Mon, 17 Jun 2019 14:28:38 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;문자열 s에 나타나는 문자를 큰것부터 작은 순으로 정렬해 새로운 문자열을 리턴하는 함수, solution을 완성해주세요.&lt;br&gt;s는 영문 대소문자로만 구성되어 있으며, 대문자는 소문자보다 작은 것으로 간주합니다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>문자열 s에 나타나는 문자를 큰것부터 작은 순으로 정렬해 새로운 문자열을 리턴하는 함수, solution을 완성해주세요.<br>s는 영문 대소문자로만 구성되어 있으며, 대문자는 소문자보다 작은 것으로 간주합니다.</p><a id="more"></a><br><h2 id="제한-사항"><a href="#제한-사항" class="headerlink" title="제한 사항"></a>제한 사항</h2><p>str은 길이 1 이상인 문자열입니다.</p><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="center">s</th><th align="center">return</th></tr></thead><tbody><tr><td align="center">“Zbcdefg”</td><td align="center">“gfedcbZ”</td></tr></tbody></table><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">s</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> [...s].sort().reverse().join(<span class="hljs-string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/06/17/algorithm/programmers/level1-12/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 문자열 내 p와 y의 개수</title>
      <link>https://alleyful.github.io/2019/06/17/algorithm/programmers/level1-11/</link>
      <guid>https://alleyful.github.io/2019/06/17/algorithm/programmers/level1-11/</guid>
      <pubDate>Mon, 17 Jun 2019 14:26:40 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;대문자와 소문자가 섞여있는 문자열 s가 주어집니다.&lt;br&gt;s에 ‘p’의 개수와 ‘y’의 개수를 비교해 같으면 True, 다르면 False를 return 하는 solution를 완성하세요.&lt;br&gt;‘p’, ‘y’ 모두 하나도 없는 경우는 항상 True를 리턴합니다. 단, 개수를 비교할 때 대문자와 소문자는 구별하지 않습니다.&lt;br&gt;예를들어 s가 pPoooyY면 true를 return하고 Pyy라면 false를 return합니다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>대문자와 소문자가 섞여있는 문자열 s가 주어집니다.<br>s에 ‘p’의 개수와 ‘y’의 개수를 비교해 같으면 True, 다르면 False를 return 하는 solution를 완성하세요.<br>‘p’, ‘y’ 모두 하나도 없는 경우는 항상 True를 리턴합니다. 단, 개수를 비교할 때 대문자와 소문자는 구별하지 않습니다.<br>예를들어 s가 pPoooyY면 true를 return하고 Pyy라면 false를 return합니다.</p><a id="more"></a><br><h2 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h2><ul><li>문자열 s의 길이 : 50 이하의 자연수</li><li>문자열 s는 알파벳으로만 이루어져 있습니다.</li></ul><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="center">s</th><th align="center">answer</th></tr></thead><tbody><tr><td align="center">pPoooyY</td><td align="center">true</td></tr><tr><td align="center">Pyy</td><td align="center">false</td></tr></tbody></table><br><h2 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h2><ul><li><p>입출력 예 #1</p><ul><li>‘p’의 개수 2개, ‘y’의 개수 2개로 같으므로 true를 return 합니다.</li></ul></li><li><p>입출력 예 #2</p><ul><li>‘p’의 개수 1개, ‘y’의 개수 2개로 다르므로 false를 return 합니다.</li></ul></li></ul><br><hr><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">s</span>)</span>&#123;</span><br><span class="line">     <span class="hljs-keyword">let</span> pList = [...s].filter(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v === <span class="hljs-string">'p'</span> || v === <span class="hljs-string">'P'</span>);</span><br><span class="line">     <span class="hljs-keyword">let</span> yList = [...s].filter(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v === <span class="hljs-string">'y'</span> || v === <span class="hljs-string">'Y'</span>);</span><br><span class="line">   </span><br><span class="line">     <span class="hljs-keyword">return</span> pList.length === yList.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">s</span>)</span>&#123;</span><br><span class="line">     <span class="hljs-keyword">return</span> (s.match(<span class="hljs-regexp">/p/gi</span>) || []).length === (s.match(<span class="hljs-regexp">/y/gi</span>) || []).length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/06/17/algorithm/programmers/level1-11/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Day29 Bitwise AND</title>
      <link>https://alleyful.github.io/2019/06/17/algorithm/hackerrank/Day29_BitwiseAND/</link>
      <guid>https://alleyful.github.io/2019/06/17/algorithm/hackerrank/Day29_BitwiseAND/</guid>
      <pubDate>Mon, 17 Jun 2019 03:01:34 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Objective&quot;&gt;&lt;a href=&quot;#Objective&quot; class=&quot;headerlink&quot; title=&quot;Objective&quot;&gt;&lt;/a&gt;Objective&lt;/h2&gt;&lt;p&gt;Welcome to the last day! Today, we’re discussing bitwise operations. Check out the Tutorial tab for learning materials and an instructional video!&lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;Task&quot;&gt;&lt;a href=&quot;#Task&quot; class=&quot;headerlink&quot; title=&quot;Task&quot;&gt;&lt;/a&gt;Task&lt;/h2&gt;&lt;p&gt;Given set &lt;img src=&quot;https://latex.codecogs.com/svg.latex?S=%5Cleft&amp;space;%7B1,2,3,...,N&amp;space;%5Cright&amp;space;%7D&quot; alt&gt;. Find two integers,  A and B (where A &amp;lt; B ), from set S such that the value of A &amp;amp; B is the maximum possible and also less than a given integer, K.&lt;br&gt;In this case, &amp;amp; represents the bitwise AND operator.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><p>Welcome to the last day! Today, we’re discussing bitwise operations. Check out the Tutorial tab for learning materials and an instructional video!</p><br><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>Given set <img src="https://latex.codecogs.com/svg.latex?S=%5Cleft&space;%7B1,2,3,...,N&space;%5Cright&space;%7D" alt>. Find two integers,  A and B (where A &lt; B ), from set S such that the value of A &amp; B is the maximum possible and also less than a given integer, K.<br>In this case, &amp; represents the bitwise AND operator.</p><a id="more"></a><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer, T, the number of test cases.<br>Each of the T subsequent lines defines a test case as 2 space-separated integers, N and K, respectively.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/svg.latex?1%5Cleq&space;T%5Cleq&space;10%5E%7B3%7D" alt></li><li><img src="https://latex.codecogs.com/svg.latex?2%5Cleq&space;N%5Cleq&space;10%5E%7B3%7D" alt></li><li><img src="https://latex.codecogs.com/svg.latex?2%5Cleq&space;K%5Cleq&space;N" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each test case, print the maximum possible value of <img src="https://latex.codecogs.com/svg.latex?A&B" alt> on a new line.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">5 2</span><br><span class="line">8 5</span><br><span class="line">2 2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">4</span><br><span class="line">0</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p><img src="https://latex.codecogs.com/svg.latex?N&space;=&space;5,&space;K&space;=&space;2&space;S&space;=%5Cleft&space;%7B&space;1,2,3,4,5&space;%5Cright&space;%7D" alt></p><p>All possible values of  and  are:</p><ol><li><img src="https://latex.codecogs.com/svg.latex?A&space;=&space;1,&space;B&space;=&space;2;&space;A&B&space;=&space;0" alt></li><li><img src="https://latex.codecogs.com/svg.latex?A&space;=&space;1,&space;B&space;=&space;3;&space;A&B&space;=&space;1" alt></li><li><img src="https://latex.codecogs.com/svg.latex?A&space;=&space;1,&space;B&space;=&space;4;&space;A&B&space;=&space;0" alt></li><li><img src="https://latex.codecogs.com/svg.latex?A&space;=&space;1,&space;B&space;=&space;5;&space;A&B&space;=&space;1" alt></li><li><img src="https://latex.codecogs.com/svg.latex?A&space;=&space;2,&space;B&space;=&space;3;&space;A&B&space;=&space;2" alt></li><li><img src="https://latex.codecogs.com/svg.latex?A&space;=&space;2,&space;B&space;=&space;4;&space;A&B&space;=&space;0" alt></li><li><img src="https://latex.codecogs.com/svg.latex?A&space;=&space;2,&space;B&space;=&space;5;&space;A&B&space;=&space;0" alt></li><li><img src="https://latex.codecogs.com/svg.latex?A&space;=&space;3,&space;B&space;=&space;4;&space;A&B&space;=&space;0" alt></li><li><img src="https://latex.codecogs.com/svg.latex?A&space;=&space;3,&space;B&space;=&space;5;&space;A&B&space;=&space;1" alt></li><li><img src="https://latex.codecogs.com/svg.latex?A&space;=&space;4,&space;B&space;=&space;5;&space;A&B&space;=&space;4" alt></li></ol><p>The maximum possible value of A&amp;B that is also &lt; (K = 2) is 1, so we print 1 on a new line.</p><br><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findMax</span>(<span class="hljs-params">n, k</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> max = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="hljs-keyword">let</span> value = j &amp; i;</span><br><span class="line">            <span class="hljs-keyword">if</span> (value &lt; k &amp;&amp; value &gt; max) &#123;</span><br><span class="line">                max = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> t = <span class="hljs-built_in">parseInt</span>(readLine(), <span class="hljs-number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> tItr = <span class="hljs-number">0</span>; tItr &lt; t; tItr++) &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> nk = readLine().split(<span class="hljs-string">' '</span>);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">const</span> n = <span class="hljs-built_in">parseInt</span>(nk[<span class="hljs-number">0</span>], <span class="hljs-number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">const</span> k = <span class="hljs-built_in">parseInt</span>(nk[<span class="hljs-number">1</span>], <span class="hljs-number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-built_in">console</span>.log(findMax(n, k));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/06/17/algorithm/hackerrank/Day29_BitwiseAND/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Day28 RegEx, Patterns, and Intro to Databases</title>
      <link>https://alleyful.github.io/2019/06/17/algorithm/hackerrank/Day28_RegExPatternsAndIntroToDatabases/</link>
      <guid>https://alleyful.github.io/2019/06/17/algorithm/hackerrank/Day28_RegExPatternsAndIntroToDatabases/</guid>
      <pubDate>Mon, 17 Jun 2019 02:10:34 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Objective&quot;&gt;&lt;a href=&quot;#Objective&quot; class=&quot;headerlink&quot; title=&quot;Objective&quot;&gt;&lt;/a&gt;Objective&lt;/h2&gt;&lt;p&gt;Today, we’re working with regular expressions. Check out the Tutorial tab for learning materials and an instructional video!&lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;Task&quot;&gt;&lt;a href=&quot;#Task&quot; class=&quot;headerlink&quot; title=&quot;Task&quot;&gt;&lt;/a&gt;Task&lt;/h2&gt;&lt;p&gt;Consider a database table, Emails, which has the attributes First Name and Email ID. Given  rows of data simulating the Emails table, print an alphabetically-ordered list of people whose email address ends in .&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><p>Today, we’re working with regular expressions. Check out the Tutorial tab for learning materials and an instructional video!</p><br><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>Consider a database table, Emails, which has the attributes First Name and Email ID. Given  rows of data simulating the Emails table, print an alphabetically-ordered list of people whose email address ends in .</p><a id="more"></a><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer, , total number of rows in the table.<br>Each of the  subsequent lines contains  space-separated strings denoting a person’s first name and email ID, respectively.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><p>Each of the first names consists of lower case letters  only.<br>Each of the email IDs consists of lower case letters ,  and  only.<br>The length of the first name is no longer than 20.<br>The length of the email ID is no longer than 50.</p><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print an alphabetically-ordered list of first names for every user with a gmail account. Each name must be printed on a new line.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">riya riya@gmail.com</span><br><span class="line">julia julia@julia.me</span><br><span class="line">julia sjulia@gmail.com</span><br><span class="line">julia julia@gmail.com</span><br><span class="line">samantha samantha@gmail.com</span><br><span class="line">tanya tanya@gmail.com</span><br><span class="line">Sample Output</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">julia</span><br><span class="line">julia</span><br><span class="line">riya</span><br><span class="line">samantha</span><br><span class="line">tanya</span><br></pre></td></tr></table></figure><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> N = <span class="hljs-built_in">parseInt</span>(readLine(), <span class="hljs-number">10</span>);</span><br><span class="line">    <span class="hljs-keyword">const</span> patten = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">"@gmail.com"</span>);</span><br><span class="line">    <span class="hljs-keyword">const</span> names = [];</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> NItr = <span class="hljs-number">0</span>; NItr &lt; N; NItr++) &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> firstNameEmailID = readLine().split(<span class="hljs-string">' '</span>);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">const</span> firstName = firstNameEmailID[<span class="hljs-number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">const</span> emailID = firstNameEmailID[<span class="hljs-number">1</span>];</span><br><span class="line"></span><br><span class="line">        patten.test(emailID) &amp;&amp; names.push(firstName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    names.sort().forEach(<span class="hljs-function"><span class="hljs-params">name</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(name));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/06/17/algorithm/hackerrank/Day28_RegExPatternsAndIntroToDatabases/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Day26 Nested Logic</title>
      <link>https://alleyful.github.io/2019/06/17/algorithm/hackerrank/Day26_NestedLogic/</link>
      <guid>https://alleyful.github.io/2019/06/17/algorithm/hackerrank/Day26_NestedLogic/</guid>
      <pubDate>Mon, 17 Jun 2019 01:51:34 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Objective&quot;&gt;&lt;a href=&quot;#Objective&quot; class=&quot;headerlink&quot; title=&quot;Objective&quot;&gt;&lt;/a&gt;Objective&lt;/h2&gt;&lt;p&gt;Today’s challenge puts your understanding of nested conditional statements to the test. You already have the knowledge to complete this challenge, but check out the Tutorial tab for a video on testing!&lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;Task&quot;&gt;&lt;a href=&quot;#Task&quot; class=&quot;headerlink&quot; title=&quot;Task&quot;&gt;&lt;/a&gt;Task&lt;/h2&gt;&lt;p&gt;Your local library needs your help! Given the expected and actual return dates for a library book, create a program that calculates the fine (if any). The fee structure is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If the book is returned on or before the expected return date, no fine will be charged (i.e.: &lt;strong&gt;fine = 0&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;If the book is returned after the expected return day but still within the same calendar month and year as the expected return date, &lt;strong&gt;fine = 15 Hackos x (the number of days late)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If the book is returned after the expected return month but still within the same calendar year as the expected return date, the &lt;strong&gt;fine = 500 Hackos x (the number of months late)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If the book is returned after the calendar year in which it was expected, there is a fixed fine of &lt;strong&gt;10000 Hackos&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><p>Today’s challenge puts your understanding of nested conditional statements to the test. You already have the knowledge to complete this challenge, but check out the Tutorial tab for a video on testing!</p><br><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>Your local library needs your help! Given the expected and actual return dates for a library book, create a program that calculates the fine (if any). The fee structure is as follows:</p><ol><li>If the book is returned on or before the expected return date, no fine will be charged (i.e.: <strong>fine = 0</strong>).</li><li>If the book is returned after the expected return day but still within the same calendar month and year as the expected return date, <strong>fine = 15 Hackos x (the number of days late)</strong>.</li><li>If the book is returned after the expected return month but still within the same calendar year as the expected return date, the <strong>fine = 500 Hackos x (the number of months late)</strong>.</li><li>If the book is returned after the calendar year in which it was expected, there is a fixed fine of <strong>10000 Hackos</strong>.</li></ol><a id="more"></a><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains <strong>3</strong> space-separated integers denoting the respective <strong>day</strong>, <strong>month</strong>, and <strong>year</strong> on which the book was actually returned.<br>The second line contains <strong>3</strong> space-separated integers denoting the respective <strong>day</strong>, <strong>month</strong>, and <strong>year</strong> on which the book was expected to be returned (due date).</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= D &lt;= 31</li><li>1 &lt;= M &lt;= 12</li><li>1 &lt;= Y &lt;= 3000</li><li>It is guanranteed that the dates will be valid Gregorian calendar dates.</li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single integer denoting the library fine for the book received as input.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9 6 2015</span><br><span class="line">6 6 2015</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">45</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Given the following return dates: <br><br>Actual:  <strong>D<sub>a</sub> = 9, M<sub>a</sub> = 6, Y<sub>a</sub> = 2015</strong><br><br>Expected: <strong>D<sub>e</sub> = 6, M<sub>e</sub> = 6, Y<sub>e</sub> = 2015</strong></p><p>Because <strong>Y<sub>e</sub> = Y<sub>a</sub></strong>, we know it is less than a year late. <br><br>Because <strong>M<sub>e</sub> = M<sub>a</sub></strong>, we know it’s less than a month late. <br><br>Because <strong>D<sub>e</sub> = D<sub>a</sub></strong>, we know that it was returned late (but still within the same month and year).<br></p><p>Per the library’s fee structure, we know that our fine will be <strong>15 Hackos X (# days late)</strong>. We then print the result of <strong>15 X (D<sub>a</sub> - D<sub>e</sub>) = 15 X (9 - 6) = 45</strong> as our output.</p><br><br><hr><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">processData</span>(<span class="hljs-params">input</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//Enter your code here</span></span><br><span class="line">    <span class="hljs-keyword">let</span> fine = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">const</span> [actual, expected] = input.split(<span class="hljs-string">'\n'</span>).map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> [day, month, year] = item.split(<span class="hljs-string">' '</span>).map(<span class="hljs-built_in">Number</span>);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> &#123; day, month, year &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    (</span><br><span class="line">        actual.year === expected.year &amp;&amp;</span><br><span class="line">        actual.month === expected.month &amp;&amp;</span><br><span class="line">        actual.day &gt; expected.day</span><br><span class="line">    ) &amp;&amp; (fine = (actual.day - expected.day) * <span class="hljs-number">15</span>);</span><br><span class="line"></span><br><span class="line">    (</span><br><span class="line">        actual.year === expected.year &amp;&amp;</span><br><span class="line">        actual.month &gt; expected.month</span><br><span class="line">    ) &amp;&amp; (fine = (actual.month - expected.month) * <span class="hljs-number">500</span>);</span><br><span class="line"></span><br><span class="line">    (actual.year &gt; expected.year) &amp;&amp; (fine = <span class="hljs-number">10000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(fine);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">processData</span>(<span class="hljs-params">input</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> data = input.split(<span class="hljs-string">"\n"</span>); </span><br><span class="line">    <span class="hljs-keyword">const</span> [actual, expected] = data.map(<span class="hljs-function"><span class="hljs-params">line</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> [day, month, year] = line.split(<span class="hljs-string">" "</span>).map(<span class="hljs-built_in">Number</span>); </span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> &#123; day, month, year &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(calculatePrice(actual, expected));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> calculatePrice = <span class="hljs-function">(<span class="hljs-params">actual, expected</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> actual.year &gt; expected.year ? <span class="hljs-number">10000</span> : (</span><br><span class="line">        actual.year &lt; expected.year ? <span class="hljs-number">0</span> : (</span><br><span class="line">            actual.month &gt; expected.month ? (actual.month - expected.month) * <span class="hljs-number">500</span> : (</span><br><span class="line">                actual.month &lt; expected.month</span><br><span class="line">                    ? <span class="hljs-number">0</span></span><br><span class="line">                    : (actual.day - expected.day) * <span class="hljs-number">15</span></span><br><span class="line">            ) </span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/06/17/algorithm/hackerrank/Day26_NestedLogic/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Day25 Running Time and Complexity</title>
      <link>https://alleyful.github.io/2019/06/17/algorithm/hackerrank/Day25_RunningTimeAndComplexity/</link>
      <guid>https://alleyful.github.io/2019/06/17/algorithm/hackerrank/Day25_RunningTimeAndComplexity/</guid>
      <pubDate>Mon, 17 Jun 2019 00:40:03 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Objective&quot;&gt;&lt;a href=&quot;#Objective&quot; class=&quot;headerlink&quot; title=&quot;Objective&quot;&gt;&lt;/a&gt;Objective&lt;/h2&gt;&lt;p&gt;Today we’re learning about running time! Check out the Tutorial tab for learning materials and an instructional video!&lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;Task&quot;&gt;&lt;a href=&quot;#Task&quot; class=&quot;headerlink&quot; title=&quot;Task&quot;&gt;&lt;/a&gt;Task&lt;/h2&gt;&lt;p&gt;A prime is a natural number greater than &lt;strong&gt;1&lt;/strong&gt; that has no positive divisors other than &lt;strong&gt;1&lt;/strong&gt; and itself. Given a number, &lt;strong&gt;n&lt;/strong&gt;, determine and print whether it’s &lt;strong&gt;Prime&lt;/strong&gt; or &lt;strong&gt;Not Prime&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If possible, try to come up with a &lt;img src=&quot;https://latex.codecogs.com/svg.latex?O%5Csqrt%7Bn%7D&quot; alt&gt; primality algorithm, or see what sort of optimizations you come up with for an &lt;strong&gt;&lt;img src=&quot;https://latex.codecogs.com/svg.latex?O%5Csqrt%7Bn%7D&quot; alt&gt;&lt;/strong&gt; algorithm. Be sure to check out the Editorial after submitting your code!&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><p>Today we’re learning about running time! Check out the Tutorial tab for learning materials and an instructional video!</p><br><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>A prime is a natural number greater than <strong>1</strong> that has no positive divisors other than <strong>1</strong> and itself. Given a number, <strong>n</strong>, determine and print whether it’s <strong>Prime</strong> or <strong>Not Prime</strong>.</p><p><strong>Note:</strong> If possible, try to come up with a <img src="https://latex.codecogs.com/svg.latex?O%5Csqrt%7Bn%7D" alt> primality algorithm, or see what sort of optimizations you come up with for an <strong><img src="https://latex.codecogs.com/svg.latex?O%5Csqrt%7Bn%7D" alt></strong> algorithm. Be sure to check out the Editorial after submitting your code!</p><a id="more"></a><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer, <strong>T</strong>, the number of test cases.<br>Each of the <strong>T</strong> subsequent lines contains an integer, <strong>n</strong>, to be tested for primality.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= T &lt;= 30</li><li>1 &lt;= n &lt;= 2 X 10<sup>9</sup></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each test case, print whether <strong>n</strong> is <strong>Prime</strong> or <strong>Not prime</strong> on a new line.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">12</span><br><span class="line">5</span><br><span class="line">7</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Not prime</span><br><span class="line">Prime</span><br><span class="line">Prime</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Test Case 0: <strong>n = 12</strong>. <br><br><strong>12</strong> is divisible by numbers other than <strong>1</strong> and itself (i.e.: <strong>2</strong>, <strong>3</strong>, <strong>6</strong>), so we print <strong>Not prime</strong> on a new line.</p><p>Test Case 1: <strong>n = 5</strong>. <br><br><strong>5</strong> is only divisible <strong>1</strong> and itself, so we print <strong>Prime</strong> on a new line.</p><p>Test Case 2: <strong>n = 7</strong>. <br><br><strong>7</strong> is only divisible <strong>1</strong> and itself, so we print <strong>Prime</strong> on a new line.</p><br><br><hr><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/** Consider to write code by using the Sieve of Eratosthenes, then you can make a optimization code **/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">processData</span>(<span class="hljs-params">input</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//Enter your code here</span></span><br><span class="line">    <span class="hljs-keyword">let</span> result = input.split(<span class="hljs-string">'\n'</span>).slice(<span class="hljs-number">1</span>).map(isPrime);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isPrime</span>(<span class="hljs-params">input, i</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> messages = [<span class="hljs-string">'Not prime'</span>, <span class="hljs-string">'Prime'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> (input == <span class="hljs-number">1</span>) &#123; </span><br><span class="line">            <span class="hljs-keyword">return</span> messages[<span class="hljs-number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (input == <span class="hljs-number">2</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> messages[<span class="hljs-number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (input % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> messages[<span class="hljs-number">0</span>];</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">3</span>; i &lt;= <span class="hljs-built_in">Math</span>.sqrt(input); i += <span class="hljs-number">2</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (input % i == <span class="hljs-number">0</span>) &#123; </span><br><span class="line">                <span class="hljs-keyword">return</span> messages[<span class="hljs-number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="hljs-keyword">return</span> messages[<span class="hljs-number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(result.join(<span class="hljs-string">"\n"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">processData</span>(<span class="hljs-params">input</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//Enter your code here</span></span><br><span class="line">    input.split(<span class="hljs-string">'\n'</span>).slice(<span class="hljs-number">1</span>).map(<span class="hljs-function">(<span class="hljs-params">n, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(isPrime(n) ? <span class="hljs-string">'Prime'</span> : <span class="hljs-string">'Not prime'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isPrime</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">2</span>; i * i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/06/17/algorithm/hackerrank/Day25_RunningTimeAndComplexity/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Day24 More Linked Lists</title>
      <link>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day24_MoreLinkedLists/</link>
      <guid>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day24_MoreLinkedLists/</guid>
      <pubDate>Sun, 16 Jun 2019 14:49:34 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Objective&quot;&gt;&lt;a href=&quot;#Objective&quot; class=&quot;headerlink&quot; title=&quot;Objective&quot;&gt;&lt;/a&gt;Objective&lt;/h2&gt;&lt;p&gt;Check out the Tutorial tab for learning materials and an instructional video!&lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;Task&quot;&gt;&lt;a href=&quot;#Task&quot; class=&quot;headerlink&quot; title=&quot;Task&quot;&gt;&lt;/a&gt;Task&lt;/h2&gt;&lt;p&gt;A Node class is provided for you in the editor. A Node object has an integer data field, &lt;strong&gt;data&lt;/strong&gt;, and a Node instance pointer, &lt;strong&gt;next&lt;/strong&gt;, pointing to another node (i.e.: the next node in a list).&lt;/p&gt;
&lt;p&gt;A removeDuplicates function is declared in your editor, which takes a pointer to the &lt;strong&gt;head&lt;/strong&gt; node of a linked list as a parameter. Complete removeDuplicates so that it deletes any duplicate nodes from the list and returns the head of the updated list.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;strong&gt;head&lt;/strong&gt; pointer may be null, indicating that the list is empty. Be sure to reset your &lt;strong&gt;next&lt;/strong&gt; pointer when performing deletions to avoid breaking the list.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><p>Check out the Tutorial tab for learning materials and an instructional video!</p><br><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>A Node class is provided for you in the editor. A Node object has an integer data field, <strong>data</strong>, and a Node instance pointer, <strong>next</strong>, pointing to another node (i.e.: the next node in a list).</p><p>A removeDuplicates function is declared in your editor, which takes a pointer to the <strong>head</strong> node of a linked list as a parameter. Complete removeDuplicates so that it deletes any duplicate nodes from the list and returns the head of the updated list.</p><p><strong>Note:</strong> The <strong>head</strong> pointer may be null, indicating that the list is empty. Be sure to reset your <strong>next</strong> pointer when performing deletions to avoid breaking the list.</p><a id="more"></a><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>You do not need to read any input from stdin. The following input is handled by the locked stub code and passed to the removeDuplicates function:<br>The first line contains an integer, <strong>N</strong>, the number of nodes to be inserted.<br>The <strong>N</strong> subsequent lines each contain an integer describing the <strong>data</strong> value of a node being inserted at the list’s tail.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>The data elements of the linked list argument will always be in non-decreasing order.</li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Your removeDuplicates function should return the head of the updated linked list. The locked stub code in your editor will print the returned list to stdout.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p><strong>N = 6</strong>, and our non-decreasing list is <strong>{1, 2, 2, 3, 3, 4}</strong>. The values <strong>2</strong> and <strong>3</strong> both occur twice in the list, so we remove the two duplicate nodes. We then return our updated (ascending) list, which is <strong>{1, 2, 3, 4}</strong>.</p><br><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">this</span>.removeDuplicates=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">head</span>)</span>&#123;</span><br><span class="line">  <span class="hljs-comment">//Write your code here</span></span><br><span class="line">    <span class="hljs-keyword">let</span> prev = head;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">while</span> (prev) &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> next = prev.next;</span><br><span class="line"></span><br><span class="line">        (next &amp;&amp; prev.data == next.data)</span><br><span class="line">            ? (prev.next = next.next)</span><br><span class="line">            : (prev = prev.next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day24_MoreLinkedLists/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Day23 BST Level-Order Traversal</title>
      <link>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day23_BSTLevelOrderTraversal/</link>
      <guid>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day23_BSTLevelOrderTraversal/</guid>
      <pubDate>Sun, 16 Jun 2019 14:30:34 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Objective&quot;&gt;&lt;a href=&quot;#Objective&quot; class=&quot;headerlink&quot; title=&quot;Objective&quot;&gt;&lt;/a&gt;Objective&lt;/h2&gt;&lt;p&gt;Today, we’re going further with Binary Search Trees. Check out the Tutorial tab for learning materials and an instructional video!&lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;Task&quot;&gt;&lt;a href=&quot;#Task&quot; class=&quot;headerlink&quot; title=&quot;Task&quot;&gt;&lt;/a&gt;Task&lt;/h2&gt;&lt;p&gt;A level-order traversal, also known as a breadth-first search, visits each level of a tree’s nodes from left to right, top to bottom. You are given a pointer, &lt;strong&gt;root&lt;/strong&gt;, pointing to the root of a binary search tree. Complete the levelOrder function provided in your editor so that it prints the level-order traversal of the binary search tree.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; You’ll find a queue helpful in completing this challenge.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><p>Today, we’re going further with Binary Search Trees. Check out the Tutorial tab for learning materials and an instructional video!</p><br><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>A level-order traversal, also known as a breadth-first search, visits each level of a tree’s nodes from left to right, top to bottom. You are given a pointer, <strong>root</strong>, pointing to the root of a binary search tree. Complete the levelOrder function provided in your editor so that it prints the level-order traversal of the binary search tree.</p><p><strong>Hint:</strong> You’ll find a queue helpful in completing this challenge.</p><a id="more"></a><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The locked stub code in your editor reads the following inputs and assembles them into a BST:<br>The first line contains an integer, <strong>T</strong> (the number of test cases).<br>The <strong>T</strong> subsequent lines each contain an integer, <strong>data</strong>, denoting the value of an element that must be added to the BST.</p><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the <strong>data</strong> value of each node in the tree’s level-order traversal as a single line of <strong>N</strong> space-separated integers.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">7</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 2 5 1 4 7</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>The input forms the following binary search tree: <br></p><p><img src="https://s3.amazonaws.com/hr-challenge-images/17176/1461696188-8eddd12300-BST.png" alt="Binary Search Tree"></p><p>We traverse each level of the tree from the root downward, and we process the nodes at each level from left to right. The resulting level-order traversal is <strong>3 -&gt; 2 -&gt; 5 -&gt; 1 -&gt; 4 -&gt; 7</strong>, and we print these data values as a single line of space-separated integers.</p><br><br><hr><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Add your code here</span></span><br><span class="line"><span class="hljs-comment">// To print values separated by spaces use process.stdout.write(someValue + ' ')</span></span><br><span class="line"><span class="hljs-keyword">const</span> queue = [root];</span><br><span class="line"><span class="hljs-keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">while</span> (queue.length) &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> treeNode = queue.shift();</span><br><span class="line"></span><br><span class="line">    result.push(treeNode.data);</span><br><span class="line"></span><br><span class="line">    treeNode.left &amp;&amp; queue.push(treeNode.left);</span><br><span class="line">    treeNode.right &amp;&amp; queue.push(treeNode.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(result.join(<span class="hljs-string">' '</span>));</span><br></pre></td></tr></table></figure><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Start of function Node</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Node</span>(<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.data = data;</span><br><span class="line">    <span class="hljs-keyword">this</span>.left = <span class="hljs-literal">null</span>;</span><br><span class="line">    <span class="hljs-keyword">this</span>.right = <span class="hljs-literal">null</span>;</span><br><span class="line">&#125;; <span class="hljs-comment">// End of function Node</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Start of function BinarySearchTree</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">BinarySearchTree</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.insert = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root, data</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (root === <span class="hljs-literal">null</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">this</span>.root = <span class="hljs-keyword">new</span> Node(data);</span><br><span class="line">            </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.root;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">if</span> (data &lt;= root.data) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (root.left) &#123;</span><br><span class="line">                <span class="hljs-keyword">this</span>.insert(root.left, data);</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                root.left = <span class="hljs-keyword">new</span> Node(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (root.right) &#123;</span><br><span class="line">                <span class="hljs-keyword">this</span>.insert(root.right, data);</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                root.right = <span class="hljs-keyword">new</span> Node(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.root;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">// Start of function levelOrder</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.levelOrder = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// Add your code here</span></span><br><span class="line">        <span class="hljs-comment">// To print values separated by spaces use process.stdout.write(someValue + ' ')</span></span><br><span class="line">        <span class="hljs-keyword">let</span> temp;</span><br><span class="line">        <span class="hljs-keyword">const</span> queue = [];</span><br><span class="line">        <span class="hljs-keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">        queue.push(root);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">while</span> (queue.length) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// Deque the Queue</span></span><br><span class="line">            temp = queue.splice(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>];</span><br><span class="line"></span><br><span class="line">            result.push(temp.data);</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// Enqueue the Queue</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (temp.left) queue.push(temp.left);</span><br><span class="line">            <span class="hljs-keyword">if</span> (temp.right) queue.push(temp.right)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-built_in">console</span>.log(result.join(<span class="hljs-string">' '</span>));</span><br><span class="line">&#125;; <span class="hljs-comment">// End of function levelOrder</span></span><br><span class="line">&#125;; <span class="hljs-comment">// End of function BinarySearchTree</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day23_BSTLevelOrderTraversal/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Day22 Binary Search Trees</title>
      <link>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day22_BinarySearchTrees/</link>
      <guid>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day22_BinarySearchTrees/</guid>
      <pubDate>Sun, 16 Jun 2019 13:30:34 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Objective&quot;&gt;&lt;a href=&quot;#Objective&quot; class=&quot;headerlink&quot; title=&quot;Objective&quot;&gt;&lt;/a&gt;Objective&lt;/h2&gt;&lt;p&gt;Today, we’re working with Binary Search Trees (BSTs). Check out the Tutorial tab for learning materials and an instructional video!&lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;Task&quot;&gt;&lt;a href=&quot;#Task&quot; class=&quot;headerlink&quot; title=&quot;Task&quot;&gt;&lt;/a&gt;Task&lt;/h2&gt;&lt;p&gt;The height of a binary search tree is the number of edges between the tree’s root and its furthest leaf. You are given a pointer, &lt;strong&gt;root&lt;/strong&gt;, pointing to the root of a binary search tree. Complete the getHeight function provided in your editor so that it returns the height of the binary search tree.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><p>Today, we’re working with Binary Search Trees (BSTs). Check out the Tutorial tab for learning materials and an instructional video!</p><br><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>The height of a binary search tree is the number of edges between the tree’s root and its furthest leaf. You are given a pointer, <strong>root</strong>, pointing to the root of a binary search tree. Complete the getHeight function provided in your editor so that it returns the height of the binary search tree.</p><a id="more"></a><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The locked stub code in your editor reads the following inputs and assembles them into a binary search tree: <br><br>The first line contains an integer, <strong>n</strong>, denoting the number of nodes in the tree. <br><br>Each of the <strong>n</strong> subsequent lines contains an integer, <strong>data</strong>, denoting the value of an element that must be added to the BST.</p><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>The locked stub code in your editor will print the integer returned by your getHeight function denoting the height of the BST.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>The input forms the following BST:<br></p><p><img src="https://s3.amazonaws.com/hr-challenge-images/17175/1459894869-6bb53ce6eb-BST.png" alt="Binary Search Tree"></p><p>The longest root-to-leaf path is shown below:<br></p><p><img src="https://s3.amazonaws.com/hr-challenge-images/17175/1459895368-4955f9ce74-LongestRTL.png" alt="Longest Root-to-Leaf Path"></p><p>There are <strong>4</strong> nodes in this path that are connected by <strong>3</strong> edges, meaning our BST’s <strong>height = 3</strong>. Thus, we print <strong>3</strong> as our answer.</p><br><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> (root === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(<span class="hljs-keyword">this</span>.getHeight(root.left), <span class="hljs-keyword">this</span>.getHeight(root.right)) + <span class="hljs-number">1</span>;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day22_BinarySearchTrees/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Day21 Generics</title>
      <link>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day21_Generics/</link>
      <guid>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day21_Generics/</guid>
      <pubDate>Sun, 16 Jun 2019 13:20:30 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Objective&quot;&gt;&lt;a href=&quot;#Objective&quot; class=&quot;headerlink&quot; title=&quot;Objective&quot;&gt;&lt;/a&gt;Objective&lt;/h2&gt;&lt;p&gt;Today we’re discussing Generics; be aware that not all languages support this construct, so fewer languages are enabled for this challenge. Check out the Tutorial tab for learning materials and an instructional video!&lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;Task&quot;&gt;&lt;a href=&quot;#Task&quot; class=&quot;headerlink&quot; title=&quot;Task&quot;&gt;&lt;/a&gt;Task&lt;/h2&gt;&lt;p&gt;Write a single generic function named printArray; this function must take an array of generic elements as a parameter (the exception to this is C++, which takes a vector). The locked Solution class in your editor tests your function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You must use generics to solve this challenge. Do not write overloaded functions.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><p>Today we’re discussing Generics; be aware that not all languages support this construct, so fewer languages are enabled for this challenge. Check out the Tutorial tab for learning materials and an instructional video!</p><br><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>Write a single generic function named printArray; this function must take an array of generic elements as a parameter (the exception to this is C++, which takes a vector). The locked Solution class in your editor tests your function.</p><p><strong>Note:</strong> You must use generics to solve this challenge. Do not write overloaded functions.</p><a id="more"></a><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The locked Solution class in your editor will pass different types of arrays to your printArray function.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>You must have exactly  function named printArray. <strong>1</strong></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Your printArray function should print each element of its generic array parameter on a new line.</p><br><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">*</span></span><br><span class="line"><span class="hljs-comment">* What is the Generic?</span></span><br><span class="line"><span class="hljs-comment">* That is being able to create a component that can work over a variety of types rather than a single one.</span></span><br><span class="line"><span class="hljs-comment">* JavaScript is a dynamically typed language and it doesn't have any generics. So we can write a normal function or method.</span></span><br><span class="line"><span class="hljs-comment">* Also, you can write in languages like TypeScript, Java, C#.</span></span><br><span class="line"><span class="hljs-comment">* It's a creation code in C#</span></span><br><span class="line"><span class="hljs-comment">*</span></span><br><span class="line"><span class="hljs-comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> PrintArray&lt;T&gt;(T[] array)&#123;</span><br><span class="line">    foreach(T i <span class="hljs-keyword">in</span> array)</span><br><span class="line">        Console.WriteLine(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day21_Generics/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Day20 Sorting</title>
      <link>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day20_Sorting/</link>
      <guid>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day20_Sorting/</guid>
      <pubDate>Sun, 16 Jun 2019 13:01:03 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Objective&quot;&gt;&lt;a href=&quot;#Objective&quot; class=&quot;headerlink&quot; title=&quot;Objective&quot;&gt;&lt;/a&gt;Objective&lt;/h2&gt;&lt;p&gt;Today, we’re discussing a simple sorting algorithm called Bubble Sort. Check out the Tutorial tab for learning materials and an instructional video!&lt;/p&gt;
&lt;h3 id=&quot;Consider-the-following-version-of-Bubble-Sort&quot;&gt;&lt;a href=&quot;#Consider-the-following-version-of-Bubble-Sort&quot; class=&quot;headerlink&quot; title=&quot;Consider the following version of Bubble Sort:&quot;&gt;&lt;/a&gt;Consider the following version of Bubble Sort:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Track number of elements swapped during a single array traversal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int numberOfSwaps = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (int j = 0; j &amp;lt; n - 1; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Swap adjacent elements if they are in decreasing order&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (a[j] &amp;gt; a[j + 1]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            swap(a[j], a[j + 1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            numberOfSwaps++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // If no elements were swapped during a traversal, array is sorted&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (numberOfSwaps == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;h2 id=&quot;Task&quot;&gt;&lt;a href=&quot;#Task&quot; class=&quot;headerlink&quot; title=&quot;Task&quot;&gt;&lt;/a&gt;Task&lt;/h2&gt;&lt;p&gt;Given an array, &lt;strong&gt;a&lt;/strong&gt;, of size &lt;strong&gt;n&lt;/strong&gt; distinct elements, sort the array in ascending order using the Bubble Sort algorithm above. Once sorted, print the following &lt;strong&gt;3&lt;/strong&gt; lines:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Array is sorted in numSwaps swaps.&lt;br&gt;where &lt;strong&gt;numSwaps&lt;/strong&gt; is the number of swaps that took place.&lt;/li&gt;
&lt;li&gt;First Element: firstElement&lt;br&gt;where &lt;strong&gt;firstElement&lt;/strong&gt; is the first element in the sorted array.&lt;/li&gt;
&lt;li&gt;Last Element: lastElement&lt;br&gt;where &lt;strong&gt;lastElement&lt;/strong&gt; is the last element in the sorted array.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; To complete this challenge, you will need to add a variable that keeps a running tally of all swaps that occur during execution.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><p>Today, we’re discussing a simple sorting algorithm called Bubble Sort. Check out the Tutorial tab for learning materials and an instructional video!</p><h3 id="Consider-the-following-version-of-Bubble-Sort"><a href="#Consider-the-following-version-of-Bubble-Sort" class="headerlink" title="Consider the following version of Bubble Sort:"></a>Consider the following version of Bubble Sort:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">    // Track number of elements swapped during a single array traversal</span><br><span class="line">    int numberOfSwaps = 0;</span><br><span class="line">    </span><br><span class="line">    for (int j = 0; j &lt; n - 1; j++) &#123;</span><br><span class="line">        // Swap adjacent elements if they are in decreasing order</span><br><span class="line">        if (a[j] &gt; a[j + 1]) &#123;</span><br><span class="line">            swap(a[j], a[j + 1]);</span><br><span class="line">            numberOfSwaps++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // If no elements were swapped during a traversal, array is sorted</span><br><span class="line">    if (numberOfSwaps == 0) &#123;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>Given an array, <strong>a</strong>, of size <strong>n</strong> distinct elements, sort the array in ascending order using the Bubble Sort algorithm above. Once sorted, print the following <strong>3</strong> lines:</p><ol><li>Array is sorted in numSwaps swaps.<br>where <strong>numSwaps</strong> is the number of swaps that took place.</li><li>First Element: firstElement<br>where <strong>firstElement</strong> is the first element in the sorted array.</li><li>Last Element: lastElement<br>where <strong>lastElement</strong> is the last element in the sorted array.</li></ol><p><strong>Hint:</strong> To complete this challenge, you will need to add a variable that keeps a running tally of all swaps that occur during execution.</p><a id="more"></a><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer, <strong>n</strong>, denoting the number of elements in array <strong>a</strong>. The second line contains <strong>n</strong> space-separated integers describing the respective values of <strong>a<sub>0</sub>, a<sub>1</sub>, …, a<sub>n-1</sub></strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><strong>2 &lt;= n &lt;= 600</strong></li><li><strong>1 &lt;= a<sub>i</sub> &lt;= 2 X 10<sup>6</sup>, where 0 &lt;= i &lt; n</strong></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the following three lines of output:</p><ol><li>Array is sorted in numSwaps swaps.<br>where <strong>numSwaps</strong> is the number of swaps that took place.</li><li>First Element: firstElement<br>where <strong>firstElement</strong> is the first element in the sorted array.</li><li>Last Element: lastElement<br>where <strong>lastElements</strong> is the last element in the sorted array.</li></ol><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Array is sorted in 0 swaps.</span><br><span class="line">First Element: 1</span><br><span class="line">Last Element: 3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>The array is already sorted, so <strong>0</strong> swaps take place and we print the necessary <strong>3</strong> lines of output shown above.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3 2 1</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Array is sorted in 3 swaps.</span><br><span class="line">First Element: 1</span><br><span class="line">Last Element: 3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>The array <strong>a = [3, 2, 1]</strong> is not sorted, so we perform the following  swaps:<br></p><ol><li>[3, 2, 1] -&gt; [2, 3, 1]</li><li>[2, 3, 1] -&gt; [2, 1, 3]</li><li>[2, 1, 3] -&gt; [1, 2, 3]</li></ol><p>At this point the array is sorted and we print the necessary <strong>3</strong> lines of output shown above.</p><br><br><hr><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> n = <span class="hljs-built_in">parseInt</span>(readLine());</span><br><span class="line">    a = readLine().split(<span class="hljs-string">' '</span>);</span><br><span class="line">    a = a.map(<span class="hljs-built_in">Number</span>);</span><br><span class="line">    <span class="hljs-comment">// Write Your Code Here</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">let</span> numberOfSwaps = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> bubbleSort = <span class="hljs-function">(<span class="hljs-params">array</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> arr = array;</span><br><span class="line">        <span class="hljs-keyword">let</span> length = arr.length;</span><br><span class="line">        <span class="hljs-keyword">let</span> i, j, temp;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; length - <span class="hljs-number">1</span>; i++) &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; length - <span class="hljs-number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;</span><br><span class="line">                    temp = arr[j + <span class="hljs-number">1</span>];</span><br><span class="line">                    arr[j + <span class="hljs-number">1</span>] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                    numberOfSwaps++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">let</span> sortArray = bubbleSort(a);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Array is sorted in <span class="hljs-subst">$&#123;numberOfSwaps&#125;</span> swaps.`</span>)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`First Element: <span class="hljs-subst">$&#123;sortArray[<span class="hljs-number">0</span>]&#125;</span>`</span>)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Last Element: <span class="hljs-subst">$&#123;sortArray[sortArray.length<span class="hljs-number">-1</span>]&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> n = <span class="hljs-built_in">parseInt</span>(readLine());</span><br><span class="line">    a = readLine().split(<span class="hljs-string">' '</span>);</span><br><span class="line">    a = a.map(<span class="hljs-built_in">Number</span>);</span><br><span class="line">    <span class="hljs-comment">// Write Your Code Here</span></span><br><span class="line">    <span class="hljs-keyword">let</span> numberOfSwaps = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> bubbleSort = <span class="hljs-function">(<span class="hljs-params">values</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> swapped;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">do</span> &#123;</span><br><span class="line">            swapped = <span class="hljs-literal">false</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, &#123; length &#125; = values; i &lt; length; i++) &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (values[i] &gt; values[i + <span class="hljs-number">1</span>]) &#123;</span><br><span class="line">                    <span class="hljs-keyword">let</span> tmp = values[i];</span><br><span class="line">                    </span><br><span class="line">                    values[i] = values[i + <span class="hljs-number">1</span>];</span><br><span class="line">                    values[i + <span class="hljs-number">1</span>] = tmp;</span><br><span class="line">                    </span><br><span class="line">                    swapped = <span class="hljs-literal">true</span>;</span><br><span class="line">                    numberOfSwaps++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="hljs-keyword">while</span> (swapped);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> values;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">let</span> result = bubbleSort(a);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Array is sorted in <span class="hljs-subst">$&#123;numberOfSwaps&#125;</span> swaps.\nFirst Element: <span class="hljs-subst">$&#123;result[<span class="hljs-number">0</span>]&#125;</span>\nLast Element: <span class="hljs-subst">$&#123;result[n - <span class="hljs-number">1</span>]&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day20_Sorting/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Day19 Interfaces</title>
      <link>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day19_Interfaces/</link>
      <guid>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day19_Interfaces/</guid>
      <pubDate>Sun, 16 Jun 2019 12:53:20 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Objective&quot;&gt;&lt;a href=&quot;#Objective&quot; class=&quot;headerlink&quot; title=&quot;Objective&quot;&gt;&lt;/a&gt;Objective&lt;/h2&gt;&lt;p&gt;Today, we’re learning about Interfaces. Check out the Tutorial tab for learning materials and an instructional video!&lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;Task&quot;&gt;&lt;a href=&quot;#Task&quot; class=&quot;headerlink&quot; title=&quot;Task&quot;&gt;&lt;/a&gt;Task&lt;/h2&gt;&lt;p&gt;The AdvancedArithmetic interface and the method declaration for the abstract divisorSum(n) method are provided for you in the editor below.&lt;/p&gt;
&lt;p&gt;Complete the implementation of Calculator class, which implements the AdvancedArithmetic interface. The implementation for the divisorSum(n) method must return the sum of all divisors of &lt;strong&gt;n&lt;/strong&gt;.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><p>Today, we’re learning about Interfaces. Check out the Tutorial tab for learning materials and an instructional video!</p><br><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>The AdvancedArithmetic interface and the method declaration for the abstract divisorSum(n) method are provided for you in the editor below.</p><p>Complete the implementation of Calculator class, which implements the AdvancedArithmetic interface. The implementation for the divisorSum(n) method must return the sum of all divisors of <strong>n</strong>.</p><a id="more"></a><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>A single line containing an integer, <strong>n</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><strong>1 &lt;= n &lt;= 1000</strong></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>You are not responsible for printing anything to stdout. The locked template code in the editor below will call your code and print the necessary output.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I implemented: AdvancedArithmetic</span><br><span class="line">12</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>The integer <strong>6</strong> is evenly divisible by <strong>1</strong>, <strong>2</strong>, <strong>3</strong>, and <strong>6</strong>. Our divisorSum method should return the sum of these numbers, which is <strong>1 + 2 + 3 + 6 = 12</strong>. The Solution class then prints <strong>I implemented: AdvancedArithmetic</strong> on the first line, followed by the sum returned by divisorSum (which is <strong>12</strong>) on the second line.</p><br><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/** It's not supported JavaScript so it create similar code **/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdvancedArithmetic</span> </span>&#123;</span><br><span class="line">  divisor(n) &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> n || <span class="hljs-number">0</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Calculator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AdvancedArithmetic</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.divisor = <span class="hljs-keyword">this</span>.divisorSum.bind(<span class="hljs-keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  divisorSum(n) &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>(n).fill(<span class="hljs-number">0</span>).reduce(<span class="hljs-function">(<span class="hljs-params">target, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      !(n % (index + <span class="hljs-number">1</span>)) &amp;&amp; (target += (index + <span class="hljs-number">1</span>)) ;</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Solution</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> n = <span class="hljs-number">6</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> myCalculator = <span class="hljs-keyword">new</span> Calculator();</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">let</span> sum = myCalculator.divisor(n);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"I implemented: AdvancedArithmetic\n"</span> + sum); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Solution();</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day19_Interfaces/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Day18 Queues and Stacks</title>
      <link>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day18_QueuesAndStack/</link>
      <guid>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day18_QueuesAndStack/</guid>
      <pubDate>Sun, 16 Jun 2019 12:39:34 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Objective&quot;&gt;&lt;a href=&quot;#Objective&quot; class=&quot;headerlink&quot; title=&quot;Objective&quot;&gt;&lt;/a&gt;Objective&lt;/h2&gt;&lt;p&gt;Welcome to Day 18! Today we’re learning about Stacks and Queues. Check out the Tutorial tab for learning materials and an instructional video!&lt;/p&gt;
&lt;p&gt;A palindrome is a word, phrase, number, or other sequence of characters which reads the same backwards and forwards. Can you determine if a given string, &lt;strong&gt;s&lt;/strong&gt;, is a palindrome?&lt;/p&gt;
&lt;p&gt;To solve this challenge, we must first take each character in &lt;strong&gt;s&lt;/strong&gt;, enqueue it in a queue, and also push that same character onto a stack. Once that’s done, we must dequeue the first character from the queue and pop the top character off the stack, then compare the two characters to see if they are the same; as long as the characters match, we continue dequeueing, popping, and comparing each character until our containers are empty (a non-match means &lt;strong&gt;s&lt;/strong&gt; isn’t a palindrome).&lt;/p&gt;
&lt;p&gt;Write the following declarations and implementations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Two instance variables: one for your &lt;strong&gt;stack&lt;/strong&gt;, and one for your &lt;strong&gt;queue&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A void pushCharacter(char ch) method that pushes a character onto a stack.&lt;/li&gt;
&lt;li&gt;A void enqueueCharacter(char ch) method that enqueues a character in the &lt;strong&gt;queue&lt;/strong&gt; instance variable.&lt;/li&gt;
&lt;li&gt;A char popCharacter() method that pops and returns the character at the top of the &lt;strong&gt;stack&lt;/strong&gt; instance variable.&lt;/li&gt;
&lt;li&gt;A char dequeueCharacter() method that dequeues and returns the first character in the &lt;strong&gt;queue&lt;/strong&gt; instance variable.&lt;/li&gt;
&lt;/ol&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><p>Welcome to Day 18! Today we’re learning about Stacks and Queues. Check out the Tutorial tab for learning materials and an instructional video!</p><p>A palindrome is a word, phrase, number, or other sequence of characters which reads the same backwards and forwards. Can you determine if a given string, <strong>s</strong>, is a palindrome?</p><p>To solve this challenge, we must first take each character in <strong>s</strong>, enqueue it in a queue, and also push that same character onto a stack. Once that’s done, we must dequeue the first character from the queue and pop the top character off the stack, then compare the two characters to see if they are the same; as long as the characters match, we continue dequeueing, popping, and comparing each character until our containers are empty (a non-match means <strong>s</strong> isn’t a palindrome).</p><p>Write the following declarations and implementations:</p><ol><li>Two instance variables: one for your <strong>stack</strong>, and one for your <strong>queue</strong>.</li><li>A void pushCharacter(char ch) method that pushes a character onto a stack.</li><li>A void enqueueCharacter(char ch) method that enqueues a character in the <strong>queue</strong> instance variable.</li><li>A char popCharacter() method that pops and returns the character at the top of the <strong>stack</strong> instance variable.</li><li>A char dequeueCharacter() method that dequeues and returns the first character in the <strong>queue</strong> instance variable.</li></ol><a id="more"></a><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>You do not need to read anything from stdin. The locked stub code in your editor reads a single line containing string <strong>s</strong>. It then calls the methods specified above to pass each character to your instance variables.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><strong>s</strong> is composed of lowercase English letters.</li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>You are not responsible for printing any output to stdout.<br>If your code is correctly written and <strong>s</strong> is a palindrome, the locked stub code will print  <strong>The word, s, is not a palindrome</strong>; otherwise, it will print <strong>The word, s, is not a palindrome</strong></p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">racecar</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The word, racecar, is a palindrome.</span><br></pre></td></tr></table></figure><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Solution</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">  <span class="hljs-comment">//Write your code here</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.stack = [];</span><br><span class="line">    <span class="hljs-keyword">this</span>.queue = [];</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.pushCharacter = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> <span class="hljs-keyword">this</span>.stack.push(value); </span><br><span class="line">    <span class="hljs-keyword">this</span>.enqueueCharacter = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> <span class="hljs-keyword">this</span>.queue.push(value);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.popCharacter = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">this</span>.stack.pop();</span><br><span class="line">    <span class="hljs-keyword">this</span>.dequeueCharacter = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">this</span>.queue.shift();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day18_QueuesAndStack/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Day17 More Exceptions</title>
      <link>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day17_MoreExceptions/</link>
      <guid>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day17_MoreExceptions/</guid>
      <pubDate>Sun, 16 Jun 2019 12:08:18 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Objective&quot;&gt;&lt;a href=&quot;#Objective&quot; class=&quot;headerlink&quot; title=&quot;Objective&quot;&gt;&lt;/a&gt;Objective&lt;/h2&gt;&lt;p&gt;Yesterday’s challenge taught you to manage exceptional situations by using try and catch blocks. In today’s challenge, you’re going to practice throwing and propagating an exception. Check out the Tutorial tab for learning materials and an instructional video!&lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;Task&quot;&gt;&lt;a href=&quot;#Task&quot; class=&quot;headerlink&quot; title=&quot;Task&quot;&gt;&lt;/a&gt;Task&lt;/h2&gt;&lt;p&gt;Write a Calculator class with a single method: int power(int,int). The power method takes two integers, &lt;strong&gt;n&lt;/strong&gt; and &lt;strong&gt;p&lt;/strong&gt;, as parameters and returns the integer result of &lt;strong&gt;n&lt;sup&gt;p&lt;/sup&gt;&lt;/strong&gt;. If either  or  is negative, then the method must throw an exception with the message: n and p should be non-negative.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Do not use an access modifier (e.g.: public) in the declaration for your Calculator class.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><p>Yesterday’s challenge taught you to manage exceptional situations by using try and catch blocks. In today’s challenge, you’re going to practice throwing and propagating an exception. Check out the Tutorial tab for learning materials and an instructional video!</p><br><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>Write a Calculator class with a single method: int power(int,int). The power method takes two integers, <strong>n</strong> and <strong>p</strong>, as parameters and returns the integer result of <strong>n<sup>p</sup></strong>. If either  or  is negative, then the method must throw an exception with the message: n and p should be non-negative.</p><p><strong>Note:</strong> Do not use an access modifier (e.g.: public) in the declaration for your Calculator class.</p><a id="more"></a><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>Input from stdin is handled for you by the locked stub code in your editor. The first line contains an integer, <strong>T</strong>, the number of test cases. Each of the <strong>T</strong> subsequent lines describes a test case in <strong>2</strong> space-separated integers denoting <strong>n</strong> and <strong>p</strong>, respectively.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>No Test Case will result in overflow for correctly written code.</li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Output to stdout is handled for you by the locked stub code in your editor. There are <strong>T</strong> lines of output, where each line contains the result of <strong>n<sup>p</sup></strong> as calculated by your Calculator class’ power method.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">3 5</span><br><span class="line">2 4</span><br><span class="line">-1 -2</span><br><span class="line">-1 3</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">243</span><br><span class="line">16</span><br><span class="line">n and p should be non-negative</span><br><span class="line">n and p should be non-negative</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p><strong>T = 4</strong><br><strong>T<sub>0</sub></strong>: <strong>3</strong> and <strong>5</strong> are positive, so power returns the result of <strong>3<sup>5</sup></strong>, which is <strong>243</strong>. <br><br><strong>T<sub>1</sub></strong>: <strong>2</strong> and <strong>4</strong> are positive, so power returns the result of <strong>2<sup>4</sup></strong>=, which is <strong>16</strong>. <br><br><strong>T<sub>2</sub></strong>: Both inputs (<strong>-1</strong> and <strong>-2</strong>) are negative, so power throws an exception and <strong>n and p should be non-negative</strong> is printed. <br><br><strong>T<sub>3</sub></strong>: One of the inputs (<strong>-1</strong>) is negative, so power throws an exception and <strong>n and p should be non-negative</strong> is printed.</p><br><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment"> * You can use the following pseudocode:</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * `S` = read string from stdin.</span></span><br><span class="line"><span class="hljs-comment"> * try &#123;</span></span><br><span class="line"><span class="hljs-comment"> *     `N` = numeric value of `S`.</span></span><br><span class="line"><span class="hljs-comment"> *     </span></span><br><span class="line"><span class="hljs-comment"> *     If `N` is `NaN` or `undefined`, then some exception must be thrown,</span></span><br><span class="line"><span class="hljs-comment"> *     you can write the following withtout using conditional statement:</span></span><br><span class="line"><span class="hljs-comment"> *     &lt;condition to return true when `N` is `NaN` or `undefined`&gt; &amp;&amp; an_undefined_function_call()</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> *     print `N`</span></span><br><span class="line"><span class="hljs-comment"> * &#125; catch (err) &#123;</span></span><br><span class="line"><span class="hljs-comment"> *     print `Bad String`.</span></span><br><span class="line"><span class="hljs-comment"> * &#125;</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//Write your code here</span></span><br><span class="line"><span class="hljs-keyword">let</span> Calculator = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.power = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n, p</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (n &gt;= <span class="hljs-number">0</span> &amp;&amp; p &gt;= <span class="hljs-number">0</span>) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> n ** p;</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-string">'n and p should be non-negative'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day17_MoreExceptions/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Day16 Exceptions - String to Integer</title>
      <link>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day16_ExceptionsStringToInteger/</link>
      <guid>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day16_ExceptionsStringToInteger/</guid>
      <pubDate>Sun, 16 Jun 2019 11:05:46 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Objective&quot;&gt;&lt;a href=&quot;#Objective&quot; class=&quot;headerlink&quot; title=&quot;Objective&quot;&gt;&lt;/a&gt;Objective&lt;/h2&gt;&lt;p&gt;Today, we’re getting started with Exceptions by learning how to parse an integer from a string and print a custom error message. Check out the Tutorial tab for learning materials and an instructional video!&lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;Task&quot;&gt;&lt;a href=&quot;#Task&quot; class=&quot;headerlink&quot; title=&quot;Task&quot;&gt;&lt;/a&gt;Task&lt;/h2&gt;&lt;p&gt;Read a string, &lt;strong&gt;S&lt;/strong&gt;, and print its integer value; if &lt;strong&gt;S&lt;/strong&gt; cannot be converted to an integer, print Bad String.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You must use the String-to-Integer and exception handling constructs built into your submission language. If you attempt to use loops/conditional statements, you will get a &lt;strong&gt;0&lt;/strong&gt; score.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><p>Today, we’re getting started with Exceptions by learning how to parse an integer from a string and print a custom error message. Check out the Tutorial tab for learning materials and an instructional video!</p><br><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>Read a string, <strong>S</strong>, and print its integer value; if <strong>S</strong> cannot be converted to an integer, print Bad String.</p><p><strong>Note:</strong> You must use the String-to-Integer and exception handling constructs built into your submission language. If you attempt to use loops/conditional statements, you will get a <strong>0</strong> score.</p><a id="more"></a><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>A single string, <strong>S</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><strong>1 &lt;= |S| &lt;= 6, where |S| is the length of string S.</strong></li><li><strong>S is composed of either lowercase letters (a - z) or decimal digits (0 - 9).</strong></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the parsed integer value of <strong>S</strong>, or Bad String if <strong>S</strong> cannot be converted to an integer.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">za</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bad String</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Sample Case <strong>0</strong> contains an integer, so it should not raise an exception when we attempt to convert it to an integer. Thus, we print the <strong>3</strong>.<br><br>Sample Case <strong>1</strong> does not contain any integers, so an attempt to convert it to an integer will raise an exception. Thus, our exception handler prints Bad String.</p><br><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment"> * You can use the following pseudocode:</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * `S` = read string from stdin.</span></span><br><span class="line"><span class="hljs-comment"> * try &#123;</span></span><br><span class="line"><span class="hljs-comment"> *     `N` = numeric value of `S`.</span></span><br><span class="line"><span class="hljs-comment"> *     </span></span><br><span class="line"><span class="hljs-comment"> *     If `N` is `NaN` or `undefined`, then some exception must be thrown,</span></span><br><span class="line"><span class="hljs-comment"> *     you can write the following withtout using conditional statement:</span></span><br><span class="line"><span class="hljs-comment"> *     &lt;condition to return true when `N` is `NaN` or `undefined`&gt; &amp;&amp; an_undefined_function_call()</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> *     print `N`</span></span><br><span class="line"><span class="hljs-comment"> * &#125; catch (err) &#123;</span></span><br><span class="line"><span class="hljs-comment"> *     print `Bad String`.</span></span><br><span class="line"><span class="hljs-comment"> * &#125;</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> S = readLine();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">parseInt</span>(S).toString().replace(<span class="hljs-string">'NaN'</span>, <span class="hljs-string">'Bad String'</span>));</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Bad String"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/06/16/algorithm/hackerrank/Day16_ExceptionsStringToInteger/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
