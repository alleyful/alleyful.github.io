<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ALLEY</title>
    <link>https://alleyful.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>alley&#39;s blog for study</description>
    <pubDate>Tue, 06 Aug 2019 16:15:16 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Circular Array Rotation</title>
      <link>https://alleyful.github.io/2019/08/07/algorithm/hackerrank/34_CircularArrayRotation/</link>
      <guid>https://alleyful.github.io/2019/08/07/algorithm/hackerrank/34_CircularArrayRotation/</guid>
      <pubDate>Tue, 06 Aug 2019 16:01:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;John Watson knows of an operation called a right circular rotation on an array of integers. One rotation operation moves the last array element to the first position and shifts all remaining elements right one. To test Sherlock’s abilities, Watson provides Sherlock with an array of integers. Sherlock is to perform the rotation operation a number of times then determine the value of the element at a given position.&lt;/p&gt;
&lt;p&gt;For each array, perform a number of right circular rotations and return the value of the element at a given index.&lt;/p&gt;
&lt;p&gt;For example, array &lt;code&gt;a = [3, 4, 5]&lt;/code&gt;, number of rotations, &lt;code&gt;k = 2&lt;/code&gt; and indices to check, &lt;code&gt;m = [1, 2]&lt;/code&gt;. 
First we perform the two rotations:&lt;br&gt;&lt;code&gt;[3, 4, 5] -&amp;gt; [5, 3, 4] -&amp;gt; [4, 5, 3]&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;Now return the values from the zero-based indices &lt;strong&gt;1&lt;/strong&gt; and &lt;strong&gt;2&lt;/strong&gt; as indicated in the &lt;strong&gt;m&lt;/strong&gt; array.&lt;br&gt;&lt;strong&gt;a[1] = 5&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;a[2] = 3&lt;/strong&gt;&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>John Watson knows of an operation called a right circular rotation on an array of integers. One rotation operation moves the last array element to the first position and shifts all remaining elements right one. To test Sherlock’s abilities, Watson provides Sherlock with an array of integers. Sherlock is to perform the rotation operation a number of times then determine the value of the element at a given position.</p><p>For each array, perform a number of right circular rotations and return the value of the element at a given index.</p><p>For example, array <code>a = [3, 4, 5]</code>, number of rotations, <code>k = 2</code> and indices to check, <code>m = [1, 2]</code>. First we perform the two rotations:<br><code>[3, 4, 5] -&gt; [5, 3, 4] -&gt; [4, 5, 3]</code>  </p><p>Now return the values from the zero-based indices <strong>1</strong> and <strong>2</strong> as indicated in the <strong>m</strong> array.<br><strong>a[1] = 5</strong><br><strong>a[2] = 3</strong></p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the circularArrayRotation function in the editor below. It should return an array of integers representing the values at the specified indices.</p><p>circularArrayRotation has the following parameter(s):</p><ul><li>a: an array of integers to rotate</li><li>k: an integer, the rotation count</li><li>queries: an array of integers, the indices to report</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains <strong>3</strong> space-separated integers, <strong>n</strong>, <strong>k</strong>, and <strong>q</strong>, the number of elements in the integer array, the rotation count and the number of queries.<br>The second line contains <strong>n</strong> space-separated integers, where each integer <strong>k</strong> describes array element <strong>a[i]</strong> (where <img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;i%3C&space;n" alt>).<br>Each of the <strong>q</strong> subsequent lines contains a single integer denoting <strong>m</strong>, the index of the element to return from <strong>a</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;10%5E%7B5%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;a%5Bi%5D%5Cleq&space;10%5E%7B5%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;k%5Cleq&space;10%5E%7B5%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;q%5Cleq&space;500%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;m%3C&space;n" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each query, print the value of the element at index <strong>m</strong> of the rotated array on a new line.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3 2 3</span><br><span class="line">1 2 3</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>After the first rotation, the array becomes <code>[3, 1, 2]</code>. After the second (and final) rotation, the array becomes <code>[2, 3, 1]</code>.</p><p>Let’s refer to the array’s final state as array <code>b = [2, 3, 1]</code>. For each query, we just have to print the value of <img src="https://latex.codecogs.com/gif.latex?b_%7Bm%7D" alt> on a new line:</p><ol><li><img src="https://latex.codecogs.com/gif.latex?m=0,&space;b_%7B0%7D=2." alt></li><li><img src="https://latex.codecogs.com/gif.latex?m=1,&space;b_%7B1%7D=3." alt></li><li><img src="https://latex.codecogs.com/gif.latex?m=2,&space;b_%7B2%7D=1." alt></li></ol><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">circularArrayRotation</span>(<span class="hljs-params">a, k, queries</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> results = a.reduce(<span class="hljs-function">(<span class="hljs-params">target, number, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> currentIndex = (index + k) % a.length;</span><br><span class="line">        target[currentIndex] = number;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> queries.map(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> results[v]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/07/algorithm/hackerrank/34_CircularArrayRotation/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Save the Prisoner!</title>
      <link>https://alleyful.github.io/2019/08/06/algorithm/hackerrank/33_SaveThePrisoner/</link>
      <guid>https://alleyful.github.io/2019/08/06/algorithm/hackerrank/33_SaveThePrisoner/</guid>
      <pubDate>Mon, 05 Aug 2019 15:07:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;A jail has a number of prisoners and a number of treats to pass out to them. Their jailer decides the fairest way to divide the treats is to seat the prisoners around a circular table in sequentially numbered chairs. A chair number will be drawn from a hat. Beginning with the prisoner in that chair, one candy will be handed to each prisoner sequentially around the table until all have been distributed.&lt;/p&gt;
&lt;p&gt;The jailer is playing a little joke, though. The last piece of candy looks like all the others, but it tastes awful. Determine the chair number occupied by the prisoner who will receive that candy.&lt;/p&gt;
&lt;p&gt;For example, there are &lt;strong&gt;4&lt;/strong&gt; prisoners and &lt;strong&gt;6&lt;/strong&gt; pieces of candy. The prisoners arrange themselves in seats numbered &lt;strong&gt;1&lt;/strong&gt; to &lt;strong&gt;4&lt;/strong&gt;. Let’s suppose two is drawn from the hat. Prisoners receive candy at positions &lt;strong&gt;2, 3, 4, 1, 2, 3&lt;/strong&gt;. The prisoner to be warned sits in chair number &lt;strong&gt;3&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>A jail has a number of prisoners and a number of treats to pass out to them. Their jailer decides the fairest way to divide the treats is to seat the prisoners around a circular table in sequentially numbered chairs. A chair number will be drawn from a hat. Beginning with the prisoner in that chair, one candy will be handed to each prisoner sequentially around the table until all have been distributed.</p><p>The jailer is playing a little joke, though. The last piece of candy looks like all the others, but it tastes awful. Determine the chair number occupied by the prisoner who will receive that candy.</p><p>For example, there are <strong>4</strong> prisoners and <strong>6</strong> pieces of candy. The prisoners arrange themselves in seats numbered <strong>1</strong> to <strong>4</strong>. Let’s suppose two is drawn from the hat. Prisoners receive candy at positions <strong>2, 3, 4, 1, 2, 3</strong>. The prisoner to be warned sits in chair number <strong>3</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the saveThePrisoner function in the editor below. It should return an integer representing the chair number of the prisoner to warn.</p><p>saveThePrisoner has the following parameter(s):</p><ul><li>n: an integer, the number of prisoners</li><li>m: an integer, the number of sweets</li><li>s: an integer, the chair number to begin passing out sweets from</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer, <strong>t</strong>, denoting the number of test cases.<br>The next <strong>t</strong> lines each contain <strong>3</strong> space-separated integers: </p><ul><li><strong>n</strong>: the number of prisoners </li><li><strong>m</strong>: the number of sweets </li><li><strong>s</strong>: the chair number to start passing out treats at</li></ul><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;t%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;10%5E%7B9%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;m%5Cleq&space;10%5E%7B9%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;s%5Cleq&space;n" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each test case, print the chair number of the prisoner who receives the awful treat on a new line.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">5 2 1</span><br><span class="line">5 2 2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>In first query, there are <code>n = 5</code> prisoners and <code>m = 2</code> sweets. Distribution starts at seat number <code>s = 1</code>. Prisoners in seats numbered <strong>1</strong> and <strong>2</strong> get sweets. Warn prisoner <strong>2</strong>. In the second query, distribution starts at seat <strong>2</strong> so prisoners in seats <strong>2</strong> and <strong>3</strong> get sweets. Warn prisoner <strong>3</strong>.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">7 19 2</span><br><span class="line">3 7 3</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>In the first test case, there are <code>n = 7</code> prisoners, <code>m = 19</code> sweets and they are passed out starting at chair <code>s = 2</code>. The candies go all around twice and there are <strong>5</strong> more candies passed to each prisoner from seat <strong>2</strong> to seat <strong>6</strong>.</p><p>In the second test case, there are <code>n = 3</code> prisoners, <code>m = 7</code> candies and they are passed out starting at seat <code>s = 3</code>. They go around twice, and there is one more to pass out to the prisoner at seat <strong>3</strong>.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">saveThePrisoner</span>(<span class="hljs-params">n, m, s</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> result = (m - <span class="hljs-number">1</span> + s) % n;</span><br><span class="line">    <span class="hljs-keyword">return</span> result === <span class="hljs-number">0</span> ? n : result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/06/algorithm/hackerrank/33_SaveThePrisoner/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Viral Advertising</title>
      <link>https://alleyful.github.io/2019/08/05/algorithm/hackerrank/32_ViralAdvertising/</link>
      <guid>https://alleyful.github.io/2019/08/05/algorithm/hackerrank/32_ViralAdvertising/</guid>
      <pubDate>Sun, 04 Aug 2019 15:03:29 GMT</pubDate>
      <description>
      
        &lt;p&gt;HackerLand Enterprise is adopting a new viral advertising strategy. When they launch a new product, they advertise it to exactly &lt;strong&gt;5&lt;/strong&gt; people on social media.&lt;/p&gt;
&lt;p&gt;On the first day, half of those &lt;strong&gt;5&lt;/strong&gt; people (i.e., &lt;img src=&quot;https://latex.codecogs.com/gif.latex?floor(%5Cfrac%7B5%7D%7B2%7D)&amp;space;=&amp;space;2&quot; alt&gt;) like the advertisement and each shares it with &lt;strong&gt;3&lt;/strong&gt; of their friends. At the beginning of the second day, &lt;img src=&quot;https://latex.codecogs.com/gif.latex?floor(%5Cfrac%7B5%7D%7B2%7D)%5Ctimes&amp;space;3&amp;space;=&amp;space;2%5Ctimes&amp;space;3=6&quot; alt&gt; people receive the advertisement.&lt;/p&gt;
&lt;p&gt;Each day, &lt;img src=&quot;https://latex.codecogs.com/gif.latex?floor(%5Cfrac%7Brecipients%7D%7B2%7D)&quot; alt&gt; of the recipients like the advertisement and will share it with &lt;strong&gt;3&lt;/strong&gt; friends on the following day. Assuming nobody receives the advertisement twice, determine how many people have liked the ad by the end of a given day, beginning with launch day as day &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, assume you want to know how many have liked the ad by the end of the &lt;img src=&quot;https://latex.codecogs.com/gif.latex?5%5E%7Bth%7D&quot; alt&gt; day.&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Day Shared Liked Cumulative&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1      5     2       2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2      6     3       5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3      9     4       9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4     12     6      15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5     18     9      24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The cumulative number of likes is &lt;strong&gt;24&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>HackerLand Enterprise is adopting a new viral advertising strategy. When they launch a new product, they advertise it to exactly <strong>5</strong> people on social media.</p><p>On the first day, half of those <strong>5</strong> people (i.e., <img src="https://latex.codecogs.com/gif.latex?floor(%5Cfrac%7B5%7D%7B2%7D)&space;=&space;2" alt>) like the advertisement and each shares it with <strong>3</strong> of their friends. At the beginning of the second day, <img src="https://latex.codecogs.com/gif.latex?floor(%5Cfrac%7B5%7D%7B2%7D)%5Ctimes&space;3&space;=&space;2%5Ctimes&space;3=6" alt> people receive the advertisement.</p><p>Each day, <img src="https://latex.codecogs.com/gif.latex?floor(%5Cfrac%7Brecipients%7D%7B2%7D)" alt> of the recipients like the advertisement and will share it with <strong>3</strong> friends on the following day. Assuming nobody receives the advertisement twice, determine how many people have liked the ad by the end of a given day, beginning with launch day as day <strong>1</strong>.</p><p>For example, assume you want to know how many have liked the ad by the end of the <img src="https://latex.codecogs.com/gif.latex?5%5E%7Bth%7D" alt> day.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Day Shared Liked Cumulative</span><br><span class="line">1      5     2       2</span><br><span class="line">2      6     3       5</span><br><span class="line">3      9     4       9</span><br><span class="line">4     12     6      15</span><br><span class="line">5     18     9      24</span><br></pre></td></tr></table></figure><p>The cumulative number of likes is <strong>24</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the viralAdvertising function in the editor below. It should return the cumulative number of people who have liked the ad at a given time.</p><p>viralAdvertising has the following parameter(s):</p><ul><li>n: the integer number of days</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>A single integer, <strong>n</strong>, denoting a number of days.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the number of people who liked the advertisement during the first <strong>n</strong> days.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>This example is depicted in the following diagram:</p><p><img src="./images/viralAdvertising.png" alt></p><p><strong>2</strong> people liked the advertisement on the first day, <strong>3</strong> people liked the advertisement on the second day and <strong>4</strong> people liked the advertisement on the third day, so the answer is <code>2 + 3 + 4 = 9</code>.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">viralAdvertising</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(n).fill(<span class="hljs-built_in">Math</span>.floor(<span class="hljs-number">5</span> / <span class="hljs-number">2</span>)).reduce(<span class="hljs-function">(<span class="hljs-params">target, day, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> number = index === <span class="hljs-number">0</span> ? day : <span class="hljs-built_in">Math</span>.floor(target[<span class="hljs-string">'prev'</span>] * <span class="hljs-number">3</span> / <span class="hljs-number">2</span>);</span><br><span class="line">        target[<span class="hljs-string">'prev'</span>] = number;</span><br><span class="line">        target[<span class="hljs-string">'Cumulative'</span>] += number;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, &#123;<span class="hljs-attr">Cumulative</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">prev</span>: <span class="hljs-number">0</span>&#125;)[<span class="hljs-string">'Cumulative'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/05/algorithm/hackerrank/32_ViralAdvertising/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Beautiful Days at the Movies</title>
      <link>https://alleyful.github.io/2019/08/04/algorithm/hackerrank/31_BeautifulDaysAtTheMovies/</link>
      <guid>https://alleyful.github.io/2019/08/04/algorithm/hackerrank/31_BeautifulDaysAtTheMovies/</guid>
      <pubDate>Sat, 03 Aug 2019 15:15:29 GMT</pubDate>
      <description>
      
        &lt;p&gt;Lily likes to play games with integers. She has created a new game where she determines the difference between a number and its reverse. For instance, given the number &lt;strong&gt;12&lt;/strong&gt;, its reverse is &lt;strong&gt;21&lt;/strong&gt;. Their difference is &lt;strong&gt;9&lt;/strong&gt;. The number &lt;strong&gt;120&lt;/strong&gt; reversed is &lt;strong&gt;21&lt;/strong&gt;, and their difference is &lt;strong&gt;99&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;She decides to apply her game to decision making. She will look at a numbered range of days and will only go to a movie on a beautiful day.&lt;/p&gt;
&lt;p&gt;Given a range of numbered days, &lt;strong&gt;[i … j]&lt;/strong&gt; and a number &lt;strong&gt;k&lt;/strong&gt;, determine the number of days in the range that are beautiful.&lt;br&gt;Beautiful numbers are defined as numbers where &lt;code&gt;|i - reverse(i)|&lt;/code&gt; is evenly divisible by &lt;strong&gt;k&lt;/strong&gt;. If a day’s value is a beautiful number, it is a beautiful day. Print the number of beautiful days in the range.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Lily likes to play games with integers. She has created a new game where she determines the difference between a number and its reverse. For instance, given the number <strong>12</strong>, its reverse is <strong>21</strong>. Their difference is <strong>9</strong>. The number <strong>120</strong> reversed is <strong>21</strong>, and their difference is <strong>99</strong>.</p><p>She decides to apply her game to decision making. She will look at a numbered range of days and will only go to a movie on a beautiful day.</p><p>Given a range of numbered days, <strong>[i … j]</strong> and a number <strong>k</strong>, determine the number of days in the range that are beautiful.<br>Beautiful numbers are defined as numbers where <code>|i - reverse(i)|</code> is evenly divisible by <strong>k</strong>. If a day’s value is a beautiful number, it is a beautiful day. Print the number of beautiful days in the range.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the beautifulDays function in the editor below. It must return the number of beautiful days in the range.</p><p>beautifulDays has the following parameter(s):</p><ul><li>i: the starting day number</li><li>j: the ending day number</li><li>k: the divisor</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>A single line of three space-separated integers describing the respective values of <strong>i</strong>, <strong>j</strong>, and <strong>k</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;i%5Cleq&space;j%5Cleq&space;2%5Ctimes&space;10%5E%7B6%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;k%5Cleq&space;2%5Ctimes&space;10%5E%7B9%7D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the number of beautiful days in the inclusive range between <strong>i</strong> and <strong>j</strong>.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 23 6</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Lily may go to the movies on days <strong>20</strong>, <strong>21</strong>, <strong>22</strong>, and <strong>23</strong>. We perform the following calculations to determine which days are beautiful:</p><ul><li>Day <strong>20</strong> is beautiful because the following evaluates to a whole number: <img src="https://latex.codecogs.com/gif.latex?%5Cfrac%7B%7C20-02%7C%7D%7B6%7D=%5Cfrac%7B18%7D%7B6%7D=3" alt></li><li>Day <strong>21</strong> is not beautiful because the following doesn’t evaluate to a whole number: <img src="https://latex.codecogs.com/gif.latex?%5Cfrac%7B%7C21-12%7C%7D%7B6%7D=%5Cfrac%7B9%7D%7B6%7D=1.5" alt></li><li>Day <strong>22</strong> is beautiful because the following evaluates to a whole number: <img src="https://latex.codecogs.com/gif.latex?%5Cfrac%7B%7C22-22%7C%7D%7B6%7D=%5Cfrac%7B0%7D%7B6%7D=0" alt></li><li>Day <strong>23</strong> is not beautiful because the following doesn’t evaluate to a whole number: <img src="https://latex.codecogs.com/gif.latex?%5Cfrac%7B%7C23-32%7C%7D%7B6%7D=%5Cfrac%7B9%7D%7B6%7D=1.5" alt></li></ul><p>Only two days, <strong>20</strong> and <strong>22</strong>, in this interval are beautiful. Thus, we print <strong>2</strong> as our answer.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">beautifulDays</span>(<span class="hljs-params">i, j, k</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(j - i + <span class="hljs-number">1</span>).fill(<span class="hljs-number">0</span>).reduce(<span class="hljs-function">(<span class="hljs-params">target, number, index</span>) =&gt;</span> &#123; </span><br><span class="line">        (<span class="hljs-built_in">Number</span>([...String(index + i)].reverse().join(<span class="hljs-string">''</span>)) - (index + i)) % k === <span class="hljs-number">0</span> &amp;&amp; ++target;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/04/algorithm/hackerrank/31_BeautifulDaysAtTheMovies/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Angry Professor</title>
      <link>https://alleyful.github.io/2019/08/03/algorithm/hackerrank/30_AngryProfessor/</link>
      <guid>https://alleyful.github.io/2019/08/03/algorithm/hackerrank/30_AngryProfessor/</guid>
      <pubDate>Fri, 02 Aug 2019 15:30:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;A Discrete Mathematics professor has a class of students. Frustrated with their lack of discipline, he decides to cancel class if fewer than some number of students are present when class starts. Arrival times go from on time (&lt;img src=&quot;https://latex.codecogs.com/gif.latex?arrivalTime%5Cleq&amp;space;0&quot; alt&gt;) to arrived late (&lt;img src=&quot;https://latex.codecogs.com/gif.latex?arrivalTime%3E&amp;space;0&quot; alt&gt;).&lt;/p&gt;
&lt;p&gt;Given the arrival time of each student and a threshhold number of attendees, determine if the class is canceled.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>A Discrete Mathematics professor has a class of students. Frustrated with their lack of discipline, he decides to cancel class if fewer than some number of students are present when class starts. Arrival times go from on time (<img src="https://latex.codecogs.com/gif.latex?arrivalTime%5Cleq&space;0" alt>) to arrived late (<img src="https://latex.codecogs.com/gif.latex?arrivalTime%3E&space;0" alt>).</p><p>Given the arrival time of each student and a threshhold number of attendees, determine if the class is canceled.</p><br><a id="more"></a><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line of input contains <strong>t</strong>, the number of test cases.</p><p>Each test case consists of two lines.</p><p>The first line has two space-separated integers, <strong>n</strong> and <strong>k</strong>, the number of students (size of <strong>a</strong>) and the cancellation threshold.<br>The second line contains <strong>n</strong> space-separated integers (<strong>a[1], a[2], …, a[n]</strong>) describing the arrival times for each student.</p><p><strong>Note</strong>: Non-positive arrival times (<strong><img src="https://latex.codecogs.com/gif.latex?a%5Bi%5D%5Cleq&space;0" alt></strong>) indicate the student arrived early or on time; positive arrival times (<img src="https://latex.codecogs.com/gif.latex?a%5Bi%5D%3E&space;0" alt>) indicate the student arrived <strong>a[i]</strong> minutes late.</p><p>For example, there are <strong>n = 6</strong> students who arrive at times <strong>a = [-1, -1, 0, 0, 1, 1]</strong>. Four are there on time, and two arrive late. If there must be <strong>k = 4</strong> for class to go on, in this case the class will continue. If there must be <strong>k = 5</strong>, then class is cancelled.</p><br><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the angryProfessor function in the editor below. It must return YES if class is cancelled, or NO otherwise.</p><p>angryProfessor has the following parameter(s):</p><ul><li>k: the threshold number of students</li><li>a: an array of integers representing arrival times</li></ul><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;t%5Cleq&space;10" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;1000" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;k%5Cleq&space;n" alt></li><li><img src="https://latex.codecogs.com/gif.latex?-100%5Cleq&space;a%5Bi%5D%5Cleq&space;100,&space;where&space;i%5Cin&space;%5B1,&space;...n%5D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each test case, print the word YES if the class is canceled or NO if it is not.</p><br><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>If a student arrives exactly on time (<img src="https://latex.codecogs.com/gif.latex?a_%7Bi%7D&space;=&space;0" alt>), the student is considered to have entered before the class started.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4 3</span><br><span class="line">-1 -3 4 2</span><br><span class="line">4 2</span><br><span class="line">0 -1 2 1</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>For the first test case, <strong>k = 3</strong>. The professor wants at least <strong>3</strong> students in attendance, but only <strong>2</strong> have arrived on time (<strong>-3</strong> and <strong>-1</strong>) so the class is cancelled.</p><p>For the second test case, <strong>k = 2</strong>. The professor wants at least <strong>2</strong> students in attendance, and there are <strong>2</strong> who have arrived on time (<strong>0</strong> and <strong>-1</strong>) so the class is not cancelled.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">angryProfessor</span>(<span class="hljs-params">k, a</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> a.reduce(<span class="hljs-function">(<span class="hljs-params">target, time</span>) =&gt;</span> &#123; </span><br><span class="line">        <span class="hljs-keyword">return</span> time &lt;= <span class="hljs-number">0</span> ? ++target : target;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>) &gt;= k ? <span class="hljs-string">'NO'</span> : <span class="hljs-string">'YES'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/03/algorithm/hackerrank/30_AngryProfessor/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Utopian Tree</title>
      <link>https://alleyful.github.io/2019/08/02/algorithm/hackerrank/29_UtopianTree/</link>
      <guid>https://alleyful.github.io/2019/08/02/algorithm/hackerrank/29_UtopianTree/</guid>
      <pubDate>Fri, 02 Aug 2019 08:23:41 GMT</pubDate>
      <description>
      
        &lt;p&gt;The Utopian Tree goes through 2 cycles of growth every year. Each spring, it doubles in height. Each summer, its height increases by 1 meter.&lt;/p&gt;
&lt;p&gt;Laura plants a Utopian Tree sapling with a height of 1 meter at the onset of spring. How tall will her tree be after &lt;strong&gt;n&lt;/strong&gt; growth cycles?&lt;/p&gt;
&lt;p&gt;For example, if the number of growth cycles is &lt;strong&gt;n = 5&lt;/strong&gt;, the calculations are as follows:&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Period  Height&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0          1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1          2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2          3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3          6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4          7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5          14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>The Utopian Tree goes through 2 cycles of growth every year. Each spring, it doubles in height. Each summer, its height increases by 1 meter.</p><p>Laura plants a Utopian Tree sapling with a height of 1 meter at the onset of spring. How tall will her tree be after <strong>n</strong> growth cycles?</p><p>For example, if the number of growth cycles is <strong>n = 5</strong>, the calculations are as follows:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Period  Height</span><br><span class="line">0          1</span><br><span class="line">1          2</span><br><span class="line">2          3</span><br><span class="line">3          6</span><br><span class="line">4          7</span><br><span class="line">5          14</span><br></pre></td></tr></table></figure><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the utopianTree function in the editor below. It should return the integer height of the tree after the input number of growth cycles.</p><p>utopianTree has the following parameter(s):</p><ul><li>n: an integer, the number of growth cycles to simulate</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer, <strong>t</strong>, the number of test cases.<br><strong>t</strong> subsequent lines each contain an integer, <strong>n</strong>, denoting the number of cycles for that test case.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;t%5Cleq&space;10" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;n%5Cleq&space;60" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each test case, print the height of the Utopian Tree after  cycles. Each height must be printed on a new line.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">4</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">7</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>There are 3 test cases.</p><p>In the first case (<strong>n = 0</strong>), the initial height (<strong>H = 1</strong>) of the tree remains unchanged.</p><p>In the second case (<strong>n = 1</strong>), the tree doubles in height and is <strong>2</strong> meters tall after the spring cycle.</p><p>In the third case (<strong>n = 4</strong>), the tree doubles its height in spring (<strong>n = 1</strong>, <strong>H = 2</strong> ), then grows a meter in summer (<strong>n = 2</strong>, <strong>H = 3</strong>), then doubles after the next spring (<strong>n = 3</strong>, <strong>H = 6</strong>), and grows another meter after summer (<strong>n = 4</strong>, <strong>H = 7</strong>). Thus, at the end of 4 cycles, its height is <strong>7</strong> meters.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">utopianTree</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(n).fill(<span class="hljs-number">0</span>).reduce(<span class="hljs-function">(<span class="hljs-params">target, value, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> target = (index % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>) ? target * <span class="hljs-number">2</span> : target + <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;, <span class="hljs-number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/02/algorithm/hackerrank/29_UtopianTree/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Designer PDF Viewer</title>
      <link>https://alleyful.github.io/2019/08/01/algorithm/hackerrank/28_DesignerPDFViewer/</link>
      <guid>https://alleyful.github.io/2019/08/01/algorithm/hackerrank/28_DesignerPDFViewer/</guid>
      <pubDate>Wed, 31 Jul 2019 15:03:16 GMT</pubDate>
      <description>
      
        &lt;p&gt;When you select a contiguous block of text in a PDF viewer, the selection is highlighted with a blue rectangle. In this PDF viewer, each word is highlighted independently. For example:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/designerPDF.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;In this challenge, you will be given a list of letter heights in the alphabet and a string. Using the letter heights given, determine the area of the rectangle highlight in &lt;img src=&quot;https://latex.codecogs.com/gif.latex?mm%5E%7B2%7D&quot; alt&gt; assuming all letters are &lt;strong&gt;1mm&lt;/strong&gt; wide.&lt;/p&gt;
&lt;p&gt;For example, the highlighted &lt;code&gt;word = torn&lt;/code&gt;. Assume the heights of the letters are &lt;code&gt;t = 2, o = 1, r = 1&lt;/code&gt; and &lt;code&gt;n = 1&lt;/code&gt;. The tallest letter is &lt;strong&gt;2&lt;/strong&gt; high and there are &lt;strong&gt;4&lt;/strong&gt; letters. The hightlighted area will be &lt;strong&gt;2 * 4 = 8&lt;img src=&quot;https://latex.codecogs.com/gif.latex?mm%5E%7B2%7D&quot; alt&gt;&lt;/strong&gt; so the answer is &lt;strong&gt;8&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>When you select a contiguous block of text in a PDF viewer, the selection is highlighted with a blue rectangle. In this PDF viewer, each word is highlighted independently. For example:</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/designerPDF.png" alt></p><p>In this challenge, you will be given a list of letter heights in the alphabet and a string. Using the letter heights given, determine the area of the rectangle highlight in <img src="https://latex.codecogs.com/gif.latex?mm%5E%7B2%7D" alt> assuming all letters are <strong>1mm</strong> wide.</p><p>For example, the highlighted <code>word = torn</code>. Assume the heights of the letters are <code>t = 2, o = 1, r = 1</code> and <code>n = 1</code>. The tallest letter is <strong>2</strong> high and there are <strong>4</strong> letters. The hightlighted area will be <strong>2 * 4 = 8<img src="https://latex.codecogs.com/gif.latex?mm%5E%7B2%7D" alt></strong> so the answer is <strong>8</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the designerPdfViewer function in the editor below. It should return an integer representing the size of the highlighted area.</p><p>designerPdfViewer has the following parameter(s):</p><ul><li>h: an array of integers representing the heights of each letter</li><li>word: a string</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains <strong>26</strong> space-separated integers describing the respective heights of each consecutive lowercase English letter, ascii[a-z].<br>The second line contains a single word, consisting of lowercase English alphabetic letters.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;h%5B?%5D%5Cleq&space;7" alt>, where <strong>?</strong> is an English lowercase letter.</li><li><strong>word</strong> contains no more than <strong>10</strong> letters.</li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single integer denoting the area in <img src="https://latex.codecogs.com/gif.latex?mm%5E%7B2%7D" alt> of highlighted rectangle when the given word is selected. Do not print units of measure.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 3 1 3 1 4 1 3 2 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5</span><br><span class="line">abc</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>We are highlighting the word abc:</p><p>Letter heights are <strong>a = 1, b = 3</strong>, and <strong>c = 1</strong>. The tallest letter, b, is <strong>3mm</strong> high. The selection area for this word is <strong>3 x 1mm x 3mm = 9<img src="https://latex.codecogs.com/gif.latex?mm%5E%7B2%7D" alt></strong>.</p><p>Note: Recall that the width of each character is <strong>1mm</strong>.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 3 1 3 1 4 1 3 2 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 7</span><br><span class="line">zaba</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">28</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>The tallest letter in <strong>zaba</strong> is <strong>z</strong> at <strong>7mm</strong>. The selection area for this word is <strong>4 x 1mm x 7mm = 28<img src="https://latex.codecogs.com/gif.latex?mm%5E%7B2%7D" alt></strong>.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">designerPdfViewer</span>(<span class="hljs-params">h, word</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> words = [...word];</span><br><span class="line">    <span class="hljs-keyword">const</span> chatA = <span class="hljs-string">'a'</span>.charCodeAt();</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(...words.reduce(<span class="hljs-function">(<span class="hljs-params">target, string</span>) =&gt;</span> &#123; </span><br><span class="line">        target.push(h[string.charCodeAt() - chatA]);</span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, [])) * words.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/01/algorithm/hackerrank/28_DesignerPDFViewer/#disqus_thread</comments>
    </item>
    
    <item>
      <title>The Hurdle Race</title>
      <link>https://alleyful.github.io/2019/07/31/algorithm/hackerrank/27_TheHurdleRace/</link>
      <guid>https://alleyful.github.io/2019/07/31/algorithm/hackerrank/27_TheHurdleRace/</guid>
      <pubDate>Tue, 30 Jul 2019 15:31:58 GMT</pubDate>
      <description>
      
        &lt;p&gt;Dan is playing a video game in which his character competes in a hurdle race. Hurdles are of varying heights, and Dan has a maximum height he can jump. There is a magic potion he can take that will increase his maximum height by &lt;strong&gt;1&lt;/strong&gt; unit for each dose. How many doses of the potion must he take to be able to jump all of the hurdles.&lt;/p&gt;
&lt;p&gt;Given an array of hurdle heights &lt;strong&gt;height&lt;/strong&gt;, and an initial maximum height Dan can jump, &lt;strong&gt;k&lt;/strong&gt;, determine the minimum number of doses Dan must take to be able to clear all the hurdles in the race.&lt;/p&gt;
&lt;p&gt;For example, if &lt;code&gt;height = [1, 2, 3, 3, 2]&lt;/code&gt; and Dan can jump &lt;strong&gt;1&lt;/strong&gt; unit high naturally, he must take &lt;strong&gt;3 - 1 = 2&lt;/strong&gt; doses of potion to be able to jump all of the hurdles.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Dan is playing a video game in which his character competes in a hurdle race. Hurdles are of varying heights, and Dan has a maximum height he can jump. There is a magic potion he can take that will increase his maximum height by <strong>1</strong> unit for each dose. How many doses of the potion must he take to be able to jump all of the hurdles.</p><p>Given an array of hurdle heights <strong>height</strong>, and an initial maximum height Dan can jump, <strong>k</strong>, determine the minimum number of doses Dan must take to be able to clear all the hurdles in the race.</p><p>For example, if <code>height = [1, 2, 3, 3, 2]</code> and Dan can jump <strong>1</strong> unit high naturally, he must take <strong>3 - 1 = 2</strong> doses of potion to be able to jump all of the hurdles.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the hurdleRace function in the editor below. It should return the minimum units of potion Dan needs to drink to jump all of the hurdles.</p><p>hurdleRace has the following parameter(s):</p><ul><li>k: an integer denoting the height Dan can jump naturally</li><li>height: an array of integers denoting the heights of each hurdle</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains two space-separated integers <strong>n</strong> and <strong>k</strong>, the number of hurdles and the maximum height Dan can jump naturally.<br>The second line contains <strong>n</strong> space-separated integers <strong>height[i]</strong> where <img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;i%3C&space;n" alt>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n,&space;k%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;height%5Bi%5D%5Cleq&space;100" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print an integer denoting the minimum doses of magic potion Dan must drink to complete the hurdle race.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 4</span><br><span class="line">1 6 3 5 2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>Dan’s character can jump a maximum of <strong>k = 4</strong> units, but the tallest hurdle has a height of <img src="https://latex.codecogs.com/gif.latex?h_%7B1%7D&space;=&space;6" alt>:</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/hurdleRace-01.png" alt></p><p>To be able to jump all the hurdles, Dan must drink <strong><code>6 - 4 = 2</code></strong> doses.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 7</span><br><span class="line">2 5 4 5 2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>Dan’s character can jump a maximum of <strong>k = 7</strong> units, which is enough to cross all the hurdles:</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/hurdleRace-02.png" alt></p><p>Because he can already jump all the hurdles, Dan needs to drink <strong>0</strong> doses.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hurdleRace</span>(<span class="hljs-params">k, height</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(...height.reduce(<span class="hljs-function">(<span class="hljs-params">target, item</span>) =&gt;</span> &#123;</span><br><span class="line">        target.push(item - k &gt; <span class="hljs-number">0</span> ? item - k : <span class="hljs-number">0</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/07/31/algorithm/hackerrank/27_TheHurdleRace/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Picking Numbers</title>
      <link>https://alleyful.github.io/2019/07/30/algorithm/hackerrank/26_PickingNumbers/</link>
      <guid>https://alleyful.github.io/2019/07/30/algorithm/hackerrank/26_PickingNumbers/</guid>
      <pubDate>Tue, 30 Jul 2019 04:52:11 GMT</pubDate>
      <description>
      
        &lt;p&gt;Given an array of integers, find and print the maximum number of integers you can select from the array such that the absolute difference between any two of the chosen integers is less than or equal to &lt;strong&gt;1&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;For example, if your array is &lt;code&gt;a = [1, 1, 2, 2, 4, 4, 5, 5, 5]&lt;/code&gt;, you can create two subarrays meeting the criterion: &lt;code&gt;[1, 1, 2, 2]&lt;/code&gt; and &lt;code&gt;[4, 4, 5, 5, 5]&lt;/code&gt;. The maximum length subarray has &lt;strong&gt;5&lt;/strong&gt; elements.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Given an array of integers, find and print the maximum number of integers you can select from the array such that the absolute difference between any two of the chosen integers is less than or equal to <strong>1</strong>. </p><p>For example, if your array is <code>a = [1, 1, 2, 2, 4, 4, 5, 5, 5]</code>, you can create two subarrays meeting the criterion: <code>[1, 1, 2, 2]</code> and <code>[4, 4, 5, 5, 5]</code>. The maximum length subarray has <strong>5</strong> elements.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the pickingNumbers function in the editor below. It should return an integer that represents the length of the longest array that can be created.</p><p>pickingNumbers has the following parameter(s):</p><ul><li>a: an array of integers</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains a single integer <strong>n</strong>, the size of the array <strong>a</strong>. The second line contains <strong>n</strong> space-separated integers <strong>a[i]</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;n%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%3C&space;a%5Bi%5D%3C&space;100" alt></li><li>The answer will be <img src="https://latex.codecogs.com/gif.latex?%5Cgeq&space;2" alt>.</li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>A single integer denoting the maximum number of integers you can choose from the array such that the absolute difference between any two of the chosen integers is <img src="https://latex.codecogs.com/gif.latex?%5Cleq&space;1" alt>.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">4 6 5 3 3 1</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>We choose the following multiset of integers from the array: <strong>{4, 3, 3}</strong>. Each pair in the multiset has an absolute difference <img src="https://latex.codecogs.com/gif.latex?%5Cleq&space;1" alt>(i.e., <strong>|4 - 3| = 1</strong> and <strong>|3 - 3| = 0</strong>), so we print the number of chosen integers, <strong>3</strong>, as our answer.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">1 2 2 3 1 2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>We choose the following multiset of integers from the array: <strong>{1, 2, 2, 1, 2}</strong>. Each pair in the multiset has an absolute difference <img src="https://latex.codecogs.com/gif.latex?%5Cleq&space;1" alt> (i.e., <strong>|1 - 2| = 1</strong>, <strong>|1 - 1| = 0</strong>, and <strong>|2 - 2| = 0</strong>), so we print the number of chosen integers, <strong>5</strong>, as our answer.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pickingNumbers</span>(<span class="hljs-params">a</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> sorted = a.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="hljs-keyword">let</span> checkNumber = sorted[<span class="hljs-number">0</span>];</span><br><span class="line">    <span class="hljs-keyword">let</span> group = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(...sorted.reduce(<span class="hljs-function">(<span class="hljs-params">target, number</span>) =&gt;</span> &#123; </span><br><span class="line">        !(<span class="hljs-built_in">Math</span>.abs(number - checkNumber) &lt;= <span class="hljs-number">1</span>) &amp;&amp; (checkNumber = number, group++);</span><br><span class="line">            </span><br><span class="line">        target[group] ? target[group]++ : target.push(<span class="hljs-number">1</span>);     </span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/07/30/algorithm/hackerrank/26_PickingNumbers/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Forming a Magic Square</title>
      <link>https://alleyful.github.io/2019/07/29/algorithm/hackerrank/25_FormingAMagicSquare/</link>
      <guid>https://alleyful.github.io/2019/07/29/algorithm/hackerrank/25_FormingAMagicSquare/</guid>
      <pubDate>Mon, 29 Jul 2019 05:19:38 GMT</pubDate>
      <description>
      
        &lt;p&gt;We define a magic square to be an &lt;code&gt;n x m&lt;/code&gt; matrix of distinct positive integers from &lt;strong&gt;1&lt;/strong&gt; to &lt;strong&gt;&lt;img src=&quot;https://latex.codecogs.com/gif.latex?n%5E%7B2%7D&quot; alt&gt;&lt;/strong&gt; where the sum of any row, column, or diagonal of length &lt;strong&gt;n&lt;/strong&gt; is always equal to the same number: the magic constant.&lt;/p&gt;
&lt;p&gt;You will be given a &lt;code&gt;3 x 3&lt;/code&gt; matrix  of integers in the inclusive range &lt;strong&gt;[1, 9]&lt;/strong&gt;. We can convert any digit &lt;strong&gt;a&lt;/strong&gt; to any other digit &lt;strong&gt;b&lt;/strong&gt; in the range &lt;strong&gt;[1, 9]&lt;/strong&gt; at cost of &lt;strong&gt;|a - b|&lt;/strong&gt;. Given &lt;strong&gt;s&lt;/strong&gt;, convert it into a magic square at minimal cost. Print this cost on a new line.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The resulting magic square must contain distinct integers in the inclusive range &lt;strong&gt;[1, 9]&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, we start with the following matrix &lt;strong&gt;s&lt;/strong&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;5 3 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 5 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6 4 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We can convert it to the following magic square:&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;8 3 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 5 9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6 7 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This took three replacements at a cost of &lt;strong&gt;|5 - 8| + |8 - 9| + |4 - 7| = 7&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>We define a magic square to be an <code>n x m</code> matrix of distinct positive integers from <strong>1</strong> to <strong><img src="https://latex.codecogs.com/gif.latex?n%5E%7B2%7D" alt></strong> where the sum of any row, column, or diagonal of length <strong>n</strong> is always equal to the same number: the magic constant.</p><p>You will be given a <code>3 x 3</code> matrix  of integers in the inclusive range <strong>[1, 9]</strong>. We can convert any digit <strong>a</strong> to any other digit <strong>b</strong> in the range <strong>[1, 9]</strong> at cost of <strong>|a - b|</strong>. Given <strong>s</strong>, convert it into a magic square at minimal cost. Print this cost on a new line.</p><p><strong>Note</strong>: The resulting magic square must contain distinct integers in the inclusive range <strong>[1, 9]</strong>.</p><p>For example, we start with the following matrix <strong>s</strong>:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 3 4</span><br><span class="line">1 5 8</span><br><span class="line">6 4 2</span><br></pre></td></tr></table></figure><p>We can convert it to the following magic square:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">8 3 4</span><br><span class="line">1 5 9</span><br><span class="line">6 7 2</span><br></pre></td></tr></table></figure><p>This took three replacements at a cost of <strong>|5 - 8| + |8 - 9| + |4 - 7| = 7</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the formingMagicSquare function in the editor below. It should return an integer that represents the minimal total cost of converting the input square to a magic square.</p><p>formingMagicSquare has the following parameter(s):</p><ul><li>s: a <strong>3 x 3</strong> array of integers</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>Each of the lines contains three space-separated integers of row <strong>s[i]</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?s%5Bi%5D%5Bj%5D%5Cin&space;%5B1,&space;9%5D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print an integer denoting the minimum cost of turning matrix <strong>s</strong> into a magic square.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4 9 2</span><br><span class="line">3 5 7</span><br><span class="line">8 1 5</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>If we change the bottom right value, <strong>s[2][2]</strong>, from <strong>5</strong> to <strong>6</strong> at a cost of <strong>|6 - 5| = 1</strong>, <strong>s</strong> becomes a magic square at the minimum possible cost.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4 8 2</span><br><span class="line">4 5 7</span><br><span class="line">6 1 6</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>Using 0-based indexing, if we make</p><ul><li><strong>s[0][1]</strong> -&gt; <strong>9</strong> at a cost of <code>|9 - 8| = 1</code></li><li><strong>s[1][0]</strong> -&gt; <strong>3</strong> at a cost of <code>|3 - 4| = 1</code></li><li><strong>s[2][0]</strong> -&gt; <strong>8</strong> at a cost of <code>|8 - 6| = 2</code>  </li></ul><p>then the total cost will be <code>1 + 1 + 2 = 4</code>.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">formingMagicSquare</span>(<span class="hljs-params">s</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> magicSquare = [</span><br><span class="line">        [<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>],</span><br><span class="line">        [<span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>],</span><br><span class="line">        [<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>],</span><br><span class="line">        [<span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>],</span><br><span class="line">        [<span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>],</span><br><span class="line">        [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],</span><br><span class="line">        [<span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>],</span><br><span class="line">        [<span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>]    </span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> inputData = s.reduce(<span class="hljs-function">(<span class="hljs-params">target, array</span>) =&gt;</span> &#123; </span><br><span class="line">        target.push(...array);</span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.min(...magicSquare.reduce(<span class="hljs-function">(<span class="hljs-params">target, ms</span>) =&gt;</span> &#123; </span><br><span class="line">        target.push(ms.reduce(<span class="hljs-function">(<span class="hljs-params">innerTarget, number, innerIndex</span>) =&gt;</span> &#123; </span><br><span class="line">            innerTarget += <span class="hljs-built_in">Math</span>.abs(inputData[innerIndex] - number);</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">return</span> innerTarget;</span><br><span class="line">        &#125;, <span class="hljs-number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/07/29/algorithm/hackerrank/25_FormingAMagicSquare/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Cats and a Mouse</title>
      <link>https://alleyful.github.io/2019/07/27/algorithm/hackerrank/24_CatsAndAMouse/</link>
      <guid>https://alleyful.github.io/2019/07/27/algorithm/hackerrank/24_CatsAndAMouse/</guid>
      <pubDate>Fri, 26 Jul 2019 15:12:15 GMT</pubDate>
      <description>
      
        &lt;p&gt;Two cats and a mouse are at various positions on a line. You will be given their starting positions. Your task is to determine which cat will reach the mouse first, assuming the mouse doesn’t move and the cats travel at equal speed. If the cats arrive at the same time, the mouse will be allowed to move and it will escape while they fight.&lt;/p&gt;
&lt;p&gt;You are given &lt;strong&gt;q&lt;/strong&gt; queries in the form of &lt;strong&gt;x&lt;/strong&gt;, &lt;strong&gt;y&lt;/strong&gt;, and &lt;strong&gt;z&lt;/strong&gt; representing the respective positions for cats &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;B&lt;/strong&gt;, and for mouse &lt;strong&gt;C&lt;/strong&gt;. Complete the function &lt;code&gt;catAndMouse&lt;/code&gt; to return the appropriate answer to each query, which will be printed on a new line.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If cat &lt;strong&gt;A&lt;/strong&gt; catches the mouse first, print &lt;code&gt;Cat A&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If cat &lt;strong&gt;B&lt;/strong&gt; catches the mouse first, print &lt;code&gt;Cat B&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If both cats reach the mouse at the same time, print &lt;code&gt;Mouse C&lt;/code&gt; as the two cats fight and mouse escapes.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, cat &lt;strong&gt;A&lt;/strong&gt; is at position &lt;code&gt;x = 2&lt;/code&gt; and cat &lt;strong&gt;B&lt;/strong&gt; is at &lt;code&gt;y = 5&lt;/code&gt;. If mouse &lt;strong&gt;C&lt;/strong&gt; is at position &lt;code&gt;z = 4&lt;/code&gt;, it is &lt;strong&gt;2&lt;/strong&gt; units from cat &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;1&lt;/strong&gt;unit from cat &lt;strong&gt;B&lt;/strong&gt;. Cat &lt;strong&gt;B&lt;/strong&gt; will catch the mouse.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Two cats and a mouse are at various positions on a line. You will be given their starting positions. Your task is to determine which cat will reach the mouse first, assuming the mouse doesn’t move and the cats travel at equal speed. If the cats arrive at the same time, the mouse will be allowed to move and it will escape while they fight.</p><p>You are given <strong>q</strong> queries in the form of <strong>x</strong>, <strong>y</strong>, and <strong>z</strong> representing the respective positions for cats <strong>A</strong> and <strong>B</strong>, and for mouse <strong>C</strong>. Complete the function <code>catAndMouse</code> to return the appropriate answer to each query, which will be printed on a new line.</p><ul><li>If cat <strong>A</strong> catches the mouse first, print <code>Cat A</code>.</li><li>If cat <strong>B</strong> catches the mouse first, print <code>Cat B</code>.</li><li>If both cats reach the mouse at the same time, print <code>Mouse C</code> as the two cats fight and mouse escapes.  </li></ul><p>For example, cat <strong>A</strong> is at position <code>x = 2</code> and cat <strong>B</strong> is at <code>y = 5</code>. If mouse <strong>C</strong> is at position <code>z = 4</code>, it is <strong>2</strong> units from cat <strong>A</strong> and <strong>1</strong>unit from cat <strong>B</strong>. Cat <strong>B</strong> will catch the mouse.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the catAndMouse function in the editor below. It should return one of the three strings as described.</p><p>catAndMouse has the following parameter(s):</p><ul><li>x: an integer, Cat <strong>A</strong>‘s position</li><li>y: an integer, Cat <strong>B</strong>‘s position</li><li>z: an integer, Mouse <strong>C</strong>‘s position</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains a single integer, <strong>q</strong>, denoting the number of queries.<br>Each of the <strong>q</strong> subsequent lines contains three space-separated integers describing the respective values of <strong>x</strong> (cat <strong>A</strong>‘s location), <strong>y</strong> (cat <strong>B</strong>‘s location), and <strong>z</strong> (mouse <strong>C</strong>‘s location).</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;q%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;x,y,z%5Cleq&space;100" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each query, return <code>Cat A</code> if cat <strong>A</strong> catches the mouse first, <code>Cat B</code> if cat <strong>B</strong> catches the mouse first, or <code>Mouse C</code> if the mouse escapes.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1 2 3</span><br><span class="line">1 3 2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cat B</span><br><span class="line">Mouse C</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>Query 0: The positions of the cats and mouse are shown below: </p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/catsAndAMouse-01.png" alt></p><p>Cat <strong>B</strong> will catch the mouse first, so we print Cat B on a new line.</p><p>Query 1: In this query, cats <strong>A</strong> and <strong>B</strong> reach mouse <strong>C</strong> at the exact same time: </p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/catsAndAMouse-02.png" alt></p><p>Because the mouse escapes, we print <code>Mouse C</code> on a new line.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">catAndMouse</span>(<span class="hljs-params">x, y, z</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> catA = <span class="hljs-built_in">Math</span>.abs(z - x);</span><br><span class="line">    <span class="hljs-keyword">const</span> catB = <span class="hljs-built_in">Math</span>.abs(z - y);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> catA &gt; catB ? <span class="hljs-string">'Cat B'</span>: (catA &lt; catB ? <span class="hljs-string">'Cat A'</span> : <span class="hljs-string">'Mouse C'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/07/27/algorithm/hackerrank/24_CatsAndAMouse/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Electronics Shop</title>
      <link>https://alleyful.github.io/2019/07/26/algorithm/hackerrank/23_ElectronicsShop/</link>
      <guid>https://alleyful.github.io/2019/07/26/algorithm/hackerrank/23_ElectronicsShop/</guid>
      <pubDate>Thu, 25 Jul 2019 15:18:51 GMT</pubDate>
      <description>
      
        &lt;p&gt;Monica wants to buy a keyboard and a USB drive from her favorite electronics store. The store has several models of each. Monica wants to spend as much as possible for the &lt;strong&gt;2&lt;/strong&gt; items, given her budget.&lt;/p&gt;
&lt;p&gt;Given the price lists for the store’s keyboards and USB drives, and Monica’s budget, find and print the amount of money Monica will spend. If she doesn’t have enough money to both a keyboard and a USB drive, print -1 instead. She will buy only the two required items.&lt;/p&gt;
&lt;p&gt;For example, suppose she has &lt;code&gt;b = 60&lt;/code&gt; to spend. Three types of keyboards cost &lt;code&gt;keyboard = [40, 50, 60]&lt;/code&gt;. Two USB drives cost &lt;code&gt;drives = [5, 8, 12]&lt;/code&gt;. She could purchase a &lt;code&gt;40 keyboard + 12 USB drive = 52&lt;/code&gt;, or a &lt;code&gt;50 keyboard + 8 USB drive = 58&lt;/code&gt;. She chooses the latter. She can’t buy more than &lt;strong&gt;2&lt;/strong&gt; items so she can’t spend exactly &lt;strong&gt;60&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Monica wants to buy a keyboard and a USB drive from her favorite electronics store. The store has several models of each. Monica wants to spend as much as possible for the <strong>2</strong> items, given her budget.</p><p>Given the price lists for the store’s keyboards and USB drives, and Monica’s budget, find and print the amount of money Monica will spend. If she doesn’t have enough money to both a keyboard and a USB drive, print -1 instead. She will buy only the two required items.</p><p>For example, suppose she has <code>b = 60</code> to spend. Three types of keyboards cost <code>keyboard = [40, 50, 60]</code>. Two USB drives cost <code>drives = [5, 8, 12]</code>. She could purchase a <code>40 keyboard + 12 USB drive = 52</code>, or a <code>50 keyboard + 8 USB drive = 58</code>. She chooses the latter. She can’t buy more than <strong>2</strong> items so she can’t spend exactly <strong>60</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the getMoneySpent function in the editor below. It should return the maximum total price for the two items within Monica’s budget, or <strong>-1</strong> if she cannot afford both items.</p><p>getMoneySpent has the following parameter(s):</p><ul><li>keyboards: an array of integers representing keyboard prices</li><li>drives: an array of integers representing drive prices</li><li>b: the units of currency in Monica’s budget</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains three space-separated integers <strong>b</strong>, <strong>n</strong>, and <strong>m</strong>, her budget, the number of keyboard models and the number of USB drive models.<br>The second line contains <strong>n</strong> space-separated integers <strong>keyboard[i]</strong>, the prices of each keyboard model.<br>The third line contains <strong>m</strong> space-separated integers <strong>drives</strong>, the prices of the USB drives.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n,&space;m%5Cleq&space;1000" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;b%5Cleq&space;10%5E%7B6%7D" alt></li><li>The price of each item is in the inclusive range <img src="https://latex.codecogs.com/gif.latex?%5Cleft&space;%5B&space;1,&space;10%5E%7B6%7D&space;%5Cright&space;%5D" alt>.</li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single integer denoting the amount of money Monica will spend. If she doesn’t have enough money to buy one keyboard and one USB drive, print -1 instead.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10 2 3</span><br><span class="line">3 1</span><br><span class="line">5 2 8</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>She can buy the <img src="https://latex.codecogs.com/gif.latex?2%5E%7Bnd%7D" alt> keyboard and the <img src="https://latex.codecogs.com/gif.latex?3%5E%7Brd%7D" alt> USB drive for a total cost of <code>8 + 1 = 9</code>.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 1 1</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>There is no way to buy one keyboard and one USB drive because <code>4 + 5 &gt; 5</code>, so we print <strong>-1</strong>.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMoneySpent</span>(<span class="hljs-params">keyboards, drives, b</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> result = keyboards.reduce(<span class="hljs-function">(<span class="hljs-params">target, keyboard</span>) =&gt;</span> &#123; </span><br><span class="line">        target.push(</span><br><span class="line">            ...drives.reduce(<span class="hljs-function">(<span class="hljs-params">innerTarget, drive</span>) =&gt;</span> &#123; </span><br><span class="line">                innerTarget.push(keyboard + drive);</span><br><span class="line">                <span class="hljs-keyword">return</span> innerTarget;</span><br><span class="line">            &#125;, [])</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []).filter(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v &lt;= b);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> result.length &gt; <span class="hljs-number">0</span> ? <span class="hljs-built_in">Math</span>.max(...result) : <span class="hljs-number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/07/26/algorithm/hackerrank/23_ElectronicsShop/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Counting Valleys</title>
      <link>https://alleyful.github.io/2019/07/25/algorithm/hackerrank/22_CountingValleys/</link>
      <guid>https://alleyful.github.io/2019/07/25/algorithm/hackerrank/22_CountingValleys/</guid>
      <pubDate>Wed, 24 Jul 2019 15:03:27 GMT</pubDate>
      <description>
      
        &lt;p&gt;Gary is an avid hiker. He tracks his hikes meticulously, paying close attention to small details like topography. During his last hike he took exactly &lt;strong&gt;n&lt;/strong&gt; steps. For every step he took, he noted if it was an uphill, &lt;strong&gt;U&lt;/strong&gt;, or a downhill, &lt;strong&gt;D&lt;/strong&gt; step. Gary’s hikes start and end at sea level and each step up or down represents a &lt;strong&gt;1&lt;/strong&gt; unit change in altitude. We define the following terms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A mountain is a sequence of consecutive steps above sea level, starting with a step up from sea level and ending with a step down to sea level.  &lt;/li&gt;
&lt;li&gt;A valley is a sequence of consecutive steps below sea level, starting with a step down from sea level and ending with a step up to sea level.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given Gary’s sequence of up and down steps during his last hike, find and print the number of valleys he walked through.&lt;/p&gt;
&lt;p&gt;For example, if Gary’s path is &lt;code&gt;s = [DDUUUUDD]&lt;/code&gt;, he first enters a valley &lt;strong&gt;2&lt;/strong&gt; units deep. Then he climbs out an up onto a mountain &lt;strong&gt;2&lt;/strong&gt; units high. Finally, he returns to sea level and ends his hike.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Gary is an avid hiker. He tracks his hikes meticulously, paying close attention to small details like topography. During his last hike he took exactly <strong>n</strong> steps. For every step he took, he noted if it was an uphill, <strong>U</strong>, or a downhill, <strong>D</strong> step. Gary’s hikes start and end at sea level and each step up or down represents a <strong>1</strong> unit change in altitude. We define the following terms:</p><ul><li>A mountain is a sequence of consecutive steps above sea level, starting with a step up from sea level and ending with a step down to sea level.  </li><li>A valley is a sequence of consecutive steps below sea level, starting with a step down from sea level and ending with a step up to sea level.  </li></ul><p>Given Gary’s sequence of up and down steps during his last hike, find and print the number of valleys he walked through.</p><p>For example, if Gary’s path is <code>s = [DDUUUUDD]</code>, he first enters a valley <strong>2</strong> units deep. Then he climbs out an up onto a mountain <strong>2</strong> units high. Finally, he returns to sea level and ends his hike.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the countingValleys function in the editor below. It must return an integer that denotes the number of valleys Gary traversed.</p><p>countingValleys has the following parameter(s):</p><ul><li>n: the number of steps Gary takes</li><li>s: a string describing his path</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>n</strong>, the number of steps in Gary’s hike.<br>The second line contains a single string <strong>s</strong>, of <strong>n</strong> characters that describe his path.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;n%5Cleq&space;10%5E%7B6%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?s%5Bi%5D%5Cin&space;%5Cleft&space;%7B&space;UD&space;%5Cright&space;%7D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single integer that denotes the number of valleys Gary walked through during his hike.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">UDDDUDUU</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>If we represent _ as sea level, a step up as /, and a step down as , Gary’s hike can be drawn as:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_/\      _</span><br><span class="line">   \    /</span><br><span class="line">    \/\/</span><br></pre></td></tr></table></figure><p>He enters and leaves one valley.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">countingValleys</span>(<span class="hljs-params">n, s</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> level = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    [...s].reduce(<span class="hljs-function">(<span class="hljs-params">target, step</span>) =&gt;</span> &#123;</span><br><span class="line">        step.match(<span class="hljs-regexp">/u/i</span>) ? level++ : level--;</span><br><span class="line">        (!target &amp;&amp; level &gt;= <span class="hljs-number">0</span>) &amp;&amp; (result++);</span><br><span class="line">        target = !!(level &gt;= <span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, <span class="hljs-literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/07/25/algorithm/hackerrank/22_CountingValleys/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Drawing Book</title>
      <link>https://alleyful.github.io/2019/07/24/algorithm/hackerrank/21_DrawingBook/</link>
      <guid>https://alleyful.github.io/2019/07/24/algorithm/hackerrank/21_DrawingBook/</guid>
      <pubDate>Wed, 24 Jul 2019 02:48:45 GMT</pubDate>
      <description>
      
        &lt;p&gt;Brie’s Drawing teacher asks her class to open their books to a page number. Brie can either start turning pages from the front of the book or from the back of the book. She always turns pages one at a time. When she opens the book, page &lt;strong&gt;1&lt;/strong&gt; is always on the right side:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/drawingBook-01.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;When she flips page &lt;strong&gt;1&lt;/strong&gt;, she sees pages &lt;strong&gt;2&lt;/strong&gt; and &lt;strong&gt;3&lt;/strong&gt;. Each page except the last page will always be printed on both sides. The last page may only be printed on the front, given the length of the book. If the book is &lt;strong&gt;n&lt;/strong&gt; pages long, and she wants to turn to page &lt;strong&gt;p&lt;/strong&gt;, what is the minimum number of pages she will turn? She can start at the beginning or the end of the book.&lt;/p&gt;
&lt;p&gt;Given &lt;strong&gt;n&lt;/strong&gt; and &lt;strong&gt;p&lt;/strong&gt;, find and print the minimum number of pages Brie must turn in order to arrive at page &lt;strong&gt;p&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Brie’s Drawing teacher asks her class to open their books to a page number. Brie can either start turning pages from the front of the book or from the back of the book. She always turns pages one at a time. When she opens the book, page <strong>1</strong> is always on the right side:</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/drawingBook-01.png" alt></p><p>When she flips page <strong>1</strong>, she sees pages <strong>2</strong> and <strong>3</strong>. Each page except the last page will always be printed on both sides. The last page may only be printed on the front, given the length of the book. If the book is <strong>n</strong> pages long, and she wants to turn to page <strong>p</strong>, what is the minimum number of pages she will turn? She can start at the beginning or the end of the book.</p><p>Given <strong>n</strong> and <strong>p</strong>, find and print the minimum number of pages Brie must turn in order to arrive at page <strong>p</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the pageCount function in the editor below. It should return the minimum number of pages Brie must turn.</p><p>pageCount has the following parameter(s):</p><ul><li>n: the number of pages in the book</li><li>p: the page number to turn to</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>n</strong>, the number of pages in the book.<br>The second line contains an integer, <strong>p</strong>, the page that Brie’s teacher wants her to turn to.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;10%5E%7B5%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;p%5Cleq&space;n" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print an integer denoting the minimum number of pages Brie must turn to get to page <strong>p</strong>.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>If Brie starts turning from page <strong>1</strong>, she only needs to turn <strong>1</strong> page:</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/drawingBook-02.png" alt></p><p>If Brie starts turning from page <strong>6</strong>, she needs to turn <strong>2</strong> pages:</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/drawingBook-03.png" alt></p><p>Because we want to print the minumum number of page turns, we print <strong>1</strong> as our answer.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">4</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>If Brie starts turning from page <strong>1</strong>, she needs to turn <strong>2</strong> pages:</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/drawingBook-04.png" alt></p><p>If Brie starts turning from page <strong>5</strong>, she doesn’t need to turn any pages:</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/drawingBook-05.png" alt></p><p>Because we want to print the minimum number of page turns, we print <strong>0</strong> as our answer.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pageCount</span>(<span class="hljs-params">n, p</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> n / <span class="hljs-number">2</span> &lt; p ? <span class="hljs-built_in">Math</span>.floor(n / <span class="hljs-number">2</span>) - <span class="hljs-built_in">Math</span>.floor(p / <span class="hljs-number">2</span>) : <span class="hljs-built_in">Math</span>.floor(p / <span class="hljs-number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/07/24/algorithm/hackerrank/21_DrawingBook/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sock Merchant</title>
      <link>https://alleyful.github.io/2019/07/23/algorithm/hackerrank/20_SockMerchant/</link>
      <guid>https://alleyful.github.io/2019/07/23/algorithm/hackerrank/20_SockMerchant/</guid>
      <pubDate>Mon, 22 Jul 2019 15:13:45 GMT</pubDate>
      <description>
      
        &lt;p&gt;John works at a clothing store. He has a large pile of socks that he must pair by color for sale. Given an array of integers representing the color of each sock, determine how many pairs of socks with matching colors there are.&lt;/p&gt;
&lt;p&gt;For example, there are &lt;strong&gt;n = 7&lt;/strong&gt; socks with colors &lt;code&gt;ar = [1, 2, 1, 2, 1, 3, 2]&lt;/code&gt;. There is one pair of color &lt;em&gt;1&lt;/em&gt; and one of color &lt;em&gt;2&lt;/em&gt;. There are three odd socks left, one of each color. The number of pairs is &lt;em&gt;2&lt;/em&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>John works at a clothing store. He has a large pile of socks that he must pair by color for sale. Given an array of integers representing the color of each sock, determine how many pairs of socks with matching colors there are.</p><p>For example, there are <strong>n = 7</strong> socks with colors <code>ar = [1, 2, 1, 2, 1, 3, 2]</code>. There is one pair of color <em>1</em> and one of color <em>2</em>. There are three odd socks left, one of each color. The number of pairs is <em>2</em>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the sockMerchant function in the editor below. It must return an integer representing the number of matching pairs of socks that are available.</p><p>sockMerchant has the following parameter(s):</p><ul><li>n: the number of socks in the pile</li><li>ar: the colors of each sock</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>n</strong>, the number of socks represented in <em>ar</em>. The second line contains <em>n</em> space-separated integers describing the colors <em>ar[i]</em> of the socks in the pile.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;ar%5Bi%5D%5Cleq&space;100" alt> where <img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;i&space;%3C&space;n" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Return the total number of matching pairs of socks that John can sell.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">10 20 20 10 10 30 50 10 20</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/sock.png" alt></p><p>John can match three pairs of socks.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sockMerchant</span>(<span class="hljs-params">n, ar</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> socks = [];</span><br><span class="line">    <span class="hljs-keyword">return</span> ar.reduce(<span class="hljs-function">(<span class="hljs-params">target, sock</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> index = socks.findIndex(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v === sock);</span><br><span class="line">        index &gt;= <span class="hljs-number">0</span></span><br><span class="line">            ? (socks.splice(index, <span class="hljs-number">1</span>), target++)</span><br><span class="line">            : (socks.push(sock))</span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/07/23/algorithm/hackerrank/20_SockMerchant/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Bon Appétit</title>
      <link>https://alleyful.github.io/2019/07/22/algorithm/hackerrank/19_BonAppetit/</link>
      <guid>https://alleyful.github.io/2019/07/22/algorithm/hackerrank/19_BonAppetit/</guid>
      <pubDate>Mon, 22 Jul 2019 06:38:15 GMT</pubDate>
      <description>
      
        &lt;p&gt;Anna and Brian are sharing a meal at a restuarant and they agree to split the bill equally. Brian wants to order something that Anna is allergic to though, and they agree that Anna won’t pay for that item. Brian gets the check and calculates Anna’s portion. You must determine if his calculation is correct.&lt;/p&gt;
&lt;p&gt;For example, assume the bill has the following prices: &lt;code&gt;bill = [2, 4, 6]&lt;/code&gt;. Anna declines to eat item &lt;code&gt;k = bill[2]&lt;/code&gt; which costs &lt;strong&gt;6&lt;/strong&gt;. If Brian calculates the bill correctly, Anna will pay &lt;strong&gt;(2 + 4) / 2 = 3&lt;/strong&gt;. If he includes the cost of &lt;strong&gt;bill[2]&lt;/strong&gt;, he will calculate &lt;strong&gt;(2 + 4 + 6) / 2 = 6&lt;/strong&gt;. In the second case, he should refund &lt;strong&gt;3&lt;/strong&gt; to Anna.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Anna and Brian are sharing a meal at a restuarant and they agree to split the bill equally. Brian wants to order something that Anna is allergic to though, and they agree that Anna won’t pay for that item. Brian gets the check and calculates Anna’s portion. You must determine if his calculation is correct.</p><p>For example, assume the bill has the following prices: <code>bill = [2, 4, 6]</code>. Anna declines to eat item <code>k = bill[2]</code> which costs <strong>6</strong>. If Brian calculates the bill correctly, Anna will pay <strong>(2 + 4) / 2 = 3</strong>. If he includes the cost of <strong>bill[2]</strong>, he will calculate <strong>(2 + 4 + 6) / 2 = 6</strong>. In the second case, he should refund <strong>3</strong> to Anna.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the bonAppetit function in the editor below. It should print Bon Appetit if the bill is fairly split. Otherwise, it should print the integer amount of money that Brian owes Anna.</p><p>bonAppetit has the following parameter(s):</p><ul><li>bill: an array of integers representing the cost of each item ordered</li><li>k: an integer representing the zero-based index of the item Anna doesn’t eat</li><li>b: the amount of money that Anna contributed to the bill</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains two space-separated integers <strong>n</strong> and <strong>k</strong>, the number of items ordered and the <strong>0</strong>-based index of the item that Anna did not eat.<br>The second line contains <strong>n</strong> space-separated integers <strong>bill[i]</strong> where <img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;i%3C&space;n" alt>. The third line contains an integer, , the amount of money that Brian charged Anna for her share of the bill.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;n%5Cleq&space;10%5E%7B5%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;k%3C&space;n" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;bill%5Bi%5D%5D%5Cleq&space;10%5E%7B4%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;b%5Cleq&space;%5Csum_%7Bi=0%7D%5E%7Bn-1%7Dbill%5Bi%5D" alt></li><li>The amount of money due Anna will always be an integer</li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>If Brian did not overcharge Anna, print <code>Bon Appetit</code> on a new line; otherwise, print the difference (i.e., <img src="https://latex.codecogs.com/gif.latex?b_%7Bcharged%7D&space;-&space;b_%7Bactual%7D" alt>) that Brian must refund to Anna. This will always be an integer.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4 1</span><br><span class="line">3 10 2 9</span><br><span class="line">12</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>Anna didn’t eat item <strong>bill[1] = 10</strong>, but she shared the rest of the items with Brian. The total cost of the shared items is <strong>3 + 2 + 9 = 14</strong> and, split in half, the cost per person is <img src="https://latex.codecogs.com/gif.latex?b_%7Bactual%7D&space;=&space;7" alt>. Brian charged her <img src="https://latex.codecogs.com/gif.latex?b_%7Bcharged%7D&space;=&space;12" alt> for her portion of the bill. We print the amount Anna was overcharged, <img src="https://latex.codecogs.com/gif.latex?b_%7Bcharged%7D&space;-&space;b_%7Bactual%7D&space;=&space;12&space;-&space;7&space;=5" alt>, on a new line.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4 1</span><br><span class="line">3 10 2 9</span><br><span class="line">7</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bon Appetit</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>Anna didn’t eat item <strong>bill[1] = 10</strong>, but she shared the rest of the items with Brian. The total cost of the shared items is <strong>3 + 2 + 9 = 14</strong> and, split in half, the cost per person is <img src="https://latex.codecogs.com/gif.latex?b_%7Bactual%7D&space;=&space;7" alt>. Because <img src="https://latex.codecogs.com/gif.latex?b_%7Bcharged%7D&space;=&space;b_%7Bactual%7D&space;=7" alt>, we print <code>Bon Appetit</code> on a new line.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bonAppetit</span>(<span class="hljs-params">bill, k, b</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> result = bill.reduce(<span class="hljs-function">(<span class="hljs-params">target, cost, index</span>) =&gt;</span> &#123; </span><br><span class="line">        index !== k &amp;&amp; (target += cost);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>) / <span class="hljs-number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//console.log(result === b ? 'Bon Appetit' : b - result);</span></span><br><span class="line">    <span class="hljs-keyword">return</span> result === b ? <span class="hljs-string">'Bon Appetit'</span> : b - result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/07/22/algorithm/hackerrank/19_BonAppetit/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Day of the Programmer</title>
      <link>https://alleyful.github.io/2019/07/20/algorithm/hackerrank/18_DayOfTheProgrammer/</link>
      <guid>https://alleyful.github.io/2019/07/20/algorithm/hackerrank/18_DayOfTheProgrammer/</guid>
      <pubDate>Sat, 20 Jul 2019 04:08:31 GMT</pubDate>
      <description>
      
        &lt;p&gt;Marie invented a &lt;a href=&quot;https://en.wikipedia.org/wiki/Time_travel&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Time Machine&lt;/a&gt; and wants to test it by time-traveling to visit Russia on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Day_of_the_Programmer&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Day of the Programmer&lt;/a&gt; (the &lt;img src=&quot;https://latex.codecogs.com/gif.latex?256%5E%7Bth%7D&quot; alt&gt;day of the year) during a year in the inclusive range from &lt;strong&gt;1700&lt;/strong&gt; to &lt;strong&gt;2700&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;From &lt;strong&gt;1700&lt;/strong&gt; to &lt;strong&gt;1917&lt;/strong&gt;, Russia’s official calendar was the &lt;a href=&quot;https://en.wikipedia.org/wiki/Julian_calendar&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Julian calendar&lt;/a&gt;; since &lt;strong&gt;1919&lt;/strong&gt; they used the &lt;a href=&quot;https://en.wikipedia.org/wiki/Gregorian_calendar&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Gregorian calendar&lt;/a&gt; system. The transition from the Julian to Gregorian calendar system occurred in &lt;strong&gt;1918&lt;/strong&gt;, when the next day after January &lt;img src=&quot;https://latex.codecogs.com/gif.latex?31%5E%7Bst%7D&quot; alt&gt; was February &lt;img src=&quot;https://latex.codecogs.com/gif.latex?14%5E%7Bth%7D&quot; alt&gt;. This means that in &lt;strong&gt;1918&lt;/strong&gt;, February &lt;img src=&quot;https://latex.codecogs.com/gif.latex?14%5E%7Bth%7D&quot; alt&gt; was the &lt;img src=&quot;https://latex.codecogs.com/gif.latex?32%5E%7Bnd%7D&quot; alt&gt; day of the year in Russia.&lt;/p&gt;
&lt;p&gt;In both calendar systems, February is the only month with a variable amount of days; it has &lt;strong&gt;29&lt;/strong&gt; days during a leap year, and &lt;strong&gt;28&lt;/strong&gt;days during all other years. In the Julian calendar, leap years are divisible by &lt;strong&gt;4&lt;/strong&gt;; in the Gregorian calendar, leap years are either of the following:&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Marie invented a <a href="https://en.wikipedia.org/wiki/Time_travel" rel="external nofollow noopener noreferrer" target="_blank">Time Machine</a> and wants to test it by time-traveling to visit Russia on the <a href="https://en.wikipedia.org/wiki/Day_of_the_Programmer" rel="external nofollow noopener noreferrer" target="_blank">Day of the Programmer</a> (the <img src="https://latex.codecogs.com/gif.latex?256%5E%7Bth%7D" alt>day of the year) during a year in the inclusive range from <strong>1700</strong> to <strong>2700</strong>.</p><p>From <strong>1700</strong> to <strong>1917</strong>, Russia’s official calendar was the <a href="https://en.wikipedia.org/wiki/Julian_calendar" rel="external nofollow noopener noreferrer" target="_blank">Julian calendar</a>; since <strong>1919</strong> they used the <a href="https://en.wikipedia.org/wiki/Gregorian_calendar" rel="external nofollow noopener noreferrer" target="_blank">Gregorian calendar</a> system. The transition from the Julian to Gregorian calendar system occurred in <strong>1918</strong>, when the next day after January <img src="https://latex.codecogs.com/gif.latex?31%5E%7Bst%7D" alt> was February <img src="https://latex.codecogs.com/gif.latex?14%5E%7Bth%7D" alt>. This means that in <strong>1918</strong>, February <img src="https://latex.codecogs.com/gif.latex?14%5E%7Bth%7D" alt> was the <img src="https://latex.codecogs.com/gif.latex?32%5E%7Bnd%7D" alt> day of the year in Russia.</p><p>In both calendar systems, February is the only month with a variable amount of days; it has <strong>29</strong> days during a leap year, and <strong>28</strong>days during all other years. In the Julian calendar, leap years are divisible by <strong>4</strong>; in the Gregorian calendar, leap years are either of the following:</p><br><a id="more"></a><ul><li>Divisible by <strong>400</strong>.  </li><li>Divisible by <strong>4</strong> and not divisible by <strong>100</strong>.  Given a year, <strong>y</strong>, find the date of the <img src="https://latex.codecogs.com/gif.latex?256%5E%7Bth%7D" alt> day of that year according to the official Russian calendar during that year. Then print it in the format dd.mm.yyyy, where dd is the two-digit day, mm is the two-digit month, and yyyy is <strong>y</strong>.</li></ul><p>For example, the given <strong>year = 1984</strong>. <strong>1984</strong> is divisible by <strong>4</strong>, so it is a leap year. The <img src="https://latex.codecogs.com/gif.latex?256%5E%7Bth%7D" alt> day of a leap year after <strong>1981</strong> is September 12, so the answer is <code>12.09.1984</code>.</p><br><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the dayOfProgrammer function in the editor below. It should return a string representing the date of the <img src="https://latex.codecogs.com/gif.latex?256%5E%7Bth%7D" alt> day of the year given.</p><p>dayOfProgrammer has the following parameter(s):</p><ul><li>year: an integer</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>A single integer denoting year <strong>y</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1700%5Cleq&space;y%5Cleq&space;2700" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the full date of Day of the Programmer during year <strong>y</strong> in the format dd.mm.yyyy, where dd is the two-digit day, mm is the two-digit month, and yyyy is <strong>y</strong>.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2017</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13.09.2017</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>In the year <code>y = 2017</code>, January has <strong>31</strong> days, February has <strong>28</strong> days, March has <strong>31</strong> days, April has <strong>30</strong> days, May has <strong>31</strong> days, June has <strong>30</strong> days, July has <strong>31</strong> days, and August has <strong>31</strong> days. When we sum the total number of days in the first eight months, we get <code>31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 = 243</code>. Day of the Programmer is the <img src="https://latex.codecogs.com/gif.latex?256%5E%7Bth%7D" alt> day, so then calculate <code>256 - 243 = 13</code> to determine that it falls on day <strong>13</strong> of the <img src="https://latex.codecogs.com/gif.latex?9%5E%7Bth%7D" alt> month (September). We then print the full date in the specified format, which is <code>13.09.2017</code>.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2016</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12.09.2016</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>Year <code>y = 2016</code> is a leap year, so February has <strong>29</strong> days but all the other months have the same number of days as in <strong>2017</strong>. When we sum the total number of days in the first eight months, we get <code>31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 = 244</code>. Day of the Programmer is the <img src="https://latex.codecogs.com/gif.latex?256%5E%7Bth%7D" alt> day, so then calculate <code>256 - 244 = 12</code> to determine that it falls on day 12 of the <img src="https://latex.codecogs.com/gif.latex?9%5E%7Bth%7D" alt> month (September). We then print the full date in the specified format, which is <code>12.09.2016</code>.</p><br><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2"></a>Sample Input 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1800</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2"></a>Sample Output 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12.09.1800</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-2"><a href="#Explanation-2" class="headerlink" title="Explanation 2"></a>Explanation 2</h2><p><code>Since 1800 is leap year. Day lies on 12 September.</code></p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dayOfProgrammer</span>(<span class="hljs-params">year</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> isLeefYeer = (year % <span class="hljs-number">4</span> === <span class="hljs-number">0</span>)</span><br><span class="line">        ? ((year % <span class="hljs-number">100</span> === <span class="hljs-number">0</span>) ? ((year &lt; <span class="hljs-number">1918</span> || (year % <span class="hljs-number">400</span> === <span class="hljs-number">0</span>)) ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>) : <span class="hljs-literal">true</span>)</span><br><span class="line">        : <span class="hljs-literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;year === <span class="hljs-number">1918</span> ? <span class="hljs-number">26</span> : (isLeefYeer ? <span class="hljs-number">12</span> : <span class="hljs-number">13</span>)&#125;</span>.09.<span class="hljs-subst">$&#123;year&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/07/20/algorithm/hackerrank/18_DayOfTheProgrammer/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Migratory Birds</title>
      <link>https://alleyful.github.io/2019/07/19/algorithm/hackerrank/17_MigratoryBirds/</link>
      <guid>https://alleyful.github.io/2019/07/19/algorithm/hackerrank/17_MigratoryBirds/</guid>
      <pubDate>Thu, 18 Jul 2019 15:14:31 GMT</pubDate>
      <description>
      
        &lt;p&gt;You have been asked to help study the population of birds migrating across the continent. Each type of bird you are interested in will be identified by an integer value. Each time a particular kind of bird is spotted, its id number will be added to your array of sightings. &lt;/p&gt;
&lt;p&gt;You would like to be able to find out which type of bird is most common given a list of sightings. Your task is to print the type number of that bird and if two or more types of birds are equally common, choose the type with the smallest ID number.&lt;/p&gt;
&lt;p&gt;For example, assume your bird sightings are of types &lt;code&gt;ar = [1, 1, 2, 2, 3]&lt;/code&gt;. There are two each of types &lt;strong&gt;1&lt;/strong&gt; and &lt;strong&gt;2&lt;/strong&gt;, and one sighting of type &lt;strong&gt;3&lt;/strong&gt;. Pick the lower of the two types seen twice: type &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>You have been asked to help study the population of birds migrating across the continent. Each type of bird you are interested in will be identified by an integer value. Each time a particular kind of bird is spotted, its id number will be added to your array of sightings. </p><p>You would like to be able to find out which type of bird is most common given a list of sightings. Your task is to print the type number of that bird and if two or more types of birds are equally common, choose the type with the smallest ID number.</p><p>For example, assume your bird sightings are of types <code>ar = [1, 1, 2, 2, 3]</code>. There are two each of types <strong>1</strong> and <strong>2</strong>, and one sighting of type <strong>3</strong>. Pick the lower of the two types seen twice: type <strong>1</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the migratoryBirds function in the editor below. It should return the lowest type number of the most frequently sighted bird.</p><p>migratoryBirds has the following parameter(s):</p><ul><li>arr: an array of integers representing types of birds sighted</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer denoting <strong>n</strong>, the number of birds sighted and reported in the array <strong>arr</strong>. The second line describes <strong>arr</strong> as <strong>n</strong> space-separated integers representing the type numbers of each bird sighted.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?5%5Cleq&space;n%5Cleq&space;2%5Ctimes&space;10%5E%7B5%7D" alt></li><li>It is guaranteed that each type is <strong>1</strong>, <strong>2</strong>, <strong>3</strong>, <strong>4</strong>, or <strong>5</strong>.</li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the type number of the most common bird; if two or more types of birds are equally common, choose the type with the smallest ID number.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">1 4 4 4 5 3</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>The different types of birds occur in the following frequencies:</p><ul><li>Type <strong>1</strong>: <strong>1</strong> bird</li><li>Type <strong>2</strong>: <strong>0</strong> birds</li><li>Type <strong>3</strong>: <strong>1</strong> bird</li><li>Type <strong>4</strong>: <strong>3</strong> birds</li><li>Type <strong>5</strong>: <strong>1</strong> bird  </li></ul><p>The type number that occurs at the highest frequency is type <strong>4</strong>, so we print <strong>4</strong> as our answer.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">11</span><br><span class="line">1 2 3 4 5 4 3 2 1 3 4</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>The different types of birds occur in the following frequencies:</p><ul><li>Type <strong>1</strong>: <strong>2</strong> </li><li>Type <strong>2</strong>: <strong>2</strong> </li><li>Type <strong>3</strong>: <strong>3</strong> </li><li>Type <strong>4</strong>: <strong>3</strong> </li><li>Type <strong>5</strong>: <strong>1</strong> </li></ul><p>Two types have a frequency of <strong>3</strong>, and the lower of those is type <strong>3</strong>.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">migratoryBirds</span>(<span class="hljs-params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> array = arr.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b).reduce(<span class="hljs-function">(<span class="hljs-params">target, bird</span>) =&gt;</span> &#123; </span><br><span class="line">        target[bird - <span class="hljs-number">1</span>] += <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> array.findIndex(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v === (<span class="hljs-built_in">Math</span>.max(...array))) + <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/07/19/algorithm/hackerrank/17_MigratoryBirds/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Divisible Sum Pairs</title>
      <link>https://alleyful.github.io/2019/07/17/algorithm/hackerrank/16_DivisibleSumPairs/</link>
      <guid>https://alleyful.github.io/2019/07/17/algorithm/hackerrank/16_DivisibleSumPairs/</guid>
      <pubDate>Wed, 17 Jul 2019 14:14:31 GMT</pubDate>
      <description>
      
        &lt;p&gt;You are given an array of &lt;strong&gt;n&lt;/strong&gt; integers, &lt;code&gt;ar = [ar[0], ar[1], ..., ar[n - 1]&lt;/code&gt;, and a positive integer, &lt;strong&gt;k&lt;/strong&gt;. Find and print the number of &lt;strong&gt;(i, j)&lt;/strong&gt; pairs where &lt;strong&gt;i &amp;lt; j&lt;/strong&gt; and  &lt;code&gt;ar[i] + ar[j]&lt;/code&gt; is divisible by &lt;strong&gt;k&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;ar = [1, 2, 3, 4, 5, 6]&lt;/code&gt; and &lt;code&gt;k = 5&lt;/code&gt;. Our three pairs meeting the criteria are &lt;code&gt;[1, 4]&lt;/code&gt;, &lt;code&gt;[2, 3]&lt;/code&gt; and &lt;code&gt;[4, 6]&lt;/code&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>You are given an array of <strong>n</strong> integers, <code>ar = [ar[0], ar[1], ..., ar[n - 1]</code>, and a positive integer, <strong>k</strong>. Find and print the number of <strong>(i, j)</strong> pairs where <strong>i &lt; j</strong> and  <code>ar[i] + ar[j]</code> is divisible by <strong>k</strong>.</p><p>For example, <code>ar = [1, 2, 3, 4, 5, 6]</code> and <code>k = 5</code>. Our three pairs meeting the criteria are <code>[1, 4]</code>, <code>[2, 3]</code> and <code>[4, 6]</code>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the divisibleSumPairs function in the editor below. It should return the integer count of pairs meeting the criteria.</p><p>divisibleSumPairs has the following parameter(s):</p><ul><li>n: the integer length of array <strong>ar</strong></li><li>ar: an array of integers</li><li>k: the integer to divide the pair sum by</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains <strong>2</strong> space-separated integers, <strong>n</strong> and <strong>k</strong>. The second line contains <strong>n</strong> space-separated integers describing the values of <strong>ar[ ar[0], ar[1], …, ar[n-1]]</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;n%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;k%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;a%5Bi%5D%5Cleq&space;100" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the number of (i, j) pairs where i &lt; j and a[i] + a[j] is evenly divisible by <strong>k</strong>.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6 3</span><br><span class="line">1 3 2 6 1 2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Here are the <strong>5</strong> valid pairs when <strong>k = 3</strong>:</p><ul><li>(0, 2) -&gt; ar[0] + ar[2] = 1 + 2 = 3</li><li>(0, 5) -&gt; ar[0] + ar[5] = 1 + 2 = 3</li><li>(1, 3) -&gt; ar[1] + ar[3] = 3 + 6 = 9</li><li>(2, 4) -&gt; ar[2] + ar[4] = 2 + 1 = 3</li><li>(4, 5) -&gt; ar[4] + ar[5] = 1 + 2 = 3</li></ul><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">divisibleSumPairs</span>(<span class="hljs-params">n, k, ar</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> ar.reduce(<span class="hljs-function">(<span class="hljs-params">target, numberm, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(n - index - <span class="hljs-number">1</span>).fill(<span class="hljs-number">0</span>).reduce(<span class="hljs-function">(<span class="hljs-params">innerTarget, fill, innerIndex</span>) =&gt;</span> &#123;</span><br><span class="line">            ((ar[index] + ar[innerIndex + index + <span class="hljs-number">1</span>]) % k === <span class="hljs-number">0</span>) &amp;&amp; target++;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">return</span> innerTarget;</span><br><span class="line">        &#125;, <span class="hljs-number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/07/17/algorithm/hackerrank/16_DivisibleSumPairs/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Birthday Chocolate</title>
      <link>https://alleyful.github.io/2019/07/16/algorithm/hackerrank/15_BirthdayChocolate/</link>
      <guid>https://alleyful.github.io/2019/07/16/algorithm/hackerrank/15_BirthdayChocolate/</guid>
      <pubDate>Tue, 16 Jul 2019 13:28:51 GMT</pubDate>
      <description>
      
        &lt;p&gt;Lily has a chocolate bar that she wants to share it with Ron for his birthday. Each of the squares has an integer on it. She decides to share a contiguous segment of the bar selected such that the length of the segment matches Ron’s birth month and the sum of the integers on the squares is equal to his birth day. You must determine how many ways she can divide the chocolate.&lt;/p&gt;
&lt;p&gt;Consider the chocolate bar as an array of squares, &lt;code&gt;s = [2, 3, 1, 3, 2]&lt;/code&gt;. She wants to find segments summing to Ron’s birth day, &lt;code&gt;d = 4&lt;/code&gt; with a length equalling his birth month, &lt;code&gt;m = 2&lt;/code&gt;. In this case, there are two segments meeting her criteria: &lt;code&gt;[2, 2]&lt;/code&gt; and &lt;code&gt;[1, 3]&lt;/code&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Lily has a chocolate bar that she wants to share it with Ron for his birthday. Each of the squares has an integer on it. She decides to share a contiguous segment of the bar selected such that the length of the segment matches Ron’s birth month and the sum of the integers on the squares is equal to his birth day. You must determine how many ways she can divide the chocolate.</p><p>Consider the chocolate bar as an array of squares, <code>s = [2, 3, 1, 3, 2]</code>. She wants to find segments summing to Ron’s birth day, <code>d = 4</code> with a length equalling his birth month, <code>m = 2</code>. In this case, there are two segments meeting her criteria: <code>[2, 2]</code> and <code>[1, 3]</code>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the birthday function in the editor below. It should return an integer denoting the number of ways Lily can divide the chocolate bar.</p><p>birthday has the following parameter(s):</p><ul><li>s: an array of integers, the numbers on each of the squares of chocolate</li><li>d: an integer, Ron’s birth day</li><li>m: an integer, Ron’s birth month</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>n</strong>, the number of squares in the chocolate bar.<br>The second line contains <strong>n</strong> space-separated integers <strong>s[i]</strong>, the numbers on the chocolate squares where <img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;i%3C&space;n" alt>.   The third line contains two space-separated integers, <strong>d</strong> and <strong>m</strong>, Ron’s birth day and his birth month.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print an integer denoting the total number of ways that Lily can portion her chocolate bar to share with Ron.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 1 3 2</span><br><span class="line">3 2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>Lily wants to give Ron <strong>m = 2</strong> squares summing to <strong>d = 3</strong>. The following two segments meet the criteria:</p><p><img src="./images/birthdayChocolate_01.png" alt></p><p>Sample Input 1</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">1 1 1 1 1 1</span><br><span class="line">3 2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>Lily only wants to give Ron <strong>m = 2</strong> consecutive squares of chocolate whose integers sum to <strong>d = 3</strong>. There are no possible pieces satisfying these constraints:</p><p><img src="./images/birthdayChocolate_02.png" alt></p><p>Thus, we print <strong>0</strong> as our answer.</p><br><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2"></a>Sample Input 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">4</span><br><span class="line">4 1</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2"></a>Sample Output 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-2"><a href="#Explanation-2" class="headerlink" title="Explanation 2"></a>Explanation 2</h2><p>Lily only wants to give Ron <code>m = 1</code> square of chocolate with an integer value of <code>d = 4</code>. Because the only square of chocolate in the bar satisfies this constraint, we print <code>1</code> as our answer.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">birthday</span>(<span class="hljs-params">s, d, m</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(s.length - m + <span class="hljs-number">1</span>).fill(<span class="hljs-string">''</span>).reduce(<span class="hljs-function">(<span class="hljs-params">target, chocolate, index</span>) =&gt;</span> &#123;</span><br><span class="line">        (s.reduce(<span class="hljs-function">(<span class="hljs-params">target, number, innerIndex</span>) =&gt;</span> &#123;</span><br><span class="line">            (innerIndex &gt;= index &amp;&amp; innerIndex &lt; index + m) &amp;&amp; (target += number);</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">return</span> target;</span><br><span class="line">        &#125;, <span class="hljs-number">0</span>) === d) &amp;&amp; target++;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/07/16/algorithm/hackerrank/15_BirthdayChocolate/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
