<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ALLEY</title>
    <link>https://alleyful.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>alley&#39;s blog for study</description>
    <pubDate>Wed, 13 Nov 2019 15:15:58 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Lodash 활용</title>
      <link>https://alleyful.github.io/2019/11/13/develop/javascript/lodash-01/</link>
      <guid>https://alleyful.github.io/2019/11/13/develop/javascript/lodash-01/</guid>
      <pubDate>Wed, 13 Nov 2019 14:30:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;개인적으로 lodash를 사용한 코드를 더욱 정확하게 파악하기 위해 코드에서 사용한 Method들을 확인하는 용도로 정리하기 시작했습니다.&lt;br&gt;기본적인 Method를 정리 후 추가로 사용된 Method가 있을때마다 업데이트 하도록 하겠습니다.&lt;/p&gt;
&lt;br&gt;

&lt;h1 id=&quot;Lodash&quot;&gt;&lt;a href=&quot;#Lodash&quot; class=&quot;headerlink&quot; title=&quot;Lodash&quot;&gt;&lt;/a&gt;Lodash&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://lodash.com/docs/4.17.15#findIndex&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Lodash&lt;/a&gt;는 underscore에서 성능을 개선한 라이브러리로 사이드 이펙트가 없는 즉 외부 상태를 바꾸지 않는 순수 함수를 사용하는 함수형 프로그래밍으로 되어있다.&lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;함수형-프로그래밍&quot;&gt;&lt;a href=&quot;#함수형-프로그래밍&quot; class=&quot;headerlink&quot; title=&quot;함수형 프로그래밍&quot;&gt;&lt;/a&gt;함수형 프로그래밍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;함수형 프로그래밍은 계산결과를 표현의 평가로서 모델링하는 프로그래밍 스타일이다. 따라서 실행될 때 전역 상태를 변경하는 명령문으로 구성된 명령형 프로그래밍과 대조를 이룬다. 함수형 프로그래밍은 일반적으로 변경가능한 상태를 사용하지 않고 사이드 이펙트 없는 함수와 불변 데이터를 대신 사용한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;중요한 점은 함수는 반드시 사이드 이펙트가 없어야 한다는 것이다. 그렇게 될 경우 테스트, 유지 보수, 그리고 대부분 예측가능한 것들이 쉬워진다.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>개인적으로 lodash를 사용한 코드를 더욱 정확하게 파악하기 위해 코드에서 사용한 Method들을 확인하는 용도로 정리하기 시작했습니다.<br>기본적인 Method를 정리 후 추가로 사용된 Method가 있을때마다 업데이트 하도록 하겠습니다.</p><br><h1 id="Lodash"><a href="#Lodash" class="headerlink" title="Lodash"></a>Lodash</h1><p><a href="https://lodash.com/docs/4.17.15#findIndex" rel="external nofollow noopener noreferrer" target="_blank">Lodash</a>는 underscore에서 성능을 개선한 라이브러리로 사이드 이펙트가 없는 즉 외부 상태를 바꾸지 않는 순수 함수를 사용하는 함수형 프로그래밍으로 되어있다.</p><br><h2 id="함수형-프로그래밍"><a href="#함수형-프로그래밍" class="headerlink" title="함수형 프로그래밍"></a>함수형 프로그래밍</h2><blockquote><p>함수형 프로그래밍은 계산결과를 표현의 평가로서 모델링하는 프로그래밍 스타일이다. 따라서 실행될 때 전역 상태를 변경하는 명령문으로 구성된 명령형 프로그래밍과 대조를 이룬다. 함수형 프로그래밍은 일반적으로 변경가능한 상태를 사용하지 않고 사이드 이펙트 없는 함수와 불변 데이터를 대신 사용한다.</p></blockquote><p>중요한 점은 함수는 반드시 사이드 이펙트가 없어야 한다는 것이다. 그렇게 될 경우 테스트, 유지 보수, 그리고 대부분 예측가능한 것들이 쉬워진다.</p><br><a id="more"></a><hr><br><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br><h3 id="head-first"><a href="#head-first" class="headerlink" title="head(first)"></a>head(first)</h3><p>첫번째 요소를 가지고 온 뒤 나머지 요소를 버리는 등 여러 방식으로 사용할 수 있다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> names = [<span class="hljs-string">"first"</span>, <span class="hljs-string">"middle"</span>, <span class="hljs-string">"last"</span>, <span class="hljs-string">"suffix"</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> firstName = _.head(names) </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> [firstName, ...otherNames] = names</span><br><span class="line"><span class="hljs-built_in">console</span>.log(firstName) <span class="hljs-comment">// 'first'</span></span><br></pre></td></tr></table></figure><br><h3 id="each"><a href="#each" class="headerlink" title="each"></a>each</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">_.each([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], (value, index) =&gt; &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].forEach(<span class="hljs-function">(<span class="hljs-params">value, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">_.forEach(&#123; <span class="hljs-string">'a'</span>: <span class="hljs-number">1</span>, <span class="hljs-string">'b'</span>: <span class="hljs-number">2</span> &#125;, (value, key) =&gt; &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(key);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">(&#123; <span class="hljs-string">'a'</span>: <span class="hljs-number">1</span>, <span class="hljs-string">'b'</span>: <span class="hljs-number">2</span> &#125;).forEach(<span class="hljs-function">(<span class="hljs-params">value, key</span>) =&gt;</span> &#123; <span class="hljs-comment">// !error</span></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(key); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><p>배열의 모든 요소가 특정한 조건을 만족하는지 테스트한 결과를 반환한다. (네이티브 함수가 더 빠르다)</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> elements = [<span class="hljs-string">"cat"</span>, <span class="hljs-string">"dog"</span>, <span class="hljs-string">"bat"</span>]</span><br><span class="line">_.every(elements, el =&gt; el.length == <span class="hljs-number">3</span>)</span><br><span class="line">elements.every(<span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> el.length == <span class="hljs-number">3</span>) <span class="hljs-comment">//true</span></span><br></pre></td></tr></table></figure><br><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><p>배열의 요소중 하나라도 특정한 조건을 만족하는지 테스트한 결과를 반환한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> elements = [<span class="hljs-string">"cat"</span>, <span class="hljs-string">"dog"</span>, <span class="hljs-string">"bat"</span>]</span><br><span class="line">_.some(elements, el =&gt; el.startsWith(<span class="hljs-string">'c'</span>))</span><br><span class="line">elements.some(<span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> el.startsWith(<span class="hljs-string">'c'</span>))</span><br></pre></td></tr></table></figure><br><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><p>콜렉션에 해당 요소를 갖고 있는지를 확인한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> primes = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">17</span>,<span class="hljs-number">19</span>,<span class="hljs-number">23</span>,<span class="hljs-number">29</span>,<span class="hljs-number">31</span>,<span class="hljs-number">37</span>,<span class="hljs-number">41</span>,<span class="hljs-number">43</span>,<span class="hljs-number">47</span>,<span class="hljs-number">53</span>,<span class="hljs-number">59</span>,<span class="hljs-number">61</span>,<span class="hljs-number">67</span>,<span class="hljs-number">71</span>,<span class="hljs-number">73</span>,<span class="hljs-number">79</span>,<span class="hljs-number">83</span>,<span class="hljs-number">97</span>]</span><br><span class="line">_.includes(primes, <span class="hljs-number">47</span>) <span class="hljs-comment">// true</span></span><br><span class="line">primes.includes(<span class="hljs-number">79</span>) <span class="hljs-comment">// true</span></span><br></pre></td></tr></table></figure><br><h3 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h3><p>배열의 요소들중 중복값을 제거한 결과를 반환한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> elements = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>]</span><br><span class="line">_.uniq(elements) <span class="hljs-comment">//  [1,2,3,4,5]</span></span><br><span class="line">[...new <span class="hljs-built_in">Set</span>(elements)] <span class="hljs-comment">//  [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><br><h3 id="compact"><a href="#compact" class="headerlink" title="compact"></a>compact</h3><p>배열에서 undefined혹은 falsy 값을 제거하는 유용한 함수이다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> array = [<span class="hljs-literal">undefined</span>, <span class="hljs-string">'cat'</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">434</span>, <span class="hljs-string">''</span>, <span class="hljs-number">32.0</span>]</span><br><span class="line">_.compact(array)</span><br><span class="line">array.filter(<span class="hljs-built_in">Boolean</span>)</span><br></pre></td></tr></table></figure><br><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];</span><br><span class="line"> </span><br><span class="line">_.reverse(array);</span><br><span class="line"><span class="hljs-comment">// =&gt; [3, 2, 1]</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-built_in">console</span>.log(array);</span><br><span class="line"><span class="hljs-comment">// =&gt; [3, 2, 1]</span></span><br></pre></td></tr></table></figure><br><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><br><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><br><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><br><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><br><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><br><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><br><h2 id="Seq"><a href="#Seq" class="headerlink" title="Seq"></a>Seq</h2><br><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><br><h2 id="Util"><a href="#Util" class="headerlink" title="Util"></a>Util</h2>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/11/13/develop/javascript/lodash-01/#disqus_thread</comments>
    </item>
    
    <item>
      <title>macOS 개발환경 기본설정</title>
      <link>https://alleyful.github.io/2019/11/10/tools/env/mac-setting-01/</link>
      <guid>https://alleyful.github.io/2019/11/10/tools/env/mac-setting-01/</guid>
      <pubDate>Sun, 10 Nov 2019 03:20:22 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;MacOS 기본 환경 설정을 위한 가이드입니다.&lt;br&gt;저를 포함해 많은 분들에게 도움이 될 수 있었으면 좋겠습니다.&lt;/p&gt;
&lt;br&gt;

&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>MacOS 기본 환경 설정을 위한 가이드입니다.<br>저를 포함해 많은 분들에게 도움이 될 수 있었으면 좋겠습니다.</p><br><br><a id="more"></a><h2 id="기본-설정"><a href="#기본-설정" class="headerlink" title="기본 설정"></a>기본 설정</h2><h3 id="Finder-숨김-폴더-및-파일-노출-설정"><a href="#Finder-숨김-폴더-및-파일-노출-설정" class="headerlink" title="Finder 숨김 폴더 및 파일 노출 설정"></a>Finder 숨김 폴더 및 파일 노출 설정</h3><ul><li>Finder 에서 숨겨진 폴더 또는 파일을 보여주거나 숨기고 싶을 때 아래와 같은 단축키로 제어할 수 있습니다.</li><li><code>command</code> + <code>shift</code> + <code>.</code></li></ul><br><br><h3 id="Finder-기본-폴더-설정"><a href="#Finder-기본-폴더-설정" class="headerlink" title="Finder 기본 폴더 설정"></a>Finder 기본 폴더 설정</h3><ul><li>Finder 실행 시 기본 폴더를 Home 폴더로 설정합니다.</li><li>General &gt; New Finder windows show: (home folder)</li></ul><br><br><h3 id="파일-확장자-보여주기"><a href="#파일-확장자-보여주기" class="headerlink" title="파일 확장자 보여주기"></a>파일 확장자 보여주기</h3><ul><li>모든 파일의 확장자를 보여주는 설정은 아래와 같습니다.</li><li><code>Advanced</code> &gt; <code>Show all filename extensions</code>: 체크하세요.</li></ul><br><br><h3 id="모든-텍스트-자동-변경-옵션-끄기"><a href="#모든-텍스트-자동-변경-옵션-끄기" class="headerlink" title="모든 텍스트 자동 변경 옵션 끄기"></a>모든 텍스트 자동 변경 옵션 끄기</h3><ul><li><code>Keyboard</code> &gt; <code>Text</code>: 모든 자동 변경 옵션 끄기</li><li>입력한 단어를 컴퓨터 마음대로 바꾸는 걸 방지</li><li>특히 Use smart quotes and dashes는 코드 복사하다가 따옴표가 바뀌면서 고생이 시작됨</li></ul><br><br><br><br><h2 id="필수-프로그램"><a href="#필수-프로그램" class="headerlink" title="필수 프로그램"></a>필수 프로그램</h2><h3 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h3><p>macOS에서 <code>gcc</code>, <code>make</code> 같은 컴파일 도구를 사용하려면 기본적으로 Homebrew 또는 명령어 라인 도구(Command Line Tools)을 먼저 설치해야 합니다.</p><p>Command Line Tools는 Xcode를 설치하면 자동으로 같이 설치됩니다.</p><p>하지만, Xcode 용량이 크고 모든 사람이 IDE가 필요한 게 아니므로 명령어 도구만 따로 설치하겠습니다.</p><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal1" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal1')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`xcode-select --install`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><br><h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h3><blockquote><p>Homebrew는 macOS 용 패키지 관리자로, 필요한 프로그램을 설치하는 데 용이합니다.</p></blockquote><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal2" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal2')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><ul><li><a href="https://brew.sh/" rel="external nofollow noopener noreferrer" target="_blank">Homebrew 홈페이지</a></li><li><a href="https://docs.brew.sh/Manpage.html" rel="external nofollow noopener noreferrer" target="_blank">brew 명령어</a></li><li><a href="https://formulae.brew.sh/" rel="external nofollow noopener noreferrer" target="_blank">brew 패키지 검색</a></li></ul><br><br><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>Version 관리 도구로 macOS에 기본으로 설치되어 있지만 최신 버전이 아니므로 brew를 이용하여 업데이트 합니다.</p><p>아래 순서대로 우선 시 됩니다.</p><ol><li><code>.git/config</code> : 이 파일은 Git 디렉토리에 있고 특정 저장소(혹은 현재 작업 중인 프로젝트)에만 적용됩니다.</li><li><code>~/.gitconfig</code> : 특정 사용자에게만 적용되는 설정이다. git config –global 옵션으로 이 파일을 읽고 쓸 수 있습니다.</li><li><code>/etc/gitconfig</code> : 시스템의 모든 사용자와 모든 저장소에 적용되는 설정이다. git config –system 옵션으로 이 파일을 읽고 쓸 수 있습니다.</li></ol><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal7" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal7')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`brew install git`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;you@your-domain.com&quot;</span><br><span class="line">git config --global core.precomposeunicode true</span><br><span class="line">git config --global core.quotepath false</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/" rel="external nofollow noopener noreferrer" target="_blank">git</a></li></ul><br><br><br><br><h2 id="터미널-설정"><a href="#터미널-설정" class="headerlink" title="터미널 설정"></a>터미널 설정</h2><h3 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h3><p>macOS에 기본으로 설치되어 있는 Terminal 앱 대신 iTerm2를 터미널 앱으로 사용합니다.<br>iTerm2는 기본 앱에 없는 다양한 기능이 있고 손쉽게 테마를 설정할 수 있습니다.</p><h4 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h4><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal8" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal8')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`brew cask install iterm2`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><br><h4 id="테마선택"><a href="#테마선택" class="headerlink" title="테마선택"></a>테마선택</h4><p><a href="https://iterm2colorschemes.com/" rel="external nofollow noopener noreferrer" target="_blank">여러개의 테마</a> 중 마음에 드는 것을 골라 다운로드 한 뒤, 파일을 더블클릭 하면 자동으로 <code>iTerm color Preset</code>에 추가됩니다.</p><br><br><h4 id="테마적용"><a href="#테마적용" class="headerlink" title="테마적용"></a>테마적용</h4><p>iTerm을 실행하고 설정(<code>⌘</code> + <code>,</code>)창에서 Profiles 항목을 선택하고 Colors탭을 선택합니다.<br>테마 및 컬러설정, 타이틀바, 스크롤바 등의 수정을 할 수 있습니다.</p><br><br><br><h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><p>macOS 의 기본 shell은 bash 를 대체할 zsh를 설치합니다.</p><ul><li>컨텍스트 기반 자동완성 기능(tab)</li><li>다양하고 예쁜 테마와 플러그인</li><li>스펠링 체크</li><li>history 기능</li></ul><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal3" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal3')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`brew install zsh;chsh -s $(which zsh)`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><br><h3 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h3><p>zsh과 oh-my-zsh의 조합으로 강력한 쉘을 사용할 수 있게 되었습니다. 여기서 모든 기능을 설명할 순 없지만 자주 사용하는 몇 가지 팁을 소개합니다.</p><ul><li>명령어가 기억나지 않으면 tab을 누르세요</li><li>cd ../.. 대신 …, …., ….., …</li><li>단축명령어 - git status =&gt; gst, git pull =&gt; gl 등등 다양한 <a href="https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/git/" rel="external nofollow noopener noreferrer" target="_blank">단축명령어</a></li></ul><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal4" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal4')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><br><h4 id="oh-my-zsh-테마변경"><a href="#oh-my-zsh-테마변경" class="headerlink" title="oh-my-zsh 테마변경"></a>oh-my-zsh 테마변경</h4><p>oh-my-zsh에서 제공하는 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" rel="external nofollow noopener noreferrer" target="_blank">Themes</a> 를 확인하고 <code>~/.zshrc</code>를 열고 테마명을 지정해주면 테마를 설정 할 수 있습니다.</p><br><br><br><br><h2 id="개발환경-설정"><a href="#개발환경-설정" class="headerlink" title="개발환경 설정"></a>개발환경 설정</h2><h3 id="NVM-설치-및-설정"><a href="#NVM-설치-및-설정" class="headerlink" title="NVM 설치 및 설정"></a>NVM 설치 및 설정</h3><p>개발 환경이나 필요에 따라 다양한 node.js의 버전을 사용해야 하는 경우가 있습니다.</p><p>NVM은 <code>Node Version Manager</code>로, 다양한 버전 node.js를 설치할 수 있으며 설치 한 Node version을 간단한 명령어로 전환 할 수 있습니다.</p><p>brew를 통한 아래 명령어로 쉽게 설치 하세요.</p><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal9" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal9')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`brew install nvm`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><br><h4 id="Node-버전-및-설치-유무-확인"><a href="#Node-버전-및-설치-유무-확인" class="headerlink" title="Node 버전 및 설치 유무 확인"></a>Node 버전 및 설치 유무 확인</h4><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal10" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal10')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`node —version`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><ul><li>이미 설치되어 있다면 아래와 같이 삭제합니다.</li></ul><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal10-1" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal10-1')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`brew uninstall --force node`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><br><h4 id="NVM-환경변수-및-설정-내용-추가"><a href="#NVM-환경변수-및-설정-내용-추가" class="headerlink" title="NVM 환경변수 및 설정 내용 추가"></a>NVM 환경변수 및 설정 내용 추가</h4><ul><li><code>.zshrc</code> 파일을 열어 하단에 아래 내용을 추가 한 후 저장합니다.</li></ul><figure class="highlight plain hljs"><figcaption><span>.zshrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># NVM</span><br><span class="line"></span><br><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">. &quot;$(brew --prefix nvm)/nvm.sh&quot;</span><br></pre></td></tr></table></figure><br><br><ul><li><code>.zshrc</code> 파일을 읽어 파일 내 내용을 실행시켜 적용합니다.</li></ul><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal10-2" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal10-2')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`source .zshrc`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><br><h4 id="NVM을-통한-Node-설치-및-버전-전환"><a href="#NVM을-통한-Node-설치-및-버전-전환" class="headerlink" title="NVM을 통한 Node 설치 및 버전 전환"></a>NVM을 통한 Node 설치 및 버전 전환</h4><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal10-3" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal10-3')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`nvm install 10.15.3;nvm use 10.15.3`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><br><h3 id="Yarn-설치"><a href="#Yarn-설치" class="headerlink" title="Yarn 설치"></a>Yarn 설치</h3><p>수많은 개발자들은 코드의 패키지를 공유하고 이 것을 조립하여 프로젝트를 빌드하는 도구로 Package Manager를 사용합니다.</p><p>그리고 전 세계적으로 가장 인기있고 많이 쓰이는 JavaScript Package Manager는 <code>NPM</code> 입니다.</p><p>NPM은 배포가 쉽고 종속성을 쉽게 해결할 수 있다는 장점이 있지만 패키지가 중복으로 설치될 수 있다는 단점이 있습니다.</p><p>이러한 이슈를 해결하기 위한 새로운 자바스크립트 패키지 매니저가 <code>Yarn</code>입니다.</p><ol><li><p>NPM3보다 패키지 설치 속도가 빠릅니다.</p></li><li><p>JSON 포맷을 사용하지 않습니다.</p></li><li><p>오프라인 모드가 가능합니다.</p></li></ol><br><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal11" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal11')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`brew install yarn`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><br><h3 id="SSH-Key-설정"><a href="#SSH-Key-설정" class="headerlink" title="SSH Key 설정"></a>SSH Key 설정</h3><p><code>새로운 SSH key 생성하기</code></p><ol><li>Termial을 열어 Github 이메일 주소와 함께 아래와 같이 붙여넣습니다.</li></ol><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal13-1" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal13-1')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`ssh-keygen -t rsa -b 4096 -C "<your_email@example.com>"`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><ol start="2"><li><p>새로운 ssh key가 생성되고, “Enter a file in which to save the key,”라는 문구가 뜬다면, <code>Enter</code> 키를 눌러주세요.</p></li><li><p>아래와 같은 내용이 뜬다면, <code>Enter</code> 키를 눌러주세요.</p></li></ol><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Enter passphrase (empty for no passphrase): [Type a passphrase]</span><br><span class="line">&gt; Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure><ol start="4"><li>생성된 ssh key 내용을 복사합니다.</li></ol><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal13-2" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal13-2')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`pbcopy < ~/.ssh/id_rsa.pub`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><ol start="5"><li><a href="https://github.com/settings/ssh/new" rel="external nofollow noopener noreferrer" target="_blank">Add New SSH keys on Github</a> 에 접속하여 <code>Title</code>에는 userName을, <code>Key</code>에는 복사한 내용을 붙여넣고 추가합니다.</li></ol><br><br><br><br><h2 id="필요한-어플리케이션-설치"><a href="#필요한-어플리케이션-설치" class="headerlink" title="필요한 어플리케이션 설치"></a>필요한 어플리케이션 설치</h2><h3 id="chrome-설치"><a href="#chrome-설치" class="headerlink" title="chrome 설치"></a>chrome 설치</h3><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal12" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal12')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`brew cask install google-chrome`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><br><h3 id="alfred"><a href="#alfred" class="headerlink" title="alfred"></a>alfred</h3><p>alfred는 독특한 단축키와 키스트로크 시스템을 통해 생산성을 높여줍니다.</p><ul><li>앱을 실행하고 파일을 찾고 계산하는 것은 물론 빠르고 정확하게 맥을 제어할 수 있습니다.</li><li>사용자 설정 기능도 강력합니다.</li><li>MacOS의 단점인 스폿라이트(spotlight)를 훌륭하게 보완한 앱입니다.</li></ul><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal5" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal5')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`brew cask install alfred`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><br><h3 id="divvy"><a href="#divvy" class="headerlink" title="divvy"></a>divvy</h3><p>divvy는 사용자가 화면 창의 크기와 위치를 마음대로 조절 할 수 있습니다.</p><ul><li>free trial version 을 사용합니다.</li><li><code>시스템설정</code> &gt; <code>사용자그룹</code> &gt; <code>로그인 항목</code></li><li><code>설정</code> &gt; <code>보안 및 개인정보보호</code> &gt; <code>손쉬운 사용</code> 내 하단의 자물쇠 버튼을 클릭하여 <code>Divvy.app</code> 체크박스 활성화</li></ul><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal6" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal6')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`brew cask install divvy`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://subicura.com/2017/11/22/mac-os-development-environment-setup.html" rel="external nofollow noopener noreferrer" target="_blank">본격 macOS에 개발 환경 구축하기</a></li><li><a href="https://lunarscents.github.io/2019/08/17/developmentEnvironmentInMac/#more" rel="external nofollow noopener noreferrer" target="_blank">Mac OS 개발 환경 설정 Guide</a></li></ul>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/11/10/tools/env/mac-setting-01/#disqus_thread</comments>
    </item>
    
    <item>
      <title>자바스크립트 개발자라면 알아야하는 핵심 컨셉 33 (1~5)</title>
      <link>https://alleyful.github.io/2019/10/11/develop/javascript/33-js-concepts-01/</link>
      <guid>https://alleyful.github.io/2019/10/11/develop/javascript/33-js-concepts-01/</guid>
      <pubDate>Fri, 11 Oct 2019 08:31:19 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;1-Call-Stack&quot;&gt;&lt;a href=&quot;#1-Call-Stack&quot; class=&quot;headerlink&quot; title=&quot;1. Call Stack&quot;&gt;&lt;/a&gt;1. Call Stack&lt;/h1&gt;&lt;p&gt;여러 함수들(functions)을 호출하는 스크립트에서 해당 위치를 추적하는 인터프리터 (웹 브라우저의 자바스크립트 인터프리터같은)를 위한 메커니즘.&lt;br&gt;현재 어떤 함수가 동작하고 있는지, 그 함수 내에서 어떤 함수가 동작하는지, 다음에 어떤 함수가 호출되어야 하는지 등을 제어.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스크립트가 함수를 호출하면 인터프리터는 이를 호출 스택에 추가한 다음 함수를 수행하기 시작.&lt;/li&gt;
&lt;li&gt;해당 함수에 의해 호출되는 모든 함수는 호출 스택에 추가되고 호출이 도달하는 위치에서 실행.&lt;/li&gt;
&lt;li&gt;메인 함수가 끝나면 인터프리터는 스택을 제거하고 메인 코드 목록에서 중단된 실행을 다시 시작.&lt;/li&gt;
&lt;li&gt;스택이 할당된 공간보다 많은 공간을 차지하면 “stack overflow” 에러가 발생.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="1-Call-Stack"><a href="#1-Call-Stack" class="headerlink" title="1. Call Stack"></a>1. Call Stack</h1><p>여러 함수들(functions)을 호출하는 스크립트에서 해당 위치를 추적하는 인터프리터 (웹 브라우저의 자바스크립트 인터프리터같은)를 위한 메커니즘.<br>현재 어떤 함수가 동작하고 있는지, 그 함수 내에서 어떤 함수가 동작하는지, 다음에 어떤 함수가 호출되어야 하는지 등을 제어.</p><ul><li>스크립트가 함수를 호출하면 인터프리터는 이를 호출 스택에 추가한 다음 함수를 수행하기 시작.</li><li>해당 함수에 의해 호출되는 모든 함수는 호출 스택에 추가되고 호출이 도달하는 위치에서 실행.</li><li>메인 함수가 끝나면 인터프리터는 스택을 제거하고 메인 코드 목록에서 중단된 실행을 다시 시작.</li><li>스택이 할당된 공간보다 많은 공간을 차지하면 “stack overflow” 에러가 발생.</li></ul><a id="more"></a><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">three</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'I love JS'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">two</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  three();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">one</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  two();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">zero</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  one();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">zero();</span><br></pre></td></tr></table></figure><p><code>callstack</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0. empty 스택</span><br><span class="line">1. zero() 스택 삽입</span><br><span class="line">2. zero() =&gt; one() 스택 삽입</span><br><span class="line">3. zero() =&gt; one() =&gt; two() 스택 삽입</span><br><span class="line">4. zero() =&gt; one() =&gt; two() =&gt; three() 스택 삽입</span><br><span class="line">5. zero() =&gt; one() =&gt; two() =&gt; three() =&gt; console.log() 실행완료</span><br><span class="line">6. zero() =&gt; one() =&gt; two() =&gt; three() 스택에서 제거</span><br><span class="line">7. zero() =&gt; one() =&gt; two() 스택에서 제거</span><br><span class="line">8. zero() =&gt; one() 스택에서 제거</span><br><span class="line">9. zero() 스택에서 제거</span><br><span class="line">10. empty 스택</span><br></pre></td></tr></table></figure><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Glossary/Call_stack" rel="external nofollow noopener noreferrer" target="_blank">MDN Callstack</a></li><li><a href="https://www.youtube.com/watch?v=QkFkFqg-J04&list=PL7jH19IHhOLMmmjrwCi7-dMFVdoU0hhgF&index=10" rel="external nofollow noopener noreferrer" target="_blank">Nomadcoders</a></li></ul><br><h1 id="2-Primitive-Types"><a href="#2-Primitive-Types" class="headerlink" title="2. Primitive Types"></a>2. Primitive Types</h1><p>Primitive Types는 원시 자료형 또는 기본 자료형으로 자바스크립트의 기본이 되는 자료형을 의미. </p><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><ul><li>숫자의 자료형을 의미. </li><li>숫자가 아님을 뜻하는 NaN(Not a Number)도 숫자 자료형.  </li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typeof</span> <span class="hljs-number">1</span> <span class="hljs-comment">// "number"</span></span><br><span class="line"><span class="hljs-keyword">typeof</span> <span class="hljs-literal">NaN</span> <span class="hljs-comment">// "number"</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">2</span>, <span class="hljs-string">'abc'</span>) <span class="hljs-comment">//NaN</span></span><br></pre></td></tr></table></figure><br><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul><li>자바스크립트 문자열을 의미하며, 텍스트 데이터를 나타내는데 사용. </li><li>“, ‘ 또는 ` 기호 안에 텍스트를 기입하는 방식으로 사용하며 시작한 기호로 끝내야 한다.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">"Hello"</span></span><br><span class="line"><span class="hljs-string">'Hi'</span></span><br><span class="line"><span class="hljs-string">`Nice`</span></span><br></pre></td></tr></table></figure><ul><li>“ “ 안에 ‘ ‘ 쌍을 쓸 수 있습니다. 하지만 “ “ 쌍 안에 “ “를 쓰려면 역슬래쉬로 이스케이프(escape) 해야 한다.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">"Hello \"Javascript\" "</span></span><br></pre></td></tr></table></figure><br><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><ul><li>논리적인 요소를 나타내는 타입으로 true(참)와 false(거짓)이 있음. </li><li>만약 “true”와 “false”로 쓰면 이는 문자형으로 인지됨.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">"Hello"</span> === <span class="hljs-string">"Hi"</span> <span class="hljs-comment">//false</span></span><br><span class="line"><span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span> <span class="hljs-comment">//"boolean"</span></span><br><span class="line"><span class="hljs-keyword">typeof</span> <span class="hljs-string">"true"</span> <span class="hljs-comment">//"string"</span></span><br></pre></td></tr></table></figure><br><h2 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h2><ul><li>Null은 존재하지 않음이라는 정의를 한 것.</li></ul><br><h2 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h2><ul><li>정의 자체를 하지 않은 것을 의미.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span> === <span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span> <span class="hljs-comment">//false</span></span><br></pre></td></tr></table></figure><br><h2 id="Symbol-ES6에서-추가"><a href="#Symbol-ES6에서-추가" class="headerlink" title="Symbol(ES6에서 추가)"></a>Symbol(ES6에서 추가)</h2><ul><li>심볼(symbol)은 ES6에서 새롭게 추가된 7번째 타입으로 변경 불가능한 원시 타입의 값. </li><li>주로 이름의 충돌 위험이 없는 유일한 객체의 프로퍼티 키(property key)를 만들기 위해 사용.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> mySymbol = <span class="hljs-built_in">Symbol</span>();</span><br><span class="line"><span class="hljs-built_in">console</span>.log(mySymbol);        <span class="hljs-comment">// Symbol()</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> mySymbol); <span class="hljs-comment">// symbol</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> mySymbol = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'mySymbol'</span>);</span><br><span class="line">obj[mySymbol] = <span class="hljs-number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj); <span class="hljs-comment">// &#123; [Symbol(mySymbol)]: 123 &#125;</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj[mySymbol]); <span class="hljs-comment">// 123</span></span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Data_structures#Primitive_values" rel="external nofollow noopener noreferrer" target="_blank">MDN data types</a></li><li><a href="https://poiemaweb.com/es6-symbol" rel="external nofollow noopener noreferrer" target="_blank">7번째 타입 심볼(Symbol)</a></li></ul><br><h1 id="3-Value-Types-and-Reference-Types"><a href="#3-Value-Types-and-Reference-Types" class="headerlink" title="3. Value Types and Reference Types"></a>3. Value Types and Reference Types</h1><p><img src="/images/develop/javascript/33-js-1.png" alt="Value Types and Reference Types"></p><h2 id="Value-Types"><a href="#Value-Types" class="headerlink" title="Value Types"></a>Value Types</h2><ul><li>원시타입(Value Types or primitive type) : Number, String, Boolean, Null, Undefined, Symbol</li><li>원시 타입 데이터는 변수에 할당될 때 메모리 상에 고정된 크기로 저장되고 해당 변수가 원시 데이터의 값을 보관한다. </li><li>원시 타입 자료형은 모두 변수 선언, 초기화, 할당시 값이 저장된 메모리 영역에 직접적으로 접근한다, 즉 변수에 새 값이 할당 될 때 변수에 할당된 메모리 블럭에 저장된 값을 바로 변경한다는 뜻이다.<br><img src="/images/develop/javascript/33-js-2.png" alt="Value Types"></li></ul><h2 id="Referunce-Types"><a href="#Referunce-Types" class="headerlink" title="Referunce Types"></a>Referunce Types</h2><ul><li>참조타입(reference type) : Object, Array, Function</li><li>참조 타입 데이터는 변수에 할당될 때 값이 직접 해당 변수에 저장될 수 없으며, 변수에는 데이터에 대한 참조, 즉 변수의 값이 저장된 힙(Heap) 메모리의 주소값을 저장한다. </li><li>참조 타입은 변수의 값이 저장된 메모리 블럭의 주소를 가지고 있고, 자바스크립트 엔진이 변수가 가지고 있는 메모리 주소를 이용해서 변수의 값에 접근한다<br><img src="/images/develop/javascript/33-js-3.png" alt="Referunce Types"></li></ul><br><h1 id="4-Type-Coercoin"><a href="#4-Type-Coercoin" class="headerlink" title="4. Type Coercoin"></a>4. Type Coercoin</h1><p>동적 타입 언어인 자바스크립트는 개발자의 의도와는 상관없이 자바스크립트 엔진에 의해 암묵적으로 타입이 자동 변환되기도 한다.<br>이를 암묵적 타입 변환(Implicit coercion) 또는 타입 강제 변환(Type coercion)이라고 한다.</p><br><h2 id="String-1"><a href="#String-1" class="headerlink" title="String"></a>String</h2><ul><li>위의 + 연산자는 피연산자중 문자열이 있으면 문자열의 연결 연산자로 동작한다. </li><li>때문에 4 (Number) -&gt; ‘4’ (String)의 묵시적 형변환이 일어난다.<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span> + <span class="hljs-string">"hello"</span>); <span class="hljs-comment">//4hello</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span> + <span class="hljs-number">4</span> + <span class="hljs-string">"hello"</span>); <span class="hljs-comment">//8hello</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> + <span class="hljs-string">''</span>); <span class="hljs-comment">// "1"</span></span><br></pre></td></tr></table></figure></li></ul><br><h2 id="Number-1"><a href="#Number-1" class="headerlink" title="Number"></a>Number</h2><ul><li>‘-‘, ‘*’, ‘/‘ 등의 산술연산자는 피연산자가 숫자가 아니면 숫자 타입으로 묵시적 형변환 후 연산한다.<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> - <span class="hljs-string">'1'</span>); <span class="hljs-comment">//0</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(+<span class="hljs-string">'0'</span>); <span class="hljs-comment">// 0</span></span><br></pre></td></tr></table></figure></li></ul><br><h2 id="Boolean-Truthy-값-참으로-인식할-값-또는-Falsy-값-거짓으로-인식할-값"><a href="#Boolean-Truthy-값-참으로-인식할-값-또는-Falsy-값-거짓으로-인식할-값" class="headerlink" title="Boolean : Truthy 값(참으로 인식할 값) 또는 Falsy 값(거짓으로 인식할 값)"></a>Boolean : Truthy 값(참으로 인식할 값) 또는 Falsy 값(거짓으로 인식할 값)</h2><p>JavaScript에서는 아래의 값들은 모두 falsy이고, 이를 제외한 모든 값들은 truthy다.</p><ul><li>false</li><li>undefined</li><li>null</li><li>0, -0</li><li>NaN</li><li>’’ (빈문자열)<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">""</span> == <span class="hljs-literal">true</span>); <span class="hljs-comment">//false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> == <span class="hljs-literal">true</span>); <span class="hljs-comment">//true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">true</span> + <span class="hljs-string">''</span>); <span class="hljs-comment">// "true"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(+<span class="hljs-literal">true</span>); <span class="hljs-comment">// 1</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">true</span> * <span class="hljs-number">1</span>); <span class="hljs-comment">// 1</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">66</span> + <span class="hljs-literal">true</span>); <span class="hljs-comment">//67</span></span><br></pre></td></tr></table></figure></li></ul><br><h1 id="5-vs-vs-typeof"><a href="#5-vs-vs-typeof" class="headerlink" title="5. == vs === vs typeof"></a>5. == vs === vs typeof</h1><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>변수의 데이터 타입을 반환하는 연산자.</p><ul><li>undefined : 변수가 정의되지 않거나 값이 없을 때</li><li>number : 데이터 타입이 수일 때</li><li>string : 데이터 타입이 문자열일 때</li><li>boolean : 데이터 타입이 불리언일 때</li><li>object : 데이터 타입이 함수, 배열 등 객체일 때</li><li>function : 변수의 값이 함수일 때</li><li>symbol : 데이터 타입이 심볼일 때</li></ul><br><h2 id><a href="#" class="headerlink" title="=="></a>==</h2><p>두 가지를 비교할 때 유형 변환을 수행하고 IEEE 754를 준수하기 위해 NaN, -0 및 +0을 특별히 처리합니다 (NaN != NaN, -0 == +0)</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> num = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">"0"</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> str = <span class="hljs-string">"0"</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> b = <span class="hljs-literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num == num); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj == obj); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(str == str); <span class="hljs-comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num == obj); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num == str); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj == str); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span>); <span class="hljs-comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 둘 다 false, 드문 경우를 제외하고는</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj == <span class="hljs-literal">null</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj == <span class="hljs-literal">undefined</span>);</span><br></pre></td></tr></table></figure><br><h2 id="-1"><a href="#-1" class="headerlink" title="==="></a>===</h2><p>이중 equals (NaN, -0 및 +0의 특수 처리 포함)와 동일한 비교를 수행하지만 유형 변환은 수행하지 않습니다. 형식이 다른 경우 false가 반환됩니다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> num = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">"0"</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> str = <span class="hljs-string">"0"</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> b = <span class="hljs-literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num === num); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj === obj); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(str === str); <span class="hljs-comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num === obj); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num === str); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj === str); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">null</span> === <span class="hljs-literal">undefined</span>); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj === <span class="hljs-literal">null</span>); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj === <span class="hljs-literal">undefined</span>); <span class="hljs-comment">// false</span></span><br></pre></td></tr></table></figure><br><h2 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is"></a>Object.is</h2><p>형식 변환을하지 않으며 NaN, -0 및 +0에 대한 특수 처리를 수행하지 않습니다 (특수 숫자 값을 제외하고는 ===와 동일한 동작을 제공함).</p>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/10/11/develop/javascript/33-js-concepts-01/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 행렬의 곱셈</title>
      <link>https://alleyful.github.io/2019/10/08/algorithm/programmers/level2-15/</link>
      <guid>https://alleyful.github.io/2019/10/08/algorithm/programmers/level2-15/</guid>
      <pubDate>Tue, 08 Oct 2019 11:17:12 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;2차원 행렬 arr1과 arr2를 입력받아, arr1에 arr2를 곱한 결과를 반환하는 함수, solution을 완성해주세요.&lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;제한-조건&quot;&gt;&lt;a href=&quot;#제한-조건&quot; class=&quot;headerlink&quot; title=&quot;제한 조건&quot;&gt;&lt;/a&gt;제한 조건&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;행렬 arr1, arr2의 행과 열의 길이는 2 이상 100 이하입니다.&lt;/li&gt;
&lt;li&gt;행렬 arr1, arr2의 원소는 -10 이상 20 이하인 자연수입니다.&lt;/li&gt;
&lt;li&gt;곱할 수 있는 배열만 주어집니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>2차원 행렬 arr1과 arr2를 입력받아, arr1에 arr2를 곱한 결과를 반환하는 함수, solution을 완성해주세요.</p><br><h2 id="제한-조건"><a href="#제한-조건" class="headerlink" title="제한 조건"></a>제한 조건</h2><ul><li>행렬 arr1, arr2의 행과 열의 길이는 2 이상 100 이하입니다.</li><li>행렬 arr1, arr2의 원소는 -10 이상 20 이하인 자연수입니다.</li><li>곱할 수 있는 배열만 주어집니다.</li></ul><br><a id="more"></a><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="left">arr1</th><th align="left">arr2</th><th align="left">return</th></tr></thead><tbody><tr><td align="left">[[1, 4], [3, 2], [4, 1]]</td><td align="left">[[3, 3], [3, 3]]</td><td align="left">[[15, 15], [15, 15], [15, 15]]</td></tr><tr><td align="left">[[2, 3, 2], [4, 2, 4], [3, 1, 4]]</td><td align="left">[[5, 4, 3], [2, 4, 1], [3, 1, 1]]</td><td align="left">[[22, 22, 11], [36, 28, 18], [29, 20, 14]]</td></tr></tbody></table><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">arr1, arr2</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>(arr1.length).fill(<span class="hljs-string">''</span>).map(</span><br><span class="line">        (rowValue, index) =&gt; <span class="hljs-built_in">Array</span>(arr2[<span class="hljs-number">0</span>].length).fill(<span class="hljs-string">''</span>).map(</span><br><span class="line">            (verticalValue, innerIndex) =&gt; arr1[index].reduce(</span><br><span class="line">                (target, current, array) =&gt;target + current * arr2[array][innerIndex], <span class="hljs-number">0</span></span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/10/08/algorithm/programmers/level2-15/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 피보나치 수</title>
      <link>https://alleyful.github.io/2019/09/28/algorithm/programmers/level2-14/</link>
      <guid>https://alleyful.github.io/2019/09/28/algorithm/programmers/level2-14/</guid>
      <pubDate>Sat, 28 Sep 2019 13:19:52 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;피보나치 수는 F(0) = 0, F(1) = 1일 때, 1 이상의 n에 대하여 F(n) = F(n-1) + F(n-2) 가 적용되는 수 입니다.&lt;/p&gt;
&lt;p&gt;예를들어&lt;/p&gt;
&lt;p&gt;F(2) = F(0) + F(1) = 0 + 1 = 1&lt;br&gt;F(3) = F(1) + F(2) = 1 + 1 = 2&lt;br&gt;F(4) = F(2) + F(3) = 1 + 2 = 3&lt;br&gt;F(5) = F(3) + F(4) = 2 + 3 = 5&lt;br&gt;와 같이 이어집니다.&lt;/p&gt;
&lt;p&gt;2 이상의 n이 입력되었을 때, n번째 피보나치 수를 1234567으로 나눈 나머지를 리턴하는 함수, solution을 완성해 주세요.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>피보나치 수는 F(0) = 0, F(1) = 1일 때, 1 이상의 n에 대하여 F(n) = F(n-1) + F(n-2) 가 적용되는 수 입니다.</p><p>예를들어</p><p>F(2) = F(0) + F(1) = 0 + 1 = 1<br>F(3) = F(1) + F(2) = 1 + 1 = 2<br>F(4) = F(2) + F(3) = 1 + 2 = 3<br>F(5) = F(3) + F(4) = 2 + 3 = 5<br>와 같이 이어집니다.</p><p>2 이상의 n이 입력되었을 때, n번째 피보나치 수를 1234567으로 나눈 나머지를 리턴하는 함수, solution을 완성해 주세요.</p><br><a id="more"></a><h2 id="제한-사항"><a href="#제한-사항" class="headerlink" title="제한 사항"></a>제한 사항</h2><ul><li>n은 1이상, 100000이하인 자연수입니다.</li></ul><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="center">n</th><th align="center">return</th></tr></thead><tbody><tr><td align="center">3</td><td align="center">2</td></tr><tr><td align="center">5</td><td align="center">5</td></tr></tbody></table><br><h2 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h2><p>피보나치수는 0번째부터 0, 1, 1, 2, 3, 5, … 와 같이 이어집니다.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> fibonacci = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>];</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        fibonacci.push((fibonacci[i - <span class="hljs-number">1</span>] + fibonacci[i]) % <span class="hljs-number">1234567</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="hljs-keyword">return</span> fibonacci[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/28/algorithm/programmers/level2-14/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 최솟값 만들기</title>
      <link>https://alleyful.github.io/2019/09/19/algorithm/programmers/level2-13/</link>
      <guid>https://alleyful.github.io/2019/09/19/algorithm/programmers/level2-13/</guid>
      <pubDate>Wed, 18 Sep 2019 16:29:52 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;길이가 같은 배열 A, B 두개가 있습니다. 각 배열은 자연수로 이루어져 있습니다.&lt;br&gt;배열 A, B에서 각각 한 개의 숫자를 뽑아 두 수를 곱합니다. 이러한 과정을 배열의 길이만큼 반복하며, 두 수를 곱한 값을 누적하여 더합니다.&lt;br&gt;이때 최종적으로 누적된 값이 최소가 되도록 만드는 것이 목표입니다. (단, 각 배열에서 k번째 숫자를 뽑았다면 다음에 k번째 숫자는 다시 뽑을 수 없습니다.)&lt;/p&gt;
&lt;p&gt;예를 들어 A = &lt;code&gt;[1, 4, 2]&lt;/code&gt; , B = &lt;code&gt;[5, 4, 4]&lt;/code&gt; 라면&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A에서 첫번째 숫자인 1, B에서 두번째 숫자인 5를 뽑아 곱하여 더합니다. (누적된 값 : 0 + 5(1x5) = 5)&lt;/li&gt;
&lt;li&gt;A에서 두번째 숫자인 4, B에서 세번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 5 + 16(4x4) = 21)&lt;/li&gt;
&lt;li&gt;A에서 세번째 숫자인 2, B에서 첫번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 21 + 8(2x4) = 29)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;즉, 이 경우가 최소가 되므로 29를 return 합니다.&lt;/p&gt;
&lt;p&gt;배열 A, B가 주어질 때 최종적으로 누적된 최솟값을 return 하는 solution 함수를 완성해 주세요.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>길이가 같은 배열 A, B 두개가 있습니다. 각 배열은 자연수로 이루어져 있습니다.<br>배열 A, B에서 각각 한 개의 숫자를 뽑아 두 수를 곱합니다. 이러한 과정을 배열의 길이만큼 반복하며, 두 수를 곱한 값을 누적하여 더합니다.<br>이때 최종적으로 누적된 값이 최소가 되도록 만드는 것이 목표입니다. (단, 각 배열에서 k번째 숫자를 뽑았다면 다음에 k번째 숫자는 다시 뽑을 수 없습니다.)</p><p>예를 들어 A = <code>[1, 4, 2]</code> , B = <code>[5, 4, 4]</code> 라면</p><ul><li>A에서 첫번째 숫자인 1, B에서 두번째 숫자인 5를 뽑아 곱하여 더합니다. (누적된 값 : 0 + 5(1x5) = 5)</li><li>A에서 두번째 숫자인 4, B에서 세번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 5 + 16(4x4) = 21)</li><li>A에서 세번째 숫자인 2, B에서 첫번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 21 + 8(2x4) = 29)</li></ul><p>즉, 이 경우가 최소가 되므로 29를 return 합니다.</p><p>배열 A, B가 주어질 때 최종적으로 누적된 최솟값을 return 하는 solution 함수를 완성해 주세요.</p><br><a id="more"></a><h2 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h2><ul><li>배열 A, B의 크기 : 1,000 이하의 자연수</li><li>배열 A, B의 원소의 크기 : 1,000 이하의 자연수</li></ul><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">answer</th></tr></thead><tbody><tr><td align="center">[1, 4, 2]</td><td align="center">[5, 4, 4]</td><td align="center">29</td></tr><tr><td align="center">[1,2]</td><td align="center">[3,4]</td><td align="center">10</td></tr></tbody></table><br><h2 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h2><h3 id="입출력-예-1"><a href="#입출력-예-1" class="headerlink" title="입출력 예 #1"></a>입출력 예 #1</h3><p>문제의 예시와 같습니다.</p><h3 id="입출력-예-2"><a href="#입출력-예-2" class="headerlink" title="입출력 예 #2"></a>입출력 예 #2</h3><p>A에서 첫번째 숫자인 1, B에서 두번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 4)<br>다음, A에서 두번째 숫자인 2, B에서 첫번째 숫자인 3을 뽑아 곱하여 더합니다. (누적된 값 : 4 + 6 = 10)<br>이 경우가 최소이므로 10을 return 합니다.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">A,B</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> numbersB = B.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> b - a);</span><br><span class="line">    <span class="hljs-keyword">return</span> A.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b).map(<span class="hljs-function">(<span class="hljs-params">v, i</span>) =&gt;</span> v * numbersB[i]).reduce(<span class="hljs-function">(<span class="hljs-params">target, number</span>) =&gt;</span> target + number, <span class="hljs-number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/19/algorithm/programmers/level2-13/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 최댓값과 최솟값</title>
      <link>https://alleyful.github.io/2019/09/17/algorithm/programmers/level2-12/</link>
      <guid>https://alleyful.github.io/2019/09/17/algorithm/programmers/level2-12/</guid>
      <pubDate>Tue, 17 Sep 2019 14:01:52 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;문자열 s에는 공백으로 구분된 숫자들이 저장되어 있습니다.&lt;br&gt;&lt;code&gt;str에 나타나는 숫자 중 최소값과 최대값을 찾아 이를 (최소값) (최대값)형태의 문자열을 반환하는 함수&lt;/code&gt;, solution을 완성하세요.&lt;br&gt;예를들어 s가 1 2 3 4라면 1 4를 리턴하고, -1 -2 -3 -4라면 -4 -1을 리턴하면 됩니다.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>문자열 s에는 공백으로 구분된 숫자들이 저장되어 있습니다.<br><code>str에 나타나는 숫자 중 최소값과 최대값을 찾아 이를 (최소값) (최대값)형태의 문자열을 반환하는 함수</code>, solution을 완성하세요.<br>예를들어 s가 1 2 3 4라면 1 4를 리턴하고, -1 -2 -3 -4라면 -4 -1을 리턴하면 됩니다.</p><br><a id="more"></a><h2 id="제한-조건"><a href="#제한-조건" class="headerlink" title="제한 조건"></a>제한 조건</h2><p>s에는 둘 이상의 정수가 공백으로 구분되어 있습니다.</p><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="center">s</th><th align="center">return</th></tr></thead><tbody><tr><td align="center">1 2 3 4</td><td align="center">1 4</td></tr><tr><td align="center">-1 -2 -3 -4</td><td align="center">-4 -1</td></tr><tr><td align="center">-1 -1</td><td align="center">-1 -1</td></tr></tbody></table><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">s</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> numbers = s.split(<span class="hljs-string">' '</span>).map(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> +v);</span><br><span class="line">    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">Math</span>.min(...numbers), <span class="hljs-built_in">Math</span>.max(...numbers)].join(<span class="hljs-string">' '</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/17/algorithm/programmers/level2-12/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS Youtube Challenge - 시작하기</title>
      <link>https://alleyful.github.io/2019/09/16/log/youtube-challenge/youtube-challenge-start/</link>
      <guid>https://alleyful.github.io/2019/09/16/log/youtube-challenge/youtube-challenge-start/</guid>
      <pubDate>Mon, 16 Sep 2019 12:06:41 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;code&gt;2019. 9. 16 ~ 2019. 10. 28&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;강의 수강신청만하고 끝까지 완강을 하지 못해서 항상 생각만 하고 있었는데, 이번기회에 꼭 끝까지 완강해 보려고 합니다.&lt;br&gt;이런 기회를 만들어 주셔서 참 감사합
        
      
      </description>
      
      <content:encoded><![CDATA[<p><code>2019. 9. 16 ~ 2019. 10. 28</code></p><p>강의 수강신청만하고 끝까지 완강을 하지 못해서 항상 생각만 하고 있었는데, 이번기회에 꼭 끝까지 완강해 보려고 합니다.<br>이런 기회를 만들어 주셔서 참 감사합니다!!</p><br><h2 id="Clone-Coding-for-WeTube-Challenge"><a href="#Clone-Coding-for-WeTube-Challenge" class="headerlink" title="Clone Coding for WeTube Challenge"></a>Clone Coding for WeTube Challenge</h2><ul><li><a href="https://academy.nomadcoders.co/p/javascript-fullstack-from-zero-to-hero" rel="external nofollow noopener noreferrer" target="_blank">[노마드 코더] 유튜브 클론 코딩 강좌소개</a></li><li><a href="https://polar-sea-27980.herokuapp.com/" rel="external nofollow noopener noreferrer" target="_blank">완성된 모습 보기</a></li></ul><br><h2 id="챌린지-관련-내용의-정답-유출-금지-내용을-전달-받아-포스팅-내-Homework-내용을-삭제합니다"><a href="#챌린지-관련-내용의-정답-유출-금지-내용을-전달-받아-포스팅-내-Homework-내용을-삭제합니다" class="headerlink" title="챌린지 관련 내용의 정답 유출 금지 내용을 전달 받아 포스팅 내 Homework 내용을 삭제합니다."></a>챌린지 관련 내용의 정답 유출 금지 내용을 전달 받아 포스팅 내 Homework 내용을 삭제합니다.</h2>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/16/log/youtube-challenge/youtube-challenge-start/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 숫자의 표현</title>
      <link>https://alleyful.github.io/2019/09/15/algorithm/programmers/level2-11/</link>
      <guid>https://alleyful.github.io/2019/09/15/algorithm/programmers/level2-11/</guid>
      <pubDate>Sat, 14 Sep 2019 15:03:19 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;Finn은 요즘 수학공부에 빠져 있습니다. 수학 공부를 하던 Finn은 자연수 n을 연속한 자연수들로 표현 하는 방법이 여러개라는 사실을 알게 되었습니다.&lt;br&gt;예를들어 15는 다음과 같이 4가지로 표현 할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 + 2 + 3 + 4 + 5 = 15&lt;/li&gt;
&lt;li&gt;4 + 5 + 6 = 15&lt;/li&gt;
&lt;li&gt;7 + 8 = 15&lt;/li&gt;
&lt;li&gt;15 = 15&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;자연수 n이 매개변수로 주어질 때, &lt;code&gt;연속된 자연수들로 n을 표현하는 방법의 수를 return하는 solution를 완성&lt;/code&gt;해주세요.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>Finn은 요즘 수학공부에 빠져 있습니다. 수학 공부를 하던 Finn은 자연수 n을 연속한 자연수들로 표현 하는 방법이 여러개라는 사실을 알게 되었습니다.<br>예를들어 15는 다음과 같이 4가지로 표현 할 수 있습니다.</p><ul><li>1 + 2 + 3 + 4 + 5 = 15</li><li>4 + 5 + 6 = 15</li><li>7 + 8 = 15</li><li>15 = 15</li></ul><p>자연수 n이 매개변수로 주어질 때, <code>연속된 자연수들로 n을 표현하는 방법의 수를 return하는 solution를 완성</code>해주세요.</p><br><a id="more"></a><h2 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h2><ul><li>n은 10,000 이하의 자연수 입니다.</li></ul><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="center">n</th><th align="center">result</th></tr></thead><tbody><tr><td align="center">15</td><td align="center">4</td></tr></tbody></table><br><h2 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h2><h3 id="입출력-예-1"><a href="#입출력-예-1" class="headerlink" title="입출력 예#1"></a>입출력 예#1</h3><p>문제의 예시와 같습니다.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>(n).fill().map(<span class="hljs-function">(<span class="hljs-params">v, i</span>) =&gt;</span> i + <span class="hljs-number">1</span>).filter(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> ( !(n % v) &amp;&amp; (v % <span class="hljs-number">2</span>)) ).length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/15/algorithm/programmers/level2-11/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 땅따먹기</title>
      <link>https://alleyful.github.io/2019/09/11/algorithm/programmers/level2-10/</link>
      <guid>https://alleyful.github.io/2019/09/11/algorithm/programmers/level2-10/</guid>
      <pubDate>Tue, 10 Sep 2019 15:05:28 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;땅따먹기 게임을 하려고 합니다. 땅따먹기 게임의 땅(land)은 총 N행 4열로 이루어져 있고, 모든 칸에는 점수가 쓰여 있습니다. 1행부터 땅을 밟으며 한 행씩 내려올 때, 각 행의 4칸 중 한 칸만 밟으면서 내려와야 합니다. 단, 땅따먹기 게임에는 한 행씩 내려올 때, 같은 열을 연속해서 밟을 수 없는 특수 규칙이 있습니다.&lt;/p&gt;
&lt;p&gt;예를 들면,&lt;/p&gt;
&lt;p&gt;| 1 | 2 | 3 | 5 |&lt;/p&gt;
&lt;p&gt;| 5 | 6 | 7 | 8 |&lt;/p&gt;
&lt;p&gt;| 4 | 3 | 2 | 1 |&lt;/p&gt;
&lt;p&gt;로 땅이 주어졌다면, 1행에서 네번째 칸 (5)를 밟았으면, 2행의 네번째 칸 (8)은 밟을 수 없습니다.&lt;/p&gt;
&lt;p&gt;마지막 행까지 모두 내려왔을 때, &lt;code&gt;얻을 수 있는 점수의 최대값을 return하는 solution 함수&lt;/code&gt;를 완성해 주세요. &lt;/p&gt;
&lt;p&gt;위 예의 경우, 1행의 네번째 칸 (5), 2행의 세번째 칸 (7), 3행의 첫번째 칸 (4) 땅을 밟아 16점이 최고점이 되므로 16을 return 하면 됩니다.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>땅따먹기 게임을 하려고 합니다. 땅따먹기 게임의 땅(land)은 총 N행 4열로 이루어져 있고, 모든 칸에는 점수가 쓰여 있습니다. 1행부터 땅을 밟으며 한 행씩 내려올 때, 각 행의 4칸 중 한 칸만 밟으면서 내려와야 합니다. 단, 땅따먹기 게임에는 한 행씩 내려올 때, 같은 열을 연속해서 밟을 수 없는 특수 규칙이 있습니다.</p><p>예를 들면,</p><p>| 1 | 2 | 3 | 5 |</p><p>| 5 | 6 | 7 | 8 |</p><p>| 4 | 3 | 2 | 1 |</p><p>로 땅이 주어졌다면, 1행에서 네번째 칸 (5)를 밟았으면, 2행의 네번째 칸 (8)은 밟을 수 없습니다.</p><p>마지막 행까지 모두 내려왔을 때, <code>얻을 수 있는 점수의 최대값을 return하는 solution 함수</code>를 완성해 주세요. </p><p>위 예의 경우, 1행의 네번째 칸 (5), 2행의 세번째 칸 (7), 3행의 첫번째 칸 (4) 땅을 밟아 16점이 최고점이 되므로 16을 return 하면 됩니다.</p><br><a id="more"></a><h2 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h2><p>행의 개수 N : 100,000 이하의 자연수<br>열의 개수는 4개이고, 땅(land)은 2차원 배열로 주어집니다.<br>점수 : 100 이하의 자연수</p><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="center">land</th><th align="center">answer</th></tr></thead><tbody><tr><td align="center">[[1,2,3,5],[5,6,7,8],[4,3,2,1]]</td><td align="center">16</td></tr></tbody></table><br><h2 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h2><h3 id="입출력-예-1"><a href="#입출력-예-1" class="headerlink" title="입출력 예 #1"></a>입출력 예 #1</h3><p>문제의 예시와 같습니다.</p><br><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">land</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(...land.reduce(<span class="hljs-function">(<span class="hljs-params">target, score</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> [</span><br><span class="line">            score[<span class="hljs-number">0</span>] + <span class="hljs-built_in">Math</span>.max(target[<span class="hljs-number">1</span>], target[<span class="hljs-number">2</span>], target[<span class="hljs-number">3</span>]),  </span><br><span class="line">            score[<span class="hljs-number">1</span>] + <span class="hljs-built_in">Math</span>.max(target[<span class="hljs-number">0</span>], target[<span class="hljs-number">2</span>], target[<span class="hljs-number">3</span>]),</span><br><span class="line">            score[<span class="hljs-number">2</span>] + <span class="hljs-built_in">Math</span>.max(target[<span class="hljs-number">0</span>], target[<span class="hljs-number">1</span>], target[<span class="hljs-number">3</span>]),</span><br><span class="line">            score[<span class="hljs-number">3</span>] + <span class="hljs-built_in">Math</span>.max(target[<span class="hljs-number">0</span>], target[<span class="hljs-number">1</span>], target[<span class="hljs-number">2</span>]),</span><br><span class="line">        ];</span><br><span class="line">    &#125;, [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/11/algorithm/programmers/level2-10/#disqus_thread</comments>
    </item>
    
    <item>
      <title>프로그래머스 - 다음 큰 숫자</title>
      <link>https://alleyful.github.io/2019/09/10/algorithm/programmers/level2-09/</link>
      <guid>https://alleyful.github.io/2019/09/10/algorithm/programmers/level2-09/</guid>
      <pubDate>Tue, 10 Sep 2019 14:01:28 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;자연수 n이 주어졌을 때, n의 다음 큰 숫자는 다음과 같이 정의 합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;조건 1. n의 다음 큰 숫자는 n보다 큰 자연수 입니다.&lt;/li&gt;
&lt;li&gt;조건 2. n의 다음 큰 숫자와 n은 2진수로 변환했을 때 1의 갯수가 같습니다.&lt;/li&gt;
&lt;li&gt;조건 3. n의 다음 큰 숫자는 조건 1, 2를 만족하는 수 중 가장 작은 수 입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예를 들어서 78(1001110)의 다음 큰 숫자는 83(1010011)입니다.&lt;/p&gt;
&lt;p&gt;자연수 n이 매개변수로 주어질 때, &lt;code&gt;n의 다음 큰 숫자를 return 하는 solution 함수&lt;/code&gt;를 완성해주세요.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>자연수 n이 주어졌을 때, n의 다음 큰 숫자는 다음과 같이 정의 합니다.</p><ul><li>조건 1. n의 다음 큰 숫자는 n보다 큰 자연수 입니다.</li><li>조건 2. n의 다음 큰 숫자와 n은 2진수로 변환했을 때 1의 갯수가 같습니다.</li><li>조건 3. n의 다음 큰 숫자는 조건 1, 2를 만족하는 수 중 가장 작은 수 입니다.</li></ul><p>예를 들어서 78(1001110)의 다음 큰 숫자는 83(1010011)입니다.</p><p>자연수 n이 매개변수로 주어질 때, <code>n의 다음 큰 숫자를 return 하는 solution 함수</code>를 완성해주세요.</p><br><a id="more"></a><h2 id="제한-사항"><a href="#제한-사항" class="headerlink" title="제한 사항"></a>제한 사항</h2><p>n은 1,000,000 이하의 자연수 입니다.</p><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th align="center">n</th><th align="center">result</th></tr></thead><tbody><tr><td align="center">78</td><td align="center">83</td></tr><tr><td align="center">15</td><td align="center">23</td></tr></tbody></table><br><h2 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h2><h3 id="입출력-예-1"><a href="#입출력-예-1" class="headerlink" title="입출력 예#1"></a>입출력 예#1</h3><p>문제 예시와 같습니다.</p><h3 id="입출력-예-2"><a href="#입출력-예-2" class="headerlink" title="입출력 예#2"></a>입출력 예#2</h3><p>15(1111)의 다음 큰 숫자는 23(10111)입니다.</p><br><hr><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">n,a=n+<span class="hljs-number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> n.toString(<span class="hljs-number">2</span>).match(<span class="hljs-regexp">/1/g</span>).length == a.toString(<span class="hljs-number">2</span>).match(<span class="hljs-regexp">/1/g</span>).length ? a : solution(n,a+<span class="hljs-number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="Sountion-2"><a href="#Sountion-2" class="headerlink" title="Sountion 2"></a>Sountion 2</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> lengthBy1 = n.toString(<span class="hljs-number">2</span>).match(<span class="hljs-regexp">/1/g</span>).length;</span><br><span class="line">    <span class="hljs-keyword">while</span> (n++) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(n.toString(<span class="hljs-number">2</span>).match(<span class="hljs-regexp">/1/g</span>).length === lengthBy1) <span class="hljs-keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/10/algorithm/programmers/level2-09/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Lisa&#39;s Workbook</title>
      <link>https://alleyful.github.io/2019/09/04/algorithm/hackerrank/56_LisasWorkbook/</link>
      <guid>https://alleyful.github.io/2019/09/04/algorithm/hackerrank/56_LisasWorkbook/</guid>
      <pubDate>Wed, 04 Sep 2019 05:09:09 GMT</pubDate>
      <description>
      
        &lt;p&gt;Lisa just got a new math workbook. A workbook contains exercise problems, grouped into chapters. Lisa believes a problem to be special if its index (within a chapter) is the same as the page number where it’s located. The format of Lisa’s book is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are &lt;strong&gt;n&lt;/strong&gt; chapters in Lisa’s workbook, numbered from &lt;strong&gt;1&lt;/strong&gt; to &lt;strong&gt;n&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;img src=&quot;https://latex.codecogs.com/gif.latex?i%5E%7Bth%7D&quot; alt&gt; chapter has &lt;strong&gt;arr[i]&lt;/strong&gt; problems, numbered from &lt;strong&gt;1&lt;/strong&gt; to &lt;strong&gt;arr[i]&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Each page can hold up to &lt;strong&gt;k&lt;/strong&gt; problems. Only a chapter’s last page of exercises may contain fewer than &lt;strong&gt;k&lt;/strong&gt; problems.&lt;/li&gt;
&lt;li&gt;Each new chapter starts on a new page, so a page will never contain problems from more than one chapter.&lt;/li&gt;
&lt;li&gt;The page number indexing starts at &lt;strong&gt;1&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Lisa just got a new math workbook. A workbook contains exercise problems, grouped into chapters. Lisa believes a problem to be special if its index (within a chapter) is the same as the page number where it’s located. The format of Lisa’s book is as follows:</p><ul><li>There are <strong>n</strong> chapters in Lisa’s workbook, numbered from <strong>1</strong> to <strong>n</strong>.</li><li>The <img src="https://latex.codecogs.com/gif.latex?i%5E%7Bth%7D" alt> chapter has <strong>arr[i]</strong> problems, numbered from <strong>1</strong> to <strong>arr[i]</strong>.</li><li>Each page can hold up to <strong>k</strong> problems. Only a chapter’s last page of exercises may contain fewer than <strong>k</strong> problems.</li><li>Each new chapter starts on a new page, so a page will never contain problems from more than one chapter.</li><li>The page number indexing starts at <strong>1</strong>.</li></ul><a id="more"></a><p>Given the details for Lisa’s workbook, can you count its number of special problems?</p><p>For example, Lisa’s workbook contains <strong>arr[1] = 4</strong> problems for chapter <strong>1</strong>, and <strong>arr[2] = 2</strong> problems for chapter <strong>2</strong>. Each page can hold <strong>k = 3</strong> problems. The first page will hold <strong>3</strong> problems for chapter <strong>1</strong>. Problem <strong>1</strong> is on page <strong>1</strong>, so it is special. Page <strong>2</strong> contains only Chapter <strong>1</strong>, Problem <strong>4</strong>, so no special problem is on page <strong>2</strong>. Chapter <strong>2</strong> problems start on page <strong>3</strong> and there are <strong>2</strong> problems. Since there is no problem <strong>3</strong> on page <strong>3</strong>, there is no special problem on that page either. There is <strong>1</strong> special problem in her workbook.</p><p><strong>Note</strong>: See the diagram in the Explanation section for more details.</p><br><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the workbook function in the editor below. It should return an integer that represents the number of special problems in the workbook.</p><p>workbook has the following parameter(s):</p><ul><li>n: an integer that denotes the number of chapters</li><li>k: an integer that denotes the maximum number of problems per page</li><li>arr: an array of integers that denote the number of problems in each chapter</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains two integers <strong>n</strong> and <strong>k</strong>, the number of chapters and the maximum number of problems per page.<br>The second line contains <strong>n</strong> space-separated integers <strong>arr[i]</strong> where <strong>arr[i]</strong> denotes the number of problems in the <img src="https://latex.codecogs.com/gif.latex?i%5E%7Bth%7D" alt> chapter.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n,&space;k,&space;arr%5Bi%5D%5Cleq&space;100" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the number of special problems in Lisa’s workbook.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 3  </span><br><span class="line">4 2 6 1 10</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>The diagram below depicts Lisa’s workbook with <strong>n = 5</strong> chapters and a maximum of <strong>k = 3</strong> problems per page. Special problems are outlined in red, and page numbers are in yellow squares.</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/lisa-workbook.png" alt></p><p>There are <strong>4</strong> special problems and thus we print the number <strong>4</strong> on a new line.</p><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">workbook</span>(<span class="hljs-params">n, k, arr</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> currentPage = <span class="hljs-number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">return</span> arr.reduce(<span class="hljs-function">(<span class="hljs-params">target, pages, index</span>) =&gt;</span> &#123; </span><br><span class="line">    target += <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(pages).fill(index).reduce(<span class="hljs-function">(<span class="hljs-params">innerTarget, page, innerIndex</span>) =&gt;</span> &#123; </span><br><span class="line">      ((innerIndex) % k === <span class="hljs-number">0</span>) &amp;&amp; currentPage++;</span><br><span class="line">      ((innerIndex + <span class="hljs-number">1</span>) === currentPage) &amp;&amp; ++innerTarget;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(innerIndex + <span class="hljs-number">1</span>, innerTarget, currentPage);</span><br><span class="line">      <span class="hljs-keyword">return</span> innerTarget;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, <span class="hljs-number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/04/algorithm/hackerrank/56_LisasWorkbook/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Service Lane</title>
      <link>https://alleyful.github.io/2019/09/02/algorithm/hackerrank/55_ServiceLane/</link>
      <guid>https://alleyful.github.io/2019/09/02/algorithm/hackerrank/55_ServiceLane/</guid>
      <pubDate>Mon, 02 Sep 2019 05:24:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;Calvin is driving his favorite vehicle on the 101 freeway. He notices that the check engine light of his vehicle is on, and he wants to service it immediately to avoid any risks. Luckily, a service lane runs parallel to the highway. The service lane varies in width along its length.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/serviceLane.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;You will be given an array of widths at points along the road (indices), then a list of the indices of entry and exit points. Considering each entry and exit point pair, calculate the maximum size vehicle that can travel that segment of the service lane safely.&lt;/p&gt;
&lt;p&gt;For example, there are &lt;strong&gt;n = 4&lt;/strong&gt; measurements yielding &lt;strong&gt;width = [2, 3, 2, 1]&lt;/strong&gt;. If our entry index, &lt;strong&gt;i = 1&lt;/strong&gt; and our exit, &lt;strong&gt;j = 2&lt;/strong&gt;, there are two segment widths of &lt;strong&gt;2&lt;/strong&gt; and &lt;strong&gt;3&lt;/strong&gt; respectively. The widest vehicle that can fit through both is &lt;strong&gt;2&lt;/strong&gt;. If &lt;strong&gt;i = 2&lt;/strong&gt; and &lt;strong&gt;j = 4&lt;/strong&gt;, our widths are &lt;strong&gt;[3, 2, 1]&lt;/strong&gt; which limits vehicle width to &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Calvin is driving his favorite vehicle on the 101 freeway. He notices that the check engine light of his vehicle is on, and he wants to service it immediately to avoid any risks. Luckily, a service lane runs parallel to the highway. The service lane varies in width along its length.</p><p><img src="https://github.com/alleyful/algorithm-solutions/raw/master/HackerRank/ProblemSolving/images/serviceLane.png" alt></p><p>You will be given an array of widths at points along the road (indices), then a list of the indices of entry and exit points. Considering each entry and exit point pair, calculate the maximum size vehicle that can travel that segment of the service lane safely.</p><p>For example, there are <strong>n = 4</strong> measurements yielding <strong>width = [2, 3, 2, 1]</strong>. If our entry index, <strong>i = 1</strong> and our exit, <strong>j = 2</strong>, there are two segment widths of <strong>2</strong> and <strong>3</strong> respectively. The widest vehicle that can fit through both is <strong>2</strong>. If <strong>i = 2</strong> and <strong>j = 4</strong>, our widths are <strong>[3, 2, 1]</strong> which limits vehicle width to <strong>1</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the serviceLane function in the editor below. It should return an array of integers representing the maximum width vehicle that can pass through each segment of the highway described.</p><p>serviceLane has the following parameter(s):</p><ul><li>n: an integer denoting the size of the <strong>cases</strong> array</li><li>cases: a two dimensional array of integers where each element is an array of two integers representing starting and ending indices for a segment to consider .</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line of input contains two integers, <strong>n</strong> and <strong>t</strong>, where <strong>n</strong> denotes the number of width measurements you will receive and <strong>t</strong> the number of test cases. The next line has <strong>n</strong> space-separated integers which represent the array <img src="https://latex.codecogs.com/gif.latex?width%5Bw_%7B0%7D,&space;w_%7B1%7D&space;...&space;,&space;w_%7Bn-1%7D%5D" alt>.</p><p>The next <strong>t</strong> lines contain two integers, <strong>i</strong> and <strong>j</strong>, where <strong>i</strong> is the start index and <strong>j</strong> is the end index of the segment being considered.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;n%5Cleq&space;100000" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;t%5Cleq&space;1000" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;i%3C&space;j%3C&space;n" alt></li><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;j&space;-&space;i&space;&plus;&space;1%5Cleq&space;min(n,&space;1000)" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;width%5Bk%5D%5Cleq&space;3,&space;where&space;,&space;0%5Cleq&space;k%3C&space;n" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each test case, print the number that represents the largest vehicle type that can pass through the entire segment of the service lane between indexes <strong>i</strong> and <strong>j</strong> inclusive.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">8 5</span><br><span class="line">2 3 1 2 3 2 3 3</span><br><span class="line">0 3</span><br><span class="line">4 6</span><br><span class="line">6 7</span><br><span class="line">3 5</span><br><span class="line">0 7</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Below is the representation of the lane:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   |HIGHWAY|Lane|    -&gt;    Width</span><br><span class="line"></span><br><span class="line">0: |       |--|            2</span><br><span class="line">1: |       |---|           3</span><br><span class="line">2: |       |-|             1</span><br><span class="line">3: |       |--|            2</span><br><span class="line">4: |       |---|           3</span><br><span class="line">5: |       |--|            2</span><br><span class="line">6: |       |---|           3</span><br><span class="line">7: |       |---|           3</span><br></pre></td></tr></table></figure><ol><li><strong>(0, 3)</strong>: From index <strong>0</strong> through <strong>3</strong> we have widths <strong>2, 3, 1</strong> and . Nothing wider than <strong>1</strong> can pass all segments.</li><li><strong>(4, 6)</strong>: From index <strong>4</strong> through <strong>6</strong> we have width <strong>3, 2</strong> and <strong>3</strong>. Nothing wider than <strong>2</strong> can pass all segments.</li><li><strong>(6, 7)</strong>: <strong>3, 3 -&gt; 3</strong> .</li><li><strong>(3, 5)</strong>: <strong>2, 3, 2 -&gt; 2</strong></li><li><strong>(0, 7)</strong>: <strong>2, 3, 1, 2, 3, 2, 3, 3 -&gt; 1</strong>.</li></ol><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">serviceLane</span>(<span class="hljs-params">width, cases</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> cases.reduce(<span class="hljs-function">(<span class="hljs-params">target, item</span>) =&gt;</span> &#123;</span><br><span class="line">    target.push(<span class="hljs-built_in">Math</span>.min(...width.slice(item[<span class="hljs-number">0</span>], item[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>)));</span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/09/02/algorithm/hackerrank/55_ServiceLane/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Chocolate Feast</title>
      <link>https://alleyful.github.io/2019/08/28/algorithm/hackerrank/54_ChocolateFeast/</link>
      <guid>https://alleyful.github.io/2019/08/28/algorithm/hackerrank/54_ChocolateFeast/</guid>
      <pubDate>Tue, 27 Aug 2019 16:03:51 GMT</pubDate>
      <description>
      
        &lt;p&gt;Little Bobby loves chocolate. He frequently goes to his favorite &lt;strong&gt;5 &amp;amp; 10&lt;/strong&gt; store, Penny Auntie, to buy them. They are having a promotion at Penny Auntie. If Bobby saves enough wrappers, he can turn them in for a free chocolate.&lt;/p&gt;
&lt;p&gt;For example, Bobby has &lt;strong&gt;n = 15&lt;/strong&gt; to spend on bars of chocolate that cost &lt;strong&gt;c = 3&lt;/strong&gt; each. He can turn in &lt;strong&gt;m = 2&lt;/strong&gt; wrappers to receive another bar. Initially, he buys &lt;strong&gt;5&lt;/strong&gt; bars and has &lt;strong&gt;5&lt;/strong&gt; wrappers after eating them. He turns in &lt;strong&gt;4&lt;/strong&gt; of them, leaving him with &lt;strong&gt;1&lt;/strong&gt;, for &lt;strong&gt;2&lt;/strong&gt; more bars. After eating those two, he has &lt;strong&gt;3&lt;/strong&gt; wrappers, turns in &lt;strong&gt;2&lt;/strong&gt; leaving him with &lt;strong&gt;1&lt;/strong&gt; wrapper and his new bar. Once he eats that one, he has &lt;strong&gt;2&lt;/strong&gt; wrappers and turns them in for another bar. After eating that one, he only has &lt;strong&gt;1&lt;/strong&gt; wrapper, and his feast ends. Overall, he has eaten &lt;code&gt;5 + 2 + 1 + 2 = 9&lt;/code&gt; bars.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Little Bobby loves chocolate. He frequently goes to his favorite <strong>5 &amp; 10</strong> store, Penny Auntie, to buy them. They are having a promotion at Penny Auntie. If Bobby saves enough wrappers, he can turn them in for a free chocolate.</p><p>For example, Bobby has <strong>n = 15</strong> to spend on bars of chocolate that cost <strong>c = 3</strong> each. He can turn in <strong>m = 2</strong> wrappers to receive another bar. Initially, he buys <strong>5</strong> bars and has <strong>5</strong> wrappers after eating them. He turns in <strong>4</strong> of them, leaving him with <strong>1</strong>, for <strong>2</strong> more bars. After eating those two, he has <strong>3</strong> wrappers, turns in <strong>2</strong> leaving him with <strong>1</strong> wrapper and his new bar. Once he eats that one, he has <strong>2</strong> wrappers and turns them in for another bar. After eating that one, he only has <strong>1</strong> wrapper, and his feast ends. Overall, he has eaten <code>5 + 2 + 1 + 2 = 9</code> bars.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the chocolateFeast function in the editor below. It must return the number of chocolates Bobby can eat after taking full advantage of the promotion.</p><p>chocolateFeast has the following parameter(s):</p><ul><li>n: an integer representing Bobby’s initial amount of money</li><li>c: an integer representing the cost of a chocolate bar</li><li>m: an integer representing the number of wrappers he can turn in for a free bar   </li></ul><p><strong>Note</strong>: Little Bobby will always turn in his wrappers if he has enough to get a free chocolate.</p><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer, <strong>t</strong>, denoting the number of test cases to analyze.<br>Each of the next <strong>t</strong> lines contains three space-separated integers: <strong>n</strong>, <strong>c</strong>, and <strong>m</strong>. They represent money to spend, cost of a chocolate, and the number of wrappers he can turn in for a free chocolate.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;t%5Cleq&space;1000" alt></li><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;n%5Cleq&space;10%5E%7B5%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;c%5Cleq&space;n" alt></li><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;m%5Cleq&space;n" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each trip to Penny Auntie, print the total number of chocolates Bobby eats on a new line.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">10 2 5</span><br><span class="line">12 4 4</span><br><span class="line">6 2 2</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Bobby makes the following <strong>3</strong> trips to the store:</p><ol><li>He spends his <strong>10</strong> dollars on <strong>5</strong> chocolates at <strong>2</strong> dollars apiece. He then eats them and exchanges all <strong>5</strong> wrappers to get <strong>1</strong> more. He eats <strong>6</strong> chocolates.   </li><li>He spends his <strong>12</strong> dollars on <strong>3</strong> chocolates at <strong>4</strong> dollars apiece. He has <strong>3</strong> wrappers, but needs <strong>4</strong> to trade for his next chocolate. He eats <strong>3</strong> chocolates.   </li><li>He spends <strong>6</strong> dollars on <strong>3</strong> chocolates at <strong>2</strong> dollars apiece. He then exchanges <strong>2</strong> of the <strong>3</strong> wrappers for <strong>1</strong> additional piece. Next, he uses his third leftover chocolate wrapper from his initial purchase with the wrapper from his trade-in to do a second trade-in for <strong>1</strong> more piece. At this point he has <strong>1</strong> wrapper left, which is not enough to perform another trade-in. He eats <strong>5</strong> chocolates.   </li></ol><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">chocolateFeast</span>(<span class="hljs-params">n, c, m</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> result = <span class="hljs-built_in">Math</span>.floor(n / c);</span><br><span class="line">  <span class="hljs-keyword">let</span> wrapper = result;</span><br><span class="line">  <span class="hljs-keyword">let</span> rest = <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">let</span> total = result + rest;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">while</span> (total / m &gt;= <span class="hljs-number">1</span>) &#123;</span><br><span class="line">    total = wrapper + rest;</span><br><span class="line">    wrapper = <span class="hljs-built_in">Math</span>.floor(total / m);</span><br><span class="line">    rest = total % m;</span><br><span class="line">    result += wrapper;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/28/algorithm/hackerrank/54_ChocolateFeast/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NOMADCODERS ReactJS Challenge - 시작하기</title>
      <link>https://alleyful.github.io/2019/08/27/log/react-challenge/react-challenge-start/</link>
      <guid>https://alleyful.github.io/2019/08/27/log/react-challenge/react-challenge-start/</guid>
      <pubDate>Tue, 27 Aug 2019 11:28:44 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;code&gt;2019. 8. 26 ~ 2019. 9. 9&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;노마드 코더의 &lt;code&gt;초보를 위한 React JS&lt;/code&gt; 강좌는 이미 한번 완강을 했지만 항상 강의만 듣고 기록을 남기지 않아서, 나중에 필요한경우 다시 검
        
      
      </description>
      
      <content:encoded><![CDATA[<p><code>2019. 8. 26 ~ 2019. 9. 9</code></p><p>노마드 코더의 <code>초보를 위한 React JS</code> 강좌는 이미 한번 완강을 했지만 항상 강의만 듣고 기록을 남기지 않아서, 나중에 필요한경우 다시 검색을 하거나 그 부분의 강의를 찾아 보는 경우가 많았던것 같습니다.<br>다시한번 강의를 들으면서 필요한 부분에 대한 내용을 덧붙여 강의노트를 만들어 보고자 기록을 남기기 시작했습니다.<br>이번 챌린지를 통해서 기록을 남기는 습관을 갖을 수 있게 되기를 바랍니다.</p><br><h2 id="Clone-Coding-for-ReactJS-Challenge"><a href="#Clone-Coding-for-ReactJS-Challenge" class="headerlink" title="Clone Coding for ReactJS Challenge"></a>Clone Coding for ReactJS Challenge</h2><p><a href="https://academy.nomadcoders.co/courses/436641/lectures/8478733" rel="external nofollow noopener noreferrer" target="_blank">노마드코더 초보를 위한 React JS</a><br><a href="https://academy.nomadcoders.co/courses/436641/lectures/8478732" rel="external nofollow noopener noreferrer" target="_blank">ReactJS Challenge by Nomadcoders</a></p><br><h2 id="챌린지-관련-내용의-정답-유출-금지-내용을-전달-받아-포스팅-내-Homework-내용을-삭제합니다"><a href="#챌린지-관련-내용의-정답-유출-금지-내용을-전달-받아-포스팅-내-Homework-내용을-삭제합니다" class="headerlink" title="챌린지 관련 내용의 정답 유출 금지 내용을 전달 받아 포스팅 내 Homework 내용을 삭제합니다."></a>챌린지 관련 내용의 정답 유출 금지 내용을 전달 받아 포스팅 내 Homework 내용을 삭제합니다.</h2>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/27/log/react-challenge/react-challenge-start/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Halloween Sale</title>
      <link>https://alleyful.github.io/2019/08/26/algorithm/hackerrank/53_HalloweenSale/</link>
      <guid>https://alleyful.github.io/2019/08/26/algorithm/hackerrank/53_HalloweenSale/</guid>
      <pubDate>Sun, 25 Aug 2019 16:03:51 GMT</pubDate>
      <description>
      
        &lt;p&gt;You wish to buy video games from the famous online video game store Mist.&lt;/p&gt;
&lt;p&gt;Usually, all games are sold at the same price, &lt;strong&gt;p&lt;/strong&gt; dollars. However, they are planning to have the seasonal Halloween Sale next month in which you can buy games at a cheaper price. Specifically, the first game you buy during the sale will be sold at &lt;strong&gt;p&lt;/strong&gt; dollars, but every subsequent game you buy will be sold at exactly &lt;strong&gt;d&lt;/strong&gt; dollars less than the cost of the previous one you bought. This will continue until the cost becomes less than or equal to &lt;strong&gt;m&lt;/strong&gt; dollars, after which every game you buy will cost &lt;strong&gt;m&lt;/strong&gt; dollars each.&lt;/p&gt;
&lt;p&gt;For example, if &lt;strong&gt;p = 20&lt;/strong&gt;, &lt;strong&gt;d = 3&lt;/strong&gt; and &lt;strong&gt;m = 6&lt;/strong&gt;, then the following are the costs of the first &lt;strong&gt;11&lt;/strong&gt; games you buy, in order:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;20, 17, 14, 11, 8, 6, 6, 6, 6, 6, 6&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You have &lt;strong&gt;s&lt;/strong&gt; dollars in your Mist wallet. How many games can you buy during the Halloween Sale?&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>You wish to buy video games from the famous online video game store Mist.</p><p>Usually, all games are sold at the same price, <strong>p</strong> dollars. However, they are planning to have the seasonal Halloween Sale next month in which you can buy games at a cheaper price. Specifically, the first game you buy during the sale will be sold at <strong>p</strong> dollars, but every subsequent game you buy will be sold at exactly <strong>d</strong> dollars less than the cost of the previous one you bought. This will continue until the cost becomes less than or equal to <strong>m</strong> dollars, after which every game you buy will cost <strong>m</strong> dollars each.</p><p>For example, if <strong>p = 20</strong>, <strong>d = 3</strong> and <strong>m = 6</strong>, then the following are the costs of the first <strong>11</strong> games you buy, in order:</p><p><code>20, 17, 14, 11, 8, 6, 6, 6, 6, 6, 6</code></p><p>You have <strong>s</strong> dollars in your Mist wallet. How many games can you buy during the Halloween Sale?</p><br><a id="more"></a><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first and only line of input contains four space-separated integers <strong>p</strong>, <strong>d</strong>, <strong>m</strong> and <strong>s</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;m%5Cleq&space;p%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;d%5Cleq&space;100" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;s%5Cleq&space;10%5E%7B4%7D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single line containing a single integer denoting the maximum number of games you can buy.</p><br><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 3 6 80</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>We have <strong>p = 20</strong>, <strong>d = 3</strong> and <strong>m = 6</strong>, the same as in the problem statement. We also have <strong>S = 80</strong> dollars. We can buy <strong>6</strong> games since they cost <code>20 + 17 + 14 + 11 + 8 + 6 = 76</code> dollars. However, we cannot buy a <strong>7</strong>th game. Thus, the answer is <code>6</code>.</p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 3 6 85</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>This is the same as the previous case, except this time we have <strong>s = 85</strong> dollars. This time, we can buy <strong>7</strong> games since they cost <code>20 + 17 + 14 + 11 + 8 + 6 + 6 = 82</code> dollars. However, we cannot buy an <strong>8</strong>th game. Thus, the answer is <code>7</code>.</p><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">howManyGames</span>(<span class="hljs-params">p, d, m, s</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> restMoney = s;</span><br><span class="line">  <span class="hljs-keyword">let</span> price = p;</span><br><span class="line">  <span class="hljs-keyword">let</span> isDiscount = p - d &gt;= m;</span><br><span class="line">  <span class="hljs-keyword">let</span> results = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span> (restMoney &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">    restMoney -= price;</span><br><span class="line">    restMoney &gt;= <span class="hljs-number">0</span> &amp;&amp; results++;</span><br><span class="line">    isDiscount = price - d &gt;= m;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">while</span> (restMoney &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">    price = isDiscount ? price - d : m;</span><br><span class="line">    restMoney = restMoney - price; </span><br><span class="line">    restMoney &gt;= <span class="hljs-number">0</span> &amp;&amp; results++;</span><br><span class="line">    isDiscount = price - d &gt;= m;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/26/algorithm/hackerrank/53_HalloweenSale/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Minimum Distances</title>
      <link>https://alleyful.github.io/2019/08/25/algorithm/hackerrank/52_MinimumDistances/</link>
      <guid>https://alleyful.github.io/2019/08/25/algorithm/hackerrank/52_MinimumDistances/</guid>
      <pubDate>Sat, 24 Aug 2019 15:03:19 GMT</pubDate>
      <description>
      
        &lt;p&gt;We define the distance between two array values as the number of indices between the two values. Given &lt;strong&gt;a&lt;/strong&gt;, find the minimum distance between any pair of equal elements in the array. If no such value exists, print &lt;strong&gt;-1&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, if &lt;strong&gt;a = [3, 2, 1, 2, 3]&lt;/strong&gt;, there are two matching pairs of values: &lt;strong&gt;3 and 2&lt;/strong&gt;. The indices of the &lt;strong&gt;3&lt;/strong&gt;‘s are &lt;strong&gt;i = 0&lt;/strong&gt; and &lt;strong&gt;j = 4&lt;/strong&gt;, so their distance is &lt;strong&gt;d[i, j] = |j - i| = 4&lt;/strong&gt;. The indices of the &lt;strong&gt;2&lt;/strong&gt;‘s are &lt;strong&gt;i = 1&lt;/strong&gt; and &lt;strong&gt;j = 3&lt;/strong&gt;, so their distance is &lt;strong&gt;d[i, j] = |j - i| = 2&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>We define the distance between two array values as the number of indices between the two values. Given <strong>a</strong>, find the minimum distance between any pair of equal elements in the array. If no such value exists, print <strong>-1</strong>.</p><p>For example, if <strong>a = [3, 2, 1, 2, 3]</strong>, there are two matching pairs of values: <strong>3 and 2</strong>. The indices of the <strong>3</strong>‘s are <strong>i = 0</strong> and <strong>j = 4</strong>, so their distance is <strong>d[i, j] = |j - i| = 4</strong>. The indices of the <strong>2</strong>‘s are <strong>i = 1</strong> and <strong>j = 3</strong>, so their distance is <strong>d[i, j] = |j - i| = 2</strong>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the minimumDistances function in the editor below. It should return the minimum distance between any two matching elements.</p><p>minimumDistances has the following parameter(s):</p><ul><li>a: an array of integers</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>n</strong>, the size of array <strong>a</strong>. The second line contains <strong>n</strong> space-separated integers <strong>a[i]</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;10%5E%7B3%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;a%5Bi%5D%5Cleq&space;10%5E%7B5%7D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single integer denoting the minimum <strong>d[i, j]</strong> in . If no such value exists, print <strong>-1</strong>.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">7 1 3 4 1 7</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Here, we have two options:</p><p><strong>a[1]</strong> and <strong>a[4]</strong> are both <strong>1</strong>, so <strong>d[1, 4] = |1 - 4| = 3</strong>.<strong>a[0]</strong> and <strong>a[5]</strong> are both <strong>7</strong>, so <strong>d[0, 5] = |0 - 5| = 5</strong>.The answer is <code>min(3, 5) = 3</code>.</p><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">minimumDistances</span>(<span class="hljs-params">a</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> result = a.reduceRight(<span class="hljs-function">(<span class="hljs-params">target, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> pairIndex = a.findIndex(<span class="hljs-function">(<span class="hljs-params">v, i</span>) =&gt;</span> v === item &amp;&amp; i &lt; index);</span><br><span class="line">    pairIndex &gt;= <span class="hljs-number">0</span> &amp;&amp; target.push(</span><br><span class="line">      <span class="hljs-built_in">Math</span>.abs(index - pairIndex)</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> result.length &gt; <span class="hljs-number">0</span> ? <span class="hljs-built_in">Math</span>.min(...result) : <span class="hljs-number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/25/algorithm/hackerrank/52_MinimumDistances/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Beautiful Triplets</title>
      <link>https://alleyful.github.io/2019/08/24/algorithm/hackerrank/51_BeautifulTriplets/</link>
      <guid>https://alleyful.github.io/2019/08/24/algorithm/hackerrank/51_BeautifulTriplets/</guid>
      <pubDate>Fri, 23 Aug 2019 15:02:37 GMT</pubDate>
      <description>
      
        &lt;p&gt;Given a sequence of integers &lt;strong&gt;a&lt;/strong&gt;, a triplet &lt;strong&gt;(a[i], a[j], a[k])&lt;/strong&gt; is beautiful if:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;i &amp;lt; j &amp;lt; k&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a[j] - a[i] = a[k] - a[j] = d&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given an increasing sequenc of integers and the value of &lt;strong&gt;d&lt;/strong&gt;, count the number of beautiful triplets in the sequence.&lt;/p&gt;
&lt;p&gt;For example, the sequence &lt;strong&gt;arr = [2, 2, 3, 4, 5]&lt;/strong&gt; and &lt;strong&gt;d = 1&lt;/strong&gt;. There are three beautiful triplets, by index: &lt;strong&gt;[i, j, k] = [0, 2, 3], [1, 2, 3], [2, 3, 4]&lt;/strong&gt;. To test the first triplet, &lt;code&gt;arr[j] - arr[i] = 3 - 2 = 1&lt;/code&gt; and &lt;code&gt;arr[k] = arr[j] = 4 - 3 = 1&lt;/code&gt;.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Given a sequence of integers <strong>a</strong>, a triplet <strong>(a[i], a[j], a[k])</strong> is beautiful if:</p><ul><li>i &lt; j &lt; k</li><li><code>a[j] - a[i] = a[k] - a[j] = d</code></li></ul><p>Given an increasing sequenc of integers and the value of <strong>d</strong>, count the number of beautiful triplets in the sequence.</p><p>For example, the sequence <strong>arr = [2, 2, 3, 4, 5]</strong> and <strong>d = 1</strong>. There are three beautiful triplets, by index: <strong>[i, j, k] = [0, 2, 3], [1, 2, 3], [2, 3, 4]</strong>. To test the first triplet, <code>arr[j] - arr[i] = 3 - 2 = 1</code> and <code>arr[k] = arr[j] = 4 - 3 = 1</code>.</p><br><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the beautifulTriplets function in the editor below. It must return an integer that represents the number of beautiful triplets in the sequence.</p><p>beautifulTriplets has the following parameters:</p><ul><li>d: an integer</li><li>arr: an array of integers, sorted ascending</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains <strong>2</strong> space-separated integers <strong>n</strong> and <strong>d</strong>, the length of the sequence and the beautiful difference.<br>The second line contains <strong>n</strong> space-separated integers <strong>arr[i]</strong>.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;n%5Cleq&space;10%5E%7B4%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;d%5Cleq&space;20" alt></li><li><img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;arr%5Bi%5D%5Cleq&space;2%5Ctimes&space;10%5E%7B4%7D" alt></li><li><img src="https://latex.codecogs.com/gif.latex?arr%5Bi%5D&space;%3E&space;arr%5Bi&space;-&space;1%5D" alt></li></ul><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single line denoting the number of beautiful triplets in the sequence.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7 3</span><br><span class="line">1 2 4 5 7 8 10</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>The input sequence is <strong>1, 2, 4, 5, 6, 8, 10</strong>, and our beautiful difference <strong>d = 3</strong>. There are many possible triplets <strong>(arr[i], arr[j], arr[k])</strong>, but our only beautiful triplets are <strong>(1, 4, 7)</strong>, <strong>(4, 7, 10)</strong> and <strong>(2, 5, 8)</strong> by value not index. Please see the equations below:</p><ul><li><strong>7 - 4 = 4 - 1 = 3 = d</strong></li><li><strong>10 - 7 = 7 - 4 = 3 = d</strong></li><li><strong>8 - 5 = 5 - 2 = 3 = d</strong></li></ul><p>Recall that a beautiful triplet satisfies the following equivalence relation:<br><strong>arr[j] - arr[i] = arr[k] - arr[j] = d</strong> where <strong>i &lt; j &lt; k</strong>.</p><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">beautifulTriplets</span>(<span class="hljs-params">d, arr</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> arraySet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(arr);</span><br><span class="line">  <span class="hljs-keyword">const</span> array = [...arr];</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> array.reduce(<span class="hljs-function">(<span class="hljs-params">target, number</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">3</span>).fill(<span class="hljs-number">0</span>).reduce(<span class="hljs-function">(<span class="hljs-params">innerTarget, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">let</span> value = number + index * d;</span><br><span class="line">      arraySet.has(value) &amp;&amp; innerTarget++;</span><br><span class="line">      <span class="hljs-keyword">return</span> innerTarget;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>) === <span class="hljs-number">3</span> &amp;&amp; target++;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, <span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/24/algorithm/hackerrank/51_BeautifulTriplets/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Modified Kaprekar Numbers</title>
      <link>https://alleyful.github.io/2019/08/23/algorithm/hackerrank/50_ModifiedKaprekarNumbers/</link>
      <guid>https://alleyful.github.io/2019/08/23/algorithm/hackerrank/50_ModifiedKaprekarNumbers/</guid>
      <pubDate>Thu, 22 Aug 2019 15:06:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;A modified Kaprekar number is a positive whole number with a special property. If you square it, then split the number into two integers and sum those integers, you have the same value you started with.&lt;/p&gt;
&lt;p&gt;Consider a positive whole number &lt;strong&gt;n&lt;/strong&gt; with &lt;strong&gt;d&lt;/strong&gt; digits. We square &lt;strong&gt;n&lt;/strong&gt; to arrive at a number that is either &lt;strong&gt;2 x d&lt;/strong&gt; digits long or &lt;strong&gt;(2 x d) - 1&lt;/strong&gt; digits long. Split the string representation of the square into two parts, &lt;strong&gt;l&lt;/strong&gt; and &lt;strong&gt;r&lt;/strong&gt;. The right hand part, &lt;strong&gt;r&lt;/strong&gt; must be &lt;strong&gt;d&lt;/strong&gt; digits long. The left is the remaining substring. Convert those two substrings back to integers, add them and see if you get &lt;strong&gt;n&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, if &lt;strong&gt;n = 5&lt;/strong&gt;, &lt;strong&gt;d = 1&lt;/strong&gt; then &lt;img src=&quot;https://latex.codecogs.com/gif.latex?n%5E%7B2%7D&amp;space;=&amp;space;25&quot; alt&gt;. We split that into two strings and convert them back to integers &lt;strong&gt;2&lt;/strong&gt; and &lt;strong&gt;5&lt;/strong&gt;. We test &lt;img src=&quot;https://latex.codecogs.com/gif.latex?2&amp;space;&amp;plus;&amp;space;5&amp;space;=&amp;space;7%5Cneq&amp;space;5&quot; alt&gt;, so this is not a modified Kaprekar number. If &lt;strong&gt;n = 9&lt;/strong&gt;, still &lt;strong&gt;d = 1&lt;/strong&gt;, and &lt;img src=&quot;https://latex.codecogs.com/gif.latex?n%5E%7B2%7D&amp;space;=&amp;space;81&quot; alt&gt;. This gives us &lt;strong&gt;1 + 8 = 9&lt;/strong&gt;, the original &lt;strong&gt;n&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: r may have leading zeros.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>A modified Kaprekar number is a positive whole number with a special property. If you square it, then split the number into two integers and sum those integers, you have the same value you started with.</p><p>Consider a positive whole number <strong>n</strong> with <strong>d</strong> digits. We square <strong>n</strong> to arrive at a number that is either <strong>2 x d</strong> digits long or <strong>(2 x d) - 1</strong> digits long. Split the string representation of the square into two parts, <strong>l</strong> and <strong>r</strong>. The right hand part, <strong>r</strong> must be <strong>d</strong> digits long. The left is the remaining substring. Convert those two substrings back to integers, add them and see if you get <strong>n</strong>.</p><p>For example, if <strong>n = 5</strong>, <strong>d = 1</strong> then <img src="https://latex.codecogs.com/gif.latex?n%5E%7B2%7D&space;=&space;25" alt>. We split that into two strings and convert them back to integers <strong>2</strong> and <strong>5</strong>. We test <img src="https://latex.codecogs.com/gif.latex?2&space;&plus;&space;5&space;=&space;7%5Cneq&space;5" alt>, so this is not a modified Kaprekar number. If <strong>n = 9</strong>, still <strong>d = 1</strong>, and <img src="https://latex.codecogs.com/gif.latex?n%5E%7B2%7D&space;=&space;81" alt>. This gives us <strong>1 + 8 = 9</strong>, the original <strong>n</strong>.</p><p><strong>Note</strong>: r may have leading zeros.</p><a id="more"></a><p>Here’s an explanation from Wikipedia about the ORIGINAL Kaprekar Number (spot the difference!):</p><blockquote><p>In mathematics, a Kaprekar number for a given base is a non-negative integer, the representation of whose square in that base can be split into two parts that add up to the original number again.<br>For instance, 45 is a Kaprekar number, because 45² = 2025 and 20+25 = 45.</p></blockquote><p>Given two positive integers <strong>p</strong> and <strong>q</strong> where <strong>p</strong> is lower than <strong>q</strong>, write a program to print the modified Kaprekar numbers in the range between <strong>p</strong> and <strong>q</strong>, inclusive.</p><br><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the kaprekarNumbers function in the editor below. It should print the list of modified Kaprekar numbers in ascending order.</p><p>kaprekarNumbers has the following parameter(s):</p><ul><li>p: an integer</li><li>q: an integer</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains the lower integer limit <strong>p</strong>. The second line contains the upper integer limit <strong>q</strong>.</p><p><strong>Note</strong>: Your range should be inclusive of the limits.</p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><p>0 &lt; p &lt; q &lt; 100000</p><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Output each modified Kaprekar number in the given range, space-separated on a single line. If no modified Kaprekar numbers exist in the given range, print INVALID RANGE.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">100</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 9 45 55 99</span><br></pre></td></tr></table></figure><br><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p><strong>1</strong>, <strong>9</strong>, <strong>45</strong>, <strong>55</strong>, and <strong>99</strong> are the Kaprekar Numbers in the given range.</p><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">kaprekarNumbers</span>(<span class="hljs-params">p, q</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = p; i &lt;= q; i++)&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> numbers = [...String(<span class="hljs-built_in">Math</span>.pow(i, <span class="hljs-number">2</span>))];</span><br><span class="line">    <span class="hljs-keyword">let</span> length = numbers.length;</span><br><span class="line">    <span class="hljs-keyword">let</span> firstValue = numbers.splice(<span class="hljs-number">0</span>, <span class="hljs-built_in">Math</span>.floor(length / <span class="hljs-number">2</span>));</span><br><span class="line">    (<span class="hljs-built_in">Number</span>(firstValue.join(<span class="hljs-string">''</span>)) + <span class="hljs-built_in">Number</span>(numbers.join(<span class="hljs-string">''</span>))) === i &amp;&amp; result.push(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">//console.log(result.length &gt; 0 ? result.join(' ') : 'INVALID RANGE');</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> result.length &gt; <span class="hljs-number">0</span> ? result.join(<span class="hljs-string">' '</span>) : <span class="hljs-string">'INVALID RANGE'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/23/algorithm/hackerrank/50_ModifiedKaprekarNumbers/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Encryption</title>
      <link>https://alleyful.github.io/2019/08/22/algorithm/hackerrank/49_Encryption/</link>
      <guid>https://alleyful.github.io/2019/08/22/algorithm/hackerrank/49_Encryption/</guid>
      <pubDate>Thu, 22 Aug 2019 01:30:19 GMT</pubDate>
      <description>
      
        &lt;p&gt;An English text needs to be encrypted using the following encryption scheme.&lt;br&gt;First, the spaces are removed from the text. Let &lt;strong&gt;L&lt;/strong&gt; be the length of this text.&lt;br&gt;Then, characters are written into a grid, whose rows and columns have the following constraints:  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://latex.codecogs.com/gif.latex?%5Cleft&amp;space;%5Clfloor&amp;space;%5Csqrt%7BL%7D&amp;space;%5Cright&amp;space;%5Crfloor%5Cleq&amp;space;row%5Cleq&amp;space;column%5Cleq&amp;space;%5Cleft&amp;space;%5Clceil&amp;space;%5Csqrt%7BL%7D&amp;space;%5Cright&amp;space;%5Crceil,&amp;space;where&amp;space;%5Cleft&amp;space;%5Clfloor&amp;space;x&amp;space;%5Cright&amp;space;%5Crfloor&amp;space;is&amp;space;floor&amp;space;function,&amp;space;and&amp;space;%5Cleft&amp;space;%5Clceil&amp;space;x&amp;space;%5Cright&amp;space;%5Crceil&amp;space;is&amp;space;,&amp;space;ceil&amp;space;function&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;For example, the sentence&lt;br&gt;&lt;code&gt;s = if man was meant to stay on the ground god would have given us roots&lt;/code&gt;,   
after removing spaces is &lt;strong&gt;54&lt;/strong&gt; characters long. &lt;img src=&quot;https://latex.codecogs.com/gif.latex?%5Csqrt%7B54%7D&quot; alt&gt; is between &lt;strong&gt;7&lt;/strong&gt; and &lt;strong&gt;8&lt;/strong&gt;, so it is written in the form of a grid with 7 rows and 8 columns.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>An English text needs to be encrypted using the following encryption scheme.<br>First, the spaces are removed from the text. Let <strong>L</strong> be the length of this text.<br>Then, characters are written into a grid, whose rows and columns have the following constraints:  </p><p><img src="https://latex.codecogs.com/gif.latex?%5Cleft&space;%5Clfloor&space;%5Csqrt%7BL%7D&space;%5Cright&space;%5Crfloor%5Cleq&space;row%5Cleq&space;column%5Cleq&space;%5Cleft&space;%5Clceil&space;%5Csqrt%7BL%7D&space;%5Cright&space;%5Crceil,&space;where&space;%5Cleft&space;%5Clfloor&space;x&space;%5Cright&space;%5Crfloor&space;is&space;floor&space;function,&space;and&space;%5Cleft&space;%5Clceil&space;x&space;%5Cright&space;%5Crceil&space;is&space;,&space;ceil&space;function" alt></p><p>For example, the sentence<br><code>s = if man was meant to stay on the ground god would have given us roots</code>,   after removing spaces is <strong>54</strong> characters long. <img src="https://latex.codecogs.com/gif.latex?%5Csqrt%7B54%7D" alt> is between <strong>7</strong> and <strong>8</strong>, so it is written in the form of a grid with 7 rows and 8 columns.</p><br><a id="more"></a><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ifmanwas  </span><br><span class="line">meanttos          </span><br><span class="line">tayonthe  </span><br><span class="line">groundgo  </span><br><span class="line">dwouldha  </span><br><span class="line">vegivenu  </span><br><span class="line">sroots</span><br></pre></td></tr></table></figure><ul><li>Ensure that <img src="https://latex.codecogs.com/gif.latex?rows&space;%5Ctimes&space;columns%5Cgeq&space;L" alt>  </li><li>If multiple grids satisfy the above conditions, choose the one with the minimum area, i.e.<br><img src="https://latex.codecogs.com/gif.latex?rows&space;%5Ctimes&space;columns" alt>.   </li></ul><p>The encoded message is obtained by displaying the characters in a column, inserting a space, and then displaying the next column and inserting a space, and so on. For example, the encoded message for the above rectangle is:   </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imtgdvs fearwer mayoogo anouuio ntnnlvt wttddes aohghn sseoau</span><br></pre></td></tr></table></figure><p>You will be given a message to encode and print.</p><br><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the encryption function in the editor below. It should return a single string composed as described.</p><p>encryption has the following parameter(s):</p><ul><li>s: a string to encrypt</li></ul><br><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>One line of text, the string <strong>S</strong></p><br><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><p><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;%5Cleft&space;%7C&space;s&space;%5Cright&space;%7C%5Cleq&space;81" alt><br><strong>s</strong> is comprised only of characters in the range ascii[a-z].</p><br><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the encoded message on one line as described.</p><br><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">haveaniceday</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hae and via ecy</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p><strong>L = 12</strong>, <img src="https://latex.codecogs.com/gif.latex?%5Csqrt%7B12%7D" alt> is between <strong>3</strong> and <strong>4</strong>. Rewritten with <strong>3</strong> rows and <strong>4</strong> columns:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">have</span><br><span class="line">anic</span><br><span class="line">eday</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feedthedog</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fto ehg ee dd</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p><strong>L = 10</strong>, <img src="https://latex.codecogs.com/gif.latex?%5Csqrt%7B10%7D" alt> is between <strong>3</strong> and <strong>4</strong>. Rewritten with <strong>3</strong> rows and <strong>4</strong> columns:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">feed</span><br><span class="line">thed</span><br><span class="line">og</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2"></a>Sample Input 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chillout</span><br></pre></td></tr></table></figure><br><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2"></a>Sample Output 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clu hlt io</span><br></pre></td></tr></table></figure><br><h2 id="Explanation-2"><a href="#Explanation-2" class="headerlink" title="Explanation 2"></a>Explanation 2</h2><p><strong>L = 8</strong>, <img src="https://latex.codecogs.com/gif.latex?%5Csqrt%7B8%7D" alt> is between <strong>2</strong> and <strong>3</strong>. Rewritten with <strong>3</strong> columns and <strong>3</strong> rows (<strong>2 * 3 = 6 &lt; 8</strong> so we have to use <strong>3 x 3</strong>.)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chi</span><br><span class="line">llo</span><br><span class="line">ut</span><br></pre></td></tr></table></figure><br><hr><h3 id="Solution-Accepted"><a href="#Solution-Accepted" class="headerlink" title="Solution Accepted"></a>Solution <code>Accepted</code></h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encryption</span>(<span class="hljs-params">s</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> sqrt = <span class="hljs-built_in">Math</span>.sqrt([...s].length);</span><br><span class="line">  <span class="hljs-keyword">const</span> high = <span class="hljs-built_in">Math</span>.ceil(sqrt);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> [...s].reduce(<span class="hljs-function">(<span class="hljs-params">target, string, index</span>) =&gt;</span> &#123;</span><br><span class="line">    target[index % high] += string;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(high).fill(<span class="hljs-string">''</span>)).join(<span class="hljs-string">' '</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://alleyful.github.io/2019/08/22/algorithm/hackerrank/49_Encryption/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
